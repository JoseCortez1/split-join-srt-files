1
00:00:00,240 --> 00:00:05,319
this is a Harvard University course

2
00:00:02,360 --> 00:00:07,359
taught by Dr David Meen and we are proud

3
00:00:05,319 --> 00:00:10,080
to bring it to the freeo camp YouTube

4
00:00:07,360 --> 00:00:12,240
channel throughout a series of lectures

5
00:00:10,080 --> 00:00:14,599
Dr men will teach you how to think

6
00:00:12,240 --> 00:00:16,720
algorithmically and solve problems

7
00:00:14,599 --> 00:00:19,198
efficiently and make sure to check the

8
00:00:16,720 --> 00:00:22,160
description for a lot of extra resources

9
00:00:19,199 --> 00:00:22,160
that go along with the

10
00:00:23,910 --> 00:00:31,960
[Music]

11
00:00:28,960 --> 00:00:31,960
course

12
00:00:32,409 --> 00:00:42,549
[Music]

13
00:00:47,050 --> 00:00:50,120
[Music]

14
00:00:56,390 --> 00:01:03,439
[Music]

15
00:01:06,330 --> 00:01:19,689
[Music]

16
00:01:25,890 --> 00:01:38,680
[Music]

17
00:01:34,479 --> 00:01:40,399
all right this is cs50 Harvard

18
00:01:38,680 --> 00:01:42,119
University's introduction to the

19
00:01:40,399 --> 00:01:44,040
intellectual Enterprises of computer

20
00:01:42,119 --> 00:01:45,640
science and the Arts of programming my

21
00:01:44,040 --> 00:01:49,159
name is David man and I actually took

22
00:01:45,640 --> 00:01:50,759
this course myself back in 1996 I was a

23
00:01:49,159 --> 00:01:52,360
sophomore at the time I was actually

24
00:01:50,759 --> 00:01:54,439
concentrating in government because a

25
00:01:52,360 --> 00:01:57,280
year prior as a first year I'd come into

26
00:01:54,439 --> 00:01:59,439
Harvard thinking that I liked high stre

27
00:01:57,280 --> 00:02:01,159
and constitutional law and sort of

28
00:01:59,439 --> 00:02:03,199
similar classes in high school and so

29
00:02:01,159 --> 00:02:05,479
when I got here I rather gravitated

30
00:02:03,200 --> 00:02:07,520
toward that which was familiar I figured

31
00:02:05,479 --> 00:02:09,239
if I liked and if I were good at that

32
00:02:07,520 --> 00:02:10,919
particular subject in high school then

33
00:02:09,239 --> 00:02:13,200
that's presumably who I'm supposed to be

34
00:02:10,919 --> 00:02:15,640
here but it wasn't until sophomore year

35
00:02:13,200 --> 00:02:17,480
that I got up the nerve to step foot in

36
00:02:15,640 --> 00:02:19,399
the cs50 classroom and even then it was

37
00:02:17,480 --> 00:02:21,959
only out of curiosity like I had no

38
00:02:19,400 --> 00:02:24,120
intention of studying computer science

39
00:02:21,959 --> 00:02:26,200
of even taking cs50 when I got to campus

40
00:02:24,120 --> 00:02:28,599
but people were talking about it and

41
00:02:26,200 --> 00:02:30,879
there was a lot of like beware and it

42
00:02:28,599 --> 00:02:32,399
was it perhaps for the initiated only

43
00:02:30,879 --> 00:02:35,000
and I didn't really know ultimately what

44
00:02:32,400 --> 00:02:37,640
computer science was but for me the sort

45
00:02:35,000 --> 00:02:38,840
of light bulb went off and I found that

46
00:02:37,640 --> 00:02:40,480
contrary to what I had seen in high

47
00:02:38,840 --> 00:02:42,120
school where I saw friends of mine like

48
00:02:40,480 --> 00:02:44,159
programming away in the computer lab

49
00:02:42,120 --> 00:02:46,000
heads down sort of anti-socially just

50
00:02:44,159 --> 00:02:48,120
doing whatever it was they were doing it

51
00:02:46,000 --> 00:02:49,760
really wasn't that once I got to this

52
00:02:48,120 --> 00:02:51,560
particular class in this particular

53
00:02:49,760 --> 00:02:53,079
place it was much more about problem

54
00:02:51,560 --> 00:02:55,080
solving more generally and just learning

55
00:02:53,080 --> 00:02:56,280
how to express yourself in code in

56
00:02:55,080 --> 00:02:57,760
different languages so that you can

57
00:02:56,280 --> 00:02:59,959
actually solve problems of interest to

58
00:02:57,760 --> 00:03:01,399
you even if you have no intention of

59
00:02:59,959 --> 00:03:03,080
being a computer scientist or an

60
00:03:01,400 --> 00:03:04,959
engineer but just want to be able to

61
00:03:03,080 --> 00:03:07,280
solve problems analyze data do

62
00:03:04,959 --> 00:03:09,200
interesting things in the Arts Humanity

63
00:03:07,280 --> 00:03:11,680
social sciences physical sciences or

64
00:03:09,200 --> 00:03:13,280
really any other field and indeed this

65
00:03:11,680 --> 00:03:14,959
particular path led me to computer

66
00:03:13,280 --> 00:03:17,480
science but the hope for cs50 more

67
00:03:14,959 --> 00:03:19,599
generally is that indeed you just find

68
00:03:17,480 --> 00:03:21,079
your way to applying principles that

69
00:03:19,599 --> 00:03:23,359
you'll learn over the coming months to

70
00:03:21,080 --> 00:03:25,640
whatever field is of interest to you

71
00:03:23,360 --> 00:03:27,920
with that said it was definitely a lot

72
00:03:25,640 --> 00:03:30,319
of work and not without its frustrations

73
00:03:27,920 --> 00:03:31,879
for me but there was no better feel

74
00:03:30,319 --> 00:03:33,079
then like banging your head proverbial

75
00:03:31,879 --> 00:03:35,239
against the wall for some number of

76
00:03:33,080 --> 00:03:37,879
hours even days trying to fix a bug a

77
00:03:35,239 --> 00:03:40,200
mistake in your code and then oh my God

78
00:03:37,879 --> 00:03:42,120
the rush of emotion of accomplishment of

79
00:03:40,200 --> 00:03:43,720
pride of exhaustion when you finally

80
00:03:42,120 --> 00:03:45,720
solve some problem that's really been

81
00:03:43,720 --> 00:03:47,760
weighing on you it's just so incredibly

82
00:03:45,720 --> 00:03:49,480
gratifying but also empowering because

83
00:03:47,760 --> 00:03:52,040
unlike a lot of fields the computer

84
00:03:49,480 --> 00:03:54,040
science was built by humans themselves

85
00:03:52,040 --> 00:03:56,319
and so if a human built this surely you

86
00:03:54,040 --> 00:03:58,040
another human can understand it as well

87
00:03:56,319 --> 00:03:59,518
and so even though there's going to be

88
00:03:58,040 --> 00:04:01,400
some distractions along the way you're

89
00:03:59,519 --> 00:04:02,840
going going to see what looks incredibly

90
00:04:01,400 --> 00:04:05,480
cryptic if you've never programmed

91
00:04:02,840 --> 00:04:07,040
before over time and with practice

92
00:04:05,480 --> 00:04:08,679
everything just starts to make more

93
00:04:07,040 --> 00:04:10,280
sense and with time and with practice

94
00:04:08,680 --> 00:04:12,400
you just get better at this particular

95
00:04:10,280 --> 00:04:14,400
field and indeed really the key to

96
00:04:12,400 --> 00:04:16,399
success in programming in general is

97
00:04:14,400 --> 00:04:18,440
just to allow yourself enough time and

98
00:04:16,399 --> 00:04:20,120
so at least thankfully I quickly got

99
00:04:18,440 --> 00:04:21,560
into the habit of starting early in the

100
00:04:20,120 --> 00:04:23,160
week for instance when writing actual

101
00:04:21,560 --> 00:04:24,440
code why because you're going to like

102
00:04:23,160 --> 00:04:25,919
run up against a wall you're not going

103
00:04:24,440 --> 00:04:27,520
to see some bug something's not going to

104
00:04:25,919 --> 00:04:29,159
jump out at you and that's fine that's

105
00:04:27,520 --> 00:04:30,799
when you sort of call it a day take a

106
00:04:29,160 --> 00:04:32,240
break move move on to something else and

107
00:04:30,800 --> 00:04:34,280
then just come back to it and that's

108
00:04:32,240 --> 00:04:35,600
what keeps programming fund for me even

109
00:04:34,280 --> 00:04:37,479
all of these years later whether it's

110
00:04:35,600 --> 00:04:39,800
teaching or actually applying it but

111
00:04:37,479 --> 00:04:41,400
there's uh down the road a history of uh

112
00:04:39,800 --> 00:04:43,000
an MIT hack and it looked a little

113
00:04:41,400 --> 00:04:44,679
something like this in yester year and

114
00:04:43,000 --> 00:04:46,720
there was a little sign the MIT students

115
00:04:44,680 --> 00:04:48,680
when they made this hack uh on the wall

116
00:04:46,720 --> 00:04:51,080
that says getting an education from MIT

117
00:04:48,680 --> 00:04:52,680
is like drinking from a fire hose which

118
00:04:51,080 --> 00:04:54,359
indeed they have connected to what

119
00:04:52,680 --> 00:04:55,840
should have been otherwise just a water

120
00:04:54,360 --> 00:04:57,560
fountain and that's going to be what it

121
00:04:55,840 --> 00:04:59,520
feels like sometimes not just in

122
00:04:57,560 --> 00:05:01,639
computer science per se but just in UNAM

123
00:04:59,520 --> 00:05:04,280
familiar field if you're not from stem

124
00:05:01,639 --> 00:05:06,280
if you're not from CS that's fine but so

125
00:05:04,280 --> 00:05:08,799
much of it ultimately is going to be

126
00:05:06,280 --> 00:05:10,840
absorbed by you and going to be uh

127
00:05:08,800 --> 00:05:12,400
within your grasp by term Zen so just

128
00:05:10,840 --> 00:05:14,400
keep in mind that's that's very much the

129
00:05:12,400 --> 00:05:16,799
intent but you'll be amazed what you're

130
00:05:14,400 --> 00:05:19,479
able to create to accomplish uh just

131
00:05:16,800 --> 00:05:21,280
three or so months hence indeed 2third

132
00:05:19,479 --> 00:05:24,080
of you contrary to what you might think

133
00:05:21,280 --> 00:05:25,638
or assume have never taken a CS class

134
00:05:24,080 --> 00:05:26,800
before so it's absolutely not the case

135
00:05:25,639 --> 00:05:28,560
that the person to the left and to the

136
00:05:26,800 --> 00:05:30,639
right surely must know more than you

137
00:05:28,560 --> 00:05:32,120
indeed it's quite the opposite and as

138
00:05:30,639 --> 00:05:33,800
you'll see in the coming weeks as you

139
00:05:32,120 --> 00:05:35,639
write your own code and solve your own

140
00:05:33,800 --> 00:05:37,120
problems what ultimately matters in this

141
00:05:35,639 --> 00:05:38,759
course is not so much where you end up

142
00:05:37,120 --> 00:05:41,360
relative to your classmates but where

143
00:05:38,759 --> 00:05:43,120
you end up relative to yourself when you

144
00:05:41,360 --> 00:05:44,880
began and it really is all about that

145
00:05:43,120 --> 00:05:47,400
Delta whether you've programmed or not

146
00:05:44,880 --> 00:05:49,560
just getting something out of a class

147
00:05:47,400 --> 00:05:51,000
like this and and if it does take time

148
00:05:49,560 --> 00:05:52,479
and if you do feel those frustrations

149
00:05:51,000 --> 00:05:54,120
but you simultaneously eventually feel

150
00:05:52,479 --> 00:05:55,880
that sense of accomplishment that just

151
00:05:54,120 --> 00:05:58,080
means it's all working and indeed

152
00:05:55,880 --> 00:06:00,880
hopefully all the more worthwhile and

153
00:05:58,080 --> 00:06:02,159
gratifying ultimately as a result so

154
00:06:00,880 --> 00:06:04,560
what are we going to do in the coming

155
00:06:02,160 --> 00:06:06,160
week so here we are in week zero we'll

156
00:06:04,560 --> 00:06:07,840
soon see why computers and computer

157
00:06:06,160 --> 00:06:10,039
scientists start counting if you will

158
00:06:07,840 --> 00:06:11,758
from zero but week zero is which is one

159
00:06:10,039 --> 00:06:13,199
in which we explore computational

160
00:06:11,759 --> 00:06:14,759
thinking sort of thinking like a

161
00:06:13,199 --> 00:06:16,759
computer and starting to clean up your

162
00:06:14,759 --> 00:06:18,400
thought processes getting you to think

163
00:06:16,759 --> 00:06:19,840
to solve problems more methodically and

164
00:06:18,400 --> 00:06:21,440
then ultimately Translating that into

165
00:06:19,840 --> 00:06:23,719
code and some of you might recognize

166
00:06:21,440 --> 00:06:25,599
this environment here AKA scratch

167
00:06:23,720 --> 00:06:27,440
coincidentally also from MIT you might

168
00:06:25,599 --> 00:06:29,000
have used it in in grade school we'll

169
00:06:27,440 --> 00:06:30,800
use it today and a little bit this

170
00:06:29,000 --> 00:06:33,080
weekend in the course's first homework

171
00:06:30,800 --> 00:06:34,639
assignment or problem set but not so

172
00:06:33,080 --> 00:06:36,159
much to kind of play around in a way

173
00:06:34,639 --> 00:06:38,479
that you might have if you did use it in

174
00:06:36,160 --> 00:06:39,960
yester year but to explore ideas of

175
00:06:38,479 --> 00:06:42,080
computer science and programming that

176
00:06:39,960 --> 00:06:44,198
we're going to use and reuse every week

177
00:06:42,080 --> 00:06:46,120
Hereafter as well uh thereafter we're

178
00:06:44,199 --> 00:06:48,039
going to transition just next week to

179
00:06:46,120 --> 00:06:49,400
week one so to speak whereby we'll

180
00:06:48,039 --> 00:06:51,680
introduce you to a more traditional

181
00:06:49,400 --> 00:06:53,799
language a lower level language an older

182
00:06:51,680 --> 00:06:55,400
language called C and in C you're going

183
00:06:53,800 --> 00:06:57,000
to use your keyboard not so much your

184
00:06:55,400 --> 00:06:58,400
mouse and pointing and clicking but

185
00:06:57,000 --> 00:06:59,720
you're going to write code that soon is

186
00:06:58,400 --> 00:07:01,560
going to look a little something like

187
00:06:59,720 --> 00:07:03,000
this and if you programmed before can

188
00:07:01,560 --> 00:07:04,479
probably glean what this is going to do

189
00:07:03,000 --> 00:07:07,000
if you've never programmed before which

190
00:07:04,479 --> 00:07:08,878
is the case for most of you this too

191
00:07:07,000 --> 00:07:10,800
will soon make sense but this is the

192
00:07:08,879 --> 00:07:12,840
most canonical program that most any

193
00:07:10,800 --> 00:07:15,039
programmer ever writes called hello

194
00:07:12,840 --> 00:07:17,119
world and indeed that and all of the

195
00:07:15,039 --> 00:07:19,318
surrounding syntax above and below just

196
00:07:17,120 --> 00:07:20,960
that sentence hello world will soon make

197
00:07:19,319 --> 00:07:23,120
all the more sense you'll learn how to

198
00:07:20,960 --> 00:07:24,520
use industry standard tools so to speak

199
00:07:23,120 --> 00:07:26,520
pictured here something called Visual

200
00:07:24,520 --> 00:07:28,318
Studio code or vs code you'll use a

201
00:07:26,520 --> 00:07:29,599
cloud-based version of it initially so

202
00:07:28,319 --> 00:07:31,199
you don't have to suffer with any

203
00:07:29,599 --> 00:07:33,479
technical difficulties or headaches like

204
00:07:31,199 --> 00:07:34,960
that it'll just work right off the bat

205
00:07:33,479 --> 00:07:37,359
but we'll use that tool and others

206
00:07:34,960 --> 00:07:39,400
ultimately to then explore ideas in

207
00:07:37,360 --> 00:07:41,039
computer science principles that you can

208
00:07:39,400 --> 00:07:42,919
apply and we'll take a look underneath

209
00:07:41,039 --> 00:07:45,800
the hood so to speak of your computer at

210
00:07:42,919 --> 00:07:47,198
your memory or Ram Random Access Memory

211
00:07:45,800 --> 00:07:49,000
where all of the data is ultimately

212
00:07:47,199 --> 00:07:51,360
going to be stored we'll also take a

213
00:07:49,000 --> 00:07:53,120
look thereafter at bugs a bug is a

214
00:07:51,360 --> 00:07:55,360
mistake in a program here is an actual

215
00:07:53,120 --> 00:07:57,479
bug in an actual computer in yester year

216
00:07:55,360 --> 00:07:59,400
but we'll teach you how to debug

217
00:07:57,479 --> 00:08:01,479
programs find your own mistakes find

218
00:07:59,400 --> 00:08:04,280
others mistakes and improve that code as

219
00:08:01,479 --> 00:08:05,878
well we'll transition then to algorithm

220
00:08:04,280 --> 00:08:07,719
step-by-step instructions for solving

221
00:08:05,879 --> 00:08:10,199
some problems which we'll touch on today

222
00:08:07,720 --> 00:08:11,520
too and if you picture here this is

223
00:08:10,199 --> 00:08:12,879
actually a pretty representative

224
00:08:11,520 --> 00:08:14,159
problems odds are you haven't had to

225
00:08:12,879 --> 00:08:16,400
deal with something like this but it's

226
00:08:14,159 --> 00:08:18,560
representative sorting for instance if

227
00:08:16,400 --> 00:08:20,039
you think of each of these small bars as

228
00:08:18,560 --> 00:08:22,120
being a small number each of the bigger

229
00:08:20,039 --> 00:08:24,080
bars as being a bigger number you might

230
00:08:22,120 --> 00:08:26,479
wonder well how is you could do as a

231
00:08:24,080 --> 00:08:28,359
human sort all of these bars like get

232
00:08:26,479 --> 00:08:30,560
all the short bars over here all the big

233
00:08:28,360 --> 00:08:31,840
bars over there well odds are if you're

234
00:08:30,560 --> 00:08:33,240
like me you would probably kind of

235
00:08:31,840 --> 00:08:35,039
eyeball it and if you could physically

236
00:08:33,240 --> 00:08:36,599
interact you might just start grabbing

237
00:08:35,039 --> 00:08:38,240
the smallest elements first put them

238
00:08:36,599 --> 00:08:40,440
over on the left maybe grab the biggest

239
00:08:38,240 --> 00:08:42,039
elements put them over on the right but

240
00:08:40,440 --> 00:08:43,800
what's your algorithm there like how

241
00:08:42,039 --> 00:08:45,600
would you teach someone younger than you

242
00:08:43,799 --> 00:08:47,599
who's never done that before how to do

243
00:08:45,600 --> 00:08:49,720
it how would you compel your Mac or PC

244
00:08:47,600 --> 00:08:51,000
or phone to do something like that you

245
00:08:49,720 --> 00:08:52,720
can't just kind of wave your hand and

246
00:08:51,000 --> 00:08:54,240
say oh you know figure it out move

247
00:08:52,720 --> 00:08:55,680
things around you have to express

248
00:08:54,240 --> 00:08:57,880
yourself more methodically so we'll

249
00:08:55,680 --> 00:08:59,160
translate even ideas like this into code

250
00:08:57,880 --> 00:09:01,000
to and that's what the Googles and

251
00:08:59,160 --> 00:09:02,800
others of the world are doing constantly

252
00:09:01,000 --> 00:09:05,240
as they sort and organize the world's

253
00:09:02,800 --> 00:09:06,760
information we'll use metaphors along

254
00:09:05,240 --> 00:09:08,440
the way if it helps we'll talk about

255
00:09:06,760 --> 00:09:10,720
your computer's memory is kind of being

256
00:09:08,440 --> 00:09:12,880
like a postal address like every mailbox

257
00:09:10,720 --> 00:09:14,800
in the world has some form of postal

258
00:09:12,880 --> 00:09:16,200
address Street city state country and

259
00:09:14,800 --> 00:09:18,079
the like and it turns out that's how

260
00:09:16,200 --> 00:09:19,720
your Mac your PC and your phone also

261
00:09:18,079 --> 00:09:21,399
work you've got a whole bunch of memory

262
00:09:19,720 --> 00:09:22,800
like the picture before but you can

263
00:09:21,399 --> 00:09:24,680
think of it really as individual

264
00:09:22,800 --> 00:09:26,560
mailboxes and you can put anything you

265
00:09:24,680 --> 00:09:29,359
want in those mailboxes and you can go

266
00:09:26,560 --> 00:09:30,959
to a mailbox to grab information that

267
00:09:29,360 --> 00:09:32,519
from it so at the end of the day that's

268
00:09:30,959 --> 00:09:34,479
really all your computer's doing with

269
00:09:32,519 --> 00:09:36,800
information it's just kind of organizing

270
00:09:34,480 --> 00:09:38,640
it not into mailboxes per se but a term

271
00:09:36,800 --> 00:09:40,719
you probably know called bites for

272
00:09:38,640 --> 00:09:43,600
instance instead we'll talk about

273
00:09:40,720 --> 00:09:45,480
problems that arise even nowadays in

274
00:09:43,600 --> 00:09:48,000
fact most of you are familiar with your

275
00:09:45,480 --> 00:09:50,240
Mac PC even phone like spontaneously

276
00:09:48,000 --> 00:09:52,079
rebooting sometimes crashing the little

277
00:09:50,240 --> 00:09:53,839
Annoying spinning beach ball or

278
00:09:52,079 --> 00:09:55,880
Hourglass Icon that Happ like what is

279
00:09:53,839 --> 00:09:57,760
with that well those are just bugs in

280
00:09:55,880 --> 00:09:59,720
programs that humans at Apple and Google

281
00:09:57,760 --> 00:10:01,279
and Microsoft and others they screwed up

282
00:09:59,720 --> 00:10:03,079
and they wrote buggy code and your

283
00:10:01,279 --> 00:10:05,480
computer when it encounters those

284
00:10:03,079 --> 00:10:07,439
mistakes doesn't know what to do and so

285
00:10:05,480 --> 00:10:09,680
nine times out of 10 so to speak it just

286
00:10:07,440 --> 00:10:10,959
crashes or freezes or the like but that

287
00:10:09,680 --> 00:10:12,479
kind of stuff will make more sense so

288
00:10:10,959 --> 00:10:14,479
even the real world will make sense and

289
00:10:12,480 --> 00:10:16,519
pictured here or some lower level terms

290
00:10:14,480 --> 00:10:17,959
will eventually get to Mid semester but

291
00:10:16,519 --> 00:10:20,000
generally speaking when something is

292
00:10:17,959 --> 00:10:21,560
going this way as per this arrow and

293
00:10:20,000 --> 00:10:23,519
something is going this way as per this

294
00:10:21,560 --> 00:10:25,199
Arrow like that does not end well and

295
00:10:23,519 --> 00:10:27,000
that often is what happens when your

296
00:10:25,200 --> 00:10:28,760
computer crashes someone's using memory

297
00:10:27,000 --> 00:10:30,120
up here but someone else is using memory

298
00:10:28,760 --> 00:10:32,279
down here here and then they're not

299
00:10:30,120 --> 00:10:34,240
really talking left hand and right hand

300
00:10:32,279 --> 00:10:36,079
so that is just a high level overview of

301
00:10:34,240 --> 00:10:38,079
some of the problems we'll encounter but

302
00:10:36,079 --> 00:10:39,319
we'll focus to on data ultimately so

303
00:10:38,079 --> 00:10:41,680
picture here is something fairly

304
00:10:39,320 --> 00:10:43,079
technical called a hash table it's an

305
00:10:41,680 --> 00:10:45,239
amalgam of something we're going to soon

306
00:10:43,079 --> 00:10:46,800
call an array and also something we call

307
00:10:45,240 --> 00:10:49,120
a linked list and these are just fancy

308
00:10:46,800 --> 00:10:51,880
terms for describing how you can

309
00:10:49,120 --> 00:10:54,200
organize information even more flexibly

310
00:10:51,880 --> 00:10:56,320
than just putting individual ma values

311
00:10:54,200 --> 00:10:58,639
in mailboxes like how could you build

312
00:10:56,320 --> 00:11:00,279
structures like actual data structures

313
00:10:58,639 --> 00:11:01,959
so to speak speak two-dimensional

314
00:11:00,279 --> 00:11:04,000
structures at that and so what you're

315
00:11:01,959 --> 00:11:05,359
seeing here is a glimpse uh as some of

316
00:11:04,000 --> 00:11:07,160
you might have recognized of some Harry

317
00:11:05,360 --> 00:11:09,360
Potter Universe names but they're

318
00:11:07,160 --> 00:11:10,839
organized somewhat alphabetically and

319
00:11:09,360 --> 00:11:12,440
notice that anytime there's multiple

320
00:11:10,839 --> 00:11:14,800
people with a name that starts with H

321
00:11:12,440 --> 00:11:16,920
like hermion Harry and Hagrid well they

322
00:11:14,800 --> 00:11:18,479
can't all fit in that mailbox if each of

323
00:11:16,920 --> 00:11:20,079
these squares along the left is that

324
00:11:18,480 --> 00:11:21,959
same mailbox so you have to kind of

325
00:11:20,079 --> 00:11:23,920
chain them together well you'll learn

326
00:11:21,959 --> 00:11:26,119
how to do that in code so that even if

327
00:11:23,920 --> 00:11:27,560
you get more data than you expect if

328
00:11:26,120 --> 00:11:29,040
your business is booming and you're some

329
00:11:27,560 --> 00:11:31,119
web-based business how do you keep

330
00:11:29,040 --> 00:11:34,120
adding and adding information to your

331
00:11:31,120 --> 00:11:35,880
software to actually keep up with it but

332
00:11:34,120 --> 00:11:37,720
this again is what codee's going to soon

333
00:11:35,880 --> 00:11:39,800
look like as soon as next week in week

334
00:11:37,720 --> 00:11:42,519
one this here being C but we'll

335
00:11:39,800 --> 00:11:45,240
transition in a few weeks to a more uh

336
00:11:42,519 --> 00:11:47,079
modern higher level language so to speak

337
00:11:45,240 --> 00:11:48,800
called python indeed the course Very

338
00:11:47,079 --> 00:11:50,920
deliberately back in my day and now this

339
00:11:48,800 --> 00:11:52,680
introduces you first to C which funny

340
00:11:50,920 --> 00:11:55,040
enough most many people don't tend to

341
00:11:52,680 --> 00:11:57,800
program and certainly every day I you

342
00:11:55,040 --> 00:11:59,519
see generally September October November

343
00:11:57,800 --> 00:12:02,079
December when teaching C is 50 itself

344
00:11:59,519 --> 00:12:03,839
but it's everywhere nonetheless in fact

345
00:12:02,079 --> 00:12:06,160
even today's other languages with which

346
00:12:03,839 --> 00:12:09,600
you might be familiar like Python and

347
00:12:06,160 --> 00:12:11,319
Java and uh yet others still you see

348
00:12:09,600 --> 00:12:13,600
this same primitive language underneath

349
00:12:11,320 --> 00:12:15,040
the hood because it's so darn fast and

350
00:12:13,600 --> 00:12:17,199
as you'll learn over the coming weeks it

351
00:12:15,040 --> 00:12:18,680
really gives you access to and an

352
00:12:17,199 --> 00:12:20,319
understanding of what's going on

353
00:12:18,680 --> 00:12:22,000
conceptually down here so that

354
00:12:20,320 --> 00:12:23,800
thereafter after cs50 when you're

355
00:12:22,000 --> 00:12:26,000
writing code you can sort of think at a

356
00:12:23,800 --> 00:12:28,079
very high level what's actually going on

357
00:12:26,000 --> 00:12:30,240
so in fact in just a few weeks what

358
00:12:28,079 --> 00:12:32,359
looks like this C is going to look

359
00:12:30,240 --> 00:12:33,800
instead like this in Python and you'll

360
00:12:32,360 --> 00:12:35,839
better understand what's going on

361
00:12:33,800 --> 00:12:37,519
underneath the hood and odds are after

362
00:12:35,839 --> 00:12:40,240
this class you'll reach for a language

363
00:12:37,519 --> 00:12:41,680
like python more frequently than C but

364
00:12:40,240 --> 00:12:44,680
you're going to benefit from that bottom

365
00:12:41,680 --> 00:12:46,279
up understanding thereof thereafter and

366
00:12:44,680 --> 00:12:48,359
toward terms end we'll introduce you to

367
00:12:46,279 --> 00:12:50,120
a few other ideas like where do you put

368
00:12:48,360 --> 00:12:52,000
large amounts of data in things called

369
00:12:50,120 --> 00:12:53,880
databases not things like spreadsheets

370
00:12:52,000 --> 00:12:55,079
like here but actual databases where

371
00:12:53,880 --> 00:12:56,839
using those same kinds of data

372
00:12:55,079 --> 00:12:58,959
structures you lay things out in an

373
00:12:56,839 --> 00:13:00,399
interesting way in memory thereafter

374
00:12:58,959 --> 00:13:02,279
will transition to a very familiar

375
00:13:00,399 --> 00:13:04,199
environment that you and I use every day

376
00:13:02,279 --> 00:13:06,360
the web like the web has become rather

377
00:13:04,199 --> 00:13:08,599
the user interface or UI that we use

378
00:13:06,360 --> 00:13:10,800
everywhere on the uh laptops desktops

379
00:13:08,600 --> 00:13:13,199
and even mobile devices nowadays well

380
00:13:10,800 --> 00:13:14,800
pictured here is a language called HTML

381
00:13:13,199 --> 00:13:16,160
it's not a programming language it's a

382
00:13:14,800 --> 00:13:18,079
markup language and some of you might

383
00:13:16,160 --> 00:13:20,240
have made homepages or portfolios in the

384
00:13:18,079 --> 00:13:22,599
past but you'll understand what's going

385
00:13:20,240 --> 00:13:24,399
on here but more powerfully you'll

386
00:13:22,600 --> 00:13:26,320
understand how the computer sees that

387
00:13:24,399 --> 00:13:29,120
same kind of code builds up a

388
00:13:26,320 --> 00:13:31,240
hierarchical family tree type structure

389
00:13:29,120 --> 00:13:33,360
in memory and then you can manipulate

390
00:13:31,240 --> 00:13:35,199
that tree with code to actually add more

391
00:13:33,360 --> 00:13:37,519
and more information chat messages

392
00:13:35,199 --> 00:13:40,000
anything on the screen that you like and

393
00:13:37,519 --> 00:13:41,519
finally we'll tie all of this together

394
00:13:40,000 --> 00:13:44,040
by introducing what are called

395
00:13:41,519 --> 00:13:46,240
Frameworks and libraries third-party

396
00:13:44,040 --> 00:13:48,439
code that makes it a lot easier to solve

397
00:13:46,240 --> 00:13:50,560
problems of interest to you and so in

398
00:13:48,440 --> 00:13:53,839
particular here this is the very first

399
00:13:50,560 --> 00:13:56,079
web app that I myself made back in like

400
00:13:53,839 --> 00:13:58,199
1997 I was part of the first year

401
00:13:56,079 --> 00:14:00,079
intramural sports program not as an

402
00:13:58,199 --> 00:14:01,680
athlete but as the programmer and I was

403
00:14:00,079 --> 00:14:03,839
teaching myself how to build web

404
00:14:01,680 --> 00:14:05,399
applications I only knew C and maybe a

405
00:14:03,839 --> 00:14:07,279
little bit of something else at the time

406
00:14:05,399 --> 00:14:09,440
but this became for Harvard at least the

407
00:14:07,279 --> 00:14:11,320
very first website for the first year uh

408
00:14:09,440 --> 00:14:13,120
intramural sports program and it wasn't

409
00:14:11,320 --> 00:14:15,079
just a static website with links and

410
00:14:13,120 --> 00:14:16,920
images and the like it was interactive

411
00:14:15,079 --> 00:14:18,800
you could register for sports we could

412
00:14:16,920 --> 00:14:20,240
input exactly who is in a tournament

413
00:14:18,800 --> 00:14:22,519
bracket or the leg and it could actually

414
00:14:20,240 --> 00:14:24,440
automatically keep track of this data so

415
00:14:22,519 --> 00:14:26,320
there two after just three months of a

416
00:14:24,440 --> 00:14:28,120
class like this you'll go from writing

417
00:14:26,320 --> 00:14:30,320
quite simply this week in next hello

418
00:14:28,120 --> 00:14:32,800
world to building things like this for

419
00:14:30,320 --> 00:14:34,920
whether it's web mobile uh or other

420
00:14:32,800 --> 00:14:36,439
platforms as well if you so choose but

421
00:14:34,920 --> 00:14:37,759
we'll get you off of the courses

422
00:14:36,440 --> 00:14:39,639
infrastructure by the end of the term

423
00:14:37,759 --> 00:14:41,320
you won't be using any toy environments

424
00:14:39,639 --> 00:14:43,519
along the way will Empower you

425
00:14:41,320 --> 00:14:45,720
ultimately to write code after cs50

426
00:14:43,519 --> 00:14:48,199
especially if this is the only CS class

427
00:14:45,720 --> 00:14:49,639
you ever take on your own Mac or PC

428
00:14:48,199 --> 00:14:51,479
using the same software but not the

429
00:14:49,639 --> 00:14:53,759
cloud-based version thereof but all of

430
00:14:51,480 --> 00:14:56,279
this software is itself free and can be

431
00:14:53,759 --> 00:14:58,839
used by you uh powerfully after the

432
00:14:56,279 --> 00:15:02,360
course's own end but along the way as

433
00:14:58,839 --> 00:15:04,120
you may know uh is there this tradition

434
00:15:02,360 --> 00:15:05,959
within the class particularly in healthy

435
00:15:04,120 --> 00:15:07,440
times of a number of events that really

436
00:15:05,959 --> 00:15:09,439
brings people get together not just

437
00:15:07,440 --> 00:15:12,079
collaboratively academically but to just

438
00:15:09,440 --> 00:15:13,720
solve problems and generally uh engage

439
00:15:12,079 --> 00:15:16,040
with each other as well coming up first

440
00:15:13,720 --> 00:15:18,160
cs50 puzzle day which is meant to be not

441
00:15:16,040 --> 00:15:19,959
jigsaw puzzles but logic puzzles that

442
00:15:18,160 --> 00:15:21,759
require no prior experience with

443
00:15:19,959 --> 00:15:23,800
computer science or programming but it's

444
00:15:21,759 --> 00:15:25,800
just an opportunity to sort of quietly

445
00:15:23,800 --> 00:15:27,639
work on a packet of puzzles with some

446
00:15:25,800 --> 00:15:30,000
number of friends for for prizes and

447
00:15:27,639 --> 00:15:32,519
more later the semester once you tackle

448
00:15:30,000 --> 00:15:33,800
your final projects the Capstone of the

449
00:15:32,519 --> 00:15:35,759
course where we don't give you a

450
00:15:33,800 --> 00:15:37,359
homework to write you yourself come up

451
00:15:35,759 --> 00:15:39,800
with something to build we'll get

452
00:15:37,360 --> 00:15:42,440
together generally around 7 a uh 700

453
00:15:39,800 --> 00:15:44,560
p.m. in the evening uh wrap up around 7

454
00:15:42,440 --> 00:15:46,319
a.m. if you so choose and it's an

455
00:15:44,560 --> 00:15:48,079
evening a 12-hour opportunity to

456
00:15:46,319 --> 00:15:50,319
collaborate with classmates on your very

457
00:15:48,079 --> 00:15:52,758
own final project in a large space on

458
00:15:50,319 --> 00:15:55,000
campus uh that ends if you're awake with

459
00:15:52,759 --> 00:15:56,880
us at 5:00 a.m. uh we can hop on some

460
00:15:55,000 --> 00:16:00,040
cs50 shuttles and go down the road for

461
00:15:56,880 --> 00:16:03,600
some pancakes at IHOP around 6 uh of

462
00:16:00,040 --> 00:16:05,240
course uh of course this is 6 7 a.m. at

463
00:16:03,600 --> 00:16:06,839
that point but it's an opportunity

464
00:16:05,240 --> 00:16:09,079
finally to lead into What's called the

465
00:16:06,839 --> 00:16:11,480
cs50 fair which is an end of semester

466
00:16:09,079 --> 00:16:12,880
celebration an exhibition of everything

467
00:16:11,480 --> 00:16:14,600
that you'll accomplish over the coming

468
00:16:12,880 --> 00:16:16,319
months and in fact pictured here are

469
00:16:14,600 --> 00:16:18,680
some of your predecessors and healthy

470
00:16:16,319 --> 00:16:20,199
times um the cs50 fair allows you to

471
00:16:18,680 --> 00:16:22,239
come with your laptop or phone and

472
00:16:20,199 --> 00:16:24,359
exhibit a students faculty and staff

473
00:16:22,240 --> 00:16:25,920
across campus put together something in

474
00:16:24,360 --> 00:16:28,000
person and on video that people can

475
00:16:25,920 --> 00:16:29,639
Delight in seeing as you exhibit what it

476
00:16:28,000 --> 00:16:31,480
is you create in what you learned over

477
00:16:29,639 --> 00:16:33,800
the course of the several weeks and

478
00:16:31,480 --> 00:16:36,160
ultimately a chance to just share and

479
00:16:33,800 --> 00:16:38,399
Inspire others as well um and you'll all

480
00:16:36,160 --> 00:16:42,120
walk home ultimately with your own I to

481
00:16:38,399 --> 00:16:44,120
cs50 t-shirt saying as much as well so

482
00:16:42,120 --> 00:16:46,440
with that highlevel overview of the

483
00:16:44,120 --> 00:16:48,920
course I propose that we begin to take a

484
00:16:46,440 --> 00:16:50,519
look at what computer science itself is

485
00:16:48,920 --> 00:16:52,240
and what it is we're going to be doing

486
00:16:50,519 --> 00:16:54,600
over the next several weeks at this

487
00:16:52,240 --> 00:16:56,560
lower level than two so what is computer

488
00:16:54,600 --> 00:16:58,680
science right if you're maybe like me or

489
00:16:56,560 --> 00:17:00,599
new people like my friends and High

490
00:16:58,680 --> 00:17:02,319
School you probably assume that it means

491
00:17:00,600 --> 00:17:04,360
programming and that's absolutely a big

492
00:17:02,319 --> 00:17:06,000
part of it for a lot of people because

493
00:17:04,359 --> 00:17:07,599
with code you can write you can express

494
00:17:06,000 --> 00:17:09,640
ideas and solve actual problems

495
00:17:07,599 --> 00:17:11,760
especially involving data but computer

496
00:17:09,640 --> 00:17:13,360
science itself is really the study of

497
00:17:11,760 --> 00:17:15,359
information if you will how do you

498
00:17:13,359 --> 00:17:16,678
represent it and how do you actually

499
00:17:15,359 --> 00:17:18,839
process it and in that sense

500
00:17:16,679 --> 00:17:21,319
computational thinking is just the

501
00:17:18,839 --> 00:17:23,639
application of ideas from computer

502
00:17:21,319 --> 00:17:25,599
science a course like this to problems

503
00:17:23,640 --> 00:17:27,520
of interest to you again in the Arts

504
00:17:25,599 --> 00:17:30,120
Humanities Sciences social sciences

505
00:17:27,520 --> 00:17:32,360
whatever the domain interest is to you

506
00:17:30,120 --> 00:17:34,280
so with that if computer science is all

507
00:17:32,360 --> 00:17:36,000
about information and with it the

508
00:17:34,280 --> 00:17:37,678
solving of problems well what does it

509
00:17:36,000 --> 00:17:39,720
actually mean to solve a problem let's

510
00:17:37,679 --> 00:17:42,000
see if we can't propose a model into

511
00:17:39,720 --> 00:17:43,760
which all of the Lessons Learned will

512
00:17:42,000 --> 00:17:46,919
ultimately follow and I'd propose that

513
00:17:43,760 --> 00:17:48,320
this is problem solving you've got some

514
00:17:46,919 --> 00:17:50,039
input which is like the problem you want

515
00:17:48,320 --> 00:17:51,760
to solve the goal is to solve it so

516
00:17:50,039 --> 00:17:53,720
that's the so-called output and then

517
00:17:51,760 --> 00:17:56,080
somewhere in here the proverbial black

518
00:17:53,720 --> 00:17:57,960
box is some kind of Secret Sauce that

519
00:17:56,080 --> 00:17:59,760
gets the work done and in the coming

520
00:17:57,960 --> 00:18:01,000
months have to decide well how are we

521
00:17:59,760 --> 00:18:03,400
going to represent these inputs and

522
00:18:01,000 --> 00:18:05,559
outputs and really how do we code up how

523
00:18:03,400 --> 00:18:07,360
do we write solutions for what it is

524
00:18:05,559 --> 00:18:09,840
that's solving the problem of interest

525
00:18:07,360 --> 00:18:11,520
to us so when it comes to representation

526
00:18:09,840 --> 00:18:13,080
of information like there's a lot of

527
00:18:11,520 --> 00:18:14,760
ways we can do this and for instance if

528
00:18:13,080 --> 00:18:16,760
the problem at hand quite simply is to

529
00:18:14,760 --> 00:18:18,559
like take attendance at the beginning of

530
00:18:16,760 --> 00:18:20,520
class on the first day of school well

531
00:18:18,559 --> 00:18:23,399
how could we go about doing this well we

532
00:18:20,520 --> 00:18:24,918
could actually use a system called unary

533
00:18:23,400 --> 00:18:29,159
well what is that well that's a fancy

534
00:18:24,919 --> 00:18:31,799
way of saying 1 2 3 4 5 maybe 6 7 8 9 10

535
00:18:29,159 --> 00:18:34,200
and I can use my digits pun intended on

536
00:18:31,799 --> 00:18:35,918
my fingers to actually count everyone up

537
00:18:34,200 --> 00:18:38,200
and eventually you need toes and whatnot

538
00:18:35,919 --> 00:18:40,280
if you have to count so high but unary

539
00:18:38,200 --> 00:18:42,360
is a very simple system of using a

540
00:18:40,280 --> 00:18:44,039
single symbol a human finger in this

541
00:18:42,360 --> 00:18:45,280
case to just solve some problem like

542
00:18:44,039 --> 00:18:46,960
counting the number of people in the

543
00:18:45,280 --> 00:18:48,320
room let's make this slightly more

544
00:18:46,960 --> 00:18:50,400
technical for a moment a little more

545
00:18:48,320 --> 00:18:52,200
mathy that's just called base one where

546
00:18:50,400 --> 00:18:54,559
the base under which you're operating

547
00:18:52,200 --> 00:18:56,120
has one digit in it like literally a

548
00:18:54,559 --> 00:18:58,039
human finger and maybe multiple such

549
00:18:56,120 --> 00:19:00,120
fingers if you need to count higher but

550
00:18:58,039 --> 00:19:02,600
of course of course all most of you if

551
00:19:00,120 --> 00:19:04,918
not all of you generally vaguely know

552
00:19:02,600 --> 00:19:07,039
that computers use something other than

553
00:19:04,919 --> 00:19:08,919
unary and even you and I probably don't

554
00:19:07,039 --> 00:19:10,679
use this that often they use what

555
00:19:08,919 --> 00:19:14,400
language or alphabet

556
00:19:10,679 --> 00:19:16,400
instead yeah so binary so binary is

557
00:19:14,400 --> 00:19:19,280
indeed the system that computers somehow

558
00:19:16,400 --> 00:19:21,640
use so in this case by implying two and

559
00:19:19,280 --> 00:19:23,399
so computers have two digits it turns

560
00:19:21,640 --> 00:19:25,640
out at their dispos one in fact if

561
00:19:23,400 --> 00:19:27,159
you've ever heard the technical term bit

562
00:19:25,640 --> 00:19:29,440
which is like a smaller version of a

563
00:19:27,159 --> 00:19:32,320
bite more on that soon well a binary

564
00:19:29,440 --> 00:19:33,320
digit is the origin of that term bit

565
00:19:32,320 --> 00:19:34,720
because if you get rid of some of the

566
00:19:33,320 --> 00:19:37,320
letters and you're left from binary

567
00:19:34,720 --> 00:19:39,799
digit with just bit thus is a bit a bit

568
00:19:37,320 --> 00:19:41,120
is just a zero and one it's two more

569
00:19:39,799 --> 00:19:43,080
digits than you might have on your own

570
00:19:41,120 --> 00:19:44,719
finger and of course it's fewer though

571
00:19:43,080 --> 00:19:47,158
than you and I have you and I typically

572
00:19:44,720 --> 00:19:48,919
use as humans the decimal system deck

573
00:19:47,159 --> 00:19:51,679
meaning 10 because you and I generally

574
00:19:48,919 --> 00:19:54,000
use zero through nine so on the one hand

575
00:19:51,679 --> 00:19:56,679
another pun intended you've got unary

576
00:19:54,000 --> 00:19:58,840
computers use binary we humans generally

577
00:19:56,679 --> 00:20:00,640
think and talk in terms of De

578
00:19:58,840 --> 00:20:02,320
but at the end of the day these are

579
00:20:00,640 --> 00:20:04,200
fundamentally going to be the same thing

580
00:20:02,320 --> 00:20:05,600
which is to say that it's all pretty

581
00:20:04,200 --> 00:20:07,760
accessible to us even if you're not a

582
00:20:05,600 --> 00:20:10,840
computer person I dare say you're about

583
00:20:07,760 --> 00:20:13,520
to be so what is a bit well a bit then

584
00:20:10,840 --> 00:20:15,799
is a zero or a one that is a so-called

585
00:20:13,520 --> 00:20:17,720
binary digit but how do computers only

586
00:20:15,799 --> 00:20:19,280
speak in binary how do they solve

587
00:20:17,720 --> 00:20:21,120
problems represent information using

588
00:20:19,280 --> 00:20:23,760
only binary well at the end of the day

589
00:20:21,120 --> 00:20:26,520
if they want to represent zero and one

590
00:20:23,760 --> 00:20:28,360
we need to do so physically somehow and

591
00:20:26,520 --> 00:20:31,280
I dare say that maybe the simplest way

592
00:20:28,360 --> 00:20:32,840
to think about a bit a zero or one is

593
00:20:31,280 --> 00:20:34,799
like a light bulb and so by human

594
00:20:32,840 --> 00:20:37,199
convention let's just assume that if you

595
00:20:34,799 --> 00:20:38,480
are a computer be it a laptop desktop

596
00:20:37,200 --> 00:20:41,440
phone or the like and you want to

597
00:20:38,480 --> 00:20:43,679
represent the number zero you know what

598
00:20:41,440 --> 00:20:46,200
you just keep a light switch off you

599
00:20:43,679 --> 00:20:47,320
keep a light bulb off if by contrast

600
00:20:46,200 --> 00:20:49,200
you're that same computer and you want

601
00:20:47,320 --> 00:20:50,678
to represent the number one you take

602
00:20:49,200 --> 00:20:53,000
that same switch that same light bulb

603
00:20:50,679 --> 00:20:54,520
and just turn it on so a light bulb

604
00:20:53,000 --> 00:20:57,480
that's on represents a one and a light

605
00:20:54,520 --> 00:20:58,960
bulb that's off represents a zero so why

606
00:20:57,480 --> 00:21:00,000
is this relevant into computers well at

607
00:20:58,960 --> 00:21:02,080
the end of the day you and I are

608
00:21:00,000 --> 00:21:03,640
charging our laptops or phones at night

609
00:21:02,080 --> 00:21:05,158
so there's some like physical resource

610
00:21:03,640 --> 00:21:07,760
being replenished there whether you're

611
00:21:05,159 --> 00:21:09,840
on battery or some power cord and so a

612
00:21:07,760 --> 00:21:12,039
inside of a computer are just thousands

613
00:21:09,840 --> 00:21:13,158
millions of tiny little switches

614
00:21:12,039 --> 00:21:14,679
nowadays you can think of them

615
00:21:13,159 --> 00:21:16,600
metaphorically as light bulbs but they

616
00:21:14,679 --> 00:21:18,880
don't yet it's actually shine light but

617
00:21:16,600 --> 00:21:20,279
there are tiny tiny little switches and

618
00:21:18,880 --> 00:21:22,760
those switches if you've ever heard the

619
00:21:20,279 --> 00:21:24,600
term are just called transistors so like

620
00:21:22,760 --> 00:21:26,080
computers have millions of transistors

621
00:21:24,600 --> 00:21:28,158
that can either be flipped on to

622
00:21:26,080 --> 00:21:30,799
represent ones or flipped off to

623
00:21:28,159 --> 00:21:33,720
represent zeros and from that very

624
00:21:30,799 --> 00:21:37,080
simple mechanism electricity is there or

625
00:21:33,720 --> 00:21:39,279
it's not a one or a zero computers can

626
00:21:37,080 --> 00:21:41,799
actually count obviously from zero to

627
00:21:39,279 --> 00:21:44,360
one but it turns out even higher if they

628
00:21:41,799 --> 00:21:45,918
use a little more electricity as well so

629
00:21:44,360 --> 00:21:47,959
how might I do this well let me go ahead

630
00:21:45,919 --> 00:21:49,720
and propose that I just grab one of our

631
00:21:47,960 --> 00:21:51,200
own light bulbs here on stage this one's

632
00:21:49,720 --> 00:21:53,120
off so for instance If This Were

633
00:21:51,200 --> 00:21:54,880
miniaturized inside of your Mac PC or

634
00:21:53,120 --> 00:21:56,199
phone this would be a transistor and

635
00:21:54,880 --> 00:21:58,080
indeed here's the little switch on the

636
00:21:56,200 --> 00:21:59,559
bottom and if your computer wants to

637
00:21:58,080 --> 00:22:01,760
represent a zero it just leaves the

638
00:21:59,559 --> 00:22:03,720
switch off and the light is not shining

639
00:22:01,760 --> 00:22:05,320
if you want to represent a one well now

640
00:22:03,720 --> 00:22:07,000
I've counted as high as one because the

641
00:22:05,320 --> 00:22:08,559
switch is now on I've grabbed a little

642
00:22:07,000 --> 00:22:10,640
electricity I'm holding on to it inside

643
00:22:08,559 --> 00:22:12,080
of the computer and so now I see that

644
00:22:10,640 --> 00:22:13,720
this is a one all right but

645
00:22:12,080 --> 00:22:16,678
unfortunately with just one switch one

646
00:22:13,720 --> 00:22:19,279
light bulb I can only count from zero to

647
00:22:16,679 --> 00:22:20,320
one how do I count out higher might you

648
00:22:19,279 --> 00:22:23,559
think

649
00:22:20,320 --> 00:22:25,039
intuitively say again yeah so more light

650
00:22:23,559 --> 00:22:27,678
bulbs so let me do this let me just put

651
00:22:25,039 --> 00:22:29,559
grab something to put these on so I can

652
00:22:27,679 --> 00:22:31,880
use a few of them at a time and let me

653
00:22:29,559 --> 00:22:33,918
propose that here instead of having just

654
00:22:31,880 --> 00:22:35,799
one light bulb let me give myself maybe

655
00:22:33,919 --> 00:22:37,840
three in total so all of them are

656
00:22:35,799 --> 00:22:39,520
initially off and if you think of this

657
00:22:37,840 --> 00:22:40,799
in miniature form in your mind's eye

658
00:22:39,520 --> 00:22:43,120
this is like a computer with three

659
00:22:40,799 --> 00:22:45,918
transistors three switches representing

660
00:22:43,120 --> 00:22:48,918
now the number you and I know as zero

661
00:22:45,919 --> 00:22:50,440
why they're just all off so how does a

662
00:22:48,919 --> 00:22:53,080
computer go about representing the

663
00:22:50,440 --> 00:22:55,159
number one well it turns on one of these

664
00:22:53,080 --> 00:22:57,399
light bulbs and how does the computer

665
00:22:55,159 --> 00:22:59,679
represent the number two well you might

666
00:22:57,400 --> 00:23:01,720
think if I by may you just turn on a

667
00:22:59,679 --> 00:23:03,360
second light bul and if you might think

668
00:23:01,720 --> 00:23:05,559
how does a computer represent three you

669
00:23:03,360 --> 00:23:08,158
just turn on the third light bulb and so

670
00:23:05,559 --> 00:23:09,960
as such with three bits a computer would

671
00:23:08,159 --> 00:23:12,960
seem to be able to count from zero on up

672
00:23:09,960 --> 00:23:15,520
to 1 two three but it turns out if I'm a

673
00:23:12,960 --> 00:23:17,679
little smarter here I can actually count

674
00:23:15,520 --> 00:23:19,039
higher than that why well I'm just

675
00:23:17,679 --> 00:23:20,360
considering like the combination of

676
00:23:19,039 --> 00:23:22,039
bulbs being on here what if I do

677
00:23:20,360 --> 00:23:24,279
something like this this is still zero I

678
00:23:22,039 --> 00:23:26,000
will claim but what if I propose now

679
00:23:24,279 --> 00:23:31,320
that this will be how a computer

680
00:23:26,000 --> 00:23:33,679
represents one on on off off this though

681
00:23:31,320 --> 00:23:35,439
will be how the computer represents two

682
00:23:33,679 --> 00:23:37,559
notice I didn't turn on the same two I'm

683
00:23:35,440 --> 00:23:39,159
just turning on the one in the middle

684
00:23:37,559 --> 00:23:42,320
this I now claim will be how a computer

685
00:23:39,159 --> 00:23:44,600
represents three this is going to be in

686
00:23:42,320 --> 00:23:48,039
just a second how a computer represents

687
00:23:44,600 --> 00:23:50,080
the number we know as four and yet I'm

688
00:23:48,039 --> 00:23:51,320
still only using three bulbs this is

689
00:23:50,080 --> 00:23:54,279
going to be the number the computer

690
00:23:51,320 --> 00:23:56,678
represents as five this is going to be

691
00:23:54,279 --> 00:23:59,080
how the computer represents the number

692
00:23:56,679 --> 00:24:00,520
six and then lastly it turns out with

693
00:23:59,080 --> 00:24:02,678
three light bulbs if you're smart about

694
00:24:00,520 --> 00:24:05,000
it you can count it seems as high as

695
00:24:02,679 --> 00:24:07,360
seven now even if you kind of lost track

696
00:24:05,000 --> 00:24:08,880
of like what I was turning on and Y I

697
00:24:07,360 --> 00:24:10,879
claimed there were eight different

698
00:24:08,880 --> 00:24:12,520
patterns from all of them off to all of

699
00:24:10,880 --> 00:24:14,080
them on but notice that I started to

700
00:24:12,520 --> 00:24:16,879
permute them I took into account which

701
00:24:14,080 --> 00:24:18,918
ones were on and which ones were off why

702
00:24:16,880 --> 00:24:21,200
though do these represent the numbers we

703
00:24:18,919 --> 00:24:23,400
know as 0 through 7even well let me go

704
00:24:21,200 --> 00:24:24,880
ahead and maybe let's let's do this

705
00:24:23,400 --> 00:24:27,080
instead of just considering there to be

706
00:24:24,880 --> 00:24:29,960
light bulbs let's assign some special

707
00:24:27,080 --> 00:24:31,799
significance to each of them based on

708
00:24:29,960 --> 00:24:35,720
where it is and maybe for this could we

709
00:24:31,799 --> 00:24:37,840
get uh maybe three volunteers three

710
00:24:35,720 --> 00:24:39,200
volunteer okay yeah who's you're being

711
00:24:37,840 --> 00:24:40,678
volunteered okay come on up if you want

712
00:24:39,200 --> 00:24:42,559
to go over to the stage there yeah you

713
00:24:40,679 --> 00:24:44,440
want to come on up as well and over here

714
00:24:42,559 --> 00:24:46,678
as well so there's some stairs on either

715
00:24:44,440 --> 00:24:49,679
end maybe a round of applause for our

716
00:24:46,679 --> 00:24:49,679
first volunteers of

717
00:24:54,080 --> 00:24:58,000
term all right so you want to be you are

718
00:24:56,159 --> 00:25:00,000
number one and if you want want to go

719
00:24:58,000 --> 00:25:02,200
ahead and stand roughly right here how

720
00:25:00,000 --> 00:25:03,760
about you want to be number two okay

721
00:25:02,200 --> 00:25:06,480
come on over and right uh to the right

722
00:25:03,760 --> 00:25:07,960
of here and you'll be number four it

723
00:25:06,480 --> 00:25:10,399
turns out and if you want to come over

724
00:25:07,960 --> 00:25:12,360
here on this end let's give you all a

725
00:25:10,399 --> 00:25:14,120
moment to uh introduce yourselves uh

726
00:25:12,360 --> 00:25:18,439
briefly to your classmates if you'd like

727
00:25:14,120 --> 00:25:22,158
hi I'm Ellie I'm a senior nice to meet

728
00:25:18,440 --> 00:25:25,240
I'm rahana and I'm a first year welcome

729
00:25:22,159 --> 00:25:27,039
hi I'm Joseph and I am a first year

730
00:25:25,240 --> 00:25:30,440
welcome all right so so glad to have all

731
00:25:27,039 --> 00:25:30,440
three of you up here thank

732
00:25:30,799 --> 00:25:36,520
you let me propose now that we'd like

733
00:25:34,520 --> 00:25:38,760
you you three to represent how about the

734
00:25:36,520 --> 00:25:41,279
number zero and I claim now that if each

735
00:25:38,760 --> 00:25:43,080
of you now represents a switch you have

736
00:25:41,279 --> 00:25:44,679
sort of fancier light bulbs now one is a

737
00:25:43,080 --> 00:25:46,240
one one is a two one is a four but each

738
00:25:44,679 --> 00:25:48,440
of you still just has a switch on the

739
00:25:46,240 --> 00:25:50,039
bottom in fact of your plastic devices I

740
00:25:48,440 --> 00:25:51,919
claim these three volunteers are

741
00:25:50,039 --> 00:25:53,559
representing the number zero let me ask

742
00:25:51,919 --> 00:25:57,240
you all now how might you represent the

743
00:25:53,559 --> 00:25:59,918
number one how should you cooperate here

744
00:25:57,240 --> 00:26:01,279
okay so so we would have on off off

745
00:25:59,919 --> 00:26:02,480
which I think is matches what I did with

746
00:26:01,279 --> 00:26:03,960
my three light bulbs as well if you want

747
00:26:02,480 --> 00:26:06,960
to go ahead and turn yours off how might

748
00:26:03,960 --> 00:26:11,039
you three represent the number

749
00:26:06,960 --> 00:26:14,080
two okay so off on off now from right to

750
00:26:11,039 --> 00:26:16,720
left how would you3 represent the number

751
00:26:14,080 --> 00:26:18,559
three ah so that's why my two light

752
00:26:16,720 --> 00:26:21,440
bulbs went on at the end how would you

753
00:26:18,559 --> 00:26:21,440
three represent the number

754
00:26:22,679 --> 00:26:28,760
four perfect number

755
00:26:25,080 --> 00:26:30,480
five number six

756
00:26:28,760 --> 00:26:32,600
and number

757
00:26:30,480 --> 00:26:35,039
seven all right and give us one more how

758
00:26:32,600 --> 00:26:39,000
would you represent

759
00:26:35,039 --> 00:26:41,520
eight okay you can't uh how about then

760
00:26:39,000 --> 00:26:43,960
one more volunteer one more volunteer

761
00:26:41,520 --> 00:26:43,960
okay come on

762
00:26:45,320 --> 00:26:49,760
up all right what's your name my name is

763
00:26:48,399 --> 00:26:51,360
Moen if you want to say it there my name

764
00:26:49,760 --> 00:26:53,158
is Moen all right Moen you're GNA be

765
00:26:51,360 --> 00:26:54,959
number eight and if now you all actually

766
00:26:53,159 --> 00:26:57,399
let's make this uh how would you

767
00:26:54,960 --> 00:27:00,200
represent number eight all collectively

768
00:26:57,399 --> 00:27:02,639
as four bits or four

769
00:27:00,200 --> 00:27:04,840
switches okay eight and now lastly give

770
00:27:02,640 --> 00:27:04,840
me

771
00:27:06,320 --> 00:27:12,279
15 everyone's awkwardly doing arithmetic

772
00:27:08,880 --> 00:27:12,279
in their head oh using

773
00:27:12,960 --> 00:27:19,240
unar hey yeah is

774
00:27:15,279 --> 00:27:20,520
everyone yes okay Round of Applause okay

775
00:27:19,240 --> 00:27:24,200
thank you

776
00:27:20,520 --> 00:27:26,158
all if you want to leave your numbers

777
00:27:24,200 --> 00:27:28,399
over here we have a 650 stress ball for

778
00:27:26,159 --> 00:27:29,720
you but thank you for volunteer you can

779
00:27:28,399 --> 00:27:31,600
turn those numbers off and leave them

780
00:27:29,720 --> 00:27:34,760
over here so thank

781
00:27:31,600 --> 00:27:40,199
you so how do we go about how do we go

782
00:27:34,760 --> 00:27:43,519
from there to uh creating these patterns

783
00:27:40,200 --> 00:27:46,039
well even though we still had three bits

784
00:27:43,519 --> 00:27:48,679
initially and three switches later four

785
00:27:46,039 --> 00:27:50,919
bits and four switches ultimately we

786
00:27:48,679 --> 00:27:53,120
still used it used the same approach

787
00:27:50,919 --> 00:27:55,200
fundamentally to actually representing

788
00:27:53,120 --> 00:27:57,000
information and now why were they those

789
00:27:55,200 --> 00:27:58,440
patterns and why did I very deliberately

790
00:27:57,000 --> 00:28:01,279
have our volum volunteers line up in

791
00:27:58,440 --> 00:28:04,240
that way well I wanted them using base 2

792
00:28:01,279 --> 00:28:06,279
AKA binary but with binary there come

793
00:28:04,240 --> 00:28:08,320
certain rules and even if you're not

794
00:28:06,279 --> 00:28:10,519
familiar with binary beyond that it

795
00:28:08,320 --> 00:28:12,320
exists and relates somehow to computers

796
00:28:10,519 --> 00:28:14,320
it's actually pretty much identical to

797
00:28:12,320 --> 00:28:17,240
the system you and I use every day known

798
00:28:14,320 --> 00:28:19,200
as base 10 AKA decimal so let's consider

799
00:28:17,240 --> 00:28:20,559
if you will by rewinding to primary

800
00:28:19,200 --> 00:28:22,279
school for just a moment like how

801
00:28:20,559 --> 00:28:24,120
decimal works and you'll see that even

802
00:28:22,279 --> 00:28:25,640
if you're not a computer person you

803
00:28:24,120 --> 00:28:28,199
actually are you just have to tweak your

804
00:28:25,640 --> 00:28:29,679
mental model ever so slightly so here is

805
00:28:28,200 --> 00:28:32,799
the number that you're probably viewing

806
00:28:29,679 --> 00:28:35,440
as 123 but why is that well it's not

807
00:28:32,799 --> 00:28:37,639
really 123 these are just uh this is

808
00:28:35,440 --> 00:28:41,039
just a pattern of three symbols on the

809
00:28:37,640 --> 00:28:42,600
screen 1 2 three and your mind is sort

810
00:28:41,039 --> 00:28:45,158
of rapidly assigning mathematical

811
00:28:42,600 --> 00:28:46,760
meaning to them 123 but why is that well

812
00:28:45,159 --> 00:28:47,880
if you're like me you probably learned

813
00:28:46,760 --> 00:28:49,480
back in the day when you have a

814
00:28:47,880 --> 00:28:51,919
three-digit number like this the

815
00:28:49,480 --> 00:28:53,760
rightmost number is in the ones place

816
00:28:51,919 --> 00:28:55,519
the middle digit is the 10 place the

817
00:28:53,760 --> 00:28:57,158
leftmost digit is in the hundreds place

818
00:28:55,519 --> 00:28:58,840
and why is that relevant well if you

819
00:28:57,159 --> 00:29:01,480
then quickly do some mental math as you

820
00:28:58,840 --> 00:29:05,039
and I just do uh instantly nowadays that

821
00:29:01,480 --> 00:29:08,559
just means 100 * 1 plus 10 * 2 plus 1 *

822
00:29:05,039 --> 00:29:10,600
3 of course 100 + 20 + 3 gives us the

823
00:29:08,559 --> 00:29:13,678
number you and I know as

824
00:29:10,600 --> 00:29:16,080
123 but beyond that how do we get to

825
00:29:13,679 --> 00:29:18,080
just two digits instead of as many as

826
00:29:16,080 --> 00:29:20,559
nine in the decimal system well let's

827
00:29:18,080 --> 00:29:22,480
generalize this in the decimal system

828
00:29:20,559 --> 00:29:24,600
you and I know if we've got three digits

829
00:29:22,480 --> 00:29:26,519
represented by these hashes here yes

830
00:29:24,600 --> 00:29:28,360
it's the ones place T Place hundreds

831
00:29:26,519 --> 00:29:30,840
place and if we keep going thousands 10

832
00:29:28,360 --> 00:29:32,760
thousands and so forth but why is that

833
00:29:30,840 --> 00:29:34,879
well base terminology is now a little

834
00:29:32,760 --> 00:29:37,559
more gerine that's technically the 10 to

835
00:29:34,880 --> 00:29:40,200
the zero column the 10 to the 1 10 to

836
00:29:37,559 --> 00:29:43,760
the two so these are powers of 10 where

837
00:29:40,200 --> 00:29:45,360
10 is your base computers just simplify

838
00:29:43,760 --> 00:29:46,879
things a little bit because computers at

839
00:29:45,360 --> 00:29:48,918
the end of the day only have access to

840
00:29:46,880 --> 00:29:50,720
electricity on or off they don't have

841
00:29:48,919 --> 00:29:53,120
access to like 10 different types of

842
00:29:50,720 --> 00:29:55,480
electricity just two on or off if you

843
00:29:53,120 --> 00:29:56,879
will well they just use a different base

844
00:29:55,480 --> 00:29:59,519
and the rightmost digit would be in the

845
00:29:56,880 --> 00:30:01,679
so-called 2 to the zero then the middle

846
00:29:59,519 --> 00:30:04,039
digit is 2 to the one the leftmost is 2

847
00:30:01,679 --> 00:30:06,519
to the 2 AKA one's Place two's Place

848
00:30:04,039 --> 00:30:10,559
Four's place and as we kept going 8 and

849
00:30:06,519 --> 00:30:12,279
if we keep going 16 32 64 128 and so

850
00:30:10,559 --> 00:30:15,639
forth but the idea is fundamentally the

851
00:30:12,279 --> 00:30:17,159
same so why is this how the computer

852
00:30:15,640 --> 00:30:21,000
represents the number you and I know is

853
00:30:17,159 --> 00:30:23,320
zero well off off off from right to left

854
00:30:21,000 --> 00:30:27,480
or in this case left to right is just

855
00:30:23,320 --> 00:30:32,399
zero why CU that's 4 * 0 + 2 * 0 + 1

856
00:30:27,480 --> 00:30:35,279
time 0 is of course 0o this is why 0 01

857
00:30:32,399 --> 00:30:38,518
represents one this is why 0 1 0

858
00:30:35,279 --> 00:30:42,120
represents two and three and four and

859
00:30:38,519 --> 00:30:44,480
five and six and seven on up and why did

860
00:30:42,120 --> 00:30:46,799
we need a fourth bit to represent eight

861
00:30:44,480 --> 00:30:49,320
well we kind of needed to carry the one

862
00:30:46,799 --> 00:30:51,039
so to speak using our human familiar uh

863
00:30:49,320 --> 00:30:53,840
familiar human terminology but for that

864
00:30:51,039 --> 00:30:55,519
we need a fourth bit another transistor

865
00:30:53,840 --> 00:30:57,639
and this now represents the number eight

866
00:30:55,519 --> 00:31:00,519
and that's why we ended with on from

867
00:30:57,639 --> 00:31:02,918
left to right off off off so I keep

868
00:31:00,519 --> 00:31:05,679
saying on and off or the light bulb is

869
00:31:02,919 --> 00:31:08,320
on or off but really I just mean one or

870
00:31:05,679 --> 00:31:10,080
zero and so computers and we humans

871
00:31:08,320 --> 00:31:11,960
think of things digitally as just being

872
00:31:10,080 --> 00:31:13,439
zeros and ones but mechanically you can

873
00:31:11,960 --> 00:31:15,600
think of it indeed as these light bulbs

874
00:31:13,440 --> 00:31:17,279
now a bit not very useful even three

875
00:31:15,600 --> 00:31:19,678
bits four bits not that useful you can

876
00:31:17,279 --> 00:31:22,080
count to seven or 15 generally speaking

877
00:31:19,679 --> 00:31:23,960
bites are a more useful unit of measure

878
00:31:22,080 --> 00:31:27,279
and anyone familiar how many bits is in

879
00:31:23,960 --> 00:31:29,720
a bite yeah so eight bits are in a bite

880
00:31:27,279 --> 00:31:31,120
can think of it as an octet equivalently

881
00:31:29,720 --> 00:31:32,600
uh in some context there are nuances

882
00:31:31,120 --> 00:31:34,518
there but think of a bite as just being

883
00:31:32,600 --> 00:31:36,360
eight bits and that's just a more useful

884
00:31:34,519 --> 00:31:37,919
measure so what does this mean in real

885
00:31:36,360 --> 00:31:41,678
terms well if you've ever downloaded

886
00:31:37,919 --> 00:31:43,919
like a music file or a photograph or a a

887
00:31:41,679 --> 00:31:45,440
video those are measured in bytes

888
00:31:43,919 --> 00:31:47,559
probably not small numbers of bytes

889
00:31:45,440 --> 00:31:49,679
probably kilobytes for thousands of

890
00:31:47,559 --> 00:31:52,039
bytes megabytes for millions of bytes

891
00:31:49,679 --> 00:31:54,120
gigabytes for billions of bytes

892
00:31:52,039 --> 00:31:57,760
especially for video that just means you

893
00:31:54,120 --> 00:31:59,479
have a lot of patterns of 8 Bits some

894
00:31:57,760 --> 00:32:02,039
combination of zeros and ones on your

895
00:31:59,480 --> 00:32:04,679
computer's hard drive here then with a

896
00:32:02,039 --> 00:32:06,360
bite of bits eight bits is how a

897
00:32:04,679 --> 00:32:08,320
computer would typically represent the

898
00:32:06,360 --> 00:32:11,080
number zero and if that same computer

899
00:32:08,320 --> 00:32:13,600
uses all eight of its bits it's full

900
00:32:11,080 --> 00:32:15,000
bite to rep uh to change it to one

901
00:32:13,600 --> 00:32:17,000
anyone who's quick with math or have

902
00:32:15,000 --> 00:32:21,399
seen this before how high can a computer

903
00:32:17,000 --> 00:32:22,799
count with eight bits or one yeah 255

904
00:32:21,399 --> 00:32:24,479
why is that well we're not going to turn

905
00:32:22,799 --> 00:32:25,679
this into a constant math exercise

906
00:32:24,480 --> 00:32:28,039
indeed after today we're not really

907
00:32:25,679 --> 00:32:30,159
going to think about or talk about bits

908
00:32:28,039 --> 00:32:36,200
at this low level but this is the ones

909
00:32:30,159 --> 00:32:37,880
place 2os 4S 8 16 32 64 128 and if I do

910
00:32:36,200 --> 00:32:39,320
all of that math from left to right that

911
00:32:37,880 --> 00:32:41,919
indeed gives me

912
00:32:39,320 --> 00:32:43,439
255 it ignores how we might represent

913
00:32:41,919 --> 00:32:45,799
negative numbers but perhaps more on

914
00:32:43,440 --> 00:32:47,880
those some other day but computers of

915
00:32:45,799 --> 00:32:50,158
course do so much more than numbers and

916
00:32:47,880 --> 00:32:52,320
math and all this lowlevel stuff we send

917
00:32:50,159 --> 00:32:54,559
text messages right documents emails and

918
00:32:52,320 --> 00:32:57,399
the like so how might a computer

919
00:32:54,559 --> 00:32:59,399
represent something like the letter A I

920
00:32:57,399 --> 00:33:01,399
claim at the end of the day your Mac

921
00:32:59,399 --> 00:33:03,840
your PC your phone just has lots of

922
00:33:01,399 --> 00:33:07,439
transistors lots of switches that it can

923
00:33:03,840 --> 00:33:09,559
use in units of eight in units of bytes

924
00:33:07,440 --> 00:33:11,360
how though if it's already using those

925
00:33:09,559 --> 00:33:14,678
patterns of zeros and ones apparently to

926
00:33:11,360 --> 00:33:16,760
represent numbers from zero on up how do

927
00:33:14,679 --> 00:33:20,760
you go about representing letters of the

928
00:33:16,760 --> 00:33:22,639
alphabet might you think yeah okay so we

929
00:33:20,760 --> 00:33:24,360
could assign a number to every letter

930
00:33:22,639 --> 00:33:27,559
okay so let me just conjecture well

931
00:33:24,360 --> 00:33:29,840
let's just call a0 for Simplicity B1 1

932
00:33:27,559 --> 00:33:33,559
C2 and now let me play Devil's Advocate

933
00:33:29,840 --> 00:33:36,080
okay how do I now represent zero or one

934
00:33:33,559 --> 00:33:37,559
or two well we've maybe created a

935
00:33:36,080 --> 00:33:39,879
problem for oursel if now we have to

936
00:33:37,559 --> 00:33:41,000
steal some numbers to represent letters

937
00:33:39,880 --> 00:33:42,240
we kind of have to pick a lane but

938
00:33:41,000 --> 00:33:44,519
there's a solution to that too that

939
00:33:42,240 --> 00:33:46,919
we'll see and it turns out the world is

940
00:33:44,519 --> 00:33:48,639
not quite as simple as a being zero a

941
00:33:46,919 --> 00:33:50,399
typically is represented by computers

942
00:33:48,639 --> 00:33:54,279
everywhere phones everywhere with the

943
00:33:50,399 --> 00:33:56,279
number 65 the decimal number 65 using 8

944
00:33:54,279 --> 00:33:57,919
Bits if we turn some of the zeros to

945
00:33:56,279 --> 00:34:00,559
ones let me just stipulate you can

946
00:33:57,919 --> 00:34:02,679
represent the letter A Using eight bits

947
00:34:00,559 --> 00:34:04,840
by turning certain ones on and certain

948
00:34:02,679 --> 00:34:07,519
ones off but we will try not to focus on

949
00:34:04,840 --> 00:34:09,918
the that binary level too much so if a

950
00:34:07,519 --> 00:34:13,800
is 65 it turns out that b is going to be

951
00:34:09,918 --> 00:34:15,158
66 and C is going to be 67 and so forth

952
00:34:13,800 --> 00:34:17,280
and so where does that get us well it

953
00:34:15,159 --> 00:34:21,440
turns out there's a whole system that

954
00:34:17,280 --> 00:34:23,000
Maps uh numbers to letters and here uh

955
00:34:21,440 --> 00:34:24,639
as I alluded to verbally a moment ago is

956
00:34:23,000 --> 00:34:27,159
the pattern of zeros and ones via which

957
00:34:24,639 --> 00:34:29,679
you'd represent 65 and just quick check

958
00:34:27,159 --> 00:34:32,760
here we won't constantly do math uh

959
00:34:29,679 --> 00:34:38,280
one's place that's easy 2os Four's 8 16

960
00:34:32,760 --> 00:34:41,839
32 64's place so 64 + 1 gives us

961
00:34:38,280 --> 00:34:43,520
65 so once I do that how do I get to all

962
00:34:41,839 --> 00:34:46,040
of the others well it turns out a bunch

963
00:34:43,520 --> 00:34:48,280
of Americans years ago came up with this

964
00:34:46,040 --> 00:34:50,320
asky the American Standard code for

965
00:34:48,280 --> 00:34:52,159
information interchange now what does

966
00:34:50,320 --> 00:34:54,000
that mean well it's just an acronym

967
00:34:52,159 --> 00:34:56,879
describing what really you proposed a

968
00:34:54,000 --> 00:34:59,760
mapping between numbers and letters not

969
00:34:56,879 --> 00:35:03,279
not quite as simple as 012 starts at 65

970
00:34:59,760 --> 00:35:05,359
66 67 for capital letters but here are

971
00:35:03,280 --> 00:35:07,079
most of the letters in use today at

972
00:35:05,359 --> 00:35:09,359
least with this system so this is just a

973
00:35:07,079 --> 00:35:11,720
big chart from online and you'll see it

974
00:35:09,359 --> 00:35:16,400
in the middle of this chart here here's

975
00:35:11,720 --> 00:35:20,118
my 65a here's my 66 b c and let's see 72

976
00:35:16,400 --> 00:35:21,920
is H 73 is I and so forth so there's a

977
00:35:20,119 --> 00:35:23,560
mapping at least for English between all

978
00:35:21,920 --> 00:35:25,560
of these numbers and all of these

979
00:35:23,560 --> 00:35:28,440
letters and if we focus here those are

980
00:35:25,560 --> 00:35:30,839
the beginning of our up case alphabet so

981
00:35:28,440 --> 00:35:34,000
suppose then that today tomorrow you

982
00:35:30,839 --> 00:35:35,720
receive a text message from someone and

983
00:35:34,000 --> 00:35:37,480
underneath the hood now that you're a

984
00:35:35,720 --> 00:35:39,680
computer person you figure out a way to

985
00:35:37,480 --> 00:35:41,320
see what pattern of zeros and ones was

986
00:35:39,680 --> 00:35:43,078
sent in this case it's wireless as

987
00:35:41,320 --> 00:35:44,680
opposed to wired but it's still some

988
00:35:43,079 --> 00:35:46,240
pattern of zeros and ones and your phone

989
00:35:44,680 --> 00:35:48,279
is turning some switches of its own on

990
00:35:46,240 --> 00:35:50,919
and off to represent that message from a

991
00:35:48,280 --> 00:35:53,400
friend suppose that the three patterns

992
00:35:50,920 --> 00:35:55,240
you received were these three btes from

993
00:35:53,400 --> 00:35:57,319
left to right spelling out a

994
00:35:55,240 --> 00:35:59,560
three-letter word well if if we do out

995
00:35:57,319 --> 00:36:01,560
the math one's Place two's place and so

996
00:35:59,560 --> 00:36:03,720
forth I'll spoil it for you suppose that

997
00:36:01,560 --> 00:36:06,960
you received a text message that doesn't

998
00:36:03,720 --> 00:36:09,680
literally say 72 73 33 but you've

999
00:36:06,960 --> 00:36:11,680
received a pattern of 8 plus 8 plus 8 24

1000
00:36:09,680 --> 00:36:15,680
bits that if you do out the math

1001
00:36:11,680 --> 00:36:17,520
represent the decimal number 72 73 33

1002
00:36:15,680 --> 00:36:19,359
anyone recall what message you might

1003
00:36:17,520 --> 00:36:20,960
have received from the green and white

1004
00:36:19,359 --> 00:36:25,440
charts

1005
00:36:20,960 --> 00:36:29,440
yeah hi but yes hi is the message but

1006
00:36:25,440 --> 00:36:30,640
7273 gives H and I what's 33 any any

1007
00:36:29,440 --> 00:36:33,839
guesses to

1008
00:36:30,640 --> 00:36:35,240
33 yeah over here yeah so it's an

1009
00:36:33,839 --> 00:36:36,480
exclamation point how would you know

1010
00:36:35,240 --> 00:36:38,919
that well you really do need some kind

1011
00:36:36,480 --> 00:36:40,240
of cheat sheet AKA aski in this case and

1012
00:36:38,920 --> 00:36:41,720
if we look elsewhere let me highlight

1013
00:36:40,240 --> 00:36:44,279
the left of the chart you can see that

1014
00:36:41,720 --> 00:36:46,480
next to 33 in decimal is indeed the

1015
00:36:44,280 --> 00:36:48,640
exclamation point so back in the day a

1016
00:36:46,480 --> 00:36:50,760
bunch of humans got in a room decided

1017
00:36:48,640 --> 00:36:52,799
that hey when we start building PCS and

1018
00:36:50,760 --> 00:36:55,640
later Macs and phones we all just have

1019
00:36:52,800 --> 00:36:58,200
to agree on this form of representation

1020
00:36:55,640 --> 00:36:59,920
of letters of the the English alphabet

1021
00:36:58,200 --> 00:37:02,359
in this case we just need to agree on

1022
00:36:59,920 --> 00:37:05,520
this mapping but somewhat curiously

1023
00:37:02,359 --> 00:37:07,480
notice this it turns out that once you

1024
00:37:05,520 --> 00:37:12,200
paint yourself into this corner and

1025
00:37:07,480 --> 00:37:15,119
start using 65 for a 66 for B well how

1026
00:37:12,200 --> 00:37:16,960
do you represent 65 the number and 66

1027
00:37:15,119 --> 00:37:19,200
the number if you want to do math or use

1028
00:37:16,960 --> 00:37:22,680
Excel or something like that does anyone

1029
00:37:19,200 --> 00:37:27,319
kind of see the solution perhaps how do

1030
00:37:22,680 --> 00:37:29,480
you represent the number one in asy yeah

1031
00:37:27,319 --> 00:37:32,520
in the

1032
00:37:29,480 --> 00:37:34,079
middle yeah so this is getting a little

1033
00:37:32,520 --> 00:37:35,440
maybe Inception or something but you

1034
00:37:34,079 --> 00:37:37,000
could represent numbers with other

1035
00:37:35,440 --> 00:37:38,800
numbers and so if you want to represent

1036
00:37:37,000 --> 00:37:40,760
the number you and I know as one like

1037
00:37:38,800 --> 00:37:42,560
when you type it on your keyboard turns

1038
00:37:40,760 --> 00:37:45,240
out the computer stores that as the

1039
00:37:42,560 --> 00:37:47,319
decimal number 49 if you hit two on your

1040
00:37:45,240 --> 00:37:49,520
keyboard the computer is not storing two

1041
00:37:47,319 --> 00:37:53,319
per se it's storing the decimal number

1042
00:37:49,520 --> 00:37:55,079
50 now thankfully the the uh the uh the

1043
00:37:53,319 --> 00:37:56,720
the Paradox kind of stops there we just

1044
00:37:55,079 --> 00:37:58,480
have a mapping now of numbers to to

1045
00:37:56,720 --> 00:37:59,399
numbers but really at the end of the day

1046
00:37:58,480 --> 00:38:00,760
and you're going to learn this when we

1047
00:37:59,400 --> 00:38:03,160
start writing code in that other

1048
00:38:00,760 --> 00:38:04,960
language C next week it's just context

1049
00:38:03,160 --> 00:38:06,920
dependent at the end of the day inside

1050
00:38:04,960 --> 00:38:08,960
of your Mac PC and phone there's just

1051
00:38:06,920 --> 00:38:11,000
all of these permutations of bits all of

1052
00:38:08,960 --> 00:38:12,720
these patterns of zeros and ones and

1053
00:38:11,000 --> 00:38:14,720
generally speaking when you open up a

1054
00:38:12,720 --> 00:38:16,640
text message that you've received from

1055
00:38:14,720 --> 00:38:17,959
someone it's zeros and ones but

1056
00:38:16,640 --> 00:38:19,680
obviously if it's a text message the

1057
00:38:17,960 --> 00:38:21,680
whole point of text messages is to send

1058
00:38:19,680 --> 00:38:23,279
text and so those patterns of zeros and

1059
00:38:21,680 --> 00:38:25,680
ones by default will typically be

1060
00:38:23,280 --> 00:38:27,000
interpreted as letters of the alphabet

1061
00:38:25,680 --> 00:38:28,799
so you won't see zeros and ones you

1062
00:38:27,000 --> 00:38:30,280
won't see decimal numbers you'll see the

1063
00:38:28,800 --> 00:38:33,040
English message that your friend

1064
00:38:30,280 --> 00:38:35,599
intended by contrast if you open up

1065
00:38:33,040 --> 00:38:37,759
something like Excel that same pattern

1066
00:38:35,599 --> 00:38:41,800
of zeros and ones might indeed work out

1067
00:38:37,760 --> 00:38:43,760
to be 6 uh 72 73 33 you might see cells

1068
00:38:41,800 --> 00:38:45,640
in your spreadsheet with literally those

1069
00:38:43,760 --> 00:38:46,800
three numbers why because spreadsheets

1070
00:38:45,640 --> 00:38:49,480
are all about numbers and number

1071
00:38:46,800 --> 00:38:52,079
crunching and math uh in many cases if

1072
00:38:49,480 --> 00:38:53,640
by contrast you open up Photoshop and

1073
00:38:52,079 --> 00:38:56,480
try to look at that same pattern of

1074
00:38:53,640 --> 00:38:59,078
zeros and ones it's not going to be 727

1075
00:38:56,480 --> 00:39:00,800
73 33 it's not going to be zeros and

1076
00:38:59,079 --> 00:39:02,960
ones it's not going to be high it's

1077
00:39:00,800 --> 00:39:04,720
going to be some color of the rainbow

1078
00:39:02,960 --> 00:39:06,560
you're going to use those patterns of

1079
00:39:04,720 --> 00:39:09,040
zeros and ones it turns out too to

1080
00:39:06,560 --> 00:39:12,000
represent colors and indeed so long as

1081
00:39:09,040 --> 00:39:14,000
you and I just agree as humans long have

1082
00:39:12,000 --> 00:39:15,480
what these patterns are going to be all

1083
00:39:14,000 --> 00:39:17,680
of our systems many of our systems

1084
00:39:15,480 --> 00:39:19,520
nowadays are indeed interoperable but

1085
00:39:17,680 --> 00:39:22,440
I'm being very biased here and indeed

1086
00:39:19,520 --> 00:39:25,119
the a in ASI is very American Centric

1087
00:39:22,440 --> 00:39:27,160
what do you not see in this chart if you

1088
00:39:25,119 --> 00:39:29,000
speak any other language in English odds

1089
00:39:27,160 --> 00:39:31,399
are you're not seeing characters you

1090
00:39:29,000 --> 00:39:33,480
know and love and need every day to type

1091
00:39:31,400 --> 00:39:35,280
or send messages well there's a huge

1092
00:39:33,480 --> 00:39:37,079
character set that's not supported here

1093
00:39:35,280 --> 00:39:38,520
whether it's accented characters and a

1094
00:39:37,079 --> 00:39:40,280
lot of Asian alphabets you have many

1095
00:39:38,520 --> 00:39:42,440
more symbols than can fit even on this

1096
00:39:40,280 --> 00:39:44,000
screen here and so humans kind of

1097
00:39:42,440 --> 00:39:46,280
painted themselves into a corner early

1098
00:39:44,000 --> 00:39:48,400
on or really Americans did but on a

1099
00:39:46,280 --> 00:39:50,440
typical keyboard us English keyboard

1100
00:39:48,400 --> 00:39:53,040
yeah you have A's and B's and C's

1101
00:39:50,440 --> 00:39:55,400
uppercase and lowercase but you also

1102
00:39:53,040 --> 00:39:57,599
have accented characters here and

1103
00:39:55,400 --> 00:39:59,400
nowadays not sure if this is maybe

1104
00:39:57,599 --> 00:40:01,880
necessary but nowadays you have other

1105
00:39:59,400 --> 00:40:03,160
characters on your keyboard like these

1106
00:40:01,880 --> 00:40:04,839
and these are kind of a playful

1107
00:40:03,160 --> 00:40:07,040
incarnation of what's actually a

1108
00:40:04,839 --> 00:40:08,880
technical solution to this problem if I

1109
00:40:07,040 --> 00:40:11,079
claim for the moment that ASI

1110
00:40:08,880 --> 00:40:12,520
historically used seven bits to

1111
00:40:11,079 --> 00:40:14,119
represent letters and let's just round

1112
00:40:12,520 --> 00:40:17,160
that up to a bite eight bits to

1113
00:40:14,119 --> 00:40:19,480
represent letters aski can represent as

1114
00:40:17,160 --> 00:40:22,640
many as 255 or really

1115
00:40:19,480 --> 00:40:25,079
256 total characters why 256 well if you

1116
00:40:22,640 --> 00:40:26,680
have them all zero that's zero and the

1117
00:40:25,079 --> 00:40:29,319
highest number I claimed a moment AG go

1118
00:40:26,680 --> 00:40:31,200
was 255 so that's 256 total

1119
00:40:29,319 --> 00:40:33,160
possibilities that's not many letters

1120
00:40:31,200 --> 00:40:35,359
it's fine for English but not a lot of

1121
00:40:33,160 --> 00:40:37,359
human languages so what might the

1122
00:40:35,359 --> 00:40:40,480
intuitive solution be if you want to

1123
00:40:37,359 --> 00:40:43,078
represent accented characters um Asian

1124
00:40:40,480 --> 00:40:45,359
characters Emoji even like these which

1125
00:40:43,079 --> 00:40:48,520
are just keys on a keyboard

1126
00:40:45,359 --> 00:40:50,400
nowadays what's the intuitive solution

1127
00:40:48,520 --> 00:40:52,720
if a bite's too few

1128
00:40:50,400 --> 00:40:54,599
yeah yeah so add another digit just like

1129
00:40:52,720 --> 00:40:56,279
we had a fourth volunteer come on up to

1130
00:40:54,599 --> 00:40:57,839
give us a fourth bid let's just throw

1131
00:40:56,280 --> 00:40:59,560
throw Hardware at the problem and use a

1132
00:40:57,839 --> 00:41:01,640
few more bits so maybe instead of one

1133
00:40:59,560 --> 00:41:03,560
bite let's use two or heck let's use

1134
00:41:01,640 --> 00:41:04,879
three or four bytes even though it's

1135
00:41:03,560 --> 00:41:08,560
getting a little expensive we're going

1136
00:41:04,880 --> 00:41:10,040
from 8 to 16 to 24 or 32 bits that's how

1137
00:41:08,560 --> 00:41:11,839
computers do things these days and

1138
00:41:10,040 --> 00:41:13,200
thankfully we have so much memory inside

1139
00:41:11,839 --> 00:41:15,319
of our computers and phones we can

1140
00:41:13,200 --> 00:41:17,680
certainly spare a few to represent these

1141
00:41:15,319 --> 00:41:20,800
things and the solution then to aski is

1142
00:41:17,680 --> 00:41:24,279
what we'll call Unicode so Unicode is

1143
00:41:20,800 --> 00:41:26,520
also just a mapping of letters to num of

1144
00:41:24,280 --> 00:41:27,680
numbers to letters but in many many

1145
00:41:26,520 --> 00:41:30,240
different languages and indeed the

1146
00:41:27,680 --> 00:41:32,720
Unicode Consortium is a bunch of people

1147
00:41:30,240 --> 00:41:35,319
from all different companies and and uh

1148
00:41:32,720 --> 00:41:37,680
and a lot of different uh companies and

1149
00:41:35,319 --> 00:41:40,680
countries and cultures whose mission as

1150
00:41:37,680 --> 00:41:43,799
an organization is to capture digitally

1151
00:41:40,680 --> 00:41:45,799
all forms of human language in this case

1152
00:41:43,800 --> 00:41:47,520
and to ensure that especially smaller

1153
00:41:45,800 --> 00:41:49,000
demographics of humans speaking lesser

1154
00:41:47,520 --> 00:41:51,240
known languages are nonetheless

1155
00:41:49,000 --> 00:41:53,640
represented and preserve digitally using

1156
00:41:51,240 --> 00:41:55,879
some mapping of these zeros and ones it

1157
00:41:53,640 --> 00:41:58,440
turns out though if you start using 32

1158
00:41:55,880 --> 00:42:00,960
bits as many as 32 bits to represent

1159
00:41:58,440 --> 00:42:03,280
characters on a keyboard that's 4

1160
00:42:00,960 --> 00:42:05,319
billion possible permutations of zeros

1161
00:42:03,280 --> 00:42:06,880
and ones that's way more than we need

1162
00:42:05,319 --> 00:42:08,240
for most human languages so there's a

1163
00:42:06,880 --> 00:42:10,119
little bit of room in there for some of

1164
00:42:08,240 --> 00:42:12,319
those more playful things like those

1165
00:42:10,119 --> 00:42:14,040
Emoji so for instance suppose you got a

1166
00:42:12,319 --> 00:42:15,040
text message with this pattern of zeros

1167
00:42:14,040 --> 00:42:17,680
and

1168
00:42:15,040 --> 00:42:19,040
ones or if we do out the math suppose

1169
00:42:17,680 --> 00:42:21,919
you receive a text message that if you

1170
00:42:19,040 --> 00:42:25,759
do out the math in decimal is 4 B 36

1171
00:42:21,920 --> 00:42:27,119
m991 106 anyone know what emoji you're

1172
00:42:25,760 --> 00:42:30,359
looking

1173
00:42:27,119 --> 00:42:33,000
at this would be weird if you do

1174
00:42:30,359 --> 00:42:34,520
but what is this Well turns out that as

1175
00:42:33,000 --> 00:42:37,200
of this past year this is the most

1176
00:42:34,520 --> 00:42:40,640
popular Emoji to be sent uh by many

1177
00:42:37,200 --> 00:42:42,439
measures face with tears of joy so that

1178
00:42:40,640 --> 00:42:44,118
is the pattern that a bunch of humans in

1179
00:42:42,440 --> 00:42:46,760
the Unicode Consortium decided would

1180
00:42:44,119 --> 00:42:48,200
represent this but you'll notice some

1181
00:42:46,760 --> 00:42:50,480
many of you might have iPhones some of

1182
00:42:48,200 --> 00:42:52,040
you might have Android devices too and

1183
00:42:50,480 --> 00:42:53,520
sometimes these don't actually look

1184
00:42:52,040 --> 00:42:55,839
quite the same this happens to be the

1185
00:42:53,520 --> 00:42:59,480
current version of face with tears of

1186
00:42:55,839 --> 00:43:01,440
joy on iOS on Android it tends to look a

1187
00:42:59,480 --> 00:43:04,000
little something more like this and

1188
00:43:01,440 --> 00:43:05,480
here's kind of a curiosity even though

1189
00:43:04,000 --> 00:43:07,720
you and I look at these things and they

1190
00:43:05,480 --> 00:43:09,680
look like images they're not images

1191
00:43:07,720 --> 00:43:12,839
they're characters at least as we've

1192
00:43:09,680 --> 00:43:15,440
defined them now in Unicode and a IOS

1193
00:43:12,839 --> 00:43:18,240
and Android and Windows and Facebook and

1194
00:43:15,440 --> 00:43:19,880
other companies and uh apps nowadays

1195
00:43:18,240 --> 00:43:21,720
really just have different fonts if you

1196
00:43:19,880 --> 00:43:23,800
will so just like fonts with English and

1197
00:43:21,720 --> 00:43:26,839
other languages can give you different F

1198
00:43:23,800 --> 00:43:28,480
characters with seraps or not emoji are

1199
00:43:26,839 --> 00:43:30,240
themselves yes drawings that someone

1200
00:43:28,480 --> 00:43:32,119
made but they're really just a font and

1201
00:43:30,240 --> 00:43:34,118
so that same pattern of zeros and ones

1202
00:43:32,119 --> 00:43:36,079
might just render slightly differently

1203
00:43:34,119 --> 00:43:37,920
on someone's phone or another if you've

1204
00:43:36,079 --> 00:43:39,960
ever gotten like an icon on your phone

1205
00:43:37,920 --> 00:43:41,599
that's broken and you've been sent an

1206
00:43:39,960 --> 00:43:43,680
emoji but it's like a square or

1207
00:43:41,599 --> 00:43:45,200
something arbitrary and not sensical

1208
00:43:43,680 --> 00:43:46,720
sensible it might just mean that you

1209
00:43:45,200 --> 00:43:49,078
have not updated to the latest version

1210
00:43:46,720 --> 00:43:51,040
of iOS or Android which just updates the

1211
00:43:49,079 --> 00:43:53,200
font of supported Emoji because those

1212
00:43:51,040 --> 00:43:55,680
Folks at Unicode pretty much every year

1213
00:43:53,200 --> 00:43:57,919
nowadays are adding more and more Emoji

1214
00:43:55,680 --> 00:43:59,359
to that that particular character said

1215
00:43:57,920 --> 00:44:01,079
now I went down the rabbit hole figuring

1216
00:43:59,359 --> 00:44:03,400
out the other day just which are the

1217
00:44:01,079 --> 00:44:05,319
most popular Emoji these days on Twitter

1218
00:44:03,400 --> 00:44:08,960
specifically this past year the most

1219
00:44:05,319 --> 00:44:11,200
popular Emoji by contrast uh was loudly

1220
00:44:08,960 --> 00:44:13,920
crying face I don't know if that says

1221
00:44:11,200 --> 00:44:15,480
more about 20121 or about Twitter but

1222
00:44:13,920 --> 00:44:18,200
you'll see different Trends certainly in

1223
00:44:15,480 --> 00:44:20,440
how these are used but even humans

1224
00:44:18,200 --> 00:44:22,480
themselves didn't necessarily think two

1225
00:44:20,440 --> 00:44:24,880
steps ahead and now a lot of the Emoji

1226
00:44:22,480 --> 00:44:26,280
are the sort of default yellow color but

1227
00:44:24,880 --> 00:44:27,640
there's a lot of emoji that aren't sort

1228
00:44:26,280 --> 00:44:29,240
of these cartoon characters but they're

1229
00:44:27,640 --> 00:44:31,920
meant to represent humans in various

1230
00:44:29,240 --> 00:44:33,558
professions or gestures or the like and

1231
00:44:31,920 --> 00:44:36,000
nowadays too you've probably noticed on

1232
00:44:33,559 --> 00:44:37,839
your phone and Macs and PCs there are

1233
00:44:36,000 --> 00:44:40,599
different skin tones that you can assign

1234
00:44:37,839 --> 00:44:42,520
to certain emojis if it's supported by

1235
00:44:40,599 --> 00:44:44,440
the company and by Unicode you can

1236
00:44:42,520 --> 00:44:45,680
actually like touch and hold on a

1237
00:44:44,440 --> 00:44:47,200
certain emoji and then you can choose

1238
00:44:45,680 --> 00:44:48,879
the appropriate skin tone to represent

1239
00:44:47,200 --> 00:44:50,919
yourself or someone else and that then

1240
00:44:48,880 --> 00:44:53,119
modifies the display well let's just

1241
00:44:50,920 --> 00:44:54,960
think for a moment here how did Apple

1242
00:44:53,119 --> 00:44:58,040
and Google and Microsoft and others go

1243
00:44:54,960 --> 00:45:00,040
about implementing support for emoji

1244
00:44:58,040 --> 00:45:03,400
with different skin tones how could you

1245
00:45:00,040 --> 00:45:06,160
do this if you want to represent some

1246
00:45:03,400 --> 00:45:07,800
smiling Emoji but in five in this case

1247
00:45:06,160 --> 00:45:09,799
different skin tones you could come up

1248
00:45:07,800 --> 00:45:12,160
with what five different patterns that

1249
00:45:09,800 --> 00:45:14,240
are identical structurally except for

1250
00:45:12,160 --> 00:45:16,440
the skin tone used in places in that

1251
00:45:14,240 --> 00:45:18,279
image but that's a little inefficient

1252
00:45:16,440 --> 00:45:20,000
right to kind of just do copy paste

1253
00:45:18,280 --> 00:45:22,000
paste paste paste and like change the

1254
00:45:20,000 --> 00:45:24,079
color in Photoshop if you will that's

1255
00:45:22,000 --> 00:45:27,319
going to use more bits more information

1256
00:45:24,079 --> 00:45:28,839
than you might need to how else if you

1257
00:45:27,319 --> 00:45:30,440
now start to think a little bit more

1258
00:45:28,839 --> 00:45:31,759
like a computer scientist if at the end

1259
00:45:30,440 --> 00:45:34,200
of the day all you have are zeros and

1260
00:45:31,760 --> 00:45:35,839
ones how else could you implement skin

1261
00:45:34,200 --> 00:45:38,399
tones might you think

1262
00:45:35,839 --> 00:45:39,720
yeah okay so RGB and we'll come to that

1263
00:45:38,400 --> 00:45:42,240
in just a moment that stands for red

1264
00:45:39,720 --> 00:45:44,720
green blue that's one way in this case

1265
00:45:42,240 --> 00:45:47,359
though I'm seeking an alternative to

1266
00:45:44,720 --> 00:45:48,879
just using five different patterns of

1267
00:45:47,359 --> 00:45:51,000
zeros and ones to represent the same

1268
00:45:48,880 --> 00:45:52,800
Emoji but different skin tones so not

1269
00:45:51,000 --> 00:45:56,160
quite RGB

1270
00:45:52,800 --> 00:45:58,079
yeah okay so store one copy of the Emoji

1271
00:45:56,160 --> 00:46:00,200
and then store different variants of the

1272
00:45:58,079 --> 00:46:01,720
color that you want to assign to that

1273
00:46:00,200 --> 00:46:04,359
emoji yeah so this is actually an

1274
00:46:01,720 --> 00:46:06,799
example of do you want to

1275
00:46:04,359 --> 00:46:08,000
elaborate okay so you can use a loop to

1276
00:46:06,800 --> 00:46:09,640
actually output these things more on

1277
00:46:08,000 --> 00:46:11,440
that in a moment let me go down this

1278
00:46:09,640 --> 00:46:13,520
this road for just a moment this would

1279
00:46:11,440 --> 00:46:16,319
be in some sense sort of a a better

1280
00:46:13,520 --> 00:46:18,520
design if you will uh but why yeah

1281
00:46:16,319 --> 00:46:20,040
filter okay so filter if we think sort

1282
00:46:18,520 --> 00:46:21,559
of in the Instagram sense you can sort

1283
00:46:20,040 --> 00:46:24,520
of change the color of something and

1284
00:46:21,559 --> 00:46:26,920
that could be related here too could it

1285
00:46:24,520 --> 00:46:28,359
be oh interesting so maybe it could be

1286
00:46:26,920 --> 00:46:29,480
just a completely different font and you

1287
00:46:28,359 --> 00:46:31,240
have five different fonts that are

1288
00:46:29,480 --> 00:46:32,839
almost identical except for the various

1289
00:46:31,240 --> 00:46:34,959
interpretations of skin tone for those

1290
00:46:32,839 --> 00:46:37,078
same Emoji let me spoil I think if we go

1291
00:46:34,960 --> 00:46:39,680
down this one particular Road the way

1292
00:46:37,079 --> 00:46:42,920
the uh the Unicode folks decided to do

1293
00:46:39,680 --> 00:46:45,240
this some years ago were the first uh

1294
00:46:42,920 --> 00:46:47,119
bite or bites that you receive via text

1295
00:46:45,240 --> 00:46:48,680
or email just represent like the

1296
00:46:47,119 --> 00:46:50,520
structure of the Emoji the default

1297
00:46:48,680 --> 00:46:52,520
Yellow Version thereof but if it's

1298
00:46:50,520 --> 00:46:54,280
immediately followed by a certain

1299
00:46:52,520 --> 00:46:56,599
pattern of bits that these humans

1300
00:46:54,280 --> 00:46:59,160
standardize to represent each of these

1301
00:46:56,599 --> 00:47:01,960
different shades of skin tone then the

1302
00:46:59,160 --> 00:47:03,960
phone the Mac the PC will change that

1303
00:47:01,960 --> 00:47:06,280
default color yellow in most cases to

1304
00:47:03,960 --> 00:47:08,640
whatever the more apt human tone is so

1305
00:47:06,280 --> 00:47:10,960
you just use twice as many bits but you

1306
00:47:08,640 --> 00:47:13,118
don't use five times as many bits so

1307
00:47:10,960 --> 00:47:15,839
what do I mean you don't have uh five

1308
00:47:13,119 --> 00:47:19,119
completely distinct patterns per se uh

1309
00:47:15,839 --> 00:47:21,720
for each of these possible variants you

1310
00:47:19,119 --> 00:47:25,480
have a representation of just the Emoji

1311
00:47:21,720 --> 00:47:27,399
itself structurally and then uh reusable

1312
00:47:25,480 --> 00:47:30,440
pattern patterns for those five skin

1313
00:47:27,400 --> 00:47:32,000
tones un um unfortunately that wasn't

1314
00:47:30,440 --> 00:47:33,800
quite versatile enough for other

1315
00:47:32,000 --> 00:47:35,400
features that were in the pipeline and

1316
00:47:33,800 --> 00:47:38,240
nowadays too and there's a double

1317
00:47:35,400 --> 00:47:40,880
meaning now to representation emojis had

1318
00:47:38,240 --> 00:47:42,279
tended to focus on certain professions

1319
00:47:40,880 --> 00:47:43,599
and early on too were certain

1320
00:47:42,280 --> 00:47:45,800
professions associated with certain

1321
00:47:43,599 --> 00:47:47,760
genders and vice versa and you couldn't

1322
00:47:45,800 --> 00:47:49,040
necessarily be one gender or another in

1323
00:47:47,760 --> 00:47:50,359
a certain profession or another there

1324
00:47:49,040 --> 00:47:51,920
were these combinatorics that just

1325
00:47:50,359 --> 00:47:53,880
weren't possible but nowadays as you

1326
00:47:51,920 --> 00:47:55,760
might have seen you can have couples in

1327
00:47:53,880 --> 00:47:57,480
love for instance that actually look a a

1328
00:47:55,760 --> 00:47:58,920
little more like three emojis but just

1329
00:47:57,480 --> 00:48:01,000
kind of combined into one and indeed

1330
00:47:58,920 --> 00:48:02,960
this is just one key press on your phone

1331
00:48:01,000 --> 00:48:05,440
and you can combine different emoji on

1332
00:48:02,960 --> 00:48:07,359
the left and in the right with the Emoji

1333
00:48:05,440 --> 00:48:09,200
in the middle and so it turns out how

1334
00:48:07,359 --> 00:48:12,799
computers nowadays represent these

1335
00:48:09,200 --> 00:48:14,680
patterns are one set of bits for the

1336
00:48:12,800 --> 00:48:16,440
character on the left one set of bits

1337
00:48:14,680 --> 00:48:18,359
for a character on the right one set of

1338
00:48:16,440 --> 00:48:20,960
bits for whatever Emoji you want in the

1339
00:48:18,359 --> 00:48:23,680
middle and then you assemble more

1340
00:48:20,960 --> 00:48:25,680
complicated compositions of emoji by

1341
00:48:23,680 --> 00:48:27,919
just reusing those same patterns and

1342
00:48:25,680 --> 00:48:29,440
bits and bits Emoji doesn't the Unicode

1343
00:48:27,920 --> 00:48:32,079
folks don't have to come up with a whole

1344
00:48:29,440 --> 00:48:34,520
new representation for some very

1345
00:48:32,079 --> 00:48:37,440
specific Incarnation they can create one

1346
00:48:34,520 --> 00:48:38,599
for person for male for female for other

1347
00:48:37,440 --> 00:48:41,160
uh characters that you might want to

1348
00:48:38,599 --> 00:48:43,319
display and reuse those same patterns of

1349
00:48:41,160 --> 00:48:44,640
zeros and ones and so here you see sort

1350
00:48:43,319 --> 00:48:46,200
of the imperfection of or lack of

1351
00:48:44,640 --> 00:48:47,720
foresight of humans for building a

1352
00:48:46,200 --> 00:48:49,799
system early on that was entirely

1353
00:48:47,720 --> 00:48:51,640
American Centric no characters Emoji or

1354
00:48:49,799 --> 00:48:53,400
the like that's evolved too and so

1355
00:48:51,640 --> 00:48:56,160
that's an important detail in Computing

1356
00:48:53,400 --> 00:48:57,640
nowadays um it too is evolved in and the

1357
00:48:56,160 --> 00:49:00,240
languages you're about to learn in the

1358
00:48:57,640 --> 00:49:01,839
coming days those twoo are evolving as

1359
00:49:00,240 --> 00:49:03,919
well and new features are getting added

1360
00:49:01,839 --> 00:49:05,359
and even programming languages have

1361
00:49:03,920 --> 00:49:06,799
version numbers you might have a

1362
00:49:05,359 --> 00:49:08,839
different version of an app on your

1363
00:49:06,799 --> 00:49:11,200
phone programming languages too have

1364
00:49:08,839 --> 00:49:13,000
different versions as well questions

1365
00:49:11,200 --> 00:49:15,879
then thus far and how information is

1366
00:49:13,000 --> 00:49:18,880
represented using asy or

1367
00:49:15,880 --> 00:49:21,559
Unicode or anything in between yeah so

1368
00:49:18,880 --> 00:49:26,240
you can use a string of a good question

1369
00:49:21,559 --> 00:49:28,319
so to recap why can't you just um well

1370
00:49:26,240 --> 00:49:30,439
let me summarize that as why can't you

1371
00:49:28,319 --> 00:49:32,000
similarly use different patterns to

1372
00:49:30,440 --> 00:49:33,599
change the context of what these

1373
00:49:32,000 --> 00:49:36,119
patterns of bits represent whether it's

1374
00:49:33,599 --> 00:49:37,680
a number or a letter or a graphic in

1375
00:49:36,119 --> 00:49:39,319
actuality that's kind of what's

1376
00:49:37,680 --> 00:49:41,240
Happening underneath the hood it's not

1377
00:49:39,319 --> 00:49:42,799
standardized in quite the same way but

1378
00:49:41,240 --> 00:49:44,399
starting next week when we transition

1379
00:49:42,799 --> 00:49:46,359
from scratch to C you'll learn about

1380
00:49:44,400 --> 00:49:48,200
types data types where the onus

1381
00:49:46,359 --> 00:49:50,720
initially is going to be on you the

1382
00:49:48,200 --> 00:49:51,960
programmer to tell the program whether

1383
00:49:50,720 --> 00:49:54,720
or not this pattern of bit should be

1384
00:49:51,960 --> 00:49:57,400
interpreted as a number or as a letter

1385
00:49:54,720 --> 00:49:58,598
or as a color or something else nowadays

1386
00:49:57,400 --> 00:50:00,640
though in toward the end of the semester

1387
00:49:58,599 --> 00:50:02,760
you'll use languages like python where

1388
00:50:00,640 --> 00:50:04,759
the computer just figures it out for you

1389
00:50:02,760 --> 00:50:07,119
by context which makes it even easier

1390
00:50:04,760 --> 00:50:10,680
and faster to program as well other

1391
00:50:07,119 --> 00:50:12,880
questions on Unicode asky or the

1392
00:50:10,680 --> 00:50:14,598
like all right well how about just a few

1393
00:50:12,880 --> 00:50:16,520
other forms of information RGB was

1394
00:50:14,599 --> 00:50:18,720
called out earlier red green blue How do

1395
00:50:16,520 --> 00:50:21,160
images get represented in computers well

1396
00:50:18,720 --> 00:50:22,919
in fact it's typically an assembly of

1397
00:50:21,160 --> 00:50:24,399
some amount of red some amount of green

1398
00:50:22,920 --> 00:50:25,880
some amount of blue but there are other

1399
00:50:24,400 --> 00:50:28,000
representations if you're a graphic

1400
00:50:25,880 --> 00:50:29,920
designer you might know them but RGB is

1401
00:50:28,000 --> 00:50:31,760
still pretty common what does this mean

1402
00:50:29,920 --> 00:50:34,440
this means to represent every dot on

1403
00:50:31,760 --> 00:50:37,359
your phone or every dot on your TV or

1404
00:50:34,440 --> 00:50:38,760
your laptop or desktop there is a number

1405
00:50:37,359 --> 00:50:40,440
representing how much red that dot

1406
00:50:38,760 --> 00:50:42,079
should show a number representing how

1407
00:50:40,440 --> 00:50:44,920
much green and a number representing how

1408
00:50:42,079 --> 00:50:47,520
much blue it should show red green blue

1409
00:50:44,920 --> 00:50:49,799
respectively so for instance if a DOT on

1410
00:50:47,520 --> 00:50:52,400
your screen were using these three

1411
00:50:49,799 --> 00:50:56,119
numbers these three values or bytes 72

1412
00:50:52,400 --> 00:50:58,680
73 33 in a text message email that would

1413
00:50:56,119 --> 00:51:01,119
be interpreted as I claimed high but in

1414
00:50:58,680 --> 00:51:02,919
Photoshop or in some graphical program

1415
00:51:01,119 --> 00:51:05,400
that same pattern would be repres would

1416
00:51:02,920 --> 00:51:07,480
be interpreted as let's call it a medium

1417
00:51:05,400 --> 00:51:09,440
amount of red a medium amount of green

1418
00:51:07,480 --> 00:51:11,400
and a little bit of blue and why medium

1419
00:51:09,440 --> 00:51:13,400
and little turns out that each of these

1420
00:51:11,400 --> 00:51:15,240
are bites the smallest value you can

1421
00:51:13,400 --> 00:51:16,680
have in a bite we said is zero the

1422
00:51:15,240 --> 00:51:19,000
largest value you can have in a bite is

1423
00:51:16,680 --> 00:51:20,680
255 so I'm just kind of spitballing here

1424
00:51:19,000 --> 00:51:23,760
this is like medium medium and a low

1425
00:51:20,680 --> 00:51:25,960
amount of red green blue uh specifically

1426
00:51:23,760 --> 00:51:28,000
those three colors um like uh

1427
00:51:25,960 --> 00:51:30,760
wavelengths of light are combined in

1428
00:51:28,000 --> 00:51:32,720
such a way that you would have this dot

1429
00:51:30,760 --> 00:51:35,839
on the screen a sort of murky shade of

1430
00:51:32,720 --> 00:51:38,040
yellow or brown that is how a computer

1431
00:51:35,839 --> 00:51:40,200
would store precisely that color and in

1432
00:51:38,040 --> 00:51:42,520
fact we've seen this color when you type

1433
00:51:40,200 --> 00:51:44,000
in face with tears of joy generally on

1434
00:51:42,520 --> 00:51:47,079
your screen it looks like this typically

1435
00:51:44,000 --> 00:51:49,440
much smaller but let's zoom in or let's

1436
00:51:47,079 --> 00:51:52,160
zoom in a little more what do you

1437
00:51:49,440 --> 00:51:54,280
starting to see if you know the term so

1438
00:51:52,160 --> 00:51:56,160
pixels it's getting very pixelated a

1439
00:51:54,280 --> 00:51:57,720
pixel is just a DOT on the screen and if

1440
00:51:56,160 --> 00:51:59,759
you really zoom in on it you can

1441
00:51:57,720 --> 00:52:02,799
literally see all of the dots that

1442
00:51:59,760 --> 00:52:04,680
compose in emoji in this case on iOS in

1443
00:52:02,799 --> 00:52:06,160
the font that Apple's using to represent

1444
00:52:04,680 --> 00:52:08,279
this particular pattern of zeros and

1445
00:52:06,160 --> 00:52:09,960
ones so one of those yellow dots and

1446
00:52:08,280 --> 00:52:12,200
there's many of them all that kind of

1447
00:52:09,960 --> 00:52:15,200
blend together here each dot on the

1448
00:52:12,200 --> 00:52:17,200
screen I claim is three bytes how much

1449
00:52:15,200 --> 00:52:18,598
red green blue for this dot how much red

1450
00:52:17,200 --> 00:52:19,960
green blue for this dot how much red

1451
00:52:18,599 --> 00:52:21,319
green blue for this Dot and you'll

1452
00:52:19,960 --> 00:52:23,280
notice too that when it gets to be sort

1453
00:52:21,319 --> 00:52:26,359
of brownish here the dots really stand

1454
00:52:23,280 --> 00:52:29,119
out the three values the three bytes AKA

1455
00:52:26,359 --> 00:52:31,119
24 bits are just slightly different and

1456
00:52:29,119 --> 00:52:33,680
so underneath the hood this is why

1457
00:52:31,119 --> 00:52:35,880
images photographs that you take or GIFs

1458
00:52:33,680 --> 00:52:38,118
that you download get so darn big

1459
00:52:35,880 --> 00:52:40,920
potentially because you have a number

1460
00:52:38,119 --> 00:52:42,799
representing every dot on the screen

1461
00:52:40,920 --> 00:52:44,839
well if this I claim is indeed how

1462
00:52:42,799 --> 00:52:47,200
images are typically represented using

1463
00:52:44,839 --> 00:52:49,319
pattern of bits that are assigned to

1464
00:52:47,200 --> 00:52:52,319
some amount of red green or blue how do

1465
00:52:49,319 --> 00:52:54,240
you get video what is a video if at the

1466
00:52:52,319 --> 00:52:55,759
end of the day all we have are zeros and

1467
00:52:54,240 --> 00:52:58,879
ones

1468
00:52:55,760 --> 00:53:01,359
what's a video perhaps yeah oh let's go

1469
00:52:58,880 --> 00:53:03,599
here weighing back yeah pixel's really

1470
00:53:01,359 --> 00:53:04,920
changing values over time and do you

1471
00:53:03,599 --> 00:53:07,400
want to confirm or deny the hand that

1472
00:53:04,920 --> 00:53:09,599
went up here yeah or equivalently a

1473
00:53:07,400 --> 00:53:11,200
sequence of images that over time are

1474
00:53:09,599 --> 00:53:13,079
changing on the screen so both of those

1475
00:53:11,200 --> 00:53:14,680
are valid interpretations and you know

1476
00:53:13,079 --> 00:53:16,319
just for fun if you uh grew up with

1477
00:53:14,680 --> 00:53:18,399
these sort of picture books you might

1478
00:53:16,319 --> 00:53:20,590
remember a little something like this if

1479
00:53:18,400 --> 00:53:24,160
we could dim the

1480
00:53:20,590 --> 00:53:25,680
[Music]

1481
00:53:24,160 --> 00:53:40,640
lights

1482
00:53:25,680 --> 00:53:42,520
[Music]

1483
00:53:40,640 --> 00:53:44,520
so that's sort of the old school analog

1484
00:53:42,520 --> 00:53:47,040
way to implement a video in the sense

1485
00:53:44,520 --> 00:53:49,240
that um that artist wrote out like

1486
00:53:47,040 --> 00:53:51,440
hundreds of pieces of paper with almost

1487
00:53:49,240 --> 00:53:53,839
identical images but where the ink from

1488
00:53:51,440 --> 00:53:55,520
their pencil or pen was slightly moving

1489
00:53:53,839 --> 00:53:57,040
and if you digitize that such that each

1490
00:53:55,520 --> 00:53:58,839
of those Strokes are represented with

1491
00:53:57,040 --> 00:54:00,680
dots instead that's really what you're

1492
00:53:58,839 --> 00:54:02,759
seeing as a sequence of all these images

1493
00:54:00,680 --> 00:54:04,399
flying across the screen and if we dive

1494
00:54:02,760 --> 00:54:06,280
into the the real world if you've ever

1495
00:54:04,400 --> 00:54:09,359
watched a film a Hollywood movie is

1496
00:54:06,280 --> 00:54:12,200
typically 24 FPS frames per second that

1497
00:54:09,359 --> 00:54:14,400
really means you're seeing 24 images per

1498
00:54:12,200 --> 00:54:16,720
second or on TV or in soap operas it's

1499
00:54:14,400 --> 00:54:18,240
often 30 frames per second that makes

1500
00:54:16,720 --> 00:54:21,000
things look a little more smooth so it's

1501
00:54:18,240 --> 00:54:22,919
not actual motion picture if you will it

1502
00:54:21,000 --> 00:54:25,160
sequences of pictures and your brain and

1503
00:54:22,920 --> 00:54:26,440
mind are kind of interpolating that oh

1504
00:54:25,160 --> 00:54:28,359
this is smooth movement even though

1505
00:54:26,440 --> 00:54:30,359
we're just seeing a lot of pictures

1506
00:54:28,359 --> 00:54:31,720
really fast now that gets really big and

1507
00:54:30,359 --> 00:54:33,640
we'll talk later in the semester how you

1508
00:54:31,720 --> 00:54:35,439
can compress information so that you're

1509
00:54:33,640 --> 00:54:36,720
not using way more bits than you

1510
00:54:35,440 --> 00:54:38,440
actually need to and there's fancy

1511
00:54:36,720 --> 00:54:40,000
algorithms that folks have developed but

1512
00:54:38,440 --> 00:54:42,599
at the end of the day that's really all

1513
00:54:40,000 --> 00:54:44,240
a video might be is a sequence of images

1514
00:54:42,599 --> 00:54:45,920
conversely if you want to represent the

1515
00:54:44,240 --> 00:54:48,240
music that accompanies that or something

1516
00:54:45,920 --> 00:54:50,760
else if any of you play an instrument

1517
00:54:48,240 --> 00:54:53,160
and can read sheet music How Could You

1518
00:54:50,760 --> 00:54:56,319
digitize this like how could you

1519
00:54:53,160 --> 00:54:58,240
represent musical notes in a computer

1520
00:54:56,319 --> 00:54:59,920
you and I hear them when we play files

1521
00:54:58,240 --> 00:55:01,160
but what's really going on underneath

1522
00:54:59,920 --> 00:55:05,839
the

1523
00:55:01,160 --> 00:55:09,319
hood any any musicians piano players

1524
00:55:05,839 --> 00:55:11,640
anyone yeah Val okay so Hertz value so

1525
00:55:09,319 --> 00:55:12,960
some frequency so sound is some

1526
00:55:11,640 --> 00:55:14,440
frequency and it's kind of hitting your

1527
00:55:12,960 --> 00:55:16,440
eardrum and that's what makes it sound

1528
00:55:14,440 --> 00:55:17,960
low or high or somewhere in between so

1529
00:55:16,440 --> 00:55:19,960
maybe we could assign just like there's

1530
00:55:17,960 --> 00:55:21,680
letters a through G here maybe we could

1531
00:55:19,960 --> 00:55:23,119
assign specific frequency values which

1532
00:55:21,680 --> 00:55:24,440
are just going to be numbers measured in

1533
00:55:23,119 --> 00:55:26,039
something called Hertz something per

1534
00:55:24,440 --> 00:55:27,559
second and maybe we could have a few

1535
00:55:26,039 --> 00:55:30,079
other numbers for each of these notes

1536
00:55:27,559 --> 00:55:32,480
not just the note or the frequency maybe

1537
00:55:30,079 --> 00:55:34,520
we could represent the loudness of it

1538
00:55:32,480 --> 00:55:36,240
like how hard or how softly a human

1539
00:55:34,520 --> 00:55:38,440
might equivalently press it maybe a

1540
00:55:36,240 --> 00:55:40,479
third number like duration like how long

1541
00:55:38,440 --> 00:55:42,480
is their finger on the keyboard so you

1542
00:55:40,480 --> 00:55:43,799
could imagine quantizing something like

1543
00:55:42,480 --> 00:55:45,799
music that in the real world is

1544
00:55:43,799 --> 00:55:48,200
perfectly continuous as something more

1545
00:55:45,799 --> 00:55:50,440
discret by representing each note over

1546
00:55:48,200 --> 00:55:51,598
time as just some sequence of values and

1547
00:55:50,440 --> 00:55:55,319
there's so many different ways to do

1548
00:55:51,599 --> 00:55:57,359
this midi if you've heard uh MP3s AAC I

1549
00:55:55,319 --> 00:55:59,319
mean almost all the file extensions you

1550
00:55:57,359 --> 00:56:01,598
see on your Mac or PC if you see them at

1551
00:55:59,319 --> 00:56:03,440
all ultimately just mean there's a

1552
00:56:01,599 --> 00:56:07,400
different form of representation for in

1553
00:56:03,440 --> 00:56:09,480
this case something like sound so let me

1554
00:56:07,400 --> 00:56:11,039
just stipulate there are these and many

1555
00:56:09,480 --> 00:56:13,000
more ways to represent inputs and

1556
00:56:11,039 --> 00:56:14,520
outputs and thankfully humans have

1557
00:56:13,000 --> 00:56:16,640
standardized a lot of this they don't

1558
00:56:14,520 --> 00:56:18,720
always dis agree and this is why we have

1559
00:56:16,640 --> 00:56:20,279
different file formats for Apple numbers

1560
00:56:18,720 --> 00:56:21,439
and Microsoft Excel and Google

1561
00:56:20,280 --> 00:56:23,280
spreadsheets and sort of stupid

1562
00:56:21,440 --> 00:56:24,440
incompatibilities like that but

1563
00:56:23,280 --> 00:56:26,240
generally speaking humans have

1564
00:56:24,440 --> 00:56:28,799
standardized how we represent the inputs

1565
00:56:26,240 --> 00:56:31,000
and outputs to and from problems but

1566
00:56:28,799 --> 00:56:33,839
let's now focus on this black box so to

1567
00:56:31,000 --> 00:56:35,720
speak in the middle this abstraction so

1568
00:56:33,839 --> 00:56:37,078
abstraction is technically a term that

1569
00:56:35,720 --> 00:56:38,439
you'll see all over the place in

1570
00:56:37,079 --> 00:56:40,839
computer science and really problem

1571
00:56:38,440 --> 00:56:43,200
solving that just refers to the

1572
00:56:40,839 --> 00:56:44,839
simplification of something so that you

1573
00:56:43,200 --> 00:56:46,839
don't focus on the lower level

1574
00:56:44,839 --> 00:56:49,160
implementation details you really just

1575
00:56:46,839 --> 00:56:52,240
focus on the high level goals or the

1576
00:56:49,160 --> 00:56:53,598
process itself uh Therefore your car if

1577
00:56:52,240 --> 00:56:55,799
youve uh if you have a license and have

1578
00:56:53,599 --> 00:56:57,079
driven or have been in a car a car so

1579
00:56:55,799 --> 00:56:58,839
far as you're concerned is probably an

1580
00:56:57,079 --> 00:57:00,760
abstraction most of us if you're like me

1581
00:56:58,839 --> 00:57:02,440
probably don't really know or care how

1582
00:57:00,760 --> 00:57:04,520
the engine works and all the parts that

1583
00:57:02,440 --> 00:57:06,200
are moving to you it's just a way of

1584
00:57:04,520 --> 00:57:07,880
getting from point A to point B it's an

1585
00:57:06,200 --> 00:57:10,118
abstraction but someone hopefully the

1586
00:57:07,880 --> 00:57:12,359
mechanic does know those lower level

1587
00:57:10,119 --> 00:57:13,720
implementation details if you had to

1588
00:57:12,359 --> 00:57:15,680
understand how a car works every time

1589
00:57:13,720 --> 00:57:17,038
you want to go to school or to the store

1590
00:57:15,680 --> 00:57:18,720
it's probably going to be a pretty slow

1591
00:57:17,039 --> 00:57:20,760
process you just want to think and

1592
00:57:18,720 --> 00:57:22,200
operate at this higher level of

1593
00:57:20,760 --> 00:57:24,000
abstraction and we're going to do this

1594
00:57:22,200 --> 00:57:25,319
all the time when writing code and

1595
00:57:24,000 --> 00:57:27,559
solving problems

1596
00:57:25,319 --> 00:57:29,799
so what then is in this black box this

1597
00:57:27,559 --> 00:57:31,160
abstraction at the moment well generally

1598
00:57:29,799 --> 00:57:33,160
it's what a computer scientist would

1599
00:57:31,160 --> 00:57:35,160
call an algorithm stepbystep

1600
00:57:33,160 --> 00:57:37,078
instructions for solving some problem

1601
00:57:35,160 --> 00:57:39,319
now let's consider the implementation

1602
00:57:37,079 --> 00:57:41,720
details that is to say how you might

1603
00:57:39,319 --> 00:57:43,920
solve certain problems and let's take a

1604
00:57:41,720 --> 00:57:46,240
a sort of old school example but in

1605
00:57:43,920 --> 00:57:48,440
modern form this icon if you have an

1606
00:57:46,240 --> 00:57:49,799
iPhone is of course for your contacts

1607
00:57:48,440 --> 00:57:51,640
application and if you've got a whole

1608
00:57:49,799 --> 00:57:53,280
bunch of family members or friends or

1609
00:57:51,640 --> 00:57:54,920
colleagues in your phone book you have

1610
00:57:53,280 --> 00:57:56,680
some kind of contacts pictured here here

1611
00:57:54,920 --> 00:57:58,520
and it's alphabetized typically by first

1612
00:57:56,680 --> 00:57:59,919
name and last name and odds are you and

1613
00:57:58,520 --> 00:58:02,119
I are in the habit if they're not

1614
00:57:59,920 --> 00:58:04,000
already a favorite of like clicking on

1615
00:58:02,119 --> 00:58:05,200
search and then using autocomplete and

1616
00:58:04,000 --> 00:58:07,039
what happens when you start typing

1617
00:58:05,200 --> 00:58:09,558
autocomplete well if you type in the

1618
00:58:07,039 --> 00:58:11,599
letter H you'll see only presumably

1619
00:58:09,559 --> 00:58:14,240
Hagrid Harry Hermione and so forth if

1620
00:58:11,599 --> 00:58:16,079
you type in ha that shows you only

1621
00:58:14,240 --> 00:58:18,959
Hagrid and Harry and it all happens

1622
00:58:16,079 --> 00:58:21,480
super fast so how is that happening well

1623
00:58:18,960 --> 00:58:24,039
typically you could just start at the

1624
00:58:21,480 --> 00:58:26,280
top and look to the bottom searching for

1625
00:58:24,039 --> 00:58:27,880
all the hes or all of the ha but for

1626
00:58:26,280 --> 00:58:29,640
larger data sets that's going to get

1627
00:58:27,880 --> 00:58:31,760
slow for the Googles of the world that's

1628
00:58:29,640 --> 00:58:33,680
going to get really slow and even on our

1629
00:58:31,760 --> 00:58:36,119
phones when you have hundreds thousands

1630
00:58:33,680 --> 00:58:38,118
of contacts eventually even that kind of

1631
00:58:36,119 --> 00:58:40,039
approach that algorithm step by step but

1632
00:58:38,119 --> 00:58:41,680
it might be slow so how might we go

1633
00:58:40,039 --> 00:58:44,559
about searching for someone in a phone

1634
00:58:41,680 --> 00:58:46,399
book like this uh like say uh John

1635
00:58:44,559 --> 00:58:48,839
Harvard well here's an old school

1636
00:58:46,400 --> 00:58:50,039
incarnation of this and uh odds are you

1637
00:58:48,839 --> 00:58:51,960
might not have had occasion to even

1638
00:58:50,039 --> 00:58:53,760
physically use this thing nowadays and

1639
00:58:51,960 --> 00:58:55,400
in fact this is a bit of a white lie cuz

1640
00:58:53,760 --> 00:58:57,680
this is the Yellow Pages which means

1641
00:58:55,400 --> 00:58:59,599
this is a book of companies not people

1642
00:58:57,680 --> 00:59:01,558
uh but for this is all you can find and

1643
00:58:59,599 --> 00:59:03,720
at that it's even hard to find this but

1644
00:59:01,559 --> 00:59:05,599
this is the same thing in analog form

1645
00:59:03,720 --> 00:59:07,439
physical form so if I wanted to search

1646
00:59:05,599 --> 00:59:10,039
for someone like John Harvard how could

1647
00:59:07,440 --> 00:59:12,520
I do that well I could start on page one

1648
00:59:10,039 --> 00:59:16,799
and I could start searching for page two

1649
00:59:12,520 --> 00:59:18,160
page three page four page five little

1650
00:59:16,799 --> 00:59:19,440
hard to do physically especially since

1651
00:59:18,160 --> 00:59:22,319
no one's used this phone book in a lot

1652
00:59:19,440 --> 00:59:26,000
of years but uh is this algorithm

1653
00:59:22,319 --> 00:59:28,079
correct Turning Page by Page

1654
00:59:26,000 --> 00:59:30,960
very inelegantly is this correct will I

1655
00:59:28,079 --> 00:59:32,440
find John Harvard if if he's in here all

1656
00:59:30,960 --> 00:59:34,280
right so yes I mean this is a little

1657
00:59:32,440 --> 00:59:35,760
stupidly tedious because if there's like

1658
00:59:34,280 --> 00:59:37,960
a thousand Pages he might be a few

1659
00:59:35,760 --> 00:59:39,520
hundred pages into this but it's correct

1660
00:59:37,960 --> 00:59:41,160
at some point I will find him and if

1661
00:59:39,520 --> 00:59:42,759
he's on the page I'll be able to call

1662
00:59:41,160 --> 00:59:44,319
why because presumably the names are

1663
00:59:42,760 --> 00:59:46,039
alphabetized in here and there's no like

1664
00:59:44,319 --> 00:59:47,558
cheat sheet on the edge so I have to

1665
00:59:46,039 --> 00:59:48,799
search for John Harvard from left to

1666
00:59:47,559 --> 00:59:50,480
right searching for H if it's

1667
00:59:48,799 --> 00:59:51,880
alphabetized by last name well what

1668
00:59:50,480 --> 00:59:53,520
would be marginally better well how

1669
00:59:51,880 --> 00:59:55,079
about two pages at a time it's hard to

1670
00:59:53,520 --> 00:59:57,280
do with a 20-year-old old phone book

1671
00:59:55,079 --> 01:00:02,200
where the pages are kind of uh grown

1672
00:59:57,280 --> 01:00:04,880
together but 2 4 6 8 10 12 this

1673
01:00:02,200 --> 01:00:06,319
algorithm is this correct all right so

1674
01:00:04,880 --> 01:00:08,559
no

1675
01:00:06,319 --> 01:00:11,359
why yeah so I'm skipping every other

1676
01:00:08,559 --> 01:00:13,960
page so if I don't consider that and I

1677
01:00:11,359 --> 01:00:16,598
find myself in like the I section or the

1678
01:00:13,960 --> 01:00:18,280
J section well I might accidentally

1679
01:00:16,599 --> 01:00:20,520
conclude nope I haven't found John

1680
01:00:18,280 --> 01:00:21,720
Harvard yet just because I skipped them

1681
01:00:20,520 --> 01:00:24,160
because it was sandwiched between two

1682
01:00:21,720 --> 01:00:26,160
pages now I can fix this I think if I do

1683
01:00:24,160 --> 01:00:28,078
hit the I section well let me just

1684
01:00:26,160 --> 01:00:30,000
double back one page just in case he was

1685
01:00:28,079 --> 01:00:32,359
in that last page so it's recoverable

1686
01:00:30,000 --> 01:00:34,039
but it's almost twice as fast minus that

1687
01:00:32,359 --> 01:00:35,598
that hiccup there but what most of us

1688
01:00:34,039 --> 01:00:37,599
would do and what your phones are doing

1689
01:00:35,599 --> 01:00:39,200
albeit digitally is they open up roughly

1690
01:00:37,599 --> 01:00:41,559
to the middle of the phone book and they

1691
01:00:39,200 --> 01:00:43,439
look down and they say oh I'm in roughly

1692
01:00:41,559 --> 01:00:45,119
the M section so I'm roughly halfway

1693
01:00:43,440 --> 01:00:46,640
through this thousand page phone book

1694
01:00:45,119 --> 01:00:50,000
but what do I now know about John

1695
01:00:46,640 --> 01:00:52,440
Harvard where is he to my left or to my

1696
01:00:50,000 --> 01:00:54,520
right all right so alphabetically he's

1697
01:00:52,440 --> 01:00:57,440
presumably to my left and so here I get

1698
01:00:54,520 --> 01:01:00,000
can both uh met uh metaphorically and

1699
01:00:57,440 --> 01:01:02,359
physically tear the problem in

1700
01:01:00,000 --> 01:01:04,240
half you don't need to be impressed it's

1701
01:01:02,359 --> 01:01:06,598
really easy down the the spine that way

1702
01:01:04,240 --> 01:01:09,118
but uh I know that John Harvard is to

1703
01:01:06,599 --> 01:01:11,720
the left here but now I can throw

1704
01:01:09,119 --> 01:01:14,440
unnecessarily dramatically half and page

1705
01:01:11,720 --> 01:01:16,000
one out of the way and what do I now

1706
01:01:14,440 --> 01:01:17,839
know I've gone from a thousand pages to

1707
01:01:16,000 --> 01:01:19,319
like 500 I can kind of repeat roughly

1708
01:01:17,839 --> 01:01:20,799
the same algorithm go to the half of

1709
01:01:19,319 --> 01:01:23,319
this and so this time I went back a

1710
01:01:20,799 --> 01:01:25,200
little too far I'm in now the um e

1711
01:01:23,319 --> 01:01:27,359
section so what do I know is John

1712
01:01:25,200 --> 01:01:29,799
Harvard to my left or to my

1713
01:01:27,359 --> 01:01:32,319
right to my right so I can again tear

1714
01:01:29,799 --> 01:01:34,559
the problem in half throw this half away

1715
01:01:32,319 --> 01:01:36,520
and now I'm really flying I'm toing it

1716
01:01:34,559 --> 01:01:39,680
verbally slowly but that went from a

1717
01:01:36,520 --> 01:01:42,440
th000 pages to 500 to now 250 and now I

1718
01:01:39,680 --> 01:01:45,200
can do it again 125 i' do it again

1719
01:01:42,440 --> 01:01:46,920
roughly like 67 and keep doing it again

1720
01:01:45,200 --> 01:01:50,118
and again and again until I get left

1721
01:01:46,920 --> 01:01:52,400
with hopefully just one single page or

1722
01:01:50,119 --> 01:01:55,079
in this case an ad for ironically a

1723
01:01:52,400 --> 01:01:56,720
mechanic okay so

1724
01:01:55,079 --> 01:01:58,760
what is the implication for our

1725
01:01:56,720 --> 01:02:00,919
performance well let's just do this sort

1726
01:01:58,760 --> 01:02:03,240
of in the abstract if you will if that

1727
01:02:00,920 --> 01:02:05,200
first algorithm were to be plotted just

1728
01:02:03,240 --> 01:02:07,558
quickly on a chart without even numbers

1729
01:02:05,200 --> 01:02:09,480
here's my x-axis size of problem on the

1730
01:02:07,559 --> 01:02:11,680
x-axis so the bigger the problem the

1731
01:02:09,480 --> 01:02:13,559
farther out that way time to solve the

1732
01:02:11,680 --> 01:02:15,839
problem the tire you go up on the y-

1733
01:02:13,559 --> 01:02:17,839
axis the uh more time you're taking to

1734
01:02:15,839 --> 01:02:19,839
solve it how would we draw the running

1735
01:02:17,839 --> 01:02:21,078
time The amount of time taken to run

1736
01:02:19,839 --> 01:02:23,160
that first algorithm well it's going to

1737
01:02:21,079 --> 01:02:24,760
be a straight line why cuz if you add

1738
01:02:23,160 --> 01:02:26,440
one more page next year because more

1739
01:02:24,760 --> 01:02:28,680
people move to Cambridge you're going to

1740
01:02:26,440 --> 01:02:30,880
add one more page turn potentially so

1741
01:02:28,680 --> 01:02:32,279
one more second one more unit of time so

1742
01:02:30,880 --> 01:02:34,640
it's a straight line and we'll abstract

1743
01:02:32,279 --> 01:02:36,559
it away as n if there's n pages in the

1744
01:02:34,640 --> 01:02:38,720
phone book the slope of this line is

1745
01:02:36,559 --> 01:02:41,160
essentially n the second algorithm

1746
01:02:38,720 --> 01:02:43,118
wherein I was doing two pages at a time

1747
01:02:41,160 --> 01:02:44,558
was twice as fast but it's still a

1748
01:02:43,119 --> 01:02:46,680
straight line and in fact let me just

1749
01:02:44,559 --> 01:02:49,200
draw some dotted lines here if the phone

1750
01:02:46,680 --> 01:02:50,919
book is this big with my first algorithm

1751
01:02:49,200 --> 01:02:53,118
it might take this many step this many

1752
01:02:50,920 --> 01:02:54,839
units of time this many steps this many

1753
01:02:53,119 --> 01:02:57,079
page turns but with that that second

1754
01:02:54,839 --> 01:02:59,240
algorithm notice that the intersection

1755
01:02:57,079 --> 01:03:01,760
is with much lower on the yellow line

1756
01:02:59,240 --> 01:03:03,558
than on the red so n/2 means there's

1757
01:03:01,760 --> 01:03:05,720
half as many pages here if n is the

1758
01:03:03,559 --> 01:03:07,839
number of pages so indeed that algorithm

1759
01:03:05,720 --> 01:03:09,439
the second one is twice as fast minus

1760
01:03:07,839 --> 01:03:11,599
the little hiccup that I have to double

1761
01:03:09,440 --> 01:03:14,039
back one page but that's not a big deal

1762
01:03:11,599 --> 01:03:15,279
if I'm still doing things twice as fast

1763
01:03:14,039 --> 01:03:16,839
but the third algorithm looks

1764
01:03:15,279 --> 01:03:19,000
fundamentally different it looks like

1765
01:03:16,839 --> 01:03:20,799
this logarithms if you recall from high

1766
01:03:19,000 --> 01:03:23,319
school or prior if you don't that's fine

1767
01:03:20,799 --> 01:03:25,319
too it's just a fundamentally different

1768
01:03:23,319 --> 01:03:26,960
function a different shape and notice

1769
01:03:25,319 --> 01:03:29,799
that the green line is going up and up

1770
01:03:26,960 --> 01:03:32,160
and up but a much slower rate of

1771
01:03:29,799 --> 01:03:33,960
increase which means crazy things are

1772
01:03:32,160 --> 01:03:35,558
possible if two towns in Massachusetts

1773
01:03:33,960 --> 01:03:38,400
like Cambridge and Austin across the

1774
01:03:35,559 --> 01:03:39,839
river merge next year for instance in

1775
01:03:38,400 --> 01:03:42,559
terms of their phone book their phone

1776
01:03:39,839 --> 01:03:44,038
book just got twice as big for the first

1777
01:03:42,559 --> 01:03:46,039
algorithm that's going to take me twice

1778
01:03:44,039 --> 01:03:48,000
as many steps to go through the second

1779
01:03:46,039 --> 01:03:50,200
algorithm almost Twi it's going to take

1780
01:03:48,000 --> 01:03:52,160
me 50% more steps to go through two at a

1781
01:03:50,200 --> 01:03:53,640
time but the third algorithm that I

1782
01:03:52,160 --> 01:03:55,720
ended with tearing things again and

1783
01:03:53,640 --> 01:03:57,598
again divid and conquering if you will

1784
01:03:55,720 --> 01:04:00,118
in half and in half and in half how many

1785
01:03:57,599 --> 01:04:01,960
more steps will my third algorithm take

1786
01:04:00,119 --> 01:04:03,920
if Cambridge and Austin merge into a

1787
01:04:01,960 --> 01:04:06,920
phone book that's twice as

1788
01:04:03,920 --> 01:04:08,480
big just one more step right no big deal

1789
01:04:06,920 --> 01:04:09,880
you just take a really big bite out of

1790
01:04:08,480 --> 01:04:11,920
the problem once you decide if John

1791
01:04:09,880 --> 01:04:14,520
Harvard is to the left or to the right

1792
01:04:11,920 --> 01:04:16,559
and so you've made much faster progress

1793
01:04:14,520 --> 01:04:18,720
and so this in essence is what your

1794
01:04:16,559 --> 01:04:20,520
computer your phone is probably doing

1795
01:04:18,720 --> 01:04:22,720
underneath the hood when searching for

1796
01:04:20,520 --> 01:04:24,920
Harry or Hermione or Hagrid or anyone

1797
01:04:22,720 --> 01:04:26,558
else because it's that much faster

1798
01:04:24,920 --> 01:04:28,119
especially when you have large data if

1799
01:04:26,559 --> 01:04:29,440
you don't have that many contacts

1800
01:04:28,119 --> 01:04:32,279
probably doesn't matter if you search

1801
01:04:29,440 --> 01:04:33,680
from top to bottom or more uh more in

1802
01:04:32,279 --> 01:04:35,400
the form of this divide and conquer

1803
01:04:33,680 --> 01:04:37,078
algorithm but if you're the Googles of

1804
01:04:35,400 --> 01:04:38,880
the world or you're analyzing large data

1805
01:04:37,079 --> 01:04:41,000
sets indeed this is going to add up

1806
01:04:38,880 --> 01:04:42,799
quite quickly so where do we go with

1807
01:04:41,000 --> 01:04:44,359
this well we're going to introduce next

1808
01:04:42,799 --> 01:04:46,720
something called pseudo code how can I

1809
01:04:44,359 --> 01:04:49,000
translate what I did verbally there sort

1810
01:04:46,720 --> 01:04:50,598
of intuitively to actual code well this

1811
01:04:49,000 --> 01:04:52,440
won't be scratch this won't be C or

1812
01:04:50,599 --> 01:04:54,440
python just yet it's just going to be an

1813
01:04:52,440 --> 01:04:55,960
english-like syntax and this is how many

1814
01:04:54,440 --> 01:04:57,920
programmers would start solving a

1815
01:04:55,960 --> 01:05:00,079
problem they don't start typing out code

1816
01:04:57,920 --> 01:05:01,599
in C or python or the like they use

1817
01:05:00,079 --> 01:05:03,440
English or whatever their human language

1818
01:05:01,599 --> 01:05:05,640
is to jot down an outline for their

1819
01:05:03,440 --> 01:05:07,799
ideas my first step really was picking

1820
01:05:05,640 --> 01:05:09,759
up the phone book my second step was

1821
01:05:07,799 --> 01:05:12,160
opening to the middle of the phone book

1822
01:05:09,760 --> 01:05:13,960
my third step was somewhat different

1823
01:05:12,160 --> 01:05:16,200
look at the page because why my fourth

1824
01:05:13,960 --> 01:05:19,920
step was if person I'm looking for is on

1825
01:05:16,200 --> 01:05:21,879
the page I then do what never happened

1826
01:05:19,920 --> 01:05:25,079
in my example but I call the person so

1827
01:05:21,880 --> 01:05:27,119
I'm done else if the person is earlier

1828
01:05:25,079 --> 01:05:29,760
in the book alphabetically as John

1829
01:05:27,119 --> 01:05:32,359
Harvard was in the case of my H then I

1830
01:05:29,760 --> 01:05:34,760
should search to the middle of the left

1831
01:05:32,359 --> 01:05:37,680
of the phone book and then I should go

1832
01:05:34,760 --> 01:05:39,359
back to step three step three is look at

1833
01:05:37,680 --> 01:05:41,558
the page thereby repeating the same

1834
01:05:39,359 --> 01:05:43,400
process again and again step nine though

1835
01:05:41,559 --> 01:05:45,119
might be else if the person is later in

1836
01:05:43,400 --> 01:05:47,000
the book then let's go ahead and open to

1837
01:05:45,119 --> 01:05:50,359
the middle of the right half of the book

1838
01:05:47,000 --> 01:05:52,079
and then go back to line three else

1839
01:05:50,359 --> 01:05:54,839
there's a fourth scenario we should

1840
01:05:52,079 --> 01:05:56,799
probably consider lest my search process

1841
01:05:54,839 --> 01:05:59,680
freeze or crash or give me one of those

1842
01:05:56,799 --> 01:06:01,960
spinning beach balls with a bug

1843
01:05:59,680 --> 01:06:03,200
yeah yeah what if John Harvard isn't in

1844
01:06:01,960 --> 01:06:04,920
the phone book I'd prefer that my

1845
01:06:03,200 --> 01:06:06,439
algorithm my phone not just reboot or

1846
01:06:04,920 --> 01:06:09,200
freeze I should handle that with some

1847
01:06:06,440 --> 01:06:10,720
kind of catchall else so to speak let's

1848
01:06:09,200 --> 01:06:13,879
just quit the program so there's

1849
01:06:10,720 --> 01:06:16,038
welldefined behavior for every possible

1850
01:06:13,880 --> 01:06:17,599
scenario of the four now let's call out

1851
01:06:16,039 --> 01:06:19,400
a few of these Salient terms it turns

1852
01:06:17,599 --> 01:06:20,960
out if I highlight in yellow here

1853
01:06:19,400 --> 01:06:22,480
there's a pattern to what I've been

1854
01:06:20,960 --> 01:06:24,160
doing here these are all of my English

1855
01:06:22,480 --> 01:06:26,440
verbs and we're in a moment we're going

1856
01:06:24,160 --> 01:06:28,799
to start calling those verbs functions

1857
01:06:26,440 --> 01:06:30,720
when you program or write code and you

1858
01:06:28,799 --> 01:06:32,880
want the program or the computer to do

1859
01:06:30,720 --> 01:06:34,558
something for you some action or verb

1860
01:06:32,880 --> 01:06:36,400
we're going to refer to those actions or

1861
01:06:34,559 --> 01:06:38,680
verbs as these things called functions

1862
01:06:36,400 --> 01:06:40,799
like those here by contrast I've just

1863
01:06:38,680 --> 01:06:42,839
highlighted instead my if my El if my

1864
01:06:40,799 --> 01:06:44,160
Els if and Els this is going to

1865
01:06:42,839 --> 01:06:46,640
represent what we're going to start

1866
01:06:44,160 --> 01:06:48,279
calling a conditional a proverbial fork

1867
01:06:46,640 --> 01:06:50,160
in the road where you can either go this

1868
01:06:48,279 --> 01:06:52,359
way or that way do this thing or this

1869
01:06:50,160 --> 01:06:54,558
other thing and you're going to decide

1870
01:06:52,359 --> 01:06:56,440
which of those things to do based on

1871
01:06:54,559 --> 01:06:59,240
what I've now highlighted here which are

1872
01:06:56,440 --> 01:07:01,359
going to be called Boolean Expressions

1873
01:06:59,240 --> 01:07:03,720
bull referring to a mathematician last

1874
01:07:01,359 --> 01:07:06,920
named bull a Boolean expression is just

1875
01:07:03,720 --> 01:07:09,078
a question with a yes no a true false a

1876
01:07:06,920 --> 01:07:10,920
one or a zero answer if you will and it

1877
01:07:09,079 --> 01:07:12,880
governs whether you do this thing or

1878
01:07:10,920 --> 01:07:15,359
this thing or this thing or that the

1879
01:07:12,880 --> 01:07:17,559
indentation in this case is important

1880
01:07:15,359 --> 01:07:20,000
the fact that I've indented line five

1881
01:07:17,559 --> 01:07:21,839
implies by convention in programming

1882
01:07:20,000 --> 01:07:24,799
that I should only do line five if the

1883
01:07:21,839 --> 01:07:26,720
answer to line four is a yes or true and

1884
01:07:24,799 --> 01:07:29,319
same for these other indented lines as

1885
01:07:26,720 --> 01:07:31,359
well and the last characteristic here is

1886
01:07:29,319 --> 01:07:33,558
this here uh someone called this out

1887
01:07:31,359 --> 01:07:35,799
earlier in fact these lines eight and 11

1888
01:07:33,559 --> 01:07:38,720
are now highlighted and represent

1889
01:07:35,799 --> 01:07:41,038
what what might we call these in code if

1890
01:07:38,720 --> 01:07:43,200
you've done that yeah so these are Loops

1891
01:07:41,039 --> 01:07:45,960
some kind of cycles that result in my

1892
01:07:43,200 --> 01:07:48,118
doing the same thing again and again but

1893
01:07:45,960 --> 01:07:50,039
there's a key detail with this algorithm

1894
01:07:48,119 --> 01:07:53,000
in pseudo code even though it's telling

1895
01:07:50,039 --> 01:07:56,319
me to go back to line three why is this

1896
01:07:53,000 --> 01:07:58,119
algorithm event going to stop why do I

1897
01:07:56,319 --> 01:08:00,440
not constantly keep looking for John

1898
01:07:58,119 --> 01:08:03,079
Harvard Forever by nature of these Loops

1899
01:08:00,440 --> 01:08:05,559
telling me to keep going back to line

1900
01:08:03,079 --> 01:08:08,440
three good eventually he'll be on the

1901
01:08:05,559 --> 01:08:10,960
page or or to your point earlier he

1902
01:08:08,440 --> 01:08:12,960
won't be at all and we're out of pages

1903
01:08:10,960 --> 01:08:14,400
and so we just quit and that's the key

1904
01:08:12,960 --> 01:08:16,000
about going to the left half or the

1905
01:08:14,400 --> 01:08:17,279
right half it doesn't matter if you do

1906
01:08:16,000 --> 01:08:18,799
the same thing again and again you're

1907
01:08:17,279 --> 01:08:20,880
not going to get stuck in a so-called

1908
01:08:18,799 --> 01:08:23,158
infinite Loop so long as you keep

1909
01:08:20,880 --> 01:08:24,799
dividing the problem and shrinking it

1910
01:08:23,158 --> 01:08:26,120
into something small smaller smaller

1911
01:08:24,799 --> 01:08:28,158
eventually there's going to be no

1912
01:08:26,120 --> 01:08:29,640
problem left to solve so even if you

1913
01:08:28,158 --> 01:08:31,519
don't think of yourself as a computer

1914
01:08:29,640 --> 01:08:33,199
person even if you've never written code

1915
01:08:31,520 --> 01:08:35,400
what you'll find in the coming days is

1916
01:08:33,198 --> 01:08:37,759
that these ideas that we've just kind of

1917
01:08:35,399 --> 01:08:39,679
harnessed from real life are at your

1918
01:08:37,759 --> 01:08:41,319
fingertips already and a lot of the

1919
01:08:39,679 --> 01:08:43,359
process of learning to code is yes it's

1920
01:08:41,319 --> 01:08:45,080
going to be a bumpy Ro uh some bumps in

1921
01:08:43,359 --> 01:08:47,120
the road because you can't quite see the

1922
01:08:45,080 --> 01:08:49,120
new syntax in a familiar way but you'll

1923
01:08:47,120 --> 01:08:50,358
find that the ideas in fact are going to

1924
01:08:49,120 --> 01:08:52,399
be more familiar than you might

1925
01:08:50,359 --> 01:08:54,319
otherwise think and so we'll see in a

1926
01:08:52,399 --> 01:08:56,278
bit and we'll take a break in a moment

1927
01:08:54,319 --> 01:08:58,080
uh to take a breather that you will see

1928
01:08:56,279 --> 01:09:00,199
these same ideas in a moment in the

1929
01:08:58,080 --> 01:09:01,759
context of scratch an actual programming

1930
01:09:00,198 --> 01:09:03,799
language via which we drag and drop

1931
01:09:01,759 --> 01:09:05,319
puzzle pieces to make actual code work

1932
01:09:03,799 --> 01:09:06,600
we'll see some variant of these ideas

1933
01:09:05,319 --> 01:09:08,480
things called arguments and return

1934
01:09:06,600 --> 01:09:11,679
values and variables but we'll

1935
01:09:08,479 --> 01:09:14,318
ultimately convert it into this somehow

1936
01:09:11,679 --> 01:09:16,799
anyone want to wager what this program

1937
01:09:14,319 --> 01:09:19,239
will do if fed to your Mac or PC or

1938
01:09:16,799 --> 01:09:21,120
phone here's just a massive pattern of

1939
01:09:19,238 --> 01:09:23,399
zeros and

1940
01:09:21,120 --> 01:09:25,640
ones it will indeed say rather

1941
01:09:23,399 --> 01:09:28,879
disappoint ly apparently just hello

1942
01:09:25,640 --> 01:09:32,319
world and indeed baked into all of these

1943
01:09:28,880 --> 01:09:34,799
zeros and ones are not just the h l l o

1944
01:09:32,319 --> 01:09:36,719
but also the verbs the action of

1945
01:09:34,799 --> 01:09:38,640
printing something to the screen and

1946
01:09:36,719 --> 01:09:40,120
there's other stuff too so that the

1947
01:09:38,640 --> 01:09:41,400
program knows how to start and how to

1948
01:09:40,120 --> 01:09:43,080
stop a lot of stuff that we won't have

1949
01:09:41,399 --> 01:09:44,960
to worry about that whoever designed the

1950
01:09:43,080 --> 01:09:46,920
computer or the language did but at the

1951
01:09:44,960 --> 01:09:48,920
end of the day you're never going to be

1952
01:09:46,920 --> 01:09:50,839
writing these zeros and ones yourselves

1953
01:09:48,920 --> 01:09:53,239
though our ancestors Once Upon a Time

1954
01:09:50,839 --> 01:09:56,280
did in some form we'll be using a much

1955
01:09:53,238 --> 01:09:58,678
higher l level language like this in C

1956
01:09:56,280 --> 01:10:00,960
or better yet in just a moment like in

1957
01:09:58,679 --> 01:10:03,520
scratch like this and indeed this is why

1958
01:10:00,960 --> 01:10:05,600
today we focus with focus on and begin

1959
01:10:03,520 --> 01:10:07,280
with scratch this graphical programming

1960
01:10:05,600 --> 01:10:09,280
language so we have a way of expressing

1961
01:10:07,280 --> 01:10:11,960
ourselves with functions conditionals

1962
01:10:09,280 --> 01:10:13,800
loops and more but in a way that doesn't

1963
01:10:11,960 --> 01:10:15,400
have stupid parentheses and curly braces

1964
01:10:13,800 --> 01:10:17,199
and all these visual distractions in the

1965
01:10:15,400 --> 01:10:19,280
way and we'll translate that thereafter

1966
01:10:17,199 --> 01:10:20,678
to this lower level language but for now

1967
01:10:19,280 --> 01:10:21,880
that was a lot that was definitely a

1968
01:10:20,679 --> 01:10:23,719
fire hose let's go ahead and take a

1969
01:10:21,880 --> 01:10:25,480
10-minute break feel free to get up or

1970
01:10:23,719 --> 01:10:27,040
stay here and we'll resume in a bit with

1971
01:10:25,480 --> 01:10:30,040
some actual

1972
01:10:27,040 --> 01:10:31,679
code uh so this then is scratch a

1973
01:10:30,040 --> 01:10:33,480
graphical programming language from a

1974
01:10:31,679 --> 01:10:34,800
friends down the road at mit's media lab

1975
01:10:33,480 --> 01:10:37,040
that indeed some of you might have used

1976
01:10:34,800 --> 01:10:38,840
in grade score the like for playing and

1977
01:10:37,040 --> 01:10:41,199
writing code and the like but you maybe

1978
01:10:38,840 --> 01:10:42,960
didn't necessarily think about how some

1979
01:10:41,199 --> 01:10:44,599
of these Primitives ultimately worked

1980
01:10:42,960 --> 01:10:46,120
and in fact everything you've done if

1981
01:10:44,600 --> 01:10:47,880
you've used scratch before and

1982
01:10:46,120 --> 01:10:50,080
everything you'll see today is going to

1983
01:10:47,880 --> 01:10:51,360
apply to all of the weeks to come as we

1984
01:10:50,080 --> 01:10:52,719
explore these things called functions

1985
01:10:51,360 --> 01:10:55,120
and loops and conditionals Boolean

1986
01:10:52,719 --> 01:10:56,920
expressions and more with scratch

1987
01:10:55,120 --> 01:10:58,760
because it's so graphical and animated

1988
01:10:56,920 --> 01:11:00,840
can create can you create animations

1989
01:10:58,760 --> 01:11:03,239
like this one interactive art and

1990
01:11:00,840 --> 01:11:05,239
software more generally but you'll do so

1991
01:11:03,239 --> 01:11:07,040
by dragging and dropping puzzle pieces

1992
01:11:05,239 --> 01:11:08,639
that only lock together if it makes

1993
01:11:07,040 --> 01:11:10,280
logical sense to do so and what you

1994
01:11:08,640 --> 01:11:12,679
won't have to deal with in this first

1995
01:11:10,280 --> 01:11:14,719
week of class is Curly braces

1996
01:11:12,679 --> 01:11:16,239
parentheses all of the weird symbology

1997
01:11:14,719 --> 01:11:18,320
that you might recall seeing when we

1998
01:11:16,239 --> 01:11:20,440
just wanted to say hello world now this

1999
01:11:18,320 --> 01:11:22,960
particular program um riging men was

2000
01:11:20,440 --> 01:11:24,559
written by a former cs50 teaching fellow

2001
01:11:22,960 --> 01:11:26,640
Andrew bar who's actually now the

2002
01:11:24,560 --> 01:11:28,679
general manager of the Cleveland Browns

2003
01:11:26,640 --> 01:11:30,440
the American football team and so these

2004
01:11:28,679 --> 01:11:32,320
are just some of the programs that some

2005
01:11:30,440 --> 01:11:34,440
of your predecessors in the class have

2006
01:11:32,320 --> 01:11:36,360
created and you'll see in the remainder

2007
01:11:34,440 --> 01:11:37,678
of class here a couple of others as well

2008
01:11:36,360 --> 01:11:40,799
and more in the course's first

2009
01:11:37,679 --> 01:11:42,760
assignment namely problem set zero so

2010
01:11:40,800 --> 01:11:44,560
how do we get there well first a quick

2011
01:11:42,760 --> 01:11:47,040
tour of what it is we're going to do

2012
01:11:44,560 --> 01:11:48,639
this in scratch is perhaps the simplest

2013
01:11:47,040 --> 01:11:50,360
program you can write and even if you've

2014
01:11:48,639 --> 01:11:52,280
never seen scratch or any programming

2015
01:11:50,360 --> 01:11:54,440
language before can probably guess that

2016
01:11:52,280 --> 01:11:56,320
this just says on the screen somehow

2017
01:11:54,440 --> 01:11:58,360
hello world but what you don't have to

2018
01:11:56,320 --> 01:11:59,759
do is type esoteric commands and weird

2019
01:11:58,360 --> 01:12:01,679
syntax those curly braces and

2020
01:11:59,760 --> 01:12:03,800
parentheses I keep alluding to you just

2021
01:12:01,679 --> 01:12:05,239
drag this yellow puzzle piece you drag

2022
01:12:03,800 --> 01:12:07,159
this purple puzzle piece let them

2023
01:12:05,239 --> 01:12:09,839
magnetically lock together so to speak

2024
01:12:07,159 --> 01:12:11,440
click a button and boom with those same

2025
01:12:09,840 --> 01:12:12,960
building blocks and several others can

2026
01:12:11,440 --> 01:12:14,960
you make what exactly the sorts of

2027
01:12:12,960 --> 01:12:17,199
things that Andrew brought to life as

2028
01:12:14,960 --> 01:12:20,800
well so here's what we're about to see

2029
01:12:17,199 --> 01:12:22,839
at scratch.mit.edu is a cloud-based

2030
01:12:20,800 --> 01:12:24,639
programming environment on MIT servers

2031
01:12:22,840 --> 01:12:26,520
you can also download it offline on your

2032
01:12:24,639 --> 01:12:29,000
own Mac or PC and it gives you an

2033
01:12:26,520 --> 01:12:31,560
interface like this on the left hand

2034
01:12:29,000 --> 01:12:34,199
side of the screen you'll see a blocks

2035
01:12:31,560 --> 01:12:36,000
pette these puzzle pieces AKA blocks

2036
01:12:34,199 --> 01:12:37,799
come in different colors which rather

2037
01:12:36,000 --> 01:12:39,760
categorize them so pictured here for

2038
01:12:37,800 --> 01:12:42,120
instance in blue are a whole bunch of

2039
01:12:39,760 --> 01:12:43,800
motion related blocks so Andrew used a

2040
01:12:42,120 --> 01:12:46,120
whole bunch of those to have the singer

2041
01:12:43,800 --> 01:12:48,120
and the men moving around on the screen

2042
01:12:46,120 --> 01:12:50,000
um in synchronicity with the song that

2043
01:12:48,120 --> 01:12:52,360
was playing in the background meanwhile

2044
01:12:50,000 --> 01:12:54,360
in the middle of this interface is going

2045
01:12:52,360 --> 01:12:56,519
to be the code area and this is where

2046
01:12:54,360 --> 01:12:58,199
Andrew and sunu will drag and drop some

2047
01:12:56,520 --> 01:13:00,520
of those puzzle pieces and other colors

2048
01:12:58,199 --> 01:13:03,120
as well and lock them together to get

2049
01:13:00,520 --> 01:13:05,320
your character soon to be invented to do

2050
01:13:03,120 --> 01:13:06,840
something on the screen indeed at the

2051
01:13:05,320 --> 01:13:09,759
bottom right here will you see

2052
01:13:06,840 --> 01:13:11,440
ultimately a Sprite area where a Sprite

2053
01:13:09,760 --> 01:13:13,000
is a technical term for like a character

2054
01:13:11,440 --> 01:13:14,919
in a video game or a programming

2055
01:13:13,000 --> 01:13:18,120
environment like this by default

2056
01:13:14,920 --> 01:13:19,719
historically scratch uh is the cat the

2057
01:13:18,120 --> 01:13:21,239
mascot if you will for this programming

2058
01:13:19,719 --> 01:13:23,560
environment and so here we see by

2059
01:13:21,239 --> 01:13:25,239
default just one Sprite selected because

2060
01:13:23,560 --> 01:13:27,560
on the top right of the screen is the

2061
01:13:25,239 --> 01:13:29,159
stage for that Sprite and you can click

2062
01:13:27,560 --> 01:13:31,120
in Click and zoom in to make it full

2063
01:13:29,159 --> 01:13:33,679
screen but this is the world in which

2064
01:13:31,120 --> 01:13:35,639
Scratch by default the cat will live but

2065
01:13:33,679 --> 01:13:37,639
you can change scratch's costume so that

2066
01:13:35,639 --> 01:13:39,639
it looks like a singer or a man falling

2067
01:13:37,639 --> 01:13:41,239
from the sky or the like or anything

2068
01:13:39,639 --> 01:13:42,600
else either creating the art yourself or

2069
01:13:41,239 --> 01:13:45,559
importing some of the things that come

2070
01:13:42,600 --> 01:13:48,080
with it or elsewhere online so what is

2071
01:13:45,560 --> 01:13:49,679
this world that scratch rather lives in

2072
01:13:48,080 --> 01:13:51,239
well generally speaking we won't have to

2073
01:13:49,679 --> 01:13:53,000
care too much about numbers because

2074
01:13:51,239 --> 01:13:55,440
we'll be able to ask questions like

2075
01:13:53,000 --> 01:13:57,840
intera active ones like is scratch the

2076
01:13:55,440 --> 01:13:59,199
cat or any character otherwise touching

2077
01:13:57,840 --> 01:14:01,960
the edge of the screen touching

2078
01:13:59,199 --> 01:14:02,759
something else but scratch does exist in

2079
01:14:01,960 --> 01:14:04,880
this

2080
01:14:02,760 --> 01:14:07,000
two-dimensional uh coordinate system

2081
01:14:04,880 --> 01:14:08,800
world so when the cat or any character

2082
01:14:07,000 --> 01:14:12,159
is dead center in the middle that would

2083
01:14:08,800 --> 01:14:15,760
be XY location 0 comma 0 if you will

2084
01:14:12,159 --> 01:14:17,599
meanwhile over here is 240 pixels or

2085
01:14:15,760 --> 01:14:20,480
dots all the way to the right so this

2086
01:14:17,600 --> 01:14:22,040
would be 240 comma 0 where Y is z

2087
01:14:20,480 --> 01:14:23,919
because it's right on that midline so

2088
01:14:22,040 --> 01:14:26,040
it's neither up or below

2089
01:14:23,920 --> 01:14:29,960
over here to the left of course would be

2090
01:14:26,040 --> 01:14:32,000
240 and 0 above the cat would be xal 0

2091
01:14:29,960 --> 01:14:34,400
cuz it's right on that vertical midline

2092
01:14:32,000 --> 01:14:36,800
and 180 and then down here as you might

2093
01:14:34,400 --> 01:14:38,199
guess would be 0 comma netive 180

2094
01:14:36,800 --> 01:14:40,159
generally speaking we don't have to care

2095
01:14:38,199 --> 01:14:41,839
about those precise pixel coordinates

2096
01:14:40,159 --> 01:14:43,400
but it's helpful ultimately if you do

2097
01:14:41,840 --> 01:14:45,520
want the cat to move up down left or

2098
01:14:43,400 --> 01:14:47,638
right having some sense of direction

2099
01:14:45,520 --> 01:14:49,600
according to the x- axis and y AIS as

2100
01:14:47,639 --> 01:14:52,040
well can help you express your ideas

2101
01:14:49,600 --> 01:14:54,639
ultimately so what might some of those

2102
01:14:52,040 --> 01:14:57,480
ideas be well let's do this I'm going to

2103
01:14:54,639 --> 01:15:01,520
go ahead and create on

2104
01:14:57,480 --> 01:15:03,360
scratch.mit.edu just an empty screen

2105
01:15:01,520 --> 01:15:05,320
like this one here and so this is the

2106
01:15:03,360 --> 01:15:07,799
exact same interface but now I'm in my

2107
01:15:05,320 --> 01:15:09,239
browser uh full screen so that I can

2108
01:15:07,800 --> 01:15:10,960
start writing some code and let's get

2109
01:15:09,239 --> 01:15:12,599
that cat to say something actually on

2110
01:15:10,960 --> 01:15:14,520
the screen now this takes a little bit

2111
01:15:12,600 --> 01:15:16,400
of practice but honestly just by

2112
01:15:14,520 --> 01:15:18,600
scrolling through these puzzle pieces

2113
01:15:16,400 --> 01:15:20,440
can you quickly get a sense of what's

2114
01:15:18,600 --> 01:15:22,159
possible not just categorically but

2115
01:15:20,440 --> 01:15:23,638
specifically and I'll jump around

2116
01:15:22,159 --> 01:15:25,920
because I've done this of course but I'm

2117
01:15:23,639 --> 01:15:27,520
going to go to events in yellow first

2118
01:15:25,920 --> 01:15:29,560
and I'm going to drag and drop this

2119
01:15:27,520 --> 01:15:31,159
first block called when green flag

2120
01:15:29,560 --> 01:15:33,000
clicked and I've zoomed in there just to

2121
01:15:31,159 --> 01:15:35,239
make it a little more legible and notice

2122
01:15:33,000 --> 01:15:38,120
that the shape of this green flag just

2123
01:15:35,239 --> 01:15:40,759
so happens to mirror this green flag

2124
01:15:38,120 --> 01:15:42,559
here at top next to this red stop sign

2125
01:15:40,760 --> 01:15:44,360
of sorts and the green flag is going to

2126
01:15:42,560 --> 01:15:47,040
mean go and the red stop sign's going to

2127
01:15:44,360 --> 01:15:48,480
mean stop to start or stop our program

2128
01:15:47,040 --> 01:15:49,920
next week you're going to be writing a

2129
01:15:48,480 --> 01:15:51,519
textual command at your keyboard to do

2130
01:15:49,920 --> 01:15:53,600
the exact same idea but for now it's a

2131
01:15:51,520 --> 01:15:55,600
button so when green flag clicked what

2132
01:15:53,600 --> 01:15:57,239
do I want scratch to do well how about

2133
01:15:55,600 --> 01:15:59,080
we have scratch just initially say

2134
01:15:57,239 --> 01:16:01,480
something like Hello World which indeed

2135
01:15:59,080 --> 01:16:03,639
historically is the first program that

2136
01:16:01,480 --> 01:16:05,280
most any programmer might write so

2137
01:16:03,639 --> 01:16:07,280
anything related to what the cat looks

2138
01:16:05,280 --> 01:16:09,320
like it's doing is actually going to be

2139
01:16:07,280 --> 01:16:12,280
under looks here in purple so I'm going

2140
01:16:09,320 --> 01:16:14,000
to drag over say hello and you'll notice

2141
01:16:12,280 --> 01:16:16,960
something curious and different about

2142
01:16:14,000 --> 01:16:18,880
this purple block it says of course say

2143
01:16:16,960 --> 01:16:21,440
in purple but then there's this white

2144
01:16:18,880 --> 01:16:23,199
oval and some text that by default is

2145
01:16:21,440 --> 01:16:25,239
hello cuz MIT just decided that by

2146
01:16:23,199 --> 01:16:27,199
default the placeholder will be hello

2147
01:16:25,239 --> 01:16:30,638
but anytime you see this white oval it's

2148
01:16:27,199 --> 01:16:33,919
an opportunity to provide an input into

2149
01:16:30,639 --> 01:16:35,400
the function called say and so here I'm

2150
01:16:33,920 --> 01:16:36,880
borrowing terminology from before

2151
01:16:35,400 --> 01:16:39,360
problem solving again is all about

2152
01:16:36,880 --> 01:16:41,280
inputs producing outputs and in between

2153
01:16:39,360 --> 01:16:42,239
there is some algorithm in a moment

2154
01:16:41,280 --> 01:16:45,080
we're going to start referring to

2155
01:16:42,239 --> 01:16:46,678
algorithms quite frequently as functions

2156
01:16:45,080 --> 01:16:48,800
why because it's the implementation of

2157
01:16:46,679 --> 01:16:51,480
some algorithm so let me override the

2158
01:16:48,800 --> 01:16:53,880
default with hello comma World I'll zoom

2159
01:16:51,480 --> 01:16:55,599
out and now if I go to the top right of

2160
01:16:53,880 --> 01:16:58,239
the screen and click the green flag

2161
01:16:55,600 --> 01:17:00,760
we'll see hopefully my very first

2162
01:16:58,239 --> 01:17:02,599
program in code now it wasn't a huge

2163
01:17:00,760 --> 01:17:04,239
lift right it only was a matter of

2164
01:17:02,600 --> 01:17:06,440
dragging and dropping puzzle pieces but

2165
01:17:04,239 --> 01:17:08,678
what has now happened well it turns out

2166
01:17:06,440 --> 01:17:11,280
that two things have happened when I the

2167
01:17:08,679 --> 01:17:12,400
human clicked on that green flag I

2168
01:17:11,280 --> 01:17:14,719
triggered what we're going to start

2169
01:17:12,400 --> 01:17:16,440
calling now an event an event is

2170
01:17:14,719 --> 01:17:17,880
generally something graphical or

2171
01:17:16,440 --> 01:17:19,719
interactive that just happens in a

2172
01:17:17,880 --> 01:17:22,000
computer program you and I trigger

2173
01:17:19,719 --> 01:17:24,920
events on our phones all day long

2174
01:17:22,000 --> 01:17:26,920
whenever you tap or drag or long press

2175
01:17:24,920 --> 01:17:28,800
or pinch or any of those gestures in

2176
01:17:26,920 --> 01:17:30,800
Vogue nowadays on phones you are

2177
01:17:28,800 --> 01:17:32,560
triggering events and people at Apple

2178
01:17:30,800 --> 01:17:35,199
and Google and elsewhere have written

2179
01:17:32,560 --> 01:17:37,400
code that listen for those events and do

2180
01:17:35,199 --> 01:17:39,759
something when that event happens that's

2181
01:17:37,400 --> 01:17:41,440
what I just did when green flag is

2182
01:17:39,760 --> 01:17:44,159
clicked I want something to happen

2183
01:17:41,440 --> 01:17:46,759
namely I want this purple function this

2184
01:17:44,159 --> 01:17:48,440
verb this action called say to do

2185
01:17:46,760 --> 01:17:50,120
something what do I want it to do I want

2186
01:17:48,440 --> 01:17:51,678
it to say what this input is and I'm

2187
01:17:50,120 --> 01:17:54,719
going to introduce another vocabulary

2188
01:17:51,679 --> 01:17:56,880
term the white ovals here are yes inputs

2189
01:17:54,719 --> 01:17:59,080
very generically but in the programmer's

2190
01:17:56,880 --> 01:18:00,679
terminology they're called arguments

2191
01:17:59,080 --> 01:18:02,400
otherwise known as parameters and that

2192
01:18:00,679 --> 01:18:04,800
just means an input to a function that

2193
01:18:02,400 --> 01:18:06,799
modifies Its Behavior in some way when I

2194
01:18:04,800 --> 01:18:08,239
click stop that's just another event and

2195
01:18:06,800 --> 01:18:09,560
that one is just built into scratch

2196
01:18:08,239 --> 01:18:11,759
scratch knows that when you click the

2197
01:18:09,560 --> 01:18:13,159
green stop sign uh everything should

2198
01:18:11,760 --> 01:18:15,920
just stop automatically I don't have to

2199
01:18:13,159 --> 01:18:17,839
write code to support that feature so

2200
01:18:15,920 --> 01:18:20,560
that's all fine and good hello world but

2201
01:18:17,840 --> 01:18:22,280
if I keep doing stop and start and stop

2202
01:18:20,560 --> 01:18:24,159
and start it's going to do the same

2203
01:18:22,280 --> 01:18:25,759
thing again and again and it's really

2204
01:18:24,159 --> 01:18:27,480
not that interesting at the end of the

2205
01:18:25,760 --> 01:18:28,840
day maybe gratifying once but it'd be

2206
01:18:27,480 --> 01:18:31,678
nice if this were a little more

2207
01:18:28,840 --> 01:18:33,199
interactive so it turns out that we can

2208
01:18:31,679 --> 01:18:35,920
do that too but we need a different

2209
01:18:33,199 --> 01:18:38,080
mental model instead so in this case

2210
01:18:35,920 --> 01:18:40,280
here when we think about this function

2211
01:18:38,080 --> 01:18:41,880
say in this input hello world this

2212
01:18:40,280 --> 01:18:44,000
actually Maps pretty cleanly to this

2213
01:18:41,880 --> 01:18:46,400
model earlier that I propose is problem

2214
01:18:44,000 --> 01:18:48,920
solving is computer science if you will

2215
01:18:46,400 --> 01:18:51,440
the input to the current problem is

2216
01:18:48,920 --> 01:18:54,880
going to be in white here hello world

2217
01:18:51,440 --> 01:18:56,879
the algorithm is the say algorithm now I

2218
01:18:54,880 --> 01:18:58,239
don't know how MIT got it to print out

2219
01:18:56,880 --> 01:19:00,239
the little pretty speech bubble on the

2220
01:18:58,239 --> 01:19:02,360
screen but they wrote those underlying

2221
01:19:00,239 --> 01:19:04,759
low-level implementation details and

2222
01:19:02,360 --> 01:19:06,960
they gave me and you a purple function

2223
01:19:04,760 --> 01:19:08,440
called say that just does that for you

2224
01:19:06,960 --> 01:19:10,840
you and I don't have to reinvent that

2225
01:19:08,440 --> 01:19:12,839
wheel the output of SE is another

2226
01:19:10,840 --> 01:19:14,880
technical term now called a side effect

2227
01:19:12,840 --> 01:19:16,600
a side effect is usually something

2228
01:19:14,880 --> 01:19:18,639
visual that happens like as a side

2229
01:19:16,600 --> 01:19:20,320
effect of you calling a function and so

2230
01:19:18,639 --> 01:19:22,320
the side effect here is that the cat has

2231
01:19:20,320 --> 01:19:24,559
this speech bubble magically appear

2232
01:19:22,320 --> 01:19:27,080
inside of which is hello world so we

2233
01:19:24,560 --> 01:19:28,920
have an input we have an output we have

2234
01:19:27,080 --> 01:19:30,400
an algorithm but now we're talking about

2235
01:19:28,920 --> 01:19:33,040
these ideas in the context of

2236
01:19:30,400 --> 01:19:35,960
programming so now the input is an

2237
01:19:33,040 --> 01:19:38,280
argument the algorithm is a function and

2238
01:19:35,960 --> 01:19:39,719
the output in this case is a side effect

2239
01:19:38,280 --> 01:19:41,880
terminology that you'll just hear more

2240
01:19:39,719 --> 01:19:43,320
and more and it'll eventually sink in

2241
01:19:41,880 --> 01:19:45,920
but not to worry if the terminology

2242
01:19:43,320 --> 01:19:48,679
doesn't come naturally early on so what

2243
01:19:45,920 --> 01:19:50,440
more might I do with this let me go back

2244
01:19:48,679 --> 01:19:52,000
to scratch here and make this maybe

2245
01:19:50,440 --> 01:19:53,360
perhaps more interactive and actually

2246
01:19:52,000 --> 01:19:55,080
get the cat to say something a little

2247
01:19:53,360 --> 01:19:57,199
more dynamically so instead of hello

2248
01:19:55,080 --> 01:20:00,080
world why don't I get it to say hello to

2249
01:19:57,199 --> 01:20:03,759
me or to you or anyone else so let me do

2250
01:20:00,080 --> 01:20:05,559
this let me go under say uh let me get

2251
01:20:03,760 --> 01:20:07,520
rid of this first and you'll notice this

2252
01:20:05,560 --> 01:20:09,600
neat trick as soon as you start dragging

2253
01:20:07,520 --> 01:20:11,320
on a block if it gets close to it it

2254
01:20:09,600 --> 01:20:13,120
kind of goes gray and it can be

2255
01:20:11,320 --> 01:20:15,239
magnetically snapped together you don't

2256
01:20:13,120 --> 01:20:16,719
have to do it very precisely conversely

2257
01:20:15,239 --> 01:20:19,199
if I want to get rid of a puzzle piece I

2258
01:20:16,719 --> 01:20:20,960
just drag it anywhere on the left let go

2259
01:20:19,199 --> 01:20:22,839
and that deletes it or you can right

2260
01:20:20,960 --> 01:20:24,560
click or control click in a little menu

2261
01:20:22,840 --> 01:20:26,840
will let you delete it as well well let

2262
01:20:24,560 --> 01:20:28,040
me do this instead under sensing which I

2263
01:20:26,840 --> 01:20:29,880
know is there because I've done this

2264
01:20:28,040 --> 01:20:32,360
before are a whole bunch of things

2265
01:20:29,880 --> 01:20:35,159
related to sensing whereby the cat can

2266
01:20:32,360 --> 01:20:37,199
kind of feel out its World in some sense

2267
01:20:35,159 --> 01:20:38,960
it can do things like ask this question

2268
01:20:37,199 --> 01:20:41,120
am I touching the mouse pointer like the

2269
01:20:38,960 --> 01:20:42,520
user's cursor am I touching a specific

2270
01:20:41,120 --> 01:20:44,519
color that you can override to be

2271
01:20:42,520 --> 01:20:46,960
anything you want is the distance to the

2272
01:20:44,520 --> 01:20:49,040
mouse pointer some specific value but

2273
01:20:46,960 --> 01:20:50,880
for now I'm going to focus this on this

2274
01:20:49,040 --> 01:20:53,159
this blue puzzle piece that asks a

2275
01:20:50,880 --> 01:20:54,760
question which itself is this white oval

2276
01:20:53,159 --> 01:20:56,759
that I can apparently change and then

2277
01:20:54,760 --> 01:20:58,800
it's going to wait for a response but

2278
01:20:56,760 --> 01:21:00,239
this puzzle piece is a little different

2279
01:20:58,800 --> 01:21:01,840
it's a little special it comes with a

2280
01:21:00,239 --> 01:21:04,239
freebie it comes with what we're going

2281
01:21:01,840 --> 01:21:05,960
to call technically a return value so

2282
01:21:04,239 --> 01:21:08,919
some functions don't just do something

2283
01:21:05,960 --> 01:21:10,920
on the screen they hand you back so to

2284
01:21:08,920 --> 01:21:12,600
speak a value that you can do anything

2285
01:21:10,920 --> 01:21:14,440
that you want with nothing happens

2286
01:21:12,600 --> 01:21:16,560
immediately unless you do something with

2287
01:21:14,440 --> 01:21:19,440
that so-called return value so let me go

2288
01:21:16,560 --> 01:21:20,560
ahead and drag this thing over here ask

2289
01:21:19,440 --> 01:21:22,159
what's your name and I'll use the

2290
01:21:20,560 --> 01:21:23,639
default question that seems a reasonable

2291
01:21:22,159 --> 01:21:25,440
place to start I'm not going to override

2292
01:21:23,639 --> 01:21:28,679
that default and now let me go ahead and

2293
01:21:25,440 --> 01:21:31,960
zoom out let me go back to looks let me

2294
01:21:28,679 --> 01:21:33,639
go to say and let me just form the

2295
01:21:31,960 --> 01:21:37,199
English sentence I want so let me zoom

2296
01:21:33,639 --> 01:21:39,880
in here and type in hello maybe comma

2297
01:21:37,199 --> 01:21:41,759
space I could do David but that's that's

2298
01:21:39,880 --> 01:21:43,800
obviously not right because I'm asking

2299
01:21:41,760 --> 01:21:45,120
for a name and then I'm like in advance

2300
01:21:43,800 --> 01:21:47,679
hardcoding my name that's not what I

2301
01:21:45,120 --> 01:21:50,639
want I just want hello comma and now let

2302
01:21:47,679 --> 01:21:52,280
me zoom out and grab one more say block

2303
01:21:50,639 --> 01:21:54,159
Let Me Maybe say here okay I don't want

2304
01:21:52,280 --> 01:21:56,000
to say hello hello I I don't want to

2305
01:21:54,159 --> 01:21:57,879
just type in my own name CU again then

2306
01:21:56,000 --> 01:22:00,360
what's the point of asking the user for

2307
01:21:57,880 --> 01:22:03,000
their name but notice this if I go back

2308
01:22:00,360 --> 01:22:06,599
to the sensing block this is where that

2309
01:22:03,000 --> 01:22:08,679
oval that's blue called answer is useful

2310
01:22:06,600 --> 01:22:10,239
this will be the so-called return value

2311
01:22:08,679 --> 01:22:12,280
of that function so I'm just going to go

2312
01:22:10,239 --> 01:22:14,080
ahead and do this and drag and drop even

2313
01:22:12,280 --> 01:22:16,040
though it's not the right size it is the

2314
01:22:14,080 --> 01:22:18,080
right shape and so scratch will be smart

2315
01:22:16,040 --> 01:22:20,519
about it and grow to fill that puzzle

2316
01:22:18,080 --> 01:22:22,639
piece for you let me zoom out now and

2317
01:22:20,520 --> 01:22:24,040
now let me click the green flag you'll

2318
01:22:22,639 --> 01:22:25,600
see that scratch is indeed prompting me

2319
01:22:24,040 --> 01:22:27,639
with the speech bubble what's your name

2320
01:22:25,600 --> 01:22:28,840
notice the little text box below the cat

2321
01:22:27,639 --> 01:22:31,199
is asking what's your name so I'm going

2322
01:22:28,840 --> 01:22:33,960
to type in da a v d and hit enter or I

2323
01:22:31,199 --> 01:22:36,638
can click the blue check

2324
01:22:33,960 --> 01:22:38,280
enter okay it's a little weird I wanted

2325
01:22:36,639 --> 01:22:40,760
him to say hello not just my name so let

2326
01:22:38,280 --> 01:22:43,599
me stop let me start it again all right

2327
01:22:40,760 --> 01:22:48,159
hello what's your name da a v

2328
01:22:43,600 --> 01:22:50,360
enter huh kind of rude uh why is there

2329
01:22:48,159 --> 01:22:53,320
this bug like I wanted to say hello

2330
01:22:50,360 --> 01:22:57,519
David not just David and and yet twice

2331
01:22:53,320 --> 01:22:59,960
it has failed to do so uh

2332
01:22:57,520 --> 01:23:02,199
yeah yeah the computer is processing my

2333
01:22:59,960 --> 01:23:03,679
directions my actions really quickly and

2334
01:23:02,199 --> 01:23:05,320
so it actually is doing it it's just you

2335
01:23:03,679 --> 01:23:07,760
and I in the room are just way too slow

2336
01:23:05,320 --> 01:23:10,080
to notice that it said hello David it

2337
01:23:07,760 --> 01:23:11,520
just seems to have just said David so

2338
01:23:10,080 --> 01:23:12,960
all right how can I fix this well here's

2339
01:23:11,520 --> 01:23:14,639
where you start to poke around and think

2340
01:23:12,960 --> 01:23:16,320
about how you might solve this let me go

2341
01:23:14,639 --> 01:23:19,199
back under looks maybe there's a smarter

2342
01:23:16,320 --> 01:23:20,759
way to do this maybe I could do okay I

2343
01:23:19,199 --> 01:23:22,599
could do this how about instead of just

2344
01:23:20,760 --> 01:23:24,320
say hello there's apparently another

2345
01:23:22,600 --> 01:23:26,520
puzzle piece where I can time it so I

2346
01:23:24,320 --> 01:23:29,320
can maybe slow things down a little bit

2347
01:23:26,520 --> 01:23:32,800
so let me do this let me throw away all

2348
01:23:29,320 --> 01:23:35,040
of this let me drag a say hello for two

2349
01:23:32,800 --> 01:23:37,000
seconds let me drag another say hello

2350
01:23:35,040 --> 01:23:39,800
for two seconds let me change the first

2351
01:23:37,000 --> 01:23:42,840
one to indeed hello comma and then let

2352
01:23:39,800 --> 01:23:44,360
me go back to sensing let me grab that

2353
01:23:42,840 --> 01:23:45,840
same answer because I threw it away a

2354
01:23:44,360 --> 01:23:47,159
second ago and I'll just change it I

2355
01:23:45,840 --> 01:23:49,840
don't even have to delete hello I can

2356
01:23:47,159 --> 01:23:51,239
just overwrite it like this so now I

2357
01:23:49,840 --> 01:23:54,159
think we'll kind of pump the brakes and

2358
01:23:51,239 --> 01:23:57,280
see things more slowly let me stop let

2359
01:23:54,159 --> 01:24:01,519
me start da ID enter

2360
01:23:57,280 --> 01:24:02,880
hello David okay so it's better like it

2361
01:24:01,520 --> 01:24:05,320
seems to be working I think your

2362
01:24:02,880 --> 01:24:06,679
hypothesis was right just looks kind of

2363
01:24:05,320 --> 01:24:07,599
stupid right like the fact that it's

2364
01:24:06,679 --> 01:24:10,120
saying

2365
01:24:07,600 --> 01:24:11,679
hello David like we can do better and

2366
01:24:10,120 --> 01:24:13,880
like literally every piece of software

2367
01:24:11,679 --> 01:24:16,199
on your phone or Mac or PC is better

2368
01:24:13,880 --> 01:24:17,840
than that it adds words together in the

2369
01:24:16,199 --> 01:24:19,440
user interfaces you and I are familiar

2370
01:24:17,840 --> 01:24:21,800
with so let's go a little more fishing

2371
01:24:19,440 --> 01:24:23,559
here let me throw away these let me go

2372
01:24:21,800 --> 01:24:27,800
back to look and just get the simpler

2373
01:24:23,560 --> 01:24:29,679
say I want this to say hello comma name

2374
01:24:27,800 --> 01:24:31,360
where name comes from that answer return

2375
01:24:29,679 --> 01:24:32,920
value so how can I do this well let me

2376
01:24:31,360 --> 01:24:34,639
go under operations which we haven't

2377
01:24:32,920 --> 01:24:36,440
been before there's a lot of stuff in

2378
01:24:34,639 --> 01:24:38,400
here some of it's mathematically related

2379
01:24:36,440 --> 01:24:40,040
adding subtracting and so forth you can

2380
01:24:38,400 --> 01:24:42,040
Generate random numbers which might be

2381
01:24:40,040 --> 01:24:44,280
useful and if I keep scrolling down

2382
01:24:42,040 --> 01:24:45,880
there's this join apple and banana but

2383
01:24:44,280 --> 01:24:48,519
that's just placeholder text you can

2384
01:24:45,880 --> 01:24:50,159
join one piece of text with another

2385
01:24:48,520 --> 01:24:52,040
piece of text by default apple and

2386
01:24:50,159 --> 01:24:54,799
banana but let's change it to hello and

2387
01:24:52,040 --> 01:24:56,840
my name name so this to wrong size but

2388
01:24:54,800 --> 01:24:59,600
right shape so let me let it snap into

2389
01:24:56,840 --> 01:25:02,639
place let me go ahead now and do hello

2390
01:24:59,600 --> 01:25:05,520
comma and now I think I just want to go

2391
01:25:02,639 --> 01:25:08,119
grab that answer return value let me

2392
01:25:05,520 --> 01:25:10,639
drag the same oval as before clobber

2393
01:25:08,119 --> 01:25:14,119
that is overwrite banana so now I'm kind

2394
01:25:10,639 --> 01:25:16,920
of composing functions the output of one

2395
01:25:14,119 --> 01:25:19,199
function join is going to be the input

2396
01:25:16,920 --> 01:25:20,239
of another function say so let's see

2397
01:25:19,199 --> 01:25:22,040
what happens now that they're kind of

2398
01:25:20,239 --> 01:25:24,239
stacked on top of each other or nested

2399
01:25:22,040 --> 01:25:28,119
so to speak click the Green Arrow a

2400
01:25:24,239 --> 01:25:29,159
green flag DAV ID enter hello David all

2401
01:25:28,119 --> 01:25:31,880
right that was pretty fast let's just

2402
01:25:29,159 --> 01:25:35,360
just do it once more stop start here we

2403
01:25:31,880 --> 01:25:37,000
go daavid enter okay right it's not the

2404
01:25:35,360 --> 01:25:38,880
most exciting program in the world but

2405
01:25:37,000 --> 01:25:39,880
it's more correct it's better design

2406
01:25:38,880 --> 01:25:41,960
just because that's what you would kind

2407
01:25:39,880 --> 01:25:43,600
of expect the software to do and not be

2408
01:25:41,960 --> 01:25:45,600
some kind of lame user interface that's

2409
01:25:43,600 --> 01:25:46,920
just inserting random delays to just

2410
01:25:45,600 --> 01:25:48,920
make it kind of work like that's a

2411
01:25:46,920 --> 01:25:50,119
workaround a hack if you will but

2412
01:25:48,920 --> 01:25:51,800
there's some cool things you can do with

2413
01:25:50,119 --> 01:25:53,799
scratch and we won't really go down the

2414
01:25:51,800 --> 01:25:55,400
rabbit hole of all of the fun and

2415
01:25:53,800 --> 01:25:57,119
familyfriendly features that it has but

2416
01:25:55,400 --> 01:25:59,400
there is one that's kind of cool here

2417
01:25:57,119 --> 01:26:01,280
let me go into the extensions button at

2418
01:25:59,400 --> 01:26:03,320
the bottom left of my screen and this

2419
01:26:01,280 --> 01:26:04,880
one's kind of cool let me go to text to

2420
01:26:03,320 --> 01:26:06,280
speech and you'll notice that this one

2421
01:26:04,880 --> 01:26:09,480
requires internet because it's

2422
01:26:06,280 --> 01:26:12,239
cloud-based but this just gave me some

2423
01:26:09,480 --> 01:26:13,839
new puzzle pieces in a new category text

2424
01:26:12,239 --> 01:26:16,040
to speech and these green ones do

2425
01:26:13,840 --> 01:26:18,239
exactly what they say so let me do this

2426
01:26:16,040 --> 01:26:19,480
let me zoom out again let me keep the

2427
01:26:18,239 --> 01:26:21,280
join block and I'm just going to

2428
01:26:19,480 --> 01:26:22,718
temporarily toss it over here it's not

2429
01:26:21,280 --> 01:26:24,880
going to delete itself cuz I didn't drag

2430
01:26:22,719 --> 01:26:27,320
it over to the other side but I'm going

2431
01:26:24,880 --> 01:26:29,719
to get rid of the say block in purple

2432
01:26:27,320 --> 01:26:32,119
I'm going to do the speak block here in

2433
01:26:29,719 --> 01:26:33,440
green and let it snap into place and

2434
01:26:32,119 --> 01:26:36,360
then I'm going to drag and drop this

2435
01:26:33,440 --> 01:26:38,719
onto the input to speak and now perhaps

2436
01:26:36,360 --> 01:26:42,159
a little more adorably let's try this

2437
01:26:38,719 --> 01:26:44,239
green flag what's your name d ID enter

2438
01:26:42,159 --> 01:26:47,638
and hello

2439
01:26:44,239 --> 01:26:49,320
David okay it's a little it's a little

2440
01:26:47,639 --> 01:26:50,719
robotic but at least now it has

2441
01:26:49,320 --> 01:26:52,679
synthesized speech and I've kind of got

2442
01:26:50,719 --> 01:26:54,880
my own like Siri or Google assistant or

2443
01:26:52,679 --> 01:26:56,840
Alexa thing going on here now where it's

2444
01:26:54,880 --> 01:26:59,119
now recognized whatever text it is and

2445
01:26:56,840 --> 01:27:00,760
it's played it well let's make this an

2446
01:26:59,119 --> 01:27:02,440
actual cat that doesn't talk in that

2447
01:27:00,760 --> 01:27:04,400
weird human voice let me go ahead and

2448
01:27:02,440 --> 01:27:06,280
get rid of most of this stuff and let's

2449
01:27:04,400 --> 01:27:08,599
get the cat to actually meow like a cat

2450
01:27:06,280 --> 01:27:10,960
tends to and let me go under the sounds

2451
01:27:08,600 --> 01:27:12,800
block now MIT gives you a few sounds for

2452
01:27:10,960 --> 01:27:14,320
free because it's designed around a cap

2453
01:27:12,800 --> 01:27:17,639
by default and I'm going to go ahead and

2454
01:27:14,320 --> 01:27:19,799
grab this one play sound meow until done

2455
01:27:17,639 --> 01:27:21,119
and now and we saw I heard a teaser for

2456
01:27:19,800 --> 01:27:23,600
this earlier in the

2457
01:27:21,119 --> 01:27:25,239
crowd

2458
01:27:23,600 --> 01:27:26,960
it's a little piercing admittedly we can

2459
01:27:25,239 --> 01:27:28,320
lower the volume a little bit there but

2460
01:27:26,960 --> 01:27:30,560
notice if I want the cat to meow a

2461
01:27:28,320 --> 01:27:33,960
second time I'll just click it

2462
01:27:30,560 --> 01:27:37,080
again okay and over there too I

2463
01:27:33,960 --> 01:27:40,040
hear okay all right so it's kind of cute

2464
01:27:37,080 --> 01:27:43,040
now right so it's just meow okay yes

2465
01:27:40,040 --> 01:27:45,000
echo echo so it's meowing now every time

2466
01:27:43,040 --> 01:27:47,400
I hit the green flag now that's great

2467
01:27:45,000 --> 01:27:49,600
but even a kid is probably going to like

2468
01:27:47,400 --> 01:27:51,159
would prefer that it just meow perhaps

2469
01:27:49,600 --> 01:27:53,440
like again and again without having to

2470
01:27:51,159 --> 01:27:54,799
keep hitting the button so well how

2471
01:27:53,440 --> 01:27:57,280
might we do this all right well if I

2472
01:27:54,800 --> 01:27:59,760
want it to meow multiple times why don't

2473
01:27:57,280 --> 01:28:02,199
I just like grab it another time and

2474
01:27:59,760 --> 01:28:03,719
another time alternatively you can right

2475
01:28:02,199 --> 01:28:05,280
click or control click a puzzle piece

2476
01:28:03,719 --> 01:28:08,600
and just duplicate it from a little menu

2477
01:28:05,280 --> 01:28:08,599
that drops down so here we go three

2478
01:28:09,360 --> 01:28:13,960
meows all right that's not really a

2479
01:28:11,400 --> 01:28:17,159
happy cat it sounds maybe hungry so can

2480
01:28:13,960 --> 01:28:19,600
we slow that down well maybe in fact if

2481
01:28:17,159 --> 01:28:21,799
I poke around let me go under control

2482
01:28:19,600 --> 01:28:23,760
looks like there's a weight block wait 1

2483
01:28:21,800 --> 01:28:25,480
second by default and notice scratch

2484
01:28:23,760 --> 01:28:27,679
will be pretty accommodating if you just

2485
01:28:25,480 --> 01:28:29,718
hover in between blocks it will grow to

2486
01:28:27,679 --> 01:28:31,600
fill that too so I could change it to

2487
01:28:29,719 --> 01:28:33,600
one or two or anything seconds I'll just

2488
01:28:31,600 --> 01:28:36,800
leave it at the default for now one and

2489
01:28:33,600 --> 01:28:36,800
now I'll go ahead and do

2490
01:28:39,040 --> 01:28:44,280
this okay so cuter and less hungry and

2491
01:28:41,960 --> 01:28:46,440
just more friendly but this isn't the

2492
01:28:44,280 --> 01:28:48,400
best design it is correct and let's use

2493
01:28:46,440 --> 01:28:50,239
that as a term of art correct means the

2494
01:28:48,400 --> 01:28:52,519
code does what you want it to do I want

2495
01:28:50,239 --> 01:28:55,000
the cat to meow three times slow slly

2496
01:28:52,520 --> 01:28:57,199
and it did so iager this is correct but

2497
01:28:55,000 --> 01:28:59,199
it's not the best design and this is

2498
01:28:57,199 --> 01:29:01,119
where things get more subjective right

2499
01:28:59,199 --> 01:29:03,239
like you could write accurate sentences

2500
01:29:01,119 --> 01:29:05,280
in an essay for an English class but

2501
01:29:03,239 --> 01:29:06,839
otherwise just it's just completely a

2502
01:29:05,280 --> 01:29:08,000
mess like your arguments here and there

2503
01:29:06,840 --> 01:29:11,119
and you don't say anything wrong but you

2504
01:29:08,000 --> 01:29:13,040
don't say it well in the context of code

2505
01:29:11,119 --> 01:29:14,920
we can do better than this and copy

2506
01:29:13,040 --> 01:29:17,400
paste or repeating yourself again and

2507
01:29:14,920 --> 01:29:19,080
again tends to be bad practice why

2508
01:29:17,400 --> 01:29:21,519
suppose that you want to change the

2509
01:29:19,080 --> 01:29:23,519
weight to two seconds instead of one

2510
01:29:21,520 --> 01:29:25,600
it's aditt not a big deal F I click

2511
01:29:23,520 --> 01:29:27,280
there I change it to two I click there I

2512
01:29:25,600 --> 01:29:29,280
change it to two but what if you Ma five

2513
01:29:27,280 --> 01:29:31,239
times 10 times now I have to change the

2514
01:29:29,280 --> 01:29:32,800
weight like in five 10 different places

2515
01:29:31,239 --> 01:29:34,678
like that's just stupid it's taking

2516
01:29:32,800 --> 01:29:36,480
unnecessary human time and you're going

2517
01:29:34,679 --> 01:29:37,719
to screw up eventually especially if

2518
01:29:36,480 --> 01:29:39,159
your program is getting longer you're

2519
01:29:37,719 --> 01:29:40,440
going to miss one of the inputs you're

2520
01:29:39,159 --> 01:29:42,480
going to leave the number wrong and

2521
01:29:40,440 --> 01:29:43,799
you're that's a bug so just based on

2522
01:29:42,480 --> 01:29:45,759
what you've seen already or if you've

2523
01:29:43,800 --> 01:29:47,480
programmed before which a few of you

2524
01:29:45,760 --> 01:29:50,440
have what's the term of art here that

2525
01:29:47,480 --> 01:29:53,320
will solve this how can we design this

2526
01:29:50,440 --> 01:29:55,678
better I heard it here here yeah so a

2527
01:29:53,320 --> 01:29:57,679
loop a loop some kind of cycle that says

2528
01:29:55,679 --> 01:29:59,600
do that again do that again not

2529
01:29:57,679 --> 01:30:01,719
infinitely many times necessarily but

2530
01:29:59,600 --> 01:30:03,520
some finite number well you can perhaps

2531
01:30:01,719 --> 01:30:06,320
see a spoiler on the screen under the

2532
01:30:03,520 --> 01:30:07,960
same uh orange control category is a

2533
01:30:06,320 --> 01:30:09,920
repeat block and by default it's

2534
01:30:07,960 --> 01:30:11,560
proposing 10 but we can change that so

2535
01:30:09,920 --> 01:30:14,480
let me do this I'm going to throw away

2536
01:30:11,560 --> 01:30:16,480
most of this copy paste as redundant I'm

2537
01:30:14,480 --> 01:30:18,119
going to detach this temporarily just to

2538
01:30:16,480 --> 01:30:20,718
make room for something else and I'm

2539
01:30:18,119 --> 01:30:22,159
going to drag a repeat block over here

2540
01:30:20,719 --> 01:30:23,320
and let that snap into place and I'm

2541
01:30:22,159 --> 01:30:25,360
going to change it for now just to be

2542
01:30:23,320 --> 01:30:26,840
three for consistency and this is the

2543
01:30:25,360 --> 01:30:29,159
correct shape even though it's too small

2544
01:30:26,840 --> 01:30:33,960
but scratch will accommodate that for us

2545
01:30:29,159 --> 01:30:35,799
and now same uh same output but arguably

2546
01:30:33,960 --> 01:30:37,400
better designed why because if I want to

2547
01:30:35,800 --> 01:30:39,560
change the number of meows I change it

2548
01:30:37,400 --> 01:30:41,400
in one place no copy paste messiness if

2549
01:30:39,560 --> 01:30:42,639
I want to change the waiting one place I

2550
01:30:41,400 --> 01:30:44,320
don't have to change it in multiple

2551
01:30:42,639 --> 01:30:46,639
places and not screw up so let me hit

2552
01:30:44,320 --> 01:30:46,639
the green

2553
01:30:49,320 --> 01:30:54,519
flag all right so nice now it would have

2554
01:30:52,199 --> 01:30:56,480
been nice if MIT had just given us a

2555
01:30:54,520 --> 01:30:58,440
meow block that just automates all of

2556
01:30:56,480 --> 01:31:00,280
this for us let me wager they gave us

2557
01:30:58,440 --> 01:31:03,440
the low-level implementation details

2558
01:31:00,280 --> 01:31:05,080
they gave us the play sound meow but I

2559
01:31:03,440 --> 01:31:06,960
had to implement like a decent number of

2560
01:31:05,080 --> 01:31:08,280
blocks just to get a cat to meow again

2561
01:31:06,960 --> 01:31:11,400
and again I feel like we should have

2562
01:31:08,280 --> 01:31:12,679
gotten that for free from MIT well they

2563
01:31:11,400 --> 01:31:15,159
don't have to be the only ones that

2564
01:31:12,679 --> 01:31:17,480
invent blocks for us to use you can

2565
01:31:15,159 --> 01:31:19,759
write your own functions your own verbs

2566
01:31:17,480 --> 01:31:22,638
or actions so how can we do this let's

2567
01:31:19,760 --> 01:31:24,880
make our own puzzle piece called now

2568
01:31:22,639 --> 01:31:27,000
that uses this code but creates it in

2569
01:31:24,880 --> 01:31:29,000
such a way that it's reusable elsewhere

2570
01:31:27,000 --> 01:31:30,760
so let me do this under my blocks in

2571
01:31:29,000 --> 01:31:33,159
pink here I'm going to go ahead and

2572
01:31:30,760 --> 01:31:34,639
click literally make a block now here's

2573
01:31:33,159 --> 01:31:37,239
an interface via which I can give the

2574
01:31:34,639 --> 01:31:38,400
block a name Meo W will be the name of

2575
01:31:37,239 --> 01:31:40,678
this block and I'm just going to go

2576
01:31:38,400 --> 01:31:42,759
ahead and quickly click okay that just

2577
01:31:40,679 --> 01:31:45,000
gives me a very generic pink puzzle

2578
01:31:42,760 --> 01:31:47,159
piece that starts with the word Define

2579
01:31:45,000 --> 01:31:49,920
because scratch is asking me to Define

2580
01:31:47,159 --> 01:31:51,799
that is implement or create this new

2581
01:31:49,920 --> 01:31:53,880
puzzle piece for me well what does it

2582
01:31:51,800 --> 01:31:56,119
mean to meow I'm going to claim that it

2583
01:31:53,880 --> 01:31:58,679
means to do these two steps to play the

2584
01:31:56,119 --> 01:32:01,000
sound meow and then just wait for one

2585
01:31:58,679 --> 01:32:03,360
second but what's powerful about this

2586
01:32:01,000 --> 01:32:06,400
idea is look at this up top now that

2587
01:32:03,360 --> 01:32:08,320
I've made a block it exists in scratch D

2588
01:32:06,400 --> 01:32:10,400
MIT didn't need to create this for me I

2589
01:32:08,320 --> 01:32:12,639
created it for myself and even you if we

2590
01:32:10,400 --> 01:32:15,960
end up sharing code so I can now drag

2591
01:32:12,639 --> 01:32:18,400
meow up in here and what's nice about

2592
01:32:15,960 --> 01:32:20,800
meow is that itself is yes a function

2593
01:32:18,400 --> 01:32:23,559
but it's also an abstraction like never

2594
01:32:20,800 --> 01:32:26,040
again do I or even you need to worry or

2595
01:32:23,560 --> 01:32:27,800
care about what it means to meow or

2596
01:32:26,040 --> 01:32:29,600
implement it I can sort of drag it out

2597
01:32:27,800 --> 01:32:31,320
of the way I didn't delete it drag it

2598
01:32:29,600 --> 01:32:33,320
out of the way out of sight out of mind

2599
01:32:31,320 --> 01:32:34,799
why because my code is now even better

2600
01:32:33,320 --> 01:32:36,799
designed in some sense because it's more

2601
01:32:34,800 --> 01:32:39,400
readable what is it doing when the green

2602
01:32:36,800 --> 01:32:41,159
flag is clicked repeat three times meow

2603
01:32:39,400 --> 01:32:42,679
it just says what it means and so it's a

2604
01:32:41,159 --> 01:32:44,119
lot easier to read it and it's a lot

2605
01:32:42,679 --> 01:32:46,719
easier to think about it especially if

2606
01:32:44,119 --> 01:32:49,199
you're using Meow in other uh projects

2607
01:32:46,719 --> 01:32:52,600
too now let me go ahead and right hit

2608
01:32:49,199 --> 01:32:54,719
click play same thing so it's not really

2609
01:32:52,600 --> 01:32:57,199
fundamentally any different but I can

2610
01:32:54,719 --> 01:32:59,360
make this custom puzzle piece this own

2611
01:32:57,199 --> 01:33:01,879
function of M meow even more powerful

2612
01:32:59,360 --> 01:33:03,400
let me kind of rewind a bit and go to my

2613
01:33:01,880 --> 01:33:05,520
meow puzzle piece and I am going to

2614
01:33:03,400 --> 01:33:07,199
control click or right click on my pink

2615
01:33:05,520 --> 01:33:09,679
puzzle piece and I'm going to edit it so

2616
01:33:07,199 --> 01:33:11,799
I kind of regret making meow so simple

2617
01:33:09,679 --> 01:33:15,080
wouldn't it be nice if meow took an

2618
01:33:11,800 --> 01:33:16,760
input AKA an argument that tells meow

2619
01:33:15,080 --> 01:33:19,080
how many times to meow then I can get

2620
01:33:16,760 --> 01:33:21,199
rid of that Loop and just tell meow how

2621
01:33:19,080 --> 01:33:22,840
many meows I actually want so I'm going

2622
01:33:21,199 --> 01:33:25,719
to click on another button here called

2623
01:33:22,840 --> 01:33:27,239
literally add an input and it's going to

2624
01:33:25,719 --> 01:33:28,840
have placeholder here so I'm just going

2625
01:33:27,239 --> 01:33:31,080
to put a placeholder there I keep using

2626
01:33:28,840 --> 01:33:32,880
n for number which is a go-to in

2627
01:33:31,080 --> 01:33:34,280
computer scientist terms um and I'm

2628
01:33:32,880 --> 01:33:35,440
going to add some descriptive text just

2629
01:33:34,280 --> 01:33:37,080
so that it's a little more

2630
01:33:35,440 --> 01:33:40,040
self-explanatory I'm just going to say

2631
01:33:37,080 --> 01:33:41,719
meow n times but there's only one oval

2632
01:33:40,040 --> 01:33:43,840
times is just going to be explanatory

2633
01:33:41,719 --> 01:33:47,119
text and now notice what has happened

2634
01:33:43,840 --> 01:33:49,639
now my puzzle piece takes an input AKA

2635
01:33:47,119 --> 01:33:51,119
an argument that will tell that function

2636
01:33:49,639 --> 01:33:52,000
to meow some number of times but it's

2637
01:33:51,119 --> 01:33:54,519
not just going to going to work

2638
01:33:52,000 --> 01:33:57,400
magically I need to implement that lower

2639
01:33:54,520 --> 01:33:59,719
level detail so let me zoom out I have

2640
01:33:57,400 --> 01:34:00,960
to remind myself what this function was

2641
01:33:59,719 --> 01:34:02,239
so I'm going to drag it higher up just

2642
01:34:00,960 --> 01:34:04,520
so they're on the screen at the same

2643
01:34:02,239 --> 01:34:06,519
time I'm going to go ahead now and

2644
01:34:04,520 --> 01:34:08,280
temporarily move this over here I'm

2645
01:34:06,520 --> 01:34:10,119
going to temporarily detach this over

2646
01:34:08,280 --> 01:34:13,639
here why because what I think I want to

2647
01:34:10,119 --> 01:34:17,199
do is move my Loop into the function

2648
01:34:13,639 --> 01:34:19,320
itself move the play and the weight into

2649
01:34:17,199 --> 01:34:22,400
the loop but I don't want to hardcode

2650
01:34:19,320 --> 01:34:24,880
three notice that n here is its own oval

2651
01:34:22,400 --> 01:34:27,599
I can drag a copy of N and just let it

2652
01:34:24,880 --> 01:34:30,320
go there so now I have a new version of

2653
01:34:27,600 --> 01:34:32,920
meow that takes an argument in that

2654
01:34:30,320 --> 01:34:35,080
tells meow how many times to meow and

2655
01:34:32,920 --> 01:34:36,520
now let me again drag this out of sight

2656
01:34:35,080 --> 01:34:38,119
out of mind because who cares how I

2657
01:34:36,520 --> 01:34:40,960
implemented it once it's implemented

2658
01:34:38,119 --> 01:34:43,080
it's sort of done now my program is even

2659
01:34:40,960 --> 01:34:45,040
better designed in some sense why

2660
01:34:43,080 --> 01:34:46,960
because now it really just says what it

2661
01:34:45,040 --> 01:34:49,040
means there's no Loop there's no repeat

2662
01:34:46,960 --> 01:34:51,760
no like implementation details when

2663
01:34:49,040 --> 01:34:54,400
green flag clicked meow three times and

2664
01:34:51,760 --> 01:34:56,159
so functions indeed let you implement

2665
01:34:54,400 --> 01:34:58,199
algorithms like they're just code that

2666
01:34:56,159 --> 01:35:00,280
do something for you but they're also

2667
01:34:58,199 --> 01:35:02,119
themselves abstractions why because once

2668
01:35:00,280 --> 01:35:04,119
a function exists it has a name and you

2669
01:35:02,119 --> 01:35:06,639
can think about it in that term and you

2670
01:35:04,119 --> 01:35:09,639
can use it by its name you don't have to

2671
01:35:06,639 --> 01:35:11,400
care or remember how the function itself

2672
01:35:09,639 --> 01:35:13,440
was built whether it's by you or even

2673
01:35:11,400 --> 01:35:16,280
MIT so again here I'll click the green

2674
01:35:13,440 --> 01:35:16,280
flag it's the same

2675
01:35:18,440 --> 01:35:23,719
thing so still correct but better and

2676
01:35:21,600 --> 01:35:25,560
better designed and so anytime here and

2677
01:35:23,719 --> 01:35:27,400
out with scratch or soon C and

2678
01:35:25,560 --> 01:35:29,639
eventually python when you find yourself

2679
01:35:27,400 --> 01:35:31,960
doing anything resembling copy paste or

2680
01:35:29,639 --> 01:35:33,360
again and again grabbing the same code

2681
01:35:31,960 --> 01:35:35,960
probably an opportunity to say wait a

2682
01:35:33,360 --> 01:35:37,759
minute let me refactor this so to speak

2683
01:35:35,960 --> 01:35:39,480
that is rip out the code that seems to

2684
01:35:37,760 --> 01:35:41,040
be repeated again and again and put it

2685
01:35:39,480 --> 01:35:44,080
in its own function so you can give it a

2686
01:35:41,040 --> 01:35:47,239
descriptive name and use and reuse it

2687
01:35:44,080 --> 01:35:49,440
any questions just yet on now saying or

2688
01:35:47,239 --> 01:35:52,009
these Loops or these functions that

2689
01:35:49,440 --> 01:35:54,839
we're using yeah

2690
01:35:52,010 --> 01:35:56,280
[Music]

2691
01:35:54,840 --> 01:35:58,400
how did I make it so it meows three

2692
01:35:56,280 --> 01:36:00,360
times so I originally only had a puzzle

2693
01:35:58,400 --> 01:36:02,920
piece called meow and I decided to

2694
01:36:00,360 --> 01:36:04,719
improve it so I held down control and I

2695
01:36:02,920 --> 01:36:06,840
right clicked or control clicked on the

2696
01:36:04,719 --> 01:36:08,400
pink puzzle piece at top left and I

2697
01:36:06,840 --> 01:36:10,840
clicked edit and that brought back the

2698
01:36:08,400 --> 01:36:13,239
original interface that lets me add some

2699
01:36:10,840 --> 01:36:15,800
arguments to the puzzle piece itself and

2700
01:36:13,239 --> 01:36:17,919
I clicked add an input on the left here

2701
01:36:15,800 --> 01:36:20,159
and then I clicked on add a label over

2702
01:36:17,920 --> 01:36:22,480
here so that just lets you customize it

2703
01:36:20,159 --> 01:36:24,040
even further all right so we've done

2704
01:36:22,480 --> 01:36:25,638
this let's add one of those other

2705
01:36:24,040 --> 01:36:28,000
Primitives too to do something

2706
01:36:25,639 --> 01:36:30,400
optionally so how about we make the cat

2707
01:36:28,000 --> 01:36:32,400
meow only if it's being petted by a

2708
01:36:30,400 --> 01:36:34,480
human as by moving the mouse to hover

2709
01:36:32,400 --> 01:36:36,599
over the cat like a human would pet a

2710
01:36:34,480 --> 01:36:39,839
cat well let me go ahead and throw uh

2711
01:36:36,600 --> 01:36:41,639
away the meowing uh for now and let me

2712
01:36:39,840 --> 01:36:42,920
simplify it by just using a sound I'm

2713
01:36:41,639 --> 01:36:46,199
going to go ahead and do this I'm going

2714
01:36:42,920 --> 01:36:48,400
to go ahead and have a control block

2715
01:36:46,199 --> 01:36:50,799
that says if because I want to implement

2716
01:36:48,400 --> 01:36:51,920
the idea of if the cursor is touching

2717
01:36:50,800 --> 01:36:53,960
the Cal

2718
01:36:51,920 --> 01:36:55,480
then play sound meow or I could use my

2719
01:36:53,960 --> 01:36:57,679
same pink puzzle piece but I'm going to

2720
01:36:55,480 --> 01:37:00,280
throw that away and focus only now on

2721
01:36:57,679 --> 01:37:02,440
the sounds and I'm going to do this uh

2722
01:37:00,280 --> 01:37:03,960
if uh touching Mouse pointer so I need

2723
01:37:02,440 --> 01:37:06,280
to sense something about the world and

2724
01:37:03,960 --> 01:37:08,520
we saw this earlier so if touching Mouse

2725
01:37:06,280 --> 01:37:10,360
pointer so notice this shape here way

2726
01:37:08,520 --> 01:37:13,639
too big but it is the right shape so if

2727
01:37:10,360 --> 01:37:15,839
I hover just right it'll snap into place

2728
01:37:13,639 --> 01:37:19,080
and this now in blue is my Boolean

2729
01:37:15,840 --> 01:37:21,800
expression a yes no question true false

2730
01:37:19,080 --> 01:37:25,159
uh if is a conditional and what do I

2731
01:37:21,800 --> 01:37:27,040
want to do well if the Cat is being uh

2732
01:37:25,159 --> 01:37:29,400
is touching the mouse pointer I want to

2733
01:37:27,040 --> 01:37:31,320
go ahead and play sound meow until done

2734
01:37:29,400 --> 01:37:34,400
so let's do this I'm going to hit green

2735
01:37:31,320 --> 01:37:35,799
flag click now nothing's happened yet

2736
01:37:34,400 --> 01:37:37,119
because it's a conditional right it's

2737
01:37:35,800 --> 01:37:39,040
only supposed to do something if I'm

2738
01:37:37,119 --> 01:37:42,799
touching the cat let me move the cursor

2739
01:37:39,040 --> 01:37:48,000
over to the cat and and and wait for

2740
01:37:42,800 --> 01:37:50,560
it h another bug why is the cat not

2741
01:37:48,000 --> 01:37:53,520
meowing even though I very explicitly

2742
01:37:50,560 --> 01:37:55,719
said if touch in Mouse pointer meow yeah

2743
01:37:53,520 --> 01:37:55,719
in the

2744
01:37:56,239 --> 01:38:00,280
middle yeah this is again my computers

2745
01:37:58,320 --> 01:38:02,119
are so darn fast like yours I click the

2746
01:38:00,280 --> 01:38:03,639
green flag it asked the question am I

2747
01:38:02,119 --> 01:38:05,480
touching the mouse pointer well no cuz

2748
01:38:03,639 --> 01:38:07,639
my cursor was up there not touching the

2749
01:38:05,480 --> 01:38:10,799
cat it's too late the cat's out of the

2750
01:38:07,639 --> 01:38:12,960
bag and so we have to instead solve this

2751
01:38:10,800 --> 01:38:15,480
some other mean by some other means how

2752
01:38:12,960 --> 01:38:18,520
can we fix this how do we fix that sort

2753
01:38:15,480 --> 01:38:20,400
of race yeah yeah so why don't we just

2754
01:38:18,520 --> 01:38:22,480
keep asking the question until I

2755
01:38:20,400 --> 01:38:24,119
eventually am I'm not actually petting

2756
01:38:22,480 --> 01:38:26,519
the cat so let me detach this

2757
01:38:24,119 --> 01:38:28,559
temporarily let me go under control let

2758
01:38:26,520 --> 01:38:29,960
me go under instead of repeat some

2759
01:38:28,560 --> 01:38:31,800
finite number of times let's just do it

2760
01:38:29,960 --> 01:38:33,800
forever so sometimes Loops that do work

2761
01:38:31,800 --> 01:38:36,080
forever are a good thing like the clock

2762
01:38:33,800 --> 01:38:37,520
on your phone that's in a loop forever

2763
01:38:36,080 --> 01:38:39,480
because you want it to always tell time

2764
01:38:37,520 --> 01:38:41,440
and not stop at the end of the day so

2765
01:38:39,480 --> 01:38:43,678
sometimes you do want code to Loop

2766
01:38:41,440 --> 01:38:45,638
forever as in this case so let me go

2767
01:38:43,679 --> 01:38:47,679
ahead and drag and drop it there let me

2768
01:38:45,639 --> 01:38:49,000
again click the green flag nothing's

2769
01:38:47,679 --> 01:38:51,800
happening yet but notice the program's

2770
01:38:49,000 --> 01:38:56,320
still running and so if if I move my

2771
01:38:51,800 --> 01:38:58,480
cursor move my cursor move my cursor

2772
01:38:56,320 --> 01:39:01,320
and okay so maybe we could add some

2773
01:38:58,480 --> 01:39:04,080
waiting but the cat does not want to be

2774
01:39:01,320 --> 01:39:05,360
pet in this case but it's indeed

2775
01:39:04,080 --> 01:39:07,280
conditional so there we have an

2776
01:39:05,360 --> 01:39:09,360
incarnation in scratch of doing

2777
01:39:07,280 --> 01:39:11,159
something conditionally now we can make

2778
01:39:09,360 --> 01:39:13,679
this really cool really fast if you will

2779
01:39:11,159 --> 01:39:16,638
let me stop this version let me go ahead

2780
01:39:13,679 --> 01:39:18,400
and do this uh let me go ahead and throw

2781
01:39:16,639 --> 01:39:20,560
all of this away let me go into my

2782
01:39:18,400 --> 01:39:22,799
little uh extensions Bucket over here

2783
01:39:20,560 --> 01:39:24,400
and let me do video sensing since most

2784
01:39:22,800 --> 01:39:27,000
uh laptops or phones these days have

2785
01:39:24,400 --> 01:39:30,280
cameras and there indeed I am with

2786
01:39:27,000 --> 01:39:32,679
Sanders behind me and let me do this um

2787
01:39:30,280 --> 01:39:35,199
when video motion and let me get out of

2788
01:39:32,679 --> 01:39:37,639
the way when video motion is greater

2789
01:39:35,199 --> 01:39:39,638
than some value so 10 is the default

2790
01:39:37,639 --> 01:39:41,400
this is just a number that measures how

2791
01:39:39,639 --> 01:39:43,320
much motion there is or isn't so small

2792
01:39:41,400 --> 01:39:45,320
number is like no motion big number is

2793
01:39:43,320 --> 01:39:47,840
lots of motion so I'm going to choose 50

2794
01:39:45,320 --> 01:39:49,880
somewhat arbitrarily here so 50 this is

2795
01:39:47,840 --> 01:39:53,159
not normal to program off to the side

2796
01:39:49,880 --> 01:39:56,800
but I'm now going to say this when video

2797
01:39:53,159 --> 01:40:00,000
motion is 50 go ahead and play sound

2798
01:39:56,800 --> 01:40:01,960
meow like this so the cat is still in

2799
01:40:00,000 --> 01:40:05,719
that world I'm going to stop the program

2800
01:40:01,960 --> 01:40:06,520
and rerun it so here we go green flag

2801
01:40:05,719 --> 01:40:08,719
and

2802
01:40:06,520 --> 01:40:10,719
now here come all right this is a little

2803
01:40:08,719 --> 01:40:13,719
creepy the way I'm petting the cat

2804
01:40:10,719 --> 01:40:13,719
but

2805
01:40:15,960 --> 01:40:21,840
and ah

2806
01:40:19,159 --> 01:40:25,199
okay there we go okay so 50 was too big

2807
01:40:21,840 --> 01:40:25,199
of a number I have to pet the cat

2808
01:40:26,440 --> 01:40:31,559
faster whereas this if I don't

2809
01:40:31,880 --> 01:40:37,159
know yeah

2810
01:40:34,239 --> 01:40:38,440
so okay so you can make things even more

2811
01:40:37,159 --> 01:40:39,839
interactive in this way by just

2812
01:40:38,440 --> 01:40:41,559
assembling different puzzle pieces and

2813
01:40:39,840 --> 01:40:42,760
honestly there are so many different

2814
01:40:41,560 --> 01:40:44,480
puzzle pieces in here we're not going to

2815
01:40:42,760 --> 01:40:46,719
even scratch the surface of a lot of

2816
01:40:44,480 --> 01:40:48,360
them but they generally just do what

2817
01:40:46,719 --> 01:40:51,239
they say and indeed when you see on the

2818
01:40:48,360 --> 01:40:52,799
screen here um this pallet of puzzle

2819
01:40:51,239 --> 01:40:54,119
pieces really a lot of programming

2820
01:40:52,800 --> 01:40:55,960
especially early on when learning a

2821
01:40:54,119 --> 01:40:58,000
language is just trying different things

2822
01:40:55,960 --> 01:40:59,920
and try and fail and if it doesn't work

2823
01:40:58,000 --> 01:41:01,520
quite look for doesn't work quite right

2824
01:40:59,920 --> 01:41:03,800
look for an alternative solution there

2825
01:41:01,520 --> 01:41:06,000
too as even I just had to do a moment

2826
01:41:03,800 --> 01:41:07,719
ago well let's go ahead and use actually

2827
01:41:06,000 --> 01:41:09,360
how about another example of something a

2828
01:41:07,719 --> 01:41:11,280
predecessor of yours made let me go

2829
01:41:09,360 --> 01:41:14,639
ahead and grab a program I opened in

2830
01:41:11,280 --> 01:41:17,280
advance here uh called wacka um might we

2831
01:41:14,639 --> 01:41:22,280
get a brave volunteer to come up who is

2832
01:41:17,280 --> 01:41:24,320
willing to whack a mole with their head

2833
01:41:22,280 --> 01:41:26,800
virtually maybe okay let's see how about

2834
01:41:24,320 --> 01:41:30,159
in way back you want to come on down all

2835
01:41:26,800 --> 01:41:33,080
right come on down and in just a sure

2836
01:41:30,159 --> 01:41:33,080
Round of Applause for our

2837
01:41:35,400 --> 01:41:38,559
volunteer all

2838
01:41:38,679 --> 01:41:42,880
right so here we

2839
01:41:43,239 --> 01:41:48,678
have come on down there what's your name

2840
01:41:47,199 --> 01:41:51,519
I'm Josh oh actually say it into the

2841
01:41:48,679 --> 01:41:54,280
microphone hi I'm Josh

2842
01:41:51,520 --> 01:41:57,360
okay nice welcome Josh come on

2843
01:41:54,280 --> 01:41:58,519
over all right so same idea here I'll

2844
01:41:57,360 --> 01:41:59,960
take the mic back you can you'll have to

2845
01:41:58,520 --> 01:42:01,040
stand in front of the camera in just a

2846
01:41:59,960 --> 01:42:03,440
moment you're going to have to position

2847
01:42:01,040 --> 01:42:06,159
your head in a box that your classmate

2848
01:42:03,440 --> 01:42:06,159
from yester year

2849
01:42:06,280 --> 01:42:11,440
created and we'll start with beginner

2850
01:42:09,080 --> 01:42:14,240
okay so line your head up in the Box in

2851
01:42:11,440 --> 01:42:14,849
a moment all right all

2852
01:42:14,240 --> 01:42:17,949
[Music]

2853
01:42:14,850 --> 01:42:17,949
[Applause]

2854
01:42:19,760 --> 01:42:22,760
right

2855
01:42:26,030 --> 01:42:32,080
[Music]

2856
01:42:28,679 --> 01:42:32,080
nice 12

2857
01:42:35,960 --> 01:42:41,840
seconds 5 Seconds notice the score is up

2858
01:42:39,040 --> 01:42:44,280
to 18 already pretty

2859
01:42:41,840 --> 01:42:47,000
good all right a round of applause for

2860
01:42:44,280 --> 01:42:47,000
Josh if you

2861
01:42:49,760 --> 01:42:54,159
can so notice how using some fairly

2862
01:42:52,560 --> 01:42:56,360
simple Primitives things do get

2863
01:42:54,159 --> 01:42:57,598
interesting pretty fast and how was that

2864
01:42:56,360 --> 01:42:59,440
implemented well there were probably at

2865
01:42:57,599 --> 01:43:01,080
least four Sprites so you're not re

2866
01:42:59,440 --> 01:43:02,759
confined to just one cat you can create

2867
01:43:01,080 --> 01:43:04,040
more and more Sprites change what they

2868
01:43:02,760 --> 01:43:06,000
look like so they actually look like a

2869
01:43:04,040 --> 01:43:07,880
mole in this case there's probably some

2870
01:43:06,000 --> 01:43:10,199
conditionals in there Some Loops for 30

2871
01:43:07,880 --> 01:43:12,400
seconds that's checking if Josh's head's

2872
01:43:10,199 --> 01:43:14,280
movement is exceeding some value over

2873
01:43:12,400 --> 01:43:16,320
this way or over this way then increment

2874
01:43:14,280 --> 01:43:18,000
something called a variable we'll see

2875
01:43:16,320 --> 01:43:20,239
those two just like in algebra you might

2876
01:43:18,000 --> 01:43:22,320
have X and Y and Z storing values like

2877
01:43:20,239 --> 01:43:24,638
numbers so can computer programs have

2878
01:43:22,320 --> 01:43:27,280
variables called X or Y or Z or more

2879
01:43:24,639 --> 01:43:29,199
descriptively called score as in this

2880
01:43:27,280 --> 01:43:31,239
case at top right or another variable

2881
01:43:29,199 --> 01:43:32,879
called countdown typically one word in

2882
01:43:31,239 --> 01:43:34,280
code but in this case two words that

2883
01:43:32,880 --> 01:43:36,119
just store some value so there's

2884
01:43:34,280 --> 01:43:38,199
probably some math going on in there

2885
01:43:36,119 --> 01:43:40,000
whereby the author of this program just

2886
01:43:38,199 --> 01:43:42,280
is incrementing that is adding one in

2887
01:43:40,000 --> 01:43:44,199
one every time it detected that uh a

2888
01:43:42,280 --> 01:43:46,759
mole had been whacked in this case with

2889
01:43:44,199 --> 01:43:48,919
movement so back in the day I myself

2890
01:43:46,760 --> 01:43:50,280
actually implemented my very first

2891
01:43:48,920 --> 01:43:52,760
program in scratch when I was at a

2892
01:43:50,280 --> 01:43:54,679
graduate student actually at MIT um cost

2893
01:43:52,760 --> 01:43:56,639
registered at MIT taking a class from

2894
01:43:54,679 --> 01:43:58,080
mit's media lab specifically the

2895
01:43:56,639 --> 01:44:00,040
lifelong kindergarten Group which is the

2896
01:43:58,080 --> 01:44:03,119
group that created scratch itself and

2897
01:44:00,040 --> 01:44:05,880
the program I wrote all those years ago

2898
01:44:03,119 --> 01:44:07,759
and still rather cling to is a little

2899
01:44:05,880 --> 01:44:10,080
something here called Oscar time that I

2900
01:44:07,760 --> 01:44:13,360
thought I'd play just a quick excerpt of

2901
01:44:10,080 --> 01:44:15,880
my myself here so in this case consider

2902
01:44:13,360 --> 01:44:17,759
as the music starts playing how this

2903
01:44:15,880 --> 01:44:19,719
program which is much more sophisticated

2904
01:44:17,760 --> 01:44:21,800
certainly than the earliest say hello

2905
01:44:19,719 --> 01:44:23,840
examples we just did might also be

2906
01:44:21,800 --> 01:44:26,760
implemented let me go ahead now and

2907
01:44:23,840 --> 01:44:26,760
click the green

2908
01:44:30,719 --> 01:44:35,360
flag so some trash is moving presumably

2909
01:44:33,520 --> 01:44:38,800
in some kind of loop from the

2910
01:44:35,360 --> 01:44:39,799
Top If I'm touching the mouse cursor it

2911
01:44:38,800 --> 01:44:43,239
follows

2912
01:44:39,800 --> 01:44:45,639
me if I hover over the trash can it

2913
01:44:43,239 --> 01:44:48,919
responds if I let

2914
01:44:45,639 --> 01:44:50,760
go in some kind of loop Oscar pops out

2915
01:44:48,920 --> 01:44:53,880
creates a variable with the current

2916
01:44:50,760 --> 01:44:53,880
score and it happens

2917
01:45:04,320 --> 01:45:08,440
again pretty easy at first

2918
01:45:11,280 --> 01:45:14,960
but I don't need to keep playing this up

2919
01:45:13,360 --> 01:45:16,839
on stage in front of everyone so my

2920
01:45:14,960 --> 01:45:18,960
score is already now up to some six or

2921
01:45:16,840 --> 01:45:20,920
so but in a moment two you'll see that

2922
01:45:18,960 --> 01:45:24,599
it's going to escalate so I'm taking

2923
01:45:20,920 --> 01:45:24,599
into account some time apparently so

2924
01:45:26,239 --> 01:45:30,080
now so more and more Sprites are

2925
01:45:28,520 --> 01:45:31,320
suddenly appearing and notice that each

2926
01:45:30,080 --> 01:45:32,800
time they're appearing from a different

2927
01:45:31,320 --> 01:45:35,320
part of the screen that's an illusion

2928
01:45:32,800 --> 01:45:37,719
perhaps do that pick a random number

2929
01:45:35,320 --> 01:45:39,559
between X and Y so you can actually pick

2930
01:45:37,719 --> 01:45:41,280
some range of values to have the game

2931
01:45:39,560 --> 01:45:42,679
constantly changing and indeed I'm going

2932
01:45:41,280 --> 01:45:44,880
to go ahead and click stop since i'

2933
01:45:42,679 --> 01:45:46,440
spent like 8 hours plus years ago making

2934
01:45:44,880 --> 01:45:48,400
this and I can never listen to the song

2935
01:45:46,440 --> 01:45:51,280
again not that I should be anyway at

2936
01:45:48,400 --> 01:45:52,719
this point in my life but this song is

2937
01:45:51,280 --> 01:45:55,119
uh synchronized in with a lot of the

2938
01:45:52,719 --> 01:45:56,440
actions that's happening and ultimately

2939
01:45:55,119 --> 01:45:57,880
there's just a lot of building blocks

2940
01:45:56,440 --> 01:46:00,119
but I didn't sit down and Implement

2941
01:45:57,880 --> 01:46:01,840
Oscar time as I called it all at once I

2942
01:46:00,119 --> 01:46:03,598
really did take baby steps so to speak

2943
01:46:01,840 --> 01:46:06,440
and I figured out well how could I

2944
01:46:03,599 --> 01:46:08,840
decompose this Vision I had at the time

2945
01:46:06,440 --> 01:46:10,519
to create this game ultimately and how

2946
01:46:08,840 --> 01:46:12,080
do I bite off maybe the easiest Parts

2947
01:46:10,520 --> 01:46:14,040
first and honestly the first thing I did

2948
01:46:12,080 --> 01:46:15,800
was I found this image and I just like

2949
01:46:14,040 --> 01:46:18,080
dragged and dropped it into scratch okay

2950
01:46:15,800 --> 01:46:19,679
done like lamp post is installed it

2951
01:46:18,080 --> 01:46:21,559
doesn't do anything it's not interactive

2952
01:46:19,679 --> 01:46:23,400
but I at least set the stage so to speak

2953
01:46:21,560 --> 01:46:25,280
for the program then what else might I

2954
01:46:23,400 --> 01:46:28,040
have done well let me do this let me go

2955
01:46:25,280 --> 01:46:32,040
ahead and open up uh in another editor

2956
01:46:28,040 --> 01:46:34,920
here a early incarnation of Oscar Time

2957
01:46:32,040 --> 01:46:37,519
by doing this let me go into Oscar time

2958
01:46:34,920 --> 01:46:39,840
here let me full screen this and here

2959
01:46:37,520 --> 01:46:42,400
you have let me hide the trash for just

2960
01:46:39,840 --> 01:46:44,679
a moment is what I might call the second

2961
01:46:42,400 --> 01:46:46,559
uh version of my program wherein at the

2962
01:46:44,679 --> 01:46:47,920
top right of the stage here I had the

2963
01:46:46,560 --> 01:46:49,639
lamp post which I just dragged and

2964
01:46:47,920 --> 01:46:51,400
dropped and got going but then I added

2965
01:46:49,639 --> 01:46:52,599
an actual Sprite and it has to be a

2966
01:46:51,400 --> 01:46:54,759
Sprite if you wanted to do things

2967
01:46:52,599 --> 01:46:57,040
interactively the lamp post not a Sprite

2968
01:46:54,760 --> 01:46:59,199
it's just an image a costume if you will

2969
01:46:57,040 --> 01:47:00,800
for the whole stage itself a backdrop

2970
01:46:59,199 --> 01:47:02,719
but this thing is indeed a Sprite

2971
01:47:00,800 --> 01:47:04,880
because it needs to respond to code and

2972
01:47:02,719 --> 01:47:07,360
events like dragging and dropping so

2973
01:47:04,880 --> 01:47:10,239
what might I have done early on with

2974
01:47:07,360 --> 01:47:11,839
that code well maybe the first version

2975
01:47:10,239 --> 01:47:13,919
would have been something like this

2976
01:47:11,840 --> 01:47:16,280
where by my very first version of Oscar

2977
01:47:13,920 --> 01:47:17,679
time might have said something like oh

2978
01:47:16,280 --> 01:47:20,119
this how about let me control the

2979
01:47:17,679 --> 01:47:22,199
program as before or rather events when

2980
01:47:20,119 --> 01:47:25,040
the green flag is clicked what do I want

2981
01:47:22,199 --> 01:47:27,960
to do well I want to go ahead and

2982
01:47:25,040 --> 01:47:30,519
forever do something like this uh

2983
01:47:27,960 --> 01:47:32,119
forever so I want the lid to open up if

2984
01:47:30,520 --> 01:47:33,760
I touch it so if the cursor gets near

2985
01:47:32,119 --> 01:47:35,839
the lid I want the lid to open up and

2986
01:47:33,760 --> 01:47:38,280
then if I move away I want it to close

2987
01:47:35,840 --> 01:47:39,719
so how can I do that I want an if but I

2988
01:47:38,280 --> 01:47:41,800
just don't want one question I really

2989
01:47:39,719 --> 01:47:44,119
want two a fork in the road that goes

2990
01:47:41,800 --> 01:47:46,320
left or right so to speak and let me

2991
01:47:44,119 --> 01:47:49,280
grab this puzzle piece here as I did

2992
01:47:46,320 --> 01:47:50,920
long ago so notice it grows to fill

2993
01:47:49,280 --> 01:47:53,159
what's the question I want to ask well

2994
01:47:50,920 --> 01:47:55,760
under sensing I'm going to go ahead here

2995
01:47:53,159 --> 01:47:58,400
and say if this trash can is touching

2996
01:47:55,760 --> 01:47:59,960
the mouse pointer what do I want to do

2997
01:47:58,400 --> 01:48:01,199
well I want to change what the trash can

2998
01:47:59,960 --> 01:48:03,040
looks like and this part I did in

2999
01:48:01,199 --> 01:48:04,598
advance of class if you go up here to

3000
01:48:03,040 --> 01:48:06,840
costumes this is where all the graphical

3001
01:48:04,599 --> 01:48:09,400
stuff happens and you'll see that I

3002
01:48:06,840 --> 01:48:11,639
imported a whole bunch of different

3003
01:48:09,400 --> 01:48:13,799
costumes that effectively much like a

3004
01:48:11,639 --> 01:48:15,920
video when you play them quickly creates

3005
01:48:13,800 --> 01:48:17,800
the illusion of movement some animation

3006
01:48:15,920 --> 01:48:19,840
but it's really just dot dot dot dot dot

3007
01:48:17,800 --> 01:48:21,679
different images showing on the screen

3008
01:48:19,840 --> 01:48:25,199
well some of these costumes are called

3009
01:48:21,679 --> 01:48:27,199
like Oscar 1 Oscar 2 Oscar 1 is closed

3010
01:48:25,199 --> 01:48:29,400
Oscar 2 is open so let's just deal with

3011
01:48:27,199 --> 01:48:32,519
those first so if I'm touching the mouse

3012
01:48:29,400 --> 01:48:33,839
pointer let me go under how about looks

3013
01:48:32,520 --> 01:48:36,320
and we didn't use this before but

3014
01:48:33,840 --> 01:48:37,920
there's this block switch costume to

3015
01:48:36,320 --> 01:48:39,920
something else I'm going to drag and

3016
01:48:37,920 --> 01:48:41,840
drop this inside of the if and notice

3017
01:48:39,920 --> 01:48:45,320
it's a little bit indented I'm going to

3018
01:48:41,840 --> 01:48:47,320
change it not to Oscar 8 but Oscar 2

3019
01:48:45,320 --> 01:48:49,040
otherwise if not touching the mouse

3020
01:48:47,320 --> 01:48:50,960
pointer this is the other direction in

3021
01:48:49,040 --> 01:48:53,440
the fork and the road let's go ahead and

3022
01:48:50,960 --> 01:48:56,159
switch the costume back to what I

3023
01:48:53,440 --> 01:48:58,360
described as Oscar 1 so let me run this

3024
01:48:56,159 --> 01:49:00,638
program and not much of interest is

3025
01:48:58,360 --> 01:49:04,239
happening yet but notice if I move the

3026
01:49:00,639 --> 01:49:05,920
cursor up down but how is that working

3027
01:49:04,239 --> 01:49:07,638
it's just changing the costume that's

3028
01:49:05,920 --> 01:49:09,119
being overlaid on the Sprite so it looks

3029
01:49:07,639 --> 01:49:10,560
like interactivity but you're really

3030
01:49:09,119 --> 01:49:12,040
just changing the Aesthetics and we

3031
01:49:10,560 --> 01:49:14,000
humans are just kind of you know

3032
01:49:12,040 --> 01:49:15,599
assuming oh it's opening up well no it's

3033
01:49:14,000 --> 01:49:17,280
just changing a costume so here's the

3034
01:49:15,599 --> 01:49:19,280
difference the high level abstraction

3035
01:49:17,280 --> 01:49:20,679
trash can opening the lower level

3036
01:49:19,280 --> 01:49:22,800
implementation detail

3037
01:49:20,679 --> 01:49:24,599
costume changing creating that illusion

3038
01:49:22,800 --> 01:49:26,280
and if I wanted to look prettier I could

3039
01:49:24,599 --> 01:49:28,440
just have many other costumes and go

3040
01:49:26,280 --> 01:49:31,199
boom boom boom boom boom to create more

3041
01:49:28,440 --> 01:49:33,678
frames per second if you will so I need

3042
01:49:31,199 --> 01:49:35,440
to do um one other thing maybe if I

3043
01:49:33,679 --> 01:49:37,599
accidentally leave the trash can open

3044
01:49:35,440 --> 01:49:39,839
let me make one change here let me make

3045
01:49:37,599 --> 01:49:41,360
sure that the very first thing I do when

3046
01:49:39,840 --> 01:49:43,920
the green flag is clicked is always

3047
01:49:41,360 --> 01:49:45,719
start with the trash can closed because

3048
01:49:43,920 --> 01:49:47,119
otherwise you might accidentally leave

3049
01:49:45,719 --> 01:49:49,639
it open so this gets me into some

3050
01:49:47,119 --> 01:49:52,598
default state so now it's always closed

3051
01:49:49,639 --> 01:49:54,400
until I manually hover over it instead

3052
01:49:52,599 --> 01:49:56,199
well what might I have done next well if

3053
01:49:54,400 --> 01:49:58,559
I wanted to introduce something like the

3054
01:49:56,199 --> 01:50:00,638
trash I need a second Sprite and here in

3055
01:49:58,560 --> 01:50:03,000
advance I grabb the image already let me

3056
01:50:00,639 --> 01:50:05,840
pretend that this never happened let me

3057
01:50:03,000 --> 01:50:07,840
drag this away here and now I have

3058
01:50:05,840 --> 01:50:09,639
nothing in my code area for this piece

3059
01:50:07,840 --> 01:50:10,960
of trash but it is a second Sprite and

3060
01:50:09,639 --> 01:50:13,080
all I did was I clicked on the little

3061
01:50:10,960 --> 01:50:15,679
cat plus icon here created a second

3062
01:50:13,080 --> 01:50:17,440
Sprite I named it trash I added an

3063
01:50:15,679 --> 01:50:19,599
costume for it sort of the aesthetic

3064
01:50:17,440 --> 01:50:22,000
stuff I did in advance but here I'll do

3065
01:50:19,599 --> 01:50:24,239
now the code how do I want to do this

3066
01:50:22,000 --> 01:50:26,880
well how about when the green flag is

3067
01:50:24,239 --> 01:50:29,759
clicked for the trash can I want the

3068
01:50:26,880 --> 01:50:31,639
trash can in parallel to do or I want

3069
01:50:29,760 --> 01:50:33,760
the trash the piece of trash to do its

3070
01:50:31,639 --> 01:50:37,080
own thing so what I wanted to do is

3071
01:50:33,760 --> 01:50:38,760
maybe let's do motion how about and

3072
01:50:37,080 --> 01:50:40,440
let's go to a specific coordinate now

3073
01:50:38,760 --> 01:50:43,760
there's a lot of options here there's

3074
01:50:40,440 --> 01:50:46,400
turning go to a random position go to x

3075
01:50:43,760 --> 01:50:47,520
comma y Glide more elegantly there's a

3076
01:50:46,400 --> 01:50:49,360
lot of different ways to implement

3077
01:50:47,520 --> 01:50:50,840
movement I just wanted to go to a very

3078
01:50:49,360 --> 01:50:53,719
specific location first so I'm just

3079
01:50:50,840 --> 01:50:57,679
going to go to x comma y first and I'm

3080
01:50:53,719 --> 01:50:59,159
going to say x how about will be um uh

3081
01:50:57,679 --> 01:51:01,560
let's not hardcode this let's just have

3082
01:50:59,159 --> 01:51:04,199
it be well let's do it at zero initially

3083
01:51:01,560 --> 01:51:06,000
and then 240 so whoops let's do 0 comma

3084
01:51:04,199 --> 01:51:07,799
240 so that this piece of trash always

3085
01:51:06,000 --> 01:51:09,040
starts at the top middle of the screen

3086
01:51:07,800 --> 01:51:11,599
if you think back to that coordinate

3087
01:51:09,040 --> 01:51:13,719
system 0 0 is in the middle 240 is

3088
01:51:11,599 --> 01:51:15,920
straight above it all right now after I

3089
01:51:13,719 --> 01:51:18,560
do that what do I want to do well how

3090
01:51:15,920 --> 01:51:21,000
about I control this thing by forever

3091
01:51:18,560 --> 01:51:22,400
falling now how do I make the trash move

3092
01:51:21,000 --> 01:51:24,800
we haven't seen this puzzle piece yet

3093
01:51:22,400 --> 01:51:26,960
but under motion the very first thing is

3094
01:51:24,800 --> 01:51:28,520
called move some number of steps by

3095
01:51:26,960 --> 01:51:30,920
default it's 10 but we'll do it more

3096
01:51:28,520 --> 01:51:34,159
simply let me go ahead and

3097
01:51:30,920 --> 01:51:36,800
move uh oh sorry move is going to move

3098
01:51:34,159 --> 01:51:39,119
it uh in whatever Direction it's facing

3099
01:51:36,800 --> 01:51:40,400
I only want it to move down so here even

3100
01:51:39,119 --> 01:51:42,079
I'm getting confused as to how many

3101
01:51:40,400 --> 01:51:44,679
different ways there are to do things

3102
01:51:42,079 --> 01:51:48,119
what I think I want to do is this let me

3103
01:51:44,679 --> 01:51:49,560
only change my y AIS as follows so

3104
01:51:48,119 --> 01:51:52,280
here's another puzzle piece called

3105
01:51:49,560 --> 01:51:55,000
change y so again Y is the vertical so

3106
01:51:52,280 --> 01:51:58,000
let me just change y by one pixel

3107
01:51:55,000 --> 01:52:00,560
downward at a time so Nega one one pixel

3108
01:51:58,000 --> 01:52:02,639
at a time so it's kind of slow and I

3109
01:52:00,560 --> 01:52:05,119
think now I think that's it let me hit

3110
01:52:02,639 --> 01:52:06,280
stop notice that my trash can is still

3111
01:52:05,119 --> 01:52:08,239
going to be interactive I haven't

3112
01:52:06,280 --> 01:52:10,599
changed or deleted that code I've just

3113
01:52:08,239 --> 01:52:13,598
added now code for my trash piece of

3114
01:52:10,599 --> 01:52:16,719
trash if I click the green flag notice

3115
01:52:13,599 --> 01:52:18,679
that after I enable it let me start that

3116
01:52:16,719 --> 01:52:20,520
again I had it hidden for before class

3117
01:52:18,679 --> 01:52:23,360
but let me enable it now green flag

3118
01:52:20,520 --> 01:52:26,560
notice it starts dead center at xal 0 y

3119
01:52:23,360 --> 01:52:28,598
= 240 and it's dropping one pixel at a

3120
01:52:26,560 --> 01:52:30,639
time if that seems a little boring we

3121
01:52:28,599 --> 01:52:32,320
can change it to negative 10 pixels at a

3122
01:52:30,639 --> 01:52:34,079
time and boom it's done so that's how

3123
01:52:32,320 --> 01:52:35,280
you might change the speed of a program

3124
01:52:34,079 --> 01:52:37,440
but I'm going to leave it more simply as

3125
01:52:35,280 --> 01:52:39,400
negative 1 and honestly it would be nice

3126
01:52:37,440 --> 01:52:40,678
if it doesn't always start from the top

3127
01:52:39,400 --> 01:52:42,159
otherwise this game is not going to be

3128
01:52:40,679 --> 01:52:43,639
very interactive I'm literally going to

3129
01:52:42,159 --> 01:52:46,239
be grabbing the trash from the same

3130
01:52:43,639 --> 01:52:49,199
place every time so why don't I instead

3131
01:52:46,239 --> 01:52:51,239
stop this let me go under operators and

3132
01:52:49,199 --> 01:52:53,280
let's pick our random number so let me

3133
01:52:51,239 --> 01:52:55,280
change the hardcoded the manually

3134
01:52:53,280 --> 01:52:57,559
inputed zero and let's make X be

3135
01:52:55,280 --> 01:53:00,679
somewhere between zero so in the middle

3136
01:52:57,560 --> 01:53:04,000
and all the way over to uh what was it

3137
01:53:00,679 --> 01:53:06,880
one oh I got my numbers wrong 240 and my

3138
01:53:04,000 --> 01:53:10,079
y will be 180 sorry I got my X and my my

3139
01:53:06,880 --> 01:53:11,719
y confused so let me play this again and

3140
01:53:10,079 --> 01:53:13,199
now we have a game that's more like

3141
01:53:11,719 --> 01:53:14,960
games you might have played growing up

3142
01:53:13,199 --> 01:53:16,960
or even now like there's some Randomness

3143
01:53:14,960 --> 01:53:18,560
to it so the CPU so to speak is doing

3144
01:53:16,960 --> 01:53:20,239
something more interesting let me run it

3145
01:53:18,560 --> 01:53:21,840
again now it's a little to the left let

3146
01:53:20,239 --> 01:53:23,718
me run it again now it's a little more

3147
01:53:21,840 --> 01:53:25,320
to the left again now it's back to the

3148
01:53:23,719 --> 01:53:26,520
right so Randomness just makes games

3149
01:53:25,320 --> 01:53:28,119
more interesting and this is why when

3150
01:53:26,520 --> 01:53:29,560
you play any video game if different

3151
01:53:28,119 --> 01:53:31,360
things are happening there's probably

3152
01:53:29,560 --> 01:53:33,360
just some Randomness and it's quantized

3153
01:53:31,360 --> 01:53:35,920
is just a simple number now I think I

3154
01:53:33,360 --> 01:53:38,880
just need one final flourish here if I

3155
01:53:35,920 --> 01:53:42,679
may let me go ahead and add this how

3156
01:53:38,880 --> 01:53:44,840
about uh events or rather yes events

3157
01:53:42,679 --> 01:53:47,040
when green flag is clicked I can do

3158
01:53:44,840 --> 01:53:48,599
multiple things within the same Sprite

3159
01:53:47,040 --> 01:53:51,920
they don't all have to be attached to

3160
01:53:48,599 --> 01:53:55,239
the same one let me go ahead and forever

3161
01:53:51,920 --> 01:54:00,119
go ahead and do something else how about

3162
01:53:55,239 --> 01:54:03,919
whenever the trash is how about touching

3163
01:54:00,119 --> 01:54:07,239
the trash can so forever if let's see I

3164
01:54:03,920 --> 01:54:09,599
need a sensing block so how about is

3165
01:54:07,239 --> 01:54:13,159
touching uh not the mouse pointer this

3166
01:54:09,599 --> 01:54:15,719
time but touching Oscar himself there

3167
01:54:13,159 --> 01:54:18,199
now let's see what happens all right so

3168
01:54:15,719 --> 01:54:21,239
let's go ahead and click the green flag

3169
01:54:18,199 --> 01:54:24,159
now I go down over here and let

3170
01:54:21,239 --> 01:54:26,799
go okay that's I kind of want it to go

3171
01:54:24,159 --> 01:54:28,719
into the trash can how do I make it go

3172
01:54:26,800 --> 01:54:31,320
into the trash can how can we take this

3173
01:54:28,719 --> 01:54:33,480
high level idea put trash into the trash

3174
01:54:31,320 --> 01:54:37,400
can and make it seem to

3175
01:54:33,480 --> 01:54:39,519
disappear logically what could we do

3176
01:54:37,400 --> 01:54:41,519
yeah okay so when it touches it let's

3177
01:54:39,520 --> 01:54:42,639
have it disappear so I could hide it or

3178
01:54:41,520 --> 01:54:44,840
honestly if the game's going to be

3179
01:54:42,639 --> 01:54:46,679
ongoing like it was letting me Mo drop

3180
01:54:44,840 --> 01:54:48,760
more and more trash let me just have it

3181
01:54:46,679 --> 01:54:51,239
go ahead and pick a new random location

3182
01:54:48,760 --> 01:54:52,800
so let me do this let me go ahead and

3183
01:54:51,239 --> 01:54:54,559
copy this puzzle piece up here and

3184
01:54:52,800 --> 01:54:56,840
duplicate and I don't want the whole

3185
01:54:54,560 --> 01:54:59,360
thing sorry let me get rid of this let

3186
01:54:56,840 --> 01:55:01,800
me just do this let me go back to some

3187
01:54:59,360 --> 01:55:03,440
random location at the top so now notice

3188
01:55:01,800 --> 01:55:06,639
what happens if I click and drag on it

3189
01:55:03,440 --> 01:55:08,400
here it goes and I let go it looks like

3190
01:55:06,639 --> 01:55:10,800
it's going into the trash can because it

3191
01:55:08,400 --> 01:55:12,040
snaps back up to some random location

3192
01:55:10,800 --> 01:55:14,040
now the only thing I'm not doing really

3193
01:55:12,040 --> 01:55:16,199
is keeping track of any kind of score

3194
01:55:14,040 --> 01:55:17,719
and it turns out if I full screen this

3195
01:55:16,199 --> 01:55:19,879
it's not going to be draggable by

3196
01:55:17,719 --> 01:55:21,360
default so just as a corner case so to

3197
01:55:19,880 --> 01:55:25,040
speak something that you might trip over

3198
01:55:21,360 --> 01:55:28,719
otherwise let me go ahead and under uh

3199
01:55:25,040 --> 01:55:30,639
let's see uh sensing it turns out I also

3200
01:55:28,719 --> 01:55:33,040
need this for the piece of trash there's

3201
01:55:30,639 --> 01:55:35,199
this way of setting and scratch a puzzle

3202
01:55:33,040 --> 01:55:37,159
a Sprite to be draggable or not

3203
01:55:35,199 --> 01:55:39,000
draggable I need to explicitly make it

3204
01:55:37,159 --> 01:55:40,920
draggable so that when I do full screen

3205
01:55:39,000 --> 01:55:43,119
this thing now it Still Remains

3206
01:55:40,920 --> 01:55:45,199
draggable and someone like myself can

3207
01:55:43,119 --> 01:55:46,759
play it again and again well how about

3208
01:55:45,199 --> 01:55:49,079
we supplement this with one final

3209
01:55:46,760 --> 01:55:52,480
flourish why don't we keep track now of

3210
01:55:49,079 --> 01:55:54,880
the user score so how about when the

3211
01:55:52,480 --> 01:55:56,598
user actually drags the piece of trash

3212
01:55:54,880 --> 01:55:58,440
to the trash can let me go under

3213
01:55:56,599 --> 01:56:00,280
variables here where in advance I've

3214
01:55:58,440 --> 01:56:02,678
already made myself a variable called

3215
01:56:00,280 --> 01:56:04,440
score I could have called it X or Y or Z

3216
01:56:02,679 --> 01:56:06,040
or ABC but that's not very descriptive

3217
01:56:04,440 --> 01:56:08,040
in programming you typically give things

3218
01:56:06,040 --> 01:56:10,560
a more descriptive English or some other

3219
01:56:08,040 --> 01:56:13,119
language name so I called this one score

3220
01:56:10,560 --> 01:56:15,760
so how do I want to do this in my score

3221
01:56:13,119 --> 01:56:18,639
well let me go ahead and initially set

3222
01:56:15,760 --> 01:56:20,040
this game score to zero at the very top

3223
01:56:18,639 --> 01:56:22,159
of one of these Scripts

3224
01:56:20,040 --> 01:56:26,320
or one of these programs up here and

3225
01:56:22,159 --> 01:56:28,879
then anytime my cursor my piece of trash

3226
01:56:26,320 --> 01:56:33,239
is touching Oscar let's not just jump to

3227
01:56:28,880 --> 01:56:35,880
the top let's change the score by one up

3228
01:56:33,239 --> 01:56:37,799
here so now notice if touching Oscar

3229
01:56:35,880 --> 01:56:39,639
change the score that is add one to the

3230
01:56:37,800 --> 01:56:43,119
score and then pick a new random

3231
01:56:39,639 --> 01:56:45,239
location and now green flag let's do

3232
01:56:43,119 --> 01:56:48,119
this slowly here it goes it's the trash

3233
01:56:45,239 --> 01:56:49,959
can opens I let go and now notice at the

3234
01:56:48,119 --> 01:56:52,480
top left of my program notice the score

3235
01:56:49,960 --> 01:56:55,119
is now two notice the score if I do this

3236
01:56:52,480 --> 01:56:57,199
again is about to become three and so

3237
01:56:55,119 --> 01:56:59,598
here we have building blocks literally

3238
01:56:57,199 --> 01:57:01,119
of making this program better and better

3239
01:56:59,599 --> 01:57:02,920
and better and so indeed that's how you

3240
01:57:01,119 --> 01:57:05,119
generally approach solving any large

3241
01:57:02,920 --> 01:57:07,079
program uh any problem with code be it

3242
01:57:05,119 --> 01:57:09,040
in scratch or C or python or some other

3243
01:57:07,079 --> 01:57:10,320
you take this Vision you might have or

3244
01:57:09,040 --> 01:57:12,280
some Vision you've been assigned in a

3245
01:57:10,320 --> 01:57:13,920
homework assignment and try to break it

3246
01:57:12,280 --> 01:57:16,159
down into these constituent parts and

3247
01:57:13,920 --> 01:57:17,679
just pluck off the easy ones first put

3248
01:57:16,159 --> 01:57:19,480
the lamp post there first and at least

3249
01:57:17,679 --> 01:57:20,760
feel like you're making some progress

3250
01:57:19,480 --> 01:57:22,799
then pluck off something like the trash

3251
01:57:20,760 --> 01:57:24,119
can and just make it do a little thing

3252
01:57:22,800 --> 01:57:25,840
and it doesn't have to be in some same

3253
01:57:24,119 --> 01:57:28,119
order here I could have done this in a

3254
01:57:25,840 --> 01:57:30,239
million different ways but figure out

3255
01:57:28,119 --> 01:57:31,679
what the small pieces are that

3256
01:57:30,239 --> 01:57:33,919
ultimately like a few of the problems

3257
01:57:31,679 --> 01:57:37,560
we've solved today assemble into a

3258
01:57:33,920 --> 01:57:39,320
greater solution there too uh so that

3259
01:57:37,560 --> 01:57:41,440
you have now a mental model for these

3260
01:57:39,320 --> 01:57:44,000
types of blocks and others let's return

3261
01:57:41,440 --> 01:57:46,559
for a moment to this we saw a moment ago

3262
01:57:44,000 --> 01:57:48,840
that when I started saying hello David

3263
01:57:46,560 --> 01:57:51,320
and nesting those puzzle pieces we had a

3264
01:57:48,840 --> 01:57:53,360
whole different Paradigm Al together my

3265
01:57:51,320 --> 01:57:55,440
input for that second version of hello

3266
01:57:53,360 --> 01:57:58,639
world was to now pass in for instance

3267
01:57:55,440 --> 01:58:01,360
what's your name into my function called

3268
01:57:58,639 --> 01:58:03,880
ask that gave me not a side effect but

3269
01:58:01,360 --> 01:58:06,360
what I called again a return value

3270
01:58:03,880 --> 01:58:09,159
called answer by default in scratch and

3271
01:58:06,360 --> 01:58:13,239
now notice and recall when I had that

3272
01:58:09,159 --> 01:58:15,119
same output become the input to my next

3273
01:58:13,239 --> 01:58:18,598
block it looked a little something like

3274
01:58:15,119 --> 01:58:20,559
this say so how does this type of block

3275
01:58:18,599 --> 01:58:22,599
and this nesting the stacking of blocks

3276
01:58:20,560 --> 01:58:24,560
fit into the same mental model well same

3277
01:58:22,599 --> 01:58:28,159
idea my input for that part of the story

3278
01:58:24,560 --> 01:58:30,920
is now taking in not one input but two

3279
01:58:28,159 --> 01:58:33,079
two arguments hello and the answer from

3280
01:58:30,920 --> 01:58:35,440
before the function in this case is that

3281
01:58:33,079 --> 01:58:38,159
new block called join the output thereof

3282
01:58:35,440 --> 01:58:42,000
is hello David which itself became if we

3283
01:58:38,159 --> 01:58:44,559
sort of animate this the input to my

3284
01:58:42,000 --> 01:58:47,079
final function which indeed was still

3285
01:58:44,560 --> 01:58:49,360
say and this is only to say no pun

3286
01:58:47,079 --> 01:58:51,040
intended that almost everything that

3287
01:58:49,360 --> 01:58:53,639
that you do with these puzzle pieces be

3288
01:58:51,040 --> 01:58:55,199
in the context of Oscar time or the mole

3289
01:58:53,639 --> 01:58:57,119
whacking or even just something simple

3290
01:58:55,199 --> 01:59:00,199
like hello world will ultimately fit

3291
01:58:57,119 --> 01:59:02,360
into that relatively simple mental model

3292
01:59:00,199 --> 01:59:04,559
there now I thought we'd End by taking a

3293
01:59:02,360 --> 01:59:06,519
look at just a couple final examples

3294
01:59:04,560 --> 01:59:08,679
these ones two made by some of your

3295
01:59:06,520 --> 01:59:11,000
predecessors and for this I thought we

3296
01:59:08,679 --> 01:59:13,520
would not write code together but read

3297
01:59:11,000 --> 01:59:16,239
it instead and so allow me to open up

3298
01:59:13,520 --> 01:59:19,320
one other example here that will show us

3299
01:59:16,239 --> 01:59:21,799
a few different versions of a program

3300
01:59:19,320 --> 01:59:24,159
that a predecessor made give me just a

3301
01:59:21,800 --> 01:59:26,400
moment here and we'll see how we might

3302
01:59:24,159 --> 01:59:28,638
build up to something even more

3303
01:59:26,400 --> 01:59:30,960
interactive and in just a moment we'll

3304
01:59:28,639 --> 01:59:34,119
see something they called Ivy's uh

3305
01:59:30,960 --> 01:59:36,880
hardest game focused here on these

3306
01:59:34,119 --> 01:59:39,280
particular mechanics so here is version

3307
01:59:36,880 --> 01:59:40,800
zero so to speak of this program where

3308
01:59:39,280 --> 01:59:42,360
in the goal is to create a game where

3309
01:59:40,800 --> 01:59:44,000
you have to like get out of some kind of

3310
01:59:42,360 --> 01:59:46,280
Maze and you have to get out in this

3311
01:59:44,000 --> 01:59:47,840
case the Harvard Crest from this maze

3312
01:59:46,280 --> 01:59:49,599
let me go ahead and just hit play on

3313
01:59:47,840 --> 01:59:51,040
this green flag so you can see what what

3314
01:59:49,599 --> 01:59:53,719
the first building block for this

3315
01:59:51,040 --> 01:59:55,920
program might have been notice that my

3316
01:59:53,719 --> 01:59:58,679
hand here is actually on the arrow keys

3317
01:59:55,920 --> 02:00:01,639
of my keyboard and it seems that by

3318
01:59:58,679 --> 02:00:04,119
moving up down left or right this little

3319
02:00:01,639 --> 02:00:06,119
Crest on the screen responds in exactly

3320
02:00:04,119 --> 02:00:07,480
that way now let's hypothesize for just

3321
02:00:06,119 --> 02:00:09,639
a moment even though we've not done

3322
02:00:07,480 --> 02:00:12,040
anything quite like this before how

3323
02:00:09,639 --> 02:00:15,079
might this code be implemented how do

3324
02:00:12,040 --> 02:00:17,719
you get a Sprite be it a cat or a Crest

3325
02:00:15,079 --> 02:00:19,599
to respond to keys on a keyboard might

3326
02:00:17,719 --> 02:00:21,440
you think intuitively yeah there could

3327
02:00:19,599 --> 02:00:22,960
be something that's sensing what key

3328
02:00:21,440 --> 02:00:24,159
you're pressing on yeah there could be

3329
02:00:22,960 --> 02:00:25,599
something sensing what key you're

3330
02:00:24,159 --> 02:00:27,799
pressing on and if you do it again in a

3331
02:00:25,599 --> 02:00:29,400
forever Loop you'll just constantly be

3332
02:00:27,800 --> 02:00:31,159
listening for keystrokes and this is how

3333
02:00:29,400 --> 02:00:33,040
like every piece of software nowadays

3334
02:00:31,159 --> 02:00:34,839
works it's constantly waiting for your

3335
02:00:33,040 --> 02:00:36,840
phone to be tapped or something to be

3336
02:00:34,840 --> 02:00:39,400
typed on the screen so let me go ahead

3337
02:00:36,840 --> 02:00:41,159
and look inside of this existing program

3338
02:00:39,400 --> 02:00:43,239
here and there's more going on but we'll

3339
02:00:41,159 --> 02:00:45,960
take a quick glance what's actually

3340
02:00:43,239 --> 02:00:48,638
going on well up here at top left notice

3341
02:00:45,960 --> 02:00:50,000
we just have go to x equals 0 and Y

3342
02:00:48,639 --> 02:00:51,639
equals 0 that means put the Harvard

3343
02:00:50,000 --> 02:00:54,480
Crest dead center in the middle of the

3344
02:00:51,639 --> 02:00:56,360
stage then we have forever two functions

3345
02:00:54,480 --> 02:00:59,079
that we made in advance as custom

3346
02:00:56,360 --> 02:01:01,159
functions uh listen for keyboard feel

3347
02:00:59,079 --> 02:01:03,040
for walls so it's doing two things at

3348
02:01:01,159 --> 02:01:05,079
once it's forever listening for the

3349
02:01:03,040 --> 02:01:06,480
keyboard up down left right and feeling

3350
02:01:05,079 --> 02:01:08,480
for the walls in the sense that if I get

3351
02:01:06,480 --> 02:01:10,360
too far to the left I don't want it to

3352
02:01:08,480 --> 02:01:11,638
keep moving past that black wall and if

3353
02:01:10,360 --> 02:01:13,519
it moves too far to the right I don't

3354
02:01:11,639 --> 02:01:14,920
want it to blow through that wall either

3355
02:01:13,520 --> 02:01:16,840
so it's going to do two things

3356
02:01:14,920 --> 02:01:19,159
constantly listening for keyboard and

3357
02:01:16,840 --> 02:01:20,880
feeling for walls so to speak and how

3358
02:01:19,159 --> 02:01:23,239
are those implemented well this one's a

3359
02:01:20,880 --> 02:01:26,800
bit long but on the left here is listen

3360
02:01:23,239 --> 02:01:29,360
for keyboard so this pink puzzle piece

3361
02:01:26,800 --> 02:01:31,719
listen for keyboard first checks if the

3362
02:01:29,360 --> 02:01:33,679
key up arrow is pressed question mark

3363
02:01:31,719 --> 02:01:35,800
Boolean expression in a conditional

3364
02:01:33,679 --> 02:01:38,719
change y by one that means move it up

3365
02:01:35,800 --> 02:01:41,159
one else if the key down arrow is

3366
02:01:38,719 --> 02:01:43,199
pressed then change y by negative one

3367
02:01:41,159 --> 02:01:44,799
and similar for left Arrow similar for

3368
02:01:43,199 --> 02:01:47,719
right arrow and even though there's not

3369
02:01:44,800 --> 02:01:49,639
a loop in this pink function there is

3370
02:01:47,719 --> 02:01:51,679
where I'm using it so it's constantly

3371
02:01:49,639 --> 02:01:53,639
being asked again and again how about

3372
02:01:51,679 --> 02:01:56,400
feeling for walls well over here to the

3373
02:01:53,639 --> 02:01:59,239
right it's a little cut off but here you

3374
02:01:56,400 --> 02:02:01,679
have if touching left wall change X by

3375
02:01:59,239 --> 02:02:02,879
one so if you hit the wall it's too late

3376
02:02:01,679 --> 02:02:05,119
you're kind of blowing through it

3377
02:02:02,880 --> 02:02:06,920
already so I want to move it wh one

3378
02:02:05,119 --> 02:02:08,719
pixel so it's no longer touching that

3379
02:02:06,920 --> 02:02:10,520
wall similarly if it's touching the

3380
02:02:08,719 --> 02:02:12,239
right wall I want to back it up one

3381
02:02:10,520 --> 02:02:13,880
pixel so it's no longer touching that

3382
02:02:12,239 --> 02:02:16,040
wall so it's kind of like bouncing off

3383
02:02:13,880 --> 02:02:17,960
ever so slightly so that it doesn't slip

3384
02:02:16,040 --> 02:02:20,519
through that actual wall and what are

3385
02:02:17,960 --> 02:02:23,199
those walls well noce down here it's

3386
02:02:20,520 --> 02:02:24,840
just a simple Sprite with a black line

3387
02:02:23,199 --> 02:02:26,598
that I've oriented hor vertically

3388
02:02:24,840 --> 02:02:28,360
instead of horizontally and that's just

3389
02:02:26,599 --> 02:02:30,840
so that I can ask questions of these

3390
02:02:28,360 --> 02:02:32,719
other two Sprites now that gives me that

3391
02:02:30,840 --> 02:02:34,520
form of interactivity what more can I

3392
02:02:32,719 --> 02:02:37,119
now do well what if we make things a

3393
02:02:34,520 --> 02:02:39,320
little more interactive here let me go

3394
02:02:37,119 --> 02:02:41,839
ahead and see inside version one our

3395
02:02:39,320 --> 02:02:44,559
second and let me propose what's going

3396
02:02:41,840 --> 02:02:47,159
to happen here well how might we add a

3397
02:02:44,560 --> 02:02:49,079
little something like Yale into the mix

3398
02:02:47,159 --> 02:02:51,159
well what's Yale going to do when I I

3399
02:02:49,079 --> 02:02:53,320
hit the green flag now based on this

3400
02:02:51,159 --> 02:02:56,839
code any

3401
02:02:53,320 --> 02:02:59,960
hunches here is the code for my Yale

3402
02:02:56,840 --> 02:03:02,040
Sprite yeah yeah it's kind of got to be

3403
02:02:59,960 --> 02:03:03,440
an adversary by blocking my path

3404
02:03:02,040 --> 02:03:05,840
theoretically if I keep writing more

3405
02:03:03,440 --> 02:03:08,199
code so why it to goes to the middle of

3406
02:03:05,840 --> 02:03:09,960
the screen it points in Direction 90 de

3407
02:03:08,199 --> 02:03:12,040
so similarly there's a whole degree

3408
02:03:09,960 --> 02:03:14,480
system as well and it forever asks this

3409
02:03:12,040 --> 02:03:16,840
if touching the left wall or notice the

3410
02:03:14,480 --> 02:03:19,239
green block touching the right wall then

3411
02:03:16,840 --> 02:03:20,520
just turn around 180° and in if you

3412
02:03:19,239 --> 02:03:22,598
think this through logically that just

3413
02:03:20,520 --> 02:03:24,679
means you're bouncing this way and this

3414
02:03:22,599 --> 02:03:27,880
way by just flipping yourself around

3415
02:03:24,679 --> 02:03:29,560
180° for just this Yale Sprite so if I

3416
02:03:27,880 --> 02:03:32,119
go ahead and zoom in on this and click

3417
02:03:29,560 --> 02:03:34,719
the green flag I can still move up and

3418
02:03:32,119 --> 02:03:36,880
down but Yale is just kind of doing this

3419
02:03:34,719 --> 02:03:38,920
all day long back and forth and back and

3420
02:03:36,880 --> 02:03:41,000
forth forever nothing bad happens if I

3421
02:03:38,920 --> 02:03:42,960
try to go through it but we could add

3422
02:03:41,000 --> 02:03:45,000
that certainly to the mix in fact let's

3423
02:03:42,960 --> 02:03:47,119
add one final feature before we play

3424
02:03:45,000 --> 02:03:49,719
this particular game and let me go ahead

3425
02:03:47,119 --> 02:03:53,119
and open up the final version of these

3426
02:03:49,719 --> 02:03:54,400
building blocks that adds MIT to the mix

3427
02:03:53,119 --> 02:03:57,320
so here's

3428
02:03:54,400 --> 02:03:58,759
MIT someone want to explain what this

3429
02:03:57,320 --> 02:04:00,639
code does and this is what we're doing

3430
02:03:58,760 --> 02:04:02,559
this itself is a skill reading someone

3431
02:04:00,639 --> 02:04:04,639
else's code and understanding it is half

3432
02:04:02,559 --> 02:04:08,000
of the part of programming besides

3433
02:04:04,639 --> 02:04:09,559
writing yeah yeah it's chasing down the

3434
02:04:08,000 --> 02:04:11,360
Harvard logo outline so this is

3435
02:04:09,559 --> 02:04:13,800
apparently the name of the costume that

3436
02:04:11,360 --> 02:04:15,719
this student made Harvard logo outline

3437
02:04:13,800 --> 02:04:17,440
outline and apparently it goes to a

3438
02:04:15,719 --> 02:04:19,880
random position first but then it

3439
02:04:17,440 --> 02:04:22,159
forever points to Har so no matter where

3440
02:04:19,880 --> 02:04:23,400
I'm moving it up down left or right MIT

3441
02:04:22,159 --> 02:04:25,079
is being a little more strategic than

3442
02:04:23,400 --> 02:04:26,879
Yale bouncing back and forth like this

3443
02:04:25,079 --> 02:04:29,079
so let's go ahead and play this one in

3444
02:04:26,880 --> 02:04:32,040
full screen and here we have a green

3445
02:04:29,079 --> 02:04:36,280
flag so if I move up

3446
02:04:32,040 --> 02:04:38,320
MIT rather strategically is following me

3447
02:04:36,280 --> 02:04:40,800
no matter where I go all right so still

3448
02:04:38,320 --> 02:04:42,280
nothing bad happens but and now it's

3449
02:04:40,800 --> 02:04:44,320
struggling right it's going up down up

3450
02:04:42,280 --> 02:04:46,040
down it's trying to uh follow me even

3451
02:04:44,320 --> 02:04:48,480
though I'm not moving so we need some

3452
02:04:46,040 --> 02:04:51,280
final flourishes and so I think for this

3453
02:04:48,480 --> 02:04:53,558
we need perhaps one final volunteer

3454
02:04:51,280 --> 02:04:55,440
after this cake awaits for everyone

3455
02:04:53,559 --> 02:04:57,000
outside as is an end of first lecture

3456
02:04:55,440 --> 02:05:00,400
cs50 tradition would you like to come up

3457
02:04:57,000 --> 02:05:00,400
and be our our vinyl of

3458
02:05:06,800 --> 02:05:11,599
volunteer all right and so this will be

3459
02:05:09,360 --> 02:05:13,639
the actual version bit written by one of

3460
02:05:11,599 --> 02:05:15,880
your predecessors that I'll full screen

3461
02:05:13,639 --> 02:05:17,679
here it's going to stitch together all

3462
02:05:15,880 --> 02:05:20,079
of these same Primitives in more but add

3463
02:05:17,679 --> 02:05:22,000
the notion of score and lives so that

3464
02:05:20,079 --> 02:05:24,440
there's actually a goal which in this

3465
02:05:22,000 --> 02:05:26,360
case is to move the Harvard Crest to

3466
02:05:24,440 --> 02:05:27,960
constantly pursue the character on the

3467
02:05:26,360 --> 02:05:29,400
right hand side so that your Sprite

3468
02:05:27,960 --> 02:05:31,559
touches that one would you like to

3469
02:05:29,400 --> 02:05:33,558
introduce yourself uh hi my name is

3470
02:05:31,559 --> 02:05:35,079
Muhammad all right wonderful welcome

3471
02:05:33,559 --> 02:05:37,119
aboard and here we come with some

3472
02:05:35,079 --> 02:05:38,639
instructions and final flourish if we

3473
02:05:37,119 --> 02:05:41,239
want to keep the lights up but perhaps

3474
02:05:38,639 --> 02:05:41,239
increase the

3475
02:05:47,679 --> 02:06:08,250
music

3476
02:05:49,610 --> 02:06:08,250
[Music]

3477
02:06:17,599 --> 02:06:20,599
e

3478
02:06:22,120 --> 02:06:25,189
[Music]

3479
02:06:32,030 --> 02:06:45,398
[Music]

3480
02:06:47,599 --> 02:06:50,599
you

3481
02:06:51,320 --> 02:07:03,519
[Music]

3482
02:07:00,159 --> 02:07:05,759
all right this is cs50 and this is week

3483
02:07:03,520 --> 02:07:07,760
one wherein we continue programming but

3484
02:07:05,760 --> 02:07:10,000
we do it in a different language because

3485
02:07:07,760 --> 02:07:11,960
recall last time we focused on this

3486
02:07:10,000 --> 02:07:13,920
graphical language called scratch but we

3487
02:07:11,960 --> 02:07:15,280
use scratch uh not only because it's

3488
02:07:13,920 --> 02:07:17,440
sort of fun and accessible but because

3489
02:07:15,280 --> 02:07:19,519
it allows us to explore a lot of these

3490
02:07:17,440 --> 02:07:21,759
Concepts here Nam functions and

3491
02:07:19,520 --> 02:07:24,679
conditionals Boolean Expressions Loops

3492
02:07:21,760 --> 02:07:27,040
variables and more and so indeed even if

3493
02:07:24,679 --> 02:07:29,559
today's syntax as we transition to this

3494
02:07:27,040 --> 02:07:31,360
new language called C feels a little bit

3495
02:07:29,559 --> 02:07:33,520
cryptic maybe a little intimidating at

3496
02:07:31,360 --> 02:07:35,440
first and you don't quite see all of the

3497
02:07:33,520 --> 02:07:37,400
meaning of the symbols beyond the syntax

3498
02:07:35,440 --> 02:07:39,759
itself realized that the ideas are

3499
02:07:37,400 --> 02:07:42,638
ultimately going to be the same in fact

3500
02:07:39,760 --> 02:07:44,639
as we transition from what was last week

3501
02:07:42,639 --> 02:07:46,920
a hello world program that looked a

3502
02:07:44,639 --> 02:07:48,119
little something like this this week of

3503
02:07:46,920 --> 02:07:49,679
course it's going to now look a little

3504
02:07:48,119 --> 02:07:51,679
more cryptic it's going to look a little

3505
02:07:49,679 --> 02:07:53,559
something like this and now even if you

3506
02:07:51,679 --> 02:07:55,480
can't quite distinguish what all of the

3507
02:07:53,559 --> 02:07:56,719
various symbols mean in this code turns

3508
02:07:55,480 --> 02:07:58,440
out that at the end of the day it's

3509
02:07:56,719 --> 02:08:00,360
indeed going to do what you expect it's

3510
02:07:58,440 --> 02:08:02,280
just going to say hello world on the

3511
02:08:00,360 --> 02:08:04,199
screen just like we did in scratch so

3512
02:08:02,280 --> 02:08:06,880
let's start to apply some terminology to

3513
02:08:04,199 --> 02:08:08,239
these to these uh tokens first so what

3514
02:08:06,880 --> 02:08:09,480
we're about to see what we're about to

3515
02:08:08,239 --> 02:08:11,678
write henceforth we're going to start

3516
02:08:09,480 --> 02:08:13,239
calling source code code that you the

3517
02:08:11,679 --> 02:08:14,880
human programmer write is just

3518
02:08:13,239 --> 02:08:16,440
henceforth called source code doesn't

3519
02:08:14,880 --> 02:08:18,000
matter if it's scratch doesn't matter if

3520
02:08:16,440 --> 02:08:19,040
it's C doesn't matter if it's python

3521
02:08:18,000 --> 02:08:20,480
before

3522
02:08:19,040 --> 02:08:21,840
source code is the general term for

3523
02:08:20,480 --> 02:08:24,239
really what you and I as human

3524
02:08:21,840 --> 02:08:27,760
programmers will ultimately write of

3525
02:08:24,239 --> 02:08:29,598
course computers don't understand source

3526
02:08:27,760 --> 02:08:31,480
code it turns out computers don't

3527
02:08:29,599 --> 02:08:33,760
understand scratch and puzzle pieces per

3528
02:08:31,480 --> 02:08:35,159
se or C code like we're about to see

3529
02:08:33,760 --> 02:08:38,079
they only understand this which we

3530
02:08:35,159 --> 02:08:40,239
called what last week yeah so this is

3531
02:08:38,079 --> 02:08:43,079
binary zeros and ones but really it's

3532
02:08:40,239 --> 02:08:45,519
just information represented in binary

3533
02:08:43,079 --> 02:08:47,159
and in fact the technical term now for

3534
02:08:45,520 --> 02:08:48,400
patterns of zeros and ones that a

3535
02:08:47,159 --> 02:08:50,719
computer not only understands

3536
02:08:48,400 --> 02:08:53,360
understands how to interpret as letters

3537
02:08:50,719 --> 02:08:55,559
or numbers or colors or images or more

3538
02:08:53,360 --> 02:08:57,719
but knows how to execute as well

3539
02:08:55,559 --> 02:08:59,559
henceforth is going to be called machine

3540
02:08:57,719 --> 02:09:00,920
code to contrast it with source code so

3541
02:08:59,559 --> 02:09:02,920
whereas you and I the humans write

3542
02:09:00,920 --> 02:09:05,480
source code it's the computer that

3543
02:09:02,920 --> 02:09:06,719
ultimately only understands machine code

3544
02:09:05,480 --> 02:09:08,598
and even though we won't get into the

3545
02:09:06,719 --> 02:09:11,800
details of exactly what pattern of

3546
02:09:08,599 --> 02:09:14,159
symbols means what you'll see that in

3547
02:09:11,800 --> 02:09:15,360
this kind of pattern of zeros and ones

3548
02:09:14,159 --> 02:09:16,679
there's going to be numbers there's

3549
02:09:15,360 --> 02:09:18,400
going to be letters but there's also

3550
02:09:16,679 --> 02:09:19,760
going to be instructions because indeed

3551
02:09:18,400 --> 02:09:21,480
computers are really good at doing

3552
02:09:19,760 --> 02:09:23,679
things addition subtraction moving

3553
02:09:21,480 --> 02:09:26,119
things in and out of memory and suffice

3554
02:09:23,679 --> 02:09:27,719
it to say that the Macs the PCS the

3555
02:09:26,119 --> 02:09:30,000
other computers of the world have just

3556
02:09:27,719 --> 02:09:32,159
decided as a society what certain

3557
02:09:30,000 --> 02:09:34,360
patterns of zeros and ones mean when it

3558
02:09:32,159 --> 02:09:36,799
comes to operations as well so not just

3559
02:09:34,360 --> 02:09:37,960
data but instructions but those patterns

3560
02:09:36,800 --> 02:09:39,239
are not something we're going to focus

3561
02:09:37,960 --> 02:09:41,480
on in a class like this we're going to

3562
02:09:39,239 --> 02:09:43,558
focus on the higher level software side

3563
02:09:41,480 --> 02:09:46,040
of things simply assuming that we need

3564
02:09:43,559 --> 02:09:48,800
to somehow output machine code so it

3565
02:09:46,040 --> 02:09:50,360
turns out then that this problem we have

3566
02:09:48,800 --> 02:09:52,079
to solve getting from source code to

3567
02:09:50,360 --> 02:09:54,839
machine code actually fits into the same

3568
02:09:52,079 --> 02:09:57,079
Paradigm as last time but the input in

3569
02:09:54,840 --> 02:09:58,880
this case is going to be source code on

3570
02:09:57,079 --> 02:10:00,679
the one hand like that's what you and I

3571
02:09:58,880 --> 02:10:02,840
ideally will write so that we don't have

3572
02:10:00,679 --> 02:10:04,840
to write zeros and ones but we need to

3573
02:10:02,840 --> 02:10:06,800
somehow output machine code because

3574
02:10:04,840 --> 02:10:08,679
that's what your Macs PCS phones are

3575
02:10:06,800 --> 02:10:10,320
actually going to understand well it

3576
02:10:08,679 --> 02:10:13,119
turns out there's special programs in

3577
02:10:10,320 --> 02:10:15,199
life whose purpose is to do exactly this

3578
02:10:13,119 --> 02:10:17,199
conversion convert the source code you

3579
02:10:15,199 --> 02:10:19,400
and I write to the machine code that our

3580
02:10:17,199 --> 02:10:21,839
phones and computers understand and that

3581
02:10:19,400 --> 02:10:24,360
type of program is going to be called a

3582
02:10:21,840 --> 02:10:26,079
compiler so indeed today we'll introduce

3583
02:10:24,360 --> 02:10:28,079
you to another piece of software and

3584
02:10:26,079 --> 02:10:30,280
these come in many forms we'll use a

3585
02:10:28,079 --> 02:10:33,960
popular one here that allows you to

3586
02:10:30,280 --> 02:10:36,360
convert source code in C to machine code

3587
02:10:33,960 --> 02:10:37,719
in uh zeros and ones now you didn't have

3588
02:10:36,360 --> 02:10:39,239
to do this with scratch in the world of

3589
02:10:37,719 --> 02:10:41,679
scratch it was as simple as clicking the

3590
02:10:39,239 --> 02:10:43,638
green flag because essentially MIT did

3591
02:10:41,679 --> 02:10:45,040
all of the heavy lifting there figuring

3592
02:10:43,639 --> 02:10:47,000
out how to convert these graphical

3593
02:10:45,040 --> 02:10:48,960
puzzle pieces to the underlying machine

3594
02:10:47,000 --> 02:10:50,719
code but now starting today as we begin

3595
02:10:48,960 --> 02:10:52,880
to study programming and computer

3596
02:10:50,719 --> 02:10:54,719
science proper now that power moves to

3597
02:10:52,880 --> 02:10:57,360
you and it's up to you now to do that

3598
02:10:54,719 --> 02:10:59,040
kind of conversion but thankfully the

3599
02:10:57,360 --> 02:11:01,040
fact that these compilers exist means

3600
02:10:59,040 --> 02:11:03,159
that you and I don't have to program in

3601
02:11:01,040 --> 02:11:05,599
machine code like our ancestors Once

3602
02:11:03,159 --> 02:11:07,199
Upon a Time did be it virtually or with

3603
02:11:05,599 --> 02:11:08,880
physical Punch Cards like pieces of

3604
02:11:07,199 --> 02:11:12,678
paper with holes in them you and I get

3605
02:11:08,880 --> 02:11:14,239
to focus uh on our keyboard as such but

3606
02:11:12,679 --> 02:11:16,599
it's not just going to be a matter today

3607
02:11:14,239 --> 02:11:18,759
of like writing code it's going to be a

3608
02:11:16,599 --> 02:11:20,360
matter ultimately today onward of good

3609
02:11:18,760 --> 02:11:21,280
code as well and this is the kind of

3610
02:11:20,360 --> 02:11:22,759
thing that you don't just learn

3611
02:11:21,280 --> 02:11:24,719
overnight it takes time it takes

3612
02:11:22,760 --> 02:11:26,440
practice just like writing an essay in

3613
02:11:24,719 --> 02:11:28,400
any subject might take time and practice

3614
02:11:26,440 --> 02:11:30,799
and iteration over time but in a

3615
02:11:28,400 --> 02:11:33,799
programming class like cs50 we're going

3616
02:11:30,800 --> 02:11:36,079
to Aspire to evaluate the quality of

3617
02:11:33,800 --> 02:11:37,800
code along these three axes generally is

3618
02:11:36,079 --> 02:11:39,519
it correct first and foremost like does

3619
02:11:37,800 --> 02:11:40,760
the code do what it's supposed to do

3620
02:11:39,520 --> 02:11:42,000
after all if it doesn't well what was

3621
02:11:40,760 --> 02:11:43,520
the point of writing it in the first

3622
02:11:42,000 --> 02:11:45,400
place so it sort of goes without saying

3623
02:11:43,520 --> 02:11:47,520
that you want code you write to be

3624
02:11:45,400 --> 02:11:49,239
correct and it's obviously not always

3625
02:11:47,520 --> 02:11:51,639
again anytime you're Mac or PC or phone

3626
02:11:49,239 --> 02:11:54,119
has crashed some human somewhere wrote

3627
02:11:51,639 --> 02:11:55,679
buggy that is code with mistakes but C

3628
02:11:54,119 --> 02:11:57,480
correctness is going to be the first and

3629
02:11:55,679 --> 02:11:59,599
foremost goal but then there's a more

3630
02:11:57,480 --> 02:12:01,480
subjective goal we'll see in time a

3631
02:11:59,599 --> 02:12:03,639
matter of design and we saw a little bit

3632
02:12:01,480 --> 02:12:05,799
of this last week when I proposed that

3633
02:12:03,639 --> 02:12:07,800
we could design even scratch programs

3634
02:12:05,800 --> 02:12:09,480
better maybe by using Loops instead of

3635
02:12:07,800 --> 02:12:11,960
just by copying and pasting the same

3636
02:12:09,480 --> 02:12:14,799
blocks again and again so design is more

3637
02:12:11,960 --> 02:12:16,440
subjective it's more of a a learned art

3638
02:12:14,800 --> 02:12:18,440
whereby two people might ultimately

3639
02:12:16,440 --> 02:12:19,919
disagree as to which version of a

3640
02:12:18,440 --> 02:12:21,400
program is better designed but we'll

3641
02:12:19,920 --> 02:12:22,960
give you building blocks and principles

3642
02:12:21,400 --> 02:12:24,719
over the coming weeks so that you can

3643
02:12:22,960 --> 02:12:27,400
have a better sense for yourself if your

3644
02:12:24,719 --> 02:12:28,880
own code is well designed and why is

3645
02:12:27,400 --> 02:12:30,960
that valuable well the better design

3646
02:12:28,880 --> 02:12:32,840
your code is often the faster it's going

3647
02:12:30,960 --> 02:12:34,480
to run the more maintainable it's going

3648
02:12:32,840 --> 02:12:36,280
to be by you or colleagues if you're

3649
02:12:34,480 --> 02:12:37,799
working with others in the real world so

3650
02:12:36,280 --> 02:12:39,519
good design is a good thing it helps you

3651
02:12:37,800 --> 02:12:41,880
communicate your ideas just like an

3652
02:12:39,520 --> 02:12:44,159
typical English essay and then lastly

3653
02:12:41,880 --> 02:12:45,559
we'll talk this week onward about style

3654
02:12:44,159 --> 02:12:47,519
and this is really just the Aesthetics

3655
02:12:45,559 --> 02:12:50,119
of your code it turns out that computers

3656
02:12:47,520 --> 02:12:53,840
often don't care how sloppy your actual

3657
02:12:50,119 --> 02:12:55,440
code is um where uh in the world of code

3658
02:12:53,840 --> 02:12:57,400
it turns out that you don't really need

3659
02:12:55,440 --> 02:12:58,839
to indent things in a beautiful way you

3660
02:12:57,400 --> 02:13:00,879
don't need to paginate things like you

3661
02:12:58,840 --> 02:13:03,079
might in an essay the computer generally

3662
02:13:00,880 --> 02:13:05,400
does not care but the human does the

3663
02:13:03,079 --> 02:13:06,840
teaching assistant does you will care

3664
02:13:05,400 --> 02:13:08,519
the next day when you're just trying to

3665
02:13:06,840 --> 02:13:10,679
understand what your code does so we'll

3666
02:13:08,520 --> 02:13:12,559
focus lastly on Style the Aesthetics of

3667
02:13:10,679 --> 02:13:14,320
the code that you're writing so where

3668
02:13:12,559 --> 02:13:16,559
are we going to write code where are we

3669
02:13:14,320 --> 02:13:18,759
going to compile code so for this class

3670
02:13:16,559 --> 02:13:20,400
not only with C but the other languages

3671
02:13:18,760 --> 02:13:23,360
we use later in the term we're going to

3672
02:13:20,400 --> 02:13:25,799
use a free text editor that is program

3673
02:13:23,360 --> 02:13:27,639
called Visual Studio code AKA vs code

3674
02:13:25,800 --> 02:13:30,840
it's super popular nowadays not just for

3675
02:13:27,639 --> 02:13:32,920
C but for C++ and Python and Java and

3676
02:13:30,840 --> 02:13:34,920
any number of other languages it's a

3677
02:13:32,920 --> 02:13:37,320
text editor in the sense that it lets

3678
02:13:34,920 --> 02:13:39,559
you edit text and that all that's all

3679
02:13:37,320 --> 02:13:41,599
code is going to be now strictly

3680
02:13:39,559 --> 02:13:42,840
speaking you could write code on paper

3681
02:13:41,599 --> 02:13:43,960
pencil in fact in high school if you

3682
02:13:42,840 --> 02:13:45,719
took a class you might have done that

3683
02:13:43,960 --> 02:13:47,520
one or more times as sort of an in-class

3684
02:13:45,719 --> 02:13:49,199
exercise you can't run it on paper of

3685
02:13:47,520 --> 02:13:50,800
course but you could write it certainly

3686
02:13:49,199 --> 02:13:53,440
you could use something like Microsoft

3687
02:13:50,800 --> 02:13:55,239
Word or notepad.exe or text edit on the

3688
02:13:53,440 --> 02:13:57,558
Mac but none of those programs are

3689
02:13:55,239 --> 02:13:59,320
really designed to format the code in

3690
02:13:57,559 --> 02:14:01,520
the best way for you nor are they

3691
02:13:59,320 --> 02:14:04,119
designed to let you compile and run the

3692
02:14:01,520 --> 02:14:06,159
code so VSS code is going to be a tool

3693
02:14:04,119 --> 02:14:08,360
via which you can do all that and more

3694
02:14:06,159 --> 02:14:10,480
write the code compile the code run the

3695
02:14:08,360 --> 02:14:12,239
code so that you all don't have to

3696
02:14:10,480 --> 02:14:14,040
wrestle with stupid technical support

3697
02:14:12,239 --> 02:14:15,759
headaches at the beginning of the course

3698
02:14:14,040 --> 02:14:18,280
by installing this software and that on

3699
02:14:15,760 --> 02:14:21,599
your Macs or PCS we'll use a cloud based

3700
02:14:18,280 --> 02:14:23,119
version of VSS code at code. cs50. and

3701
02:14:21,599 --> 02:14:24,800
that's going to be the exact same tool

3702
02:14:23,119 --> 02:14:27,280
and the goal then is by the end of the

3703
02:14:24,800 --> 02:14:28,960
semester to sort of uh migrate you off

3704
02:14:27,280 --> 02:14:31,000
of that cloud-based environment to your

3705
02:14:28,960 --> 02:14:33,119
own Mac and PC so that even if cs50 is

3706
02:14:31,000 --> 02:14:35,800
the only CS class you ever take you're

3707
02:14:33,119 --> 02:14:37,320
100% equipped to continue writing code

3708
02:14:35,800 --> 02:14:40,119
after the class using not something

3709
02:14:37,320 --> 02:14:42,440
that's even cs50 specific but a de facto

3710
02:14:40,119 --> 02:14:44,519
industry standard at least for some time

3711
02:14:42,440 --> 02:14:46,159
so what's this program VSS code going to

3712
02:14:44,520 --> 02:14:48,079
look like be it on your Mac PC or

3713
02:14:46,159 --> 02:14:49,638
initially in your browser and it's going

3714
02:14:48,079 --> 02:14:50,719
to look a little something like this and

3715
02:14:49,639 --> 02:14:52,719
there's going to be several different

3716
02:14:50,719 --> 02:14:54,840
regions to the screen and picture here

3717
02:14:52,719 --> 02:14:56,559
is that very same code I keep proposing

3718
02:14:54,840 --> 02:14:58,280
is the simplest program you can write in

3719
02:14:56,559 --> 02:15:00,639
C and what are these different regions

3720
02:14:58,280 --> 02:15:03,639
of the screen well there's essentially

3721
02:15:00,639 --> 02:15:06,199
these four here so first highlighted up

3722
02:15:03,639 --> 02:15:07,360
top is going to be one or more tabs

3723
02:15:06,199 --> 02:15:09,199
where you're going to actually write

3724
02:15:07,360 --> 02:15:10,839
code so much like in Google Docs or

3725
02:15:09,199 --> 02:15:13,400
Microsoft Word you can have tabs open

3726
02:15:10,840 --> 02:15:15,119
with files similarly in VSS code or

3727
02:15:13,400 --> 02:15:17,000
really any programming environment do

3728
02:15:15,119 --> 02:15:18,519
generally nowadays have tabs of some

3729
02:15:17,000 --> 02:15:20,239
sort and this is going to be a tab

3730
02:15:18,520 --> 02:15:22,239
containing a file it seems called

3731
02:15:20,239 --> 02:15:24,759
hello.c and that's going to be the very

3732
02:15:22,239 --> 02:15:26,199
first file we write in just a moment uh

3733
02:15:24,760 --> 02:15:27,960
down here though is going to be an

3734
02:15:26,199 --> 02:15:30,079
interface that many of you might not

3735
02:15:27,960 --> 02:15:32,440
know this is what's called a terminal

3736
02:15:30,079 --> 02:15:34,519
window and a terminal window provides

3737
02:15:32,440 --> 02:15:37,678
what's generally called a commandline

3738
02:15:34,520 --> 02:15:40,360
interface or CLI and this is in contrast

3739
02:15:37,679 --> 02:15:42,840
with a graphical user interface or guey

3740
02:15:40,360 --> 02:15:44,960
now you and I every day are using guies

3741
02:15:42,840 --> 02:15:47,199
on our phones on our PCS and a guy is

3742
02:15:44,960 --> 02:15:48,920
literally graphical so menus and buttons

3743
02:15:47,199 --> 02:15:51,320
and icons and you generally use your

3744
02:15:48,920 --> 02:15:53,040
finger or a trackpad or a mouse or

3745
02:15:51,320 --> 02:15:54,840
something like that to interact with it

3746
02:15:53,040 --> 02:15:56,800
but it turns out that many programmers

3747
02:15:54,840 --> 02:15:59,960
dare say most programmers at least over

3748
02:15:56,800 --> 02:16:01,559
time come to prefer not a guey but a CLI

3749
02:15:59,960 --> 02:16:04,480
a command line interface where you

3750
02:16:01,559 --> 02:16:07,880
actually do everything somewhat uh

3751
02:16:04,480 --> 02:16:09,280
somewhat arcely via keyboard alone why

3752
02:16:07,880 --> 02:16:11,280
well it turns out there's just more

3753
02:16:09,280 --> 02:16:12,920
features built in to most computers if

3754
02:16:11,280 --> 02:16:14,639
you can access them with a keyboard

3755
02:16:12,920 --> 02:16:16,199
turns out you can most of us can type

3756
02:16:14,639 --> 02:16:18,239
faster than you can point and click and

3757
02:16:16,199 --> 02:16:20,159
so that ends up being an efficient gain

3758
02:16:18,239 --> 02:16:22,280
over time so in time will you get

3759
02:16:20,159 --> 02:16:24,839
comfortable using this terminal window

3760
02:16:22,280 --> 02:16:27,079
to do things like compile your code or

3761
02:16:24,840 --> 02:16:29,040
make your program as well as run it so

3762
02:16:27,079 --> 02:16:30,960
you won't be in the habit initially of

3763
02:16:29,040 --> 02:16:32,959
just double clicking icons like we do in

3764
02:16:30,960 --> 02:16:35,160
our typical real world you'll do it sort

3765
02:16:32,959 --> 02:16:36,959
of the programmer's way but it's not to

3766
02:16:35,160 --> 02:16:39,280
the exclusion of adding icons and

3767
02:16:36,959 --> 02:16:40,959
clickability and more on the left hand

3768
02:16:39,280 --> 02:16:43,719
side of vs code there's going to be a

3769
02:16:40,959 --> 02:16:45,518
somewhat familiar file explorer some

3770
02:16:43,718 --> 02:16:47,318
kind of hierarchical tree like on your

3771
02:16:45,519 --> 02:16:49,519
Mac or PC where you can see all of the

3772
02:16:47,318 --> 02:16:51,279
files in your account pictured here for

3773
02:16:49,519 --> 02:16:53,519
instance is just hello.c which I'll

3774
02:16:51,280 --> 02:16:55,080
create myself in a moment and then far

3775
02:16:53,519 --> 02:16:56,840
away on the left is the so-called

3776
02:16:55,080 --> 02:16:58,478
activity bar and this is where you just

3777
02:16:56,840 --> 02:17:00,398
get a lot of traditional menus and

3778
02:16:58,478 --> 02:17:03,558
buttons so VSS code itself gives you

3779
02:17:00,398 --> 02:17:06,279
both a guey and a CLI but it's within

3780
02:17:03,558 --> 02:17:07,518
the CLI the terminal window the bottom

3781
02:17:06,280 --> 02:17:08,880
region of the screen that we're actually

3782
02:17:07,519 --> 02:17:10,359
going to type most of our commands and

3783
02:17:08,879 --> 02:17:12,119
in general in class I'm going to hide

3784
02:17:10,359 --> 02:17:15,240
all of the graphical stuff that's just

3785
02:17:12,120 --> 02:17:16,920
not of all that uh that much interest so

3786
02:17:15,240 --> 02:17:19,638
with that said let me actually change

3787
02:17:16,920 --> 02:17:21,398
over to a live version of vs code and

3788
02:17:19,638 --> 02:17:23,398
I've indeed HD in the activity bar I've

3789
02:17:21,398 --> 02:17:25,119
indeed hid in the file explorer so what

3790
02:17:23,398 --> 02:17:27,199
I have here for visibility sake is a

3791
02:17:25,120 --> 02:17:29,399
really big area for writing code and a

3792
02:17:27,200 --> 02:17:30,880
really big terminal window at the bottom

3793
02:17:29,398 --> 02:17:32,279
you'll see in the terminal window

3794
02:17:30,879 --> 02:17:34,240
there's a dollar sign and this doesn't

3795
02:17:32,280 --> 02:17:36,920
mean any form of currency this is just

3796
02:17:34,240 --> 02:17:38,638
the standard symbol that represents type

3797
02:17:36,920 --> 02:17:40,318
commands here so the fact that there's

3798
02:17:38,638 --> 02:17:41,279
just a dollar sign in a cursor means

3799
02:17:40,318 --> 02:17:43,119
eventually that's where I'm going to

3800
02:17:41,280 --> 02:17:46,399
type commands but first i'm going to

3801
02:17:43,120 --> 02:17:49,479
actually create some code so how might I

3802
02:17:46,398 --> 02:17:51,160
program using vs code be it on my Mac PC

3803
02:17:49,478 --> 02:17:54,119
or in this cloud-based environment that

3804
02:17:51,160 --> 02:17:55,959
you'll get set up for problem set one go

3805
02:17:54,120 --> 02:17:57,920
about writing my first file well perhaps

3806
02:17:55,959 --> 02:18:00,119
the easiest way is this literally run

3807
02:17:57,920 --> 02:18:02,359
the command code and then the name of

3808
02:18:00,120 --> 02:18:04,800
the file you want to create notice that

3809
02:18:02,359 --> 02:18:06,519
I deliberately end the file with C in

3810
02:18:04,799 --> 02:18:08,119
lowercase notice that I've deliberately

3811
02:18:06,519 --> 02:18:10,080
lowercased the whole file name and these

3812
02:18:08,120 --> 02:18:12,080
are just conventions you could use a

3813
02:18:10,080 --> 02:18:14,318
capital H you kind of could use a

3814
02:18:12,080 --> 02:18:15,920
Capital C but just don't do that follow

3815
02:18:14,318 --> 02:18:17,799
best practices so that it's consistent

3816
02:18:15,920 --> 02:18:20,359
with what most everyone else would do

3817
02:18:17,799 --> 02:18:22,240
when I hit enter I just get an empty tab

3818
02:18:20,359 --> 02:18:24,040
just like the screenshot a moment ago

3819
02:18:22,240 --> 02:18:26,799
and it's in this tab where I can now

3820
02:18:24,040 --> 02:18:28,319
write my very first program in C

3821
02:18:26,799 --> 02:18:29,840
unfortunately it's not quite as user

3822
02:18:28,318 --> 02:18:31,920
friendly as scratch where you drag and

3823
02:18:29,840 --> 02:18:33,599
drop a couple of puzzle pieces and boom

3824
02:18:31,920 --> 02:18:35,439
it's done so I'm going to do this for

3825
02:18:33,599 --> 02:18:37,840
memory but this too will become familiar

3826
02:18:35,439 --> 02:18:40,599
to you over time I'm going to include

3827
02:18:37,840 --> 02:18:44,000
something called standard io. I'm going

3828
02:18:40,599 --> 02:18:45,840
to type int main void and parentheses on

3829
02:18:44,000 --> 02:18:48,080
a new line I'm going to insert some

3830
02:18:45,840 --> 02:18:50,478
curly braces as we'll call them and then

3831
02:18:48,080 --> 02:18:53,120
I'm going to type print F and then some

3832
02:18:50,478 --> 02:18:55,799
parentheses and then in quotes hello

3833
02:18:53,120 --> 02:18:58,479
comma world then a backslash then a

3834
02:18:55,799 --> 02:19:00,959
lowercase n then a close quote and then

3835
02:18:58,478 --> 02:19:03,279
a semicolon at the very end of the line

3836
02:19:00,959 --> 02:19:05,799
so all I've done is recreate just from

3837
02:19:03,280 --> 02:19:07,760
memory that very first program in a

3838
02:19:05,799 --> 02:19:09,599
little bit we'll make clear what most of

3839
02:19:07,760 --> 02:19:11,080
this does but for now let's just

3840
02:19:09,599 --> 02:19:12,639
actually run this thing and just like I

3841
02:19:11,080 --> 02:19:15,160
click the green flag last week for the

3842
02:19:12,638 --> 02:19:18,398
first time let's actually compile and

3843
02:19:15,160 --> 02:19:20,558
run this program if it were your Mac PC

3844
02:19:18,398 --> 02:19:22,199
and Google or Microsoft or someone else

3845
02:19:20,558 --> 02:19:23,558
had made the software at this point in

3846
02:19:22,200 --> 02:19:25,479
the story we'd be double clicking an

3847
02:19:23,558 --> 02:19:27,358
icon but we can't do that yet this is

3848
02:19:25,478 --> 02:19:29,519
still source code so I'm going to click

3849
02:19:27,359 --> 02:19:31,519
back down in my terminal window notice I

3850
02:19:29,519 --> 02:19:33,359
have a second dollar sign below the

3851
02:19:31,519 --> 02:19:35,960
first which just means it's ready for a

3852
02:19:33,359 --> 02:19:38,880
second command and now the command via

3853
02:19:35,959 --> 02:19:41,080
which to make this an actual program to

3854
02:19:38,879 --> 02:19:43,799
compile it from source code to machine

3855
02:19:41,080 --> 02:19:45,359
code is going to be quite simply make

3856
02:19:43,799 --> 02:19:48,160
and then the name of the program I want

3857
02:19:45,359 --> 02:19:50,280
to make slight subtlety I'm omitting

3858
02:19:48,160 --> 02:19:52,280
deliberately. C because the program I

3859
02:19:50,280 --> 02:19:54,560
want to make I just want to call hello

3860
02:19:52,280 --> 02:19:58,120
so don't write make hello. C just write

3861
02:19:54,560 --> 02:20:00,119
make hello and this program make is

3862
02:19:58,120 --> 02:20:02,160
essentially our compiler technically

3863
02:20:00,120 --> 02:20:04,399
speaking it's a program that automates

3864
02:20:02,160 --> 02:20:06,039
the compilation of my program for me but

3865
02:20:04,399 --> 02:20:08,519
it is going to see that I've typed the

3866
02:20:06,040 --> 02:20:10,479
word hello it's going to automatically

3867
02:20:08,520 --> 02:20:13,359
look now for a file on the hard drive

3868
02:20:10,479 --> 02:20:16,119
called hello.c and convert it from

3869
02:20:13,359 --> 02:20:18,560
source code in C to machine code in

3870
02:20:16,120 --> 02:20:20,760
zeros and ones so if I didn't make any

3871
02:20:18,560 --> 02:20:23,880
typos

3872
02:20:20,760 --> 02:20:26,160
enter nothing seems to happen and that's

3873
02:20:23,880 --> 02:20:28,199
a good thing almost always if nothing

3874
02:20:26,160 --> 02:20:29,600
gets outputed on the screen like you did

3875
02:20:28,200 --> 02:20:30,800
good like you didn't make any mistakes

3876
02:20:29,600 --> 02:20:32,439
you didn't get yelled at there's no

3877
02:20:30,800 --> 02:20:34,759
error messages so this is actually a

3878
02:20:32,439 --> 02:20:36,399
good thing how do I now run this program

3879
02:20:34,760 --> 02:20:38,040
well notice I've got a third dollar sign

3880
02:20:36,399 --> 02:20:39,720
which just means I'm ready for a third

3881
02:20:38,040 --> 02:20:42,520
command and now I'm going to go ahead

3882
02:20:39,720 --> 02:20:44,319
and run dot slash hello and this is

3883
02:20:42,520 --> 02:20:46,359
admittedly a little weird that you have

3884
02:20:44,319 --> 02:20:48,439
to do dot slash but for now just take on

3885
02:20:46,359 --> 02:20:51,319
faith that this is how you run a program

3886
02:20:48,439 --> 02:20:52,760
called hello in your current folder in

3887
02:20:51,319 --> 02:20:54,720
your current directory in this

3888
02:20:52,760 --> 02:20:57,080
cloud-based environment all right

3889
02:20:54,720 --> 02:21:01,039
crossing my fingers again hitting enter

3890
02:20:57,080 --> 02:21:04,120
and voila my very first program in see

3891
02:21:01,040 --> 02:21:07,080
hello world and now let me go ahead and

3892
02:21:04,120 --> 02:21:08,680
reveal the file explorer that I proposed

3893
02:21:07,080 --> 02:21:10,560
exist earlier I'm just going to use a

3894
02:21:08,680 --> 02:21:11,840
keyboard shortcut to reveal that and

3895
02:21:10,560 --> 02:21:13,240
generally I keep it close because I

3896
02:21:11,840 --> 02:21:15,240
don't really need to know constantly

3897
02:21:13,240 --> 02:21:16,960
what files are in my account but you'll

3898
02:21:15,240 --> 02:21:19,280
see now in the file explorer similar

3899
02:21:16,960 --> 02:21:21,960
INSP to a Mac or PC but graphically a

3900
02:21:19,280 --> 02:21:23,720
little different here's my file hello.c

3901
02:21:21,960 --> 02:21:26,119
it's highlighted because I have that tab

3902
02:21:23,720 --> 02:21:28,760
open but now there's a second file here

3903
02:21:26,120 --> 02:21:30,840
called just hello that's the name of my

3904
02:21:28,760 --> 02:21:32,319
program so if you were on a Mac or PC

3905
02:21:30,840 --> 02:21:34,040
you would ideally double click that

3906
02:21:32,319 --> 02:21:35,640
thing you can't do that in a command

3907
02:21:34,040 --> 02:21:37,200
line environment you have to run it down

3908
02:21:35,640 --> 02:21:39,479
here but that's all we've done we've

3909
02:21:37,200 --> 02:21:42,840
created a file called hello.c and then

3910
02:21:39,479 --> 02:21:45,319
my compiler made the program from that

3911
02:21:42,840 --> 02:21:48,080
let me pause here and see if there's any

3912
02:21:45,319 --> 02:21:50,359
questions because it's a lot of magical

3913
02:21:48,080 --> 02:21:52,880
phrases

3914
02:21:50,359 --> 02:21:55,120
yeah yeah so if you're currently

3915
02:21:52,880 --> 02:21:56,519
following along uh playing along at home

3916
02:21:55,120 --> 02:21:58,040
and you're getting some kind of error

3917
02:21:56,520 --> 02:21:59,880
message part of today will be for me to

3918
02:21:58,040 --> 02:22:02,160
deliberately induce some of those error

3919
02:21:59,880 --> 02:22:03,839
messages for now let me just propose

3920
02:22:02,160 --> 02:22:06,119
that if you literally did what I did you

3921
02:22:03,840 --> 02:22:09,319
must have made a typo somewhere and

3922
02:22:06,120 --> 02:22:12,280
notice that it's indeed standard IO

3923
02:22:09,319 --> 02:22:15,279
stdio.h uh maybe you type

3924
02:22:12,280 --> 02:22:17,359
studio. okay super common mistake if I

3925
02:22:15,280 --> 02:22:20,840
don't if I could call you out um like it

3926
02:22:17,359 --> 02:22:22,200
is not studio. it is standard io. so

3927
02:22:20,840 --> 02:22:23,680
common but this is exactly

3928
02:22:22,200 --> 02:22:24,960
representative of like the kind of

3929
02:22:23,680 --> 02:22:26,800
stupid headaches you're going to run

3930
02:22:24,960 --> 02:22:28,800
into this week probably for a few weeks

3931
02:22:26,800 --> 02:22:30,358
probably honestly for a few years but

3932
02:22:28,800 --> 02:22:32,160
you start to see past these sort of

3933
02:22:30,359 --> 02:22:33,640
stupid mistakes over time and it just

3934
02:22:32,160 --> 02:22:35,439
gets easier and easier because the

3935
02:22:33,640 --> 02:22:36,760
computer is going to be so regimented

3936
02:22:35,439 --> 02:22:38,800
like you it will only do what you tell

3937
02:22:36,760 --> 02:22:41,359
it to do and if you say because it's

3938
02:22:38,800 --> 02:22:42,679
verbally sounds like studio. it's not

3939
02:22:41,359 --> 02:22:44,000
going to know what the file is so

3940
02:22:42,680 --> 02:22:46,120
actually thank you for tripping over

3941
02:22:44,000 --> 02:22:49,560
that so early that's super common to

3942
02:22:46,120 --> 02:22:51,920
happen yeah have two hello so I why do I

3943
02:22:49,560 --> 02:22:53,920
have two hello files so why do I have

3944
02:22:51,920 --> 02:22:56,040
two hello files one is the one I created

3945
02:22:53,920 --> 02:22:58,280
as the human called hello.c and it's

3946
02:22:56,040 --> 02:23:01,840
pictured right here but then when I ran

3947
02:22:58,280 --> 02:23:04,120
make hello that process compiled my

3948
02:23:01,840 --> 02:23:06,439
source code into machine code so this

3949
02:23:04,120 --> 02:23:08,040
second file just called hello is the

3950
02:23:06,439 --> 02:23:11,399
file that contains all of those zeros

3951
02:23:08,040 --> 02:23:15,560
and ones that the server actually

3952
02:23:11,399 --> 02:23:15,560
understands all right so yeah

3953
02:23:15,760 --> 02:23:19,520
question if you try clicking on the

3954
02:23:17,880 --> 02:23:21,679
Hello file you'll see in this

3955
02:23:19,520 --> 02:23:23,240
environment of vs code quote unquote the

3956
02:23:21,680 --> 02:23:25,680
file is not displayed in the editor

3957
02:23:23,240 --> 02:23:27,640
because it is either binary AKA zeros

3958
02:23:25,680 --> 02:23:29,240
and ones or uses an unsupported text

3959
02:23:27,640 --> 02:23:32,119
encoding in this case it's binary it's

3960
02:23:29,240 --> 02:23:34,359
zeros and ones now you could use

3961
02:23:32,120 --> 02:23:35,920
software to see those zeros and ones it

3962
02:23:34,359 --> 02:23:38,200
won't be intellectually enlightening to

3963
02:23:35,920 --> 02:23:39,680
most any human so VSS code just takes

3964
02:23:38,200 --> 02:23:41,160
the choice of not showing it to you at

3965
02:23:39,680 --> 02:23:43,040
all so that would be a common mistake

3966
02:23:41,160 --> 02:23:44,640
too clicking on a file you don't intend

3967
02:23:43,040 --> 02:23:47,399
but the source code is indeed going to

3968
02:23:44,640 --> 02:23:48,960
be editable by us all right all right so

3969
02:23:47,399 --> 02:23:50,880
I've written this program it seems to

3970
02:23:48,960 --> 02:23:52,358
sort of magically work at least with

3971
02:23:50,880 --> 02:23:54,560
some effort if you get every single

3972
02:23:52,359 --> 02:23:56,279
keystroke right well what is it that's

3973
02:23:54,560 --> 02:23:58,680
going on and how is this working well

3974
02:23:56,279 --> 02:24:01,160
first of all notice that even without my

3975
02:23:58,680 --> 02:24:03,279
highlighting things or choosing buttons

3976
02:24:01,160 --> 02:24:05,160
from menus notice that it's already kind

3977
02:24:03,279 --> 02:24:06,640
of colorcoded and yet I wasn't

3978
02:24:05,160 --> 02:24:08,399
highlighting along the way in sort of

3979
02:24:06,640 --> 02:24:10,560
Google doc style changing the color

3980
02:24:08,399 --> 02:24:12,599
certainly well it turns out what VSS

3981
02:24:10,560 --> 02:24:14,800
code and most programming environments

3982
02:24:12,600 --> 02:24:17,200
nowadays do for you automatically is

3983
02:24:14,800 --> 02:24:19,319
syntax highlighting so syntax

3984
02:24:17,200 --> 02:24:21,600
highlighting is just this feature of

3985
02:24:19,319 --> 02:24:23,640
typical text editors nowadays that

3986
02:24:21,600 --> 02:24:25,760
analyzes the code that you've typed and

3987
02:24:23,640 --> 02:24:27,640
when it notices certain types of

3988
02:24:25,760 --> 02:24:30,000
keystrokes things that represent

3989
02:24:27,640 --> 02:24:31,680
functions or conditionals or Loops or

3990
02:24:30,000 --> 02:24:33,680
variables a lot of the vocab from last

3991
02:24:31,680 --> 02:24:35,840
week it just highlights it ever so

3992
02:24:33,680 --> 02:24:38,000
differently for you so main for instance

3993
02:24:35,840 --> 02:24:40,600
which we'll soon see is in purple here

3994
02:24:38,000 --> 02:24:42,920
int and void and include are in red

3995
02:24:40,600 --> 02:24:45,160
hello world is in blue my parentheses

3996
02:24:42,920 --> 02:24:47,600
are in green this will totally vary by

3997
02:24:45,160 --> 02:24:49,520
programmer too in fact if you do want to

3998
02:24:47,600 --> 02:24:51,160
change these colors for problem set one

3999
02:24:49,520 --> 02:24:53,240
for your own environment you can poke

4000
02:24:51,160 --> 02:24:55,119
around vs code settings via the gear

4001
02:24:53,240 --> 02:24:57,000
icon you can change a different a change

4002
02:24:55,120 --> 02:24:58,600
to a different color theme syntax

4003
02:24:57,000 --> 02:25:00,600
highlighting isn't some specific color

4004
02:24:58,600 --> 02:25:02,680
scheme like it is in scratch it just

4005
02:25:00,600 --> 02:25:03,960
generally is to each human their own

4006
02:25:02,680 --> 02:25:06,120
preference but that's all that's

4007
02:25:03,960 --> 02:25:07,919
happening here is this notion of syntax

4008
02:25:06,120 --> 02:25:10,439
highlighting at the moment well what

4009
02:25:07,920 --> 02:25:12,560
more is going on in this code before I

4010
02:25:10,439 --> 02:25:14,200
run it but rather write it well it looks

4011
02:25:12,560 --> 02:25:15,920
a little something like this if I take

4012
02:25:14,200 --> 02:25:17,479
away all of the colors and then just for

4013
02:25:15,920 --> 02:25:19,520
discussion sake let me ahead and color

4014
02:25:17,479 --> 02:25:21,599
it a little more like scratch recall

4015
02:25:19,520 --> 02:25:23,880
that our very first scratch program that

4016
02:25:21,600 --> 02:25:26,680
just said hello world on the screen had

4017
02:25:23,880 --> 02:25:29,160
a when green flag clicked icon uh puzzle

4018
02:25:26,680 --> 02:25:32,319
piece roughly an orange and then a

4019
02:25:29,160 --> 02:25:34,640
purple uh sa block beneath it so whereas

4020
02:25:32,319 --> 02:25:37,039
this is the C version if we rewind to

4021
02:25:34,640 --> 02:25:38,760
last week this was the same program in

4022
02:25:37,040 --> 02:25:40,479
scratch but what's happening now is

4023
02:25:38,760 --> 02:25:42,720
exactly the same so if you think back to

4024
02:25:40,479 --> 02:25:45,438
last week and you've got some function

4025
02:25:42,720 --> 02:25:47,199
like the say function in purple that

4026
02:25:45,439 --> 02:25:49,080
might take one or more arguments like

4027
02:25:47,200 --> 02:25:51,560
inputs that influences what it says on

4028
02:25:49,080 --> 02:25:53,279
the screen and then functions recall can

4029
02:25:51,560 --> 02:25:55,000
sometimes have side effects right like

4030
02:25:53,279 --> 02:25:57,560
the speech bubble appears on the screen

4031
02:25:55,000 --> 02:25:59,319
so last week when we used the sa block

4032
02:25:57,560 --> 02:26:01,880
and we passed in an argument of hello

4033
02:25:59,319 --> 02:26:04,080
world at left we got this visual side

4034
02:26:01,880 --> 02:26:05,720
effect on the screen that says now hello

4035
02:26:04,080 --> 02:26:07,760
world in the speech bubble and that's

4036
02:26:05,720 --> 02:26:10,278
exactly what just happened in VSS code

4037
02:26:07,760 --> 02:26:11,960
but much much more textually and let's

4038
02:26:10,279 --> 02:26:14,479
look a little closer now at the code

4039
02:26:11,960 --> 02:26:16,278
itself let me wave my hand at the

4040
02:26:14,479 --> 02:26:18,920
equivalent of the when green flag

4041
02:26:16,279 --> 02:26:22,000
clicked part of my code and let's focus

4042
02:26:18,920 --> 02:26:26,240
only on the say block in scratch and the

4043
02:26:22,000 --> 02:26:28,200
corresponding function in C so if I step

4044
02:26:26,240 --> 02:26:30,479
through this and I wanted to convert

4045
02:26:28,200 --> 02:26:33,279
what we did last week with the say block

4046
02:26:30,479 --> 02:26:34,560
to C I would first use the print

4047
02:26:33,279 --> 02:26:36,560
function although that's actually a bit

4048
02:26:34,560 --> 02:26:38,880
of a white lie it's actually the print F

4049
02:26:36,560 --> 02:26:40,278
function print f means formatted and

4050
02:26:38,880 --> 02:26:42,920
it's just a function that allows you to

4051
02:26:40,279 --> 02:26:45,240
format text on the screen There Is No Sa

4052
02:26:42,920 --> 02:26:47,080
function in C there's a print F function

4053
02:26:45,240 --> 02:26:49,199
what MIT did down the road years ago go

4054
02:26:47,080 --> 02:26:51,160
was they took what existed historically

4055
02:26:49,200 --> 02:26:52,800
as print F and they simplified it for a

4056
02:26:51,160 --> 02:26:55,680
broader audience by just calling it

4057
02:26:52,800 --> 02:26:58,438
essentially say instead but notice that

4058
02:26:55,680 --> 02:27:00,960
now if I want to convert the scratch

4059
02:26:58,439 --> 02:27:03,640
code at left to C code at right it's

4060
02:27:00,960 --> 02:27:05,800
sort of the same shape so MIT

4061
02:27:03,640 --> 02:27:08,039
deliberately used this white oval if

4062
02:27:05,800 --> 02:27:10,119
only because it kind of conjures these

4063
02:27:08,040 --> 02:27:12,120
uh this idea of having parentheses too

4064
02:27:10,120 --> 02:27:14,359
so on the right if I want to pass an

4065
02:27:12,120 --> 02:27:16,720
argument or an input to the print F

4066
02:27:14,359 --> 02:27:19,279
function I use an open parenthesis and a

4067
02:27:16,720 --> 02:27:21,240
CL parenthesis in those parentheses I

4068
02:27:19,279 --> 02:27:23,399
then type whatever it is I want to print

4069
02:27:21,240 --> 02:27:25,359
on the screen in this case hello comma

4070
02:27:23,399 --> 02:27:26,960
world but notice I've deliberately left

4071
02:27:25,359 --> 02:27:29,680
some room because you need some extra

4072
02:27:26,960 --> 02:27:32,720
keystrokes in the world of C anytime you

4073
02:27:29,680 --> 02:27:35,080
type out some text otherwise known as a

4074
02:27:32,720 --> 02:27:37,599
string of text to use computer science

4075
02:27:35,080 --> 02:27:39,359
jargon you need to quote it in this case

4076
02:27:37,600 --> 02:27:41,399
with double quotes double quote at the

4077
02:27:39,359 --> 02:27:43,120
left double quote at the right and

4078
02:27:41,399 --> 02:27:45,119
notice to I'm going to include some

4079
02:27:43,120 --> 02:27:47,760
slightly cryptic symbol here too back

4080
02:27:45,120 --> 02:27:49,880
sln which I also typed and said verbally

4081
02:27:47,760 --> 02:27:52,760
earlier and then one last nuisance at

4082
02:27:49,880 --> 02:27:54,720
the end of this which is a semicolon so

4083
02:27:52,760 --> 02:27:57,000
suffice it to say this is why we start

4084
02:27:54,720 --> 02:27:59,479
with scratch this drag and drop you're

4085
02:27:57,000 --> 02:28:01,359
good to go in a language like C print F

4086
02:27:59,479 --> 02:28:03,080
parenthesis double quotes the text you

4087
02:28:01,359 --> 02:28:04,960
want backs slash and semicolon at the

4088
02:28:03,080 --> 02:28:07,000
end there's just so much syntactic

4089
02:28:04,960 --> 02:28:08,679
overhead but at the end of the day it's

4090
02:28:07,000 --> 02:28:10,680
just a function and you'll get used to

4091
02:28:08,680 --> 02:28:12,840
these sort of nuisances like the

4092
02:28:10,680 --> 02:28:15,960
parentheses the quotes the semicolon and

4093
02:28:12,840 --> 02:28:17,960
the like but things can very easily go

4094
02:28:15,960 --> 02:28:19,679
wrong and it's very easy to make

4095
02:28:17,960 --> 02:28:21,358
mistakes even with lines of code like

4096
02:28:19,680 --> 02:28:23,720
this so let me do this let me go back to

4097
02:28:21,359 --> 02:28:26,680
vs code where I have the exact same code

4098
02:28:23,720 --> 02:28:28,438
notice that on line five is exactly that

4099
02:28:26,680 --> 02:28:30,600
line of code so this is the equivalent

4100
02:28:28,439 --> 02:28:32,680
of the sa block and let's consider what

4101
02:28:30,600 --> 02:28:34,399
mistakes I may make early on or even now

4102
02:28:32,680 --> 02:28:37,160
20 years later after learning this that

4103
02:28:34,399 --> 02:28:39,960
are quite common um in general suppose I

4104
02:28:37,160 --> 02:28:41,960
forget the semicolon there so easy to do

4105
02:28:39,960 --> 02:28:43,759
you will do this eventually let's see

4106
02:28:41,960 --> 02:28:45,679
what happens now when I go back to my

4107
02:28:43,760 --> 02:28:47,760
terminal window and try to compile my

4108
02:28:45,680 --> 02:28:49,760
code again just to keep things tidy I'm

4109
02:28:47,760 --> 02:28:51,479
going to clear my screen but that's just

4110
02:28:49,760 --> 02:28:53,319
for lecture sake so that we can focus

4111
02:28:51,479 --> 02:28:55,840
only on the most recent command but I'm

4112
02:28:53,319 --> 02:28:59,039
going to go ahead now and rerun make

4113
02:28:55,840 --> 02:29:01,200
Hello this will ensure that my program

4114
02:28:59,040 --> 02:29:03,240
is recompiled and this is a manual

4115
02:29:01,200 --> 02:29:05,240
process I changed my code the zeros and

4116
02:29:03,240 --> 02:29:07,279
ones on the hard drive have not changed

4117
02:29:05,240 --> 02:29:09,240
I need to recompile it to Output the

4118
02:29:07,279 --> 02:29:10,840
latest machine code so here we go I'm

4119
02:29:09,240 --> 02:29:12,920
going to hit enter crossing my fingers

4120
02:29:10,840 --> 02:29:14,920
as before but again I remove the

4121
02:29:12,920 --> 02:29:17,279
semicolon by

4122
02:29:14,920 --> 02:29:19,479
accident oh my God there's like more

4123
02:29:17,279 --> 02:29:21,080
lines of Errors now than there are of

4124
02:29:19,479 --> 02:29:23,358
actual code and this too takes them

4125
02:29:21,080 --> 02:29:25,319
getting used to um the programs we're

4126
02:29:23,359 --> 02:29:27,040
using were not necessarily written with

4127
02:29:25,319 --> 02:29:28,720
the least comfortable audience in mind

4128
02:29:27,040 --> 02:29:31,000
but really professional programmers back

4129
02:29:28,720 --> 02:29:32,560
in the day but through practice and

4130
02:29:31,000 --> 02:29:34,319
through experience and through mistakes

4131
02:29:32,560 --> 02:29:36,560
you'll start to notice patterns here too

4132
02:29:34,319 --> 02:29:38,920
so here's what I typed make hello after

4133
02:29:36,560 --> 02:29:42,640
the dollar sign prompt now I get yelled

4134
02:29:38,920 --> 02:29:45,319
at with as follows hello.c colon

4135
02:29:42,640 --> 02:29:47,960
529 well what's that referring to I've

4136
02:29:45,319 --> 02:29:50,560
screwed up somewhere on line five on the

4137
02:29:47,960 --> 02:29:51,960
29th character on that line generally

4138
02:29:50,560 --> 02:29:53,319
the specific character is not that

4139
02:29:51,960 --> 02:29:55,679
useful unless you actually want to count

4140
02:29:53,319 --> 02:29:57,560
it out but line five is a good clue why

4141
02:29:55,680 --> 02:29:59,359
it means I screwed up somewhere on line

4142
02:29:57,560 --> 02:30:02,278
five here all right well what is the

4143
02:29:59,359 --> 02:30:03,800
error expected a semicolon after

4144
02:30:02,279 --> 02:30:05,720
expression and this error is actually

4145
02:30:03,800 --> 02:30:06,880
pretty obvious now that I see it and I

4146
02:30:05,720 --> 02:30:09,080
realize oh wait a minute all right

4147
02:30:06,880 --> 02:30:12,278
here's my line of code here in sort of

4148
02:30:09,080 --> 02:30:14,600
asky art so to speak textual uh text

4149
02:30:12,279 --> 02:30:16,240
representing Graphics it wants me to put

4150
02:30:14,600 --> 02:30:18,840
in green here this semicolon at the end

4151
02:30:16,240 --> 02:30:21,279
of that line one error generated built

4152
02:30:18,840 --> 02:30:23,439
in so some esoteric stuff there but my

4153
02:30:21,279 --> 02:30:26,120
program did not compile when you see an

4154
02:30:23,439 --> 02:30:28,439
error like this it means it did not work

4155
02:30:26,120 --> 02:30:31,439
so what's the fix well obviously the fix

4156
02:30:28,439 --> 02:30:34,279
is to go back up here put the semicolon

4157
02:30:31,439 --> 02:30:36,359
there and now if I recompile my code

4158
02:30:34,279 --> 02:30:37,880
with make hello I won't clear my screen

4159
02:30:36,359 --> 02:30:40,640
just yet just to show you the difference

4160
02:30:37,880 --> 02:30:42,599
now it just worked so we're back in

4161
02:30:40,640 --> 02:30:44,800
business as before all right let me

4162
02:30:42,600 --> 02:30:46,650
pause here though and ask if there's any

4163
02:30:44,800 --> 02:30:48,840
questions about what I just did

4164
02:30:46,650 --> 02:30:50,199
[Music]

4165
02:30:48,840 --> 02:30:53,240
these error messages will become

4166
02:30:50,200 --> 02:30:53,240
frequent initially

4167
02:30:55,160 --> 02:30:59,560
yeah really good question do you need a

4168
02:30:57,240 --> 02:31:01,319
semicolon after every line or just some

4169
02:30:59,560 --> 02:31:02,600
it turns out just some uh this is

4170
02:31:01,319 --> 02:31:04,240
something you'll learn through practice

4171
02:31:02,600 --> 02:31:06,800
through demonstrations and examples

4172
02:31:04,240 --> 02:31:10,080
today generally you put a semicolon

4173
02:31:06,800 --> 02:31:11,640
after a statement so to speak and this

4174
02:31:10,080 --> 02:31:13,319
is the technical term for this line of

4175
02:31:11,640 --> 02:31:14,800
code it's a statement and think of it is

4176
02:31:13,319 --> 02:31:16,760
it's kind of the code equivalent of like

4177
02:31:14,800 --> 02:31:19,039
an English sentence so the semi colon

4178
02:31:16,760 --> 02:31:20,520
and code is sort of like a period in

4179
02:31:19,040 --> 02:31:22,279
English when you're done with that

4180
02:31:20,520 --> 02:31:24,399
particular thought you don't need

4181
02:31:22,279 --> 02:31:26,200
semicolons for now anywhere else and

4182
02:31:24,399 --> 02:31:27,840
we'll see examples of where else you put

4183
02:31:26,200 --> 02:31:30,000
them but it usually is at the end of a

4184
02:31:27,840 --> 02:31:32,680
line of code that hasn't that isn't

4185
02:31:30,000 --> 02:31:35,160
purely syntactic like uh curly braces

4186
02:31:32,680 --> 02:31:39,750
instead other questions on the mistake I

4187
02:31:35,160 --> 02:31:40,840
just fixed and created for myself

4188
02:31:39,750 --> 02:31:44,160
[Music]

4189
02:31:40,840 --> 02:31:46,600
yeah uh correct so line five is where

4190
02:31:44,160 --> 02:31:48,560
the error is most likely character 29

4191
02:31:46,600 --> 02:31:50,319
means it's sort of 29 characters that

4192
02:31:48,560 --> 02:31:52,000
way and then it's actually in this case

4193
02:31:50,319 --> 02:31:53,960
giving me a suggestion the compiler

4194
02:31:52,000 --> 02:31:55,760
won't always know how to advise me

4195
02:31:53,960 --> 02:31:58,278
especially if I've made a real mess of

4196
02:31:55,760 --> 02:32:02,040
my code but often it will do its best to

4197
02:31:58,279 --> 02:32:02,040
give you the answer like this

4198
02:32:02,880 --> 02:32:09,080
yeah ah so how come I first typed code

4199
02:32:06,640 --> 02:32:11,119
space hello.c and now I'm typing make

4200
02:32:09,080 --> 02:32:14,160
hello two different processes so when I

4201
02:32:11,120 --> 02:32:15,840
typed code space hello.c that was

4202
02:32:14,160 --> 02:32:17,840
because I wanted to open vs code and

4203
02:32:15,840 --> 02:32:20,439
create a new new file called hello.c

4204
02:32:17,840 --> 02:32:22,800
it's like going to file new in in a a

4205
02:32:20,439 --> 02:32:25,279
Mac or PC thereafter though once the

4206
02:32:22,800 --> 02:32:26,880
file exists and is actually open here

4207
02:32:25,279 --> 02:32:29,319
and it does autosave you don't need to

4208
02:32:26,880 --> 02:32:31,800
hit command s or control s all the time

4209
02:32:29,319 --> 02:32:33,640
I can now compile it with make hello

4210
02:32:31,800 --> 02:32:36,479
again and again so theoretically I

4211
02:32:33,640 --> 02:32:38,319
should never need to type code space

4212
02:32:36,479 --> 02:32:40,840
hello.c again unless I want to create a

4213
02:32:38,319 --> 02:32:43,039
brand new file called the same thing all

4214
02:32:40,840 --> 02:32:44,800
right so what about this other piece of

4215
02:32:43,040 --> 02:32:46,920
syntax here let me clear my terminal

4216
02:32:44,800 --> 02:32:48,438
window here you can also hit control L

4217
02:32:46,920 --> 02:32:50,960
just to throw everything away just to

4218
02:32:48,439 --> 02:32:53,040
clean it up aesthetically suppose that I

4219
02:32:50,960 --> 02:32:55,519
omit whatever this sequence of symbols

4220
02:32:53,040 --> 02:32:58,240
is back sln since I'm not really sure at

4221
02:32:55,520 --> 02:32:59,920
first glance why that's even there does

4222
02:32:58,240 --> 02:33:01,880
anyone want to conjecture especially if

4223
02:32:59,920 --> 02:33:04,800
you've never programmed before what

4224
02:33:01,880 --> 02:33:07,519
might happen now if I recompile and

4225
02:33:04,800 --> 02:33:09,679
rerun this version of the program I left

4226
02:33:07,520 --> 02:33:10,800
the semicolon but I took away the backs

4227
02:33:09,680 --> 02:33:13,960
slash

4228
02:33:10,800 --> 02:33:17,119
n any

4229
02:33:13,960 --> 02:33:19,160
instincts all right well yeah

4230
02:33:17,120 --> 02:33:22,120
will the next dollar sign appear

4231
02:33:19,160 --> 02:33:24,479
straight after your it will the next

4232
02:33:22,120 --> 02:33:27,000
dollar sign will appear right after my

4233
02:33:24,479 --> 02:33:30,880
hello world but what makes you think

4234
02:33:27,000 --> 02:33:32,720
that back creates a line exactly back

4235
02:33:30,880 --> 02:33:35,399
sln is actually a special sequence of

4236
02:33:32,720 --> 02:33:37,319
symbols that creates a new line and so

4237
02:33:35,399 --> 02:33:40,599
to your point if I recompile this

4238
02:33:37,319 --> 02:33:42,600
program make hello enter no syntax error

4239
02:33:40,600 --> 02:33:44,600
so it did compile this time so you don't

4240
02:33:42,600 --> 02:33:46,800
need the backs slash in you do need the

4241
02:33:44,600 --> 02:33:49,399
semicolon but if you don't have the back

4242
02:33:46,800 --> 02:33:52,119
sln watch what happens when I do/ hello

4243
02:33:49,399 --> 02:33:53,920
this time now indeed I see hello comma

4244
02:33:52,120 --> 02:33:55,920
world and then a weird dollar sign and

4245
02:33:53,920 --> 02:33:57,880
this is still a prompt I can still type

4246
02:33:55,920 --> 02:33:59,680
commands at it like clear and everything

4247
02:33:57,880 --> 02:34:02,278
gets cleaned up but it just looks kind

4248
02:33:59,680 --> 02:34:04,319
of stupid if I run it again here with

4249
02:34:02,279 --> 02:34:06,040
hello you know it's just not very user

4250
02:34:04,319 --> 02:34:07,278
friendly it is convention that when

4251
02:34:06,040 --> 02:34:09,160
you're done running your program you

4252
02:34:07,279 --> 02:34:11,160
should ideally clean things up move the

4253
02:34:09,160 --> 02:34:13,080
cursor to the next line for the user and

4254
02:34:11,160 --> 02:34:15,720
so the backs slash n is simply the

4255
02:34:13,080 --> 02:34:16,600
special symbol otherwise known as an

4256
02:34:15,720 --> 02:34:20,319
escape

4257
02:34:16,600 --> 02:34:21,960
sequence that c knows means move the

4258
02:34:20,319 --> 02:34:24,160
cursor to the next line in other

4259
02:34:21,960 --> 02:34:28,119
languages python among them uses the

4260
02:34:24,160 --> 02:34:32,399
same symbology as well now if I go back

4261
02:34:28,120 --> 02:34:34,359
to the code here and for instance I try

4262
02:34:32,399 --> 02:34:36,080
to do this differently like suppose I

4263
02:34:34,359 --> 02:34:37,680
don't put the backs slash N I just hit

4264
02:34:36,080 --> 02:34:39,880
enter like a normal person would in

4265
02:34:37,680 --> 02:34:42,120
Google Docs or Microsoft Word let me go

4266
02:34:39,880 --> 02:34:43,679
ahead and try compiling this program and

4267
02:34:42,120 --> 02:34:45,080
this you would hope would work right you

4268
02:34:43,680 --> 02:34:47,120
would hope this would print out hello

4269
02:34:45,080 --> 02:34:49,399
world and then a blank line because I

4270
02:34:47,120 --> 02:34:51,319
move the cursor to the next line but no

4271
02:34:49,399 --> 02:34:54,160
if I run make hello now and try to

4272
02:34:51,319 --> 02:34:56,359
compile that c does not like this now I

4273
02:34:54,160 --> 02:34:58,840
get a different error still on line five

4274
02:34:56,359 --> 02:35:01,600
this time starting at character 12 uh

4275
02:34:58,840 --> 02:35:03,439
error missing terminating double quote

4276
02:35:01,600 --> 02:35:04,880
character and then some other esoteric

4277
02:35:03,439 --> 02:35:07,000
stuff and then this does not sound good

4278
02:35:04,880 --> 02:35:08,960
fatal error this time too many errors

4279
02:35:07,000 --> 02:35:12,160
admitted stopping now so I really

4280
02:35:08,960 --> 02:35:13,599
screwed up here so why can't I do this

4281
02:35:12,160 --> 02:35:15,439
just because like the humans who

4282
02:35:13,600 --> 02:35:17,560
designed C decided that if you have a

4283
02:35:15,439 --> 02:35:20,479
string of text it must stay on the same

4284
02:35:17,560 --> 02:35:22,840
line it can get really long it can soft

4285
02:35:20,479 --> 02:35:24,479
wrap that is without you hitting enter

4286
02:35:22,840 --> 02:35:26,800
but you can't hit enter to create a new

4287
02:35:24,479 --> 02:35:29,160
line if you deliberately want a new line

4288
02:35:26,800 --> 02:35:31,319
you have to indeed use this back slash

4289
02:35:29,160 --> 02:35:33,800
and Escape character so let me go ahead

4290
02:35:31,319 --> 02:35:35,680
and do this let me put it back let me go

4291
02:35:33,800 --> 02:35:37,358
back to my terminal window I'll clear

4292
02:35:35,680 --> 02:35:39,439
the screen again let me go ahead now and

4293
02:35:37,359 --> 02:35:41,920
do make Hello to recompile to that

4294
02:35:39,439 --> 02:35:44,960
version do/ hello and voila we're back

4295
02:35:41,920 --> 02:35:46,479
in business with uh hello all right so

4296
02:35:44,960 --> 02:35:48,080
now let's tease apart some some other

4297
02:35:46,479 --> 02:35:50,438
aspects of this code because there's a

4298
02:35:48,080 --> 02:35:52,600
lot going on just to get us to say hello

4299
02:35:50,439 --> 02:35:54,680
world on the screen for today we're

4300
02:35:52,600 --> 02:35:56,920
largely going to ignore this int main

4301
02:35:54,680 --> 02:35:58,640
void and these curly braces here we'll

4302
02:35:56,920 --> 02:36:00,840
come back to that before long as to why

4303
02:35:58,640 --> 02:36:03,160
it's there but for now just think of int

4304
02:36:00,840 --> 02:36:04,800
main void and these curly braces here as

4305
02:36:03,160 --> 02:36:06,520
really being the C equivalent of when

4306
02:36:04,800 --> 02:36:08,039
green flag clicked like why you just

4307
02:36:06,520 --> 02:36:10,160
need it there that's how you get your

4308
02:36:08,040 --> 02:36:11,960
program going and Maine is indeed going

4309
02:36:10,160 --> 02:36:14,119
to be some special function but more on

4310
02:36:11,960 --> 02:36:16,479
that another time but why do I have this

4311
02:36:14,120 --> 02:36:19,880
line of code here the cor spelling is

4312
02:36:16,479 --> 02:36:22,960
indeed standard io.

4313
02:36:19,880 --> 02:36:24,479
stdio.h and they're angled brackets this

4314
02:36:22,960 --> 02:36:27,080
time so that's a little new there's a

4315
02:36:24,479 --> 02:36:28,519
hash and then an include keyword you

4316
02:36:27,080 --> 02:36:29,680
know if you don't know what something is

4317
02:36:28,520 --> 02:36:31,120
you know there's not really that much

4318
02:36:29,680 --> 02:36:32,920
harm in just getting rid of it and see

4319
02:36:31,120 --> 02:36:34,760
what happens so let me delete that line

4320
02:36:32,920 --> 02:36:36,520
let me go back to my terminal window

4321
02:36:34,760 --> 02:36:38,000
clear the screen and then run make hello

4322
02:36:36,520 --> 02:36:40,399
again and let's try compiling this

4323
02:36:38,000 --> 02:36:42,040
program now without that first line why

4324
02:36:40,399 --> 02:36:44,199
I don't understand it so let's see what

4325
02:36:42,040 --> 02:36:47,399
happens all right here's yet another

4326
02:36:44,200 --> 02:36:50,120
error but let's see how hello. C line

4327
02:36:47,399 --> 02:36:52,680
five character 5 so it's pretty early on

4328
02:36:50,120 --> 02:36:54,920
error implicitly declaring Library

4329
02:36:52,680 --> 02:36:57,720
function printf with type int and then

4330
02:36:54,920 --> 02:37:00,160
dot dot dot so implicitly declaring

4331
02:36:57,720 --> 02:37:02,080
Library function print F so this is very

4332
02:37:00,160 --> 02:37:03,960
cryptic sounding you'll get better at

4333
02:37:02,080 --> 02:37:07,039
understanding phrases like these but

4334
02:37:03,960 --> 02:37:08,399
apparently I do need the include line

4335
02:37:07,040 --> 02:37:13,240
for standard

4336
02:37:08,399 --> 02:37:16,119
i.h but why based on this symptom what

4337
02:37:13,240 --> 02:37:18,399
might Your Instinct be for what that

4338
02:37:16,120 --> 02:37:21,319
first line of code is doing for us in

4339
02:37:18,399 --> 02:37:23,479
the first place why intuitively must it

4340
02:37:21,319 --> 02:37:25,880
be

4341
02:37:23,479 --> 02:37:27,399
there exactly it's like importing a

4342
02:37:25,880 --> 02:37:29,160
library so that you can do things like

4343
02:37:27,399 --> 02:37:30,640
print things out on the screen now in

4344
02:37:29,160 --> 02:37:32,279
scratch you didn't have to do this for

4345
02:37:30,640 --> 02:37:34,720
most of the puzzle pieces but you might

4346
02:37:32,279 --> 02:37:36,720
recall that partway in through week zero

4347
02:37:34,720 --> 02:37:38,519
I went to the extensions button at the

4348
02:37:36,720 --> 02:37:40,519
bottom left of the scratch screen and I

4349
02:37:38,520 --> 02:37:43,040
imported some extra puzzle pieces for

4350
02:37:40,520 --> 02:37:45,399
text to speech that gave us the sort of

4351
02:37:43,040 --> 02:37:47,160
creepy uh humanized voice that actually

4352
02:37:45,399 --> 02:37:49,680
came out of the cat's mouth well that

4353
02:37:47,160 --> 02:37:51,920
was like adding a library code that

4354
02:37:49,680 --> 02:37:54,279
someone else wrote in that case it was a

4355
02:37:51,920 --> 02:37:56,920
third party then but I gave myself

4356
02:37:54,279 --> 02:37:58,840
access to it same here turns out that

4357
02:37:56,920 --> 02:38:02,240
you don't really get printf

4358
02:37:58,840 --> 02:38:05,240
automatically in C you have to include a

4359
02:38:02,240 --> 02:38:07,520
so-called header file that declares that

4360
02:38:05,240 --> 02:38:09,199
function to exist now the reason for

4361
02:38:07,520 --> 02:38:10,640
this historically is just efficiency

4362
02:38:09,200 --> 02:38:13,640
back in the day when computers were

4363
02:38:10,640 --> 02:38:14,880
really slower and resource constrained

4364
02:38:13,640 --> 02:38:16,599
you don't want to just give yourself

4365
02:38:14,880 --> 02:38:18,920
access to the entire kitchen sync of

4366
02:38:16,600 --> 02:38:20,880
functionality you only want to include

4367
02:38:18,920 --> 02:38:24,040
only the functions you actually care

4368
02:38:20,880 --> 02:38:25,759
about nowadays it's sort of a sort of a

4369
02:38:24,040 --> 02:38:27,120
a copy paste step because you almost

4370
02:38:25,760 --> 02:38:28,279
always want to print something out on

4371
02:38:27,120 --> 02:38:30,080
the screen at least when writing

4372
02:38:28,279 --> 02:38:32,479
programs like these but these so-called

4373
02:38:30,080 --> 02:38:34,240
header files contain enough information

4374
02:38:32,479 --> 02:38:37,319
about all of the functions in What's

4375
02:38:34,240 --> 02:38:39,840
called the standard IO library and

4376
02:38:37,319 --> 02:38:41,359
standard IO just means standard input in

4377
02:38:39,840 --> 02:38:43,760
output and that's appropriate right

4378
02:38:41,359 --> 02:38:45,279
because printing is pretty basic output

4379
02:38:43,760 --> 02:38:46,920
turns out there's other functions for

4380
02:38:45,279 --> 02:38:48,720
getting input from the human's keyboard

4381
02:38:46,920 --> 02:38:49,960
more on that in a bit but anytime you

4382
02:38:48,720 --> 02:38:52,278
want to print something on the screen

4383
02:38:49,960 --> 02:38:54,599
and see you indeed need to include this

4384
02:38:52,279 --> 02:38:56,439
header file at the top of your code and

4385
02:38:54,600 --> 02:38:59,840
that's going to essentially inform the

4386
02:38:56,439 --> 02:39:01,840
compiler hey compiler I want to use

4387
02:38:59,840 --> 02:39:04,840
functionality from the standard IO

4388
02:39:01,840 --> 02:39:06,800
Library including printf in this case

4389
02:39:04,840 --> 02:39:08,560
and if you omit the header file by

4390
02:39:06,800 --> 02:39:10,599
accident it's just not going to work

4391
02:39:08,560 --> 02:39:13,479
because it doesn't know what print f is

4392
02:39:10,600 --> 02:39:16,040
it's sort of some unrecognized symbol in

4393
02:39:13,479 --> 02:39:18,479
that case all right questions then about

4394
02:39:16,040 --> 02:39:21,279
this line of

4395
02:39:18,479 --> 02:39:23,278
code this line of code here or what

4396
02:39:21,279 --> 02:39:25,800
these header files

4397
02:39:23,279 --> 02:39:27,720
are all right you might wonder well how

4398
02:39:25,800 --> 02:39:29,720
do you know what functions exist how do

4399
02:39:27,720 --> 02:39:31,560
you know what files you might indeed

4400
02:39:29,720 --> 02:39:33,760
want to include well it turns out that c

4401
02:39:31,560 --> 02:39:36,439
is a many-year old language and it has

4402
02:39:33,760 --> 02:39:38,439
ample documentation a caveat is that its

4403
02:39:36,439 --> 02:39:40,840
documentation isn't necessarily all that

4404
02:39:38,439 --> 02:39:43,240
userfriendly but what we have for the

4405
02:39:40,840 --> 02:39:46,120
course is a simplified version of the

4406
02:39:43,240 --> 02:39:49,840
official documentation for C at this URL

4407
02:39:46,120 --> 02:39:51,359
here manual. cs50. so in the world of c

4408
02:39:49,840 --> 02:39:53,200
and other languages too there are what

4409
02:39:51,359 --> 02:39:55,680
are called manual pages and these are

4410
02:39:53,200 --> 02:39:57,600
just like text-based documentation that

4411
02:39:55,680 --> 02:39:58,960
honestly is typically written in a voice

4412
02:39:57,600 --> 02:40:00,520
that you kind of have to be an

4413
02:39:58,960 --> 02:40:02,358
experienced programmer to understand

4414
02:40:00,520 --> 02:40:04,399
some of it so what we've done it this

4415
02:40:02,359 --> 02:40:06,040
version of the same documentation is

4416
02:40:04,399 --> 02:40:08,119
we've imported all of the original

4417
02:40:06,040 --> 02:40:10,319
official documentation but we've added

4418
02:40:08,120 --> 02:40:12,080
sort of less comfortable translations in

4419
02:40:10,319 --> 02:40:13,640
English for a lot of the functionality

4420
02:40:12,080 --> 02:40:15,240
that you might use in class just to help

4421
02:40:13,640 --> 02:40:17,319
onboard you so at the end of the day you

4422
02:40:15,240 --> 02:40:19,119
don't need this documentation long term

4423
02:40:17,319 --> 02:40:21,479
but just to get started we'll translate

4424
02:40:19,120 --> 02:40:23,359
it into terminology uh that you might

4425
02:40:21,479 --> 02:40:25,199
appreciate from a teaching assistant for

4426
02:40:23,359 --> 02:40:27,000
instance as opposed to the original

4427
02:40:25,200 --> 02:40:28,399
author of these documents and so for

4428
02:40:27,000 --> 02:40:31,680
instance if you were interested in

4429
02:40:28,399 --> 02:40:34,960
reading up on what functions exist in

4430
02:40:31,680 --> 02:40:37,040
the standard io. um header file well you

4431
02:40:34,960 --> 02:40:39,679
could go to a URL like this or you could

4432
02:40:37,040 --> 02:40:40,840
search for it at manual. cs50. that

4433
02:40:39,680 --> 02:40:43,200
would show you a list of all of the

4434
02:40:40,840 --> 02:40:45,080
available functions in that library and

4435
02:40:43,200 --> 02:40:46,520
print F indeed would be one of them and

4436
02:40:45,080 --> 02:40:48,120
then you could click further on that

4437
02:40:46,520 --> 02:40:49,080
reaching a URL like this that's just

4438
02:40:48,120 --> 02:40:50,680
going to give you all of the

4439
02:40:49,080 --> 02:40:51,920
documentation for how to use print def

4440
02:40:50,680 --> 02:40:54,080
it turns out you can do even more than

4441
02:40:51,920 --> 02:40:55,479
it uh than just printing out hello world

4442
02:40:54,080 --> 02:40:57,960
and we'll scratch the surface of that

4443
02:40:55,479 --> 02:40:59,840
today but it turns out that the

4444
02:40:57,960 --> 02:41:01,640
documentation will always be your

4445
02:40:59,840 --> 02:41:03,680
authoritative Source ultimately for

4446
02:41:01,640 --> 02:41:07,920
questions like what can I do and how can

4447
02:41:03,680 --> 02:41:10,560
I do it meanwhile it turns out that cs50

4448
02:41:07,920 --> 02:41:13,200
has its own library in A Accessible via

4449
02:41:10,560 --> 02:41:16,119
header file called cs50.h it turns out

4450
02:41:13,200 --> 02:41:17,760
in C that output is actually pretty easy

4451
02:41:16,120 --> 02:41:19,720
relatively speaking once you get used to

4452
02:41:17,760 --> 02:41:22,120
all the curly braces parentheses quote

4453
02:41:19,720 --> 02:41:23,920
marks and the like but input is a little

4454
02:41:22,120 --> 02:41:26,479
more difficult and if you have

4455
02:41:23,920 --> 02:41:28,640
programmed before input's not that hard

4456
02:41:26,479 --> 02:41:31,278
to do in Python it's not that hard to do

4457
02:41:28,640 --> 02:41:32,960
in Java it's more difficult to do in C

4458
02:41:31,279 --> 02:41:34,439
and we'll see why in a couple of weeks

4459
02:41:32,960 --> 02:41:36,640
but for the first couple of weeks of the

4460
02:41:34,439 --> 02:41:39,040
class we actually provide you with some

4461
02:41:36,640 --> 02:41:41,039
training wheels of sorts whereby we have

4462
02:41:39,040 --> 02:41:43,920
a number of functions that are declared

4463
02:41:41,040 --> 02:41:45,880
in this file cs50.h it lives its

4464
02:41:43,920 --> 02:41:47,800
documentation at a URL like this this

4465
02:41:45,880 --> 02:41:49,759
and in a moment we'll use a few of these

4466
02:41:47,800 --> 02:41:52,479
you'll see that cs50 provides you with

4467
02:41:49,760 --> 02:41:54,240
some functions like get Char forget a

4468
02:41:52,479 --> 02:41:56,880
single character from the user's

4469
02:41:54,240 --> 02:41:59,039
keyboard uh get int to get an integer

4470
02:41:56,880 --> 02:42:00,599
from the user's keyboard uh get string

4471
02:41:59,040 --> 02:42:02,920
to get a sequence of text from the

4472
02:42:00,600 --> 02:42:05,560
user's keyboard and a bunch of others as

4473
02:42:02,920 --> 02:42:08,040
well so let's actually use some of these

4474
02:42:05,560 --> 02:42:09,760
functions how about by revisiting really

4475
02:42:08,040 --> 02:42:12,720
the second program we wrote in scratch

4476
02:42:09,760 --> 02:42:14,520
last time which adds some input to the

4477
02:42:12,720 --> 02:42:16,199
output so first version of scratch was

4478
02:42:14,520 --> 02:42:17,920
just hello world said the same thing

4479
02:42:16,200 --> 02:42:20,000
every time you click the green flag

4480
02:42:17,920 --> 02:42:22,640
version two recall though did this it

4481
02:42:20,000 --> 02:42:25,160
asked the user what's your name and then

4482
02:42:22,640 --> 02:42:27,640
that somehow gave it back a a return

4483
02:42:25,160 --> 02:42:29,800
variable return value we called it and

4484
02:42:27,640 --> 02:42:31,960
we then joined hello in that name to say

4485
02:42:29,800 --> 02:42:34,679
something a little more interesting on

4486
02:42:31,960 --> 02:42:36,599
the screen so what did that model look

4487
02:42:34,680 --> 02:42:38,399
like same thing as before we've got a

4488
02:42:36,600 --> 02:42:40,279
function in the Middle where function is

4489
02:42:38,399 --> 02:42:42,240
like the code implementation of our

4490
02:42:40,279 --> 02:42:44,640
algorithm that takes in one or more

4491
02:42:42,240 --> 02:42:47,080
arguments like what is it you want to uh

4492
02:42:44,640 --> 02:42:48,800
say on the the screen ultimately and

4493
02:42:47,080 --> 02:42:50,319
return value in this case is going to be

4494
02:42:48,800 --> 02:42:52,519
actually a value that comes back so in

4495
02:42:50,319 --> 02:42:54,680
the case of getting input we can

4496
02:42:52,520 --> 02:42:57,080
consider this ask block again like last

4497
02:42:54,680 --> 02:42:59,279
week the input to it is whatever words

4498
02:42:57,080 --> 02:43:01,680
of English you want to ask the user and

4499
02:42:59,279 --> 02:43:04,160
then it returns a value and this was

4500
02:43:01,680 --> 02:43:05,560
called by default in mit's World answer

4501
02:43:04,160 --> 02:43:07,399
that we'll see and see you can call

4502
02:43:05,560 --> 02:43:09,519
these return values anything you want

4503
02:43:07,399 --> 02:43:10,920
ultimately in variables but this is

4504
02:43:09,520 --> 02:43:12,560
different from a side effect a side

4505
02:43:10,920 --> 02:43:13,760
effect is just something visual often

4506
02:43:12,560 --> 02:43:16,278
that happens on the screen like the

4507
02:43:13,760 --> 02:43:18,200
speech bubble or hello world a return

4508
02:43:16,279 --> 02:43:19,880
value is actually a value you get back

4509
02:43:18,200 --> 02:43:22,319
from a function that you can use or

4510
02:43:19,880 --> 02:43:25,080
reuse so how do we convert this scratch

4511
02:43:22,319 --> 02:43:26,760
block from last week to C code this week

4512
02:43:25,080 --> 02:43:28,680
well if you want to ask the user for

4513
02:43:26,760 --> 02:43:31,359
something like their name you can do

4514
02:43:28,680 --> 02:43:34,040
this you use a cs50 function called get

4515
02:43:31,359 --> 02:43:36,000
string and you use the parentheses to

4516
02:43:34,040 --> 02:43:38,359
represent here comes the inputs there

4517
02:43:36,000 --> 02:43:40,279
too you can then put the sentence you

4518
02:43:38,359 --> 02:43:42,000
want to ask the user quote unquote

4519
02:43:40,279 --> 02:43:44,359
what's your name but you do indeed need

4520
02:43:42,000 --> 02:43:46,760
the quotes literally in C so I'll go

4521
02:43:44,359 --> 02:43:49,040
ahead and add those as well well subtle

4522
02:43:46,760 --> 02:43:51,439
but I've deliberately included a space

4523
02:43:49,040 --> 02:43:53,439
after the question mark but before the

4524
02:43:51,439 --> 02:43:55,680
double quote just so that the cursor

4525
02:43:53,439 --> 02:43:57,000
moves one step over because in this case

4526
02:43:55,680 --> 02:43:58,840
we're not going to get a special speech

4527
02:43:57,000 --> 02:44:00,439
box like we did in scratch it's just

4528
02:43:58,840 --> 02:44:01,760
going to leave the cursor where it is so

4529
02:44:00,439 --> 02:44:04,040
we'll see that aesthetically this just

4530
02:44:01,760 --> 02:44:06,680
moves the blinking cursor one space

4531
02:44:04,040 --> 02:44:08,720
after the sentence on the screen all

4532
02:44:06,680 --> 02:44:11,080
right but the catch is with scratch we

4533
02:44:08,720 --> 02:44:12,760
just automatically got back the answer

4534
02:44:11,080 --> 02:44:14,920
from the user in a special variable

4535
02:44:12,760 --> 02:44:18,359
called answer in C you're going to have

4536
02:44:14,920 --> 02:44:20,680
to be a little more specific in C if you

4537
02:44:18,359 --> 02:44:23,439
want to get back a return value from a

4538
02:44:20,680 --> 02:44:25,760
function like get string you have to use

4539
02:44:23,439 --> 02:44:27,680
an equal sign and then the name of a

4540
02:44:25,760 --> 02:44:29,200
variable on the left the choice of

4541
02:44:27,680 --> 02:44:31,200
variables is up to you I could have

4542
02:44:29,200 --> 02:44:33,200
called this anything X YZ I'm going to

4543
02:44:31,200 --> 02:44:35,640
more descriptively call it answer for

4544
02:44:33,200 --> 02:44:37,960
parody with what MIT did with scratch

4545
02:44:35,640 --> 02:44:41,479
but notice that this doesn't represent

4546
02:44:37,960 --> 02:44:43,919
equality per se this is assignment in

4547
02:44:41,479 --> 02:44:45,960
this case so in C when you use a single

4548
02:44:43,920 --> 02:44:48,399
equal sign that means means copy the

4549
02:44:45,960 --> 02:44:50,759
value on the right over to the value on

4550
02:44:48,399 --> 02:44:53,000
the left from right to left so what does

4551
02:44:50,760 --> 02:44:54,680
this do for us well if get string is a

4552
02:44:53,000 --> 02:44:56,359
function that prompts the user with

4553
02:44:54,680 --> 02:44:59,359
quote unquote what's your name and it

4554
02:44:56,359 --> 02:45:01,399
has I claim a return value that means it

4555
02:44:59,359 --> 02:45:03,840
kind of hands me back some value but

4556
02:45:01,399 --> 02:45:05,560
it's up to me in C to do something with

4557
02:45:03,840 --> 02:45:07,399
that value so if I want to copy that

4558
02:45:05,560 --> 02:45:10,199
value into a variable that I can use and

4559
02:45:07,399 --> 02:45:12,000
reuse I use an equal sign and I invent

4560
02:45:10,200 --> 02:45:14,520
on the left hand side of that equal sign

4561
02:45:12,000 --> 02:45:16,600
any variable name I want there's certain

4562
02:45:14,520 --> 02:45:18,359
rules certain conventions but generally

4563
02:45:16,600 --> 02:45:21,880
if you use a single word with all

4564
02:45:18,359 --> 02:45:23,640
lowercase you're in good shape but C is

4565
02:45:21,880 --> 02:45:25,160
a little more pedantic than that and

4566
02:45:23,640 --> 02:45:26,880
those of you who have have programmed

4567
02:45:25,160 --> 02:45:28,359
before might not be used to this for

4568
02:45:26,880 --> 02:45:30,599
instance in Python which is a world

4569
02:45:28,359 --> 02:45:34,000
we'll get to in a few weeks you also

4570
02:45:30,600 --> 02:45:37,439
have to tell see what type of value

4571
02:45:34,000 --> 02:45:40,720
you're storing so if I do want a string

4572
02:45:37,439 --> 02:45:42,439
of text from the user so not an integer

4573
02:45:40,720 --> 02:45:44,438
not a single character I want a whole

4574
02:45:42,439 --> 02:45:46,680
string of text like a phrase a sentence

4575
02:45:44,439 --> 02:45:50,880
a name in this this case I have to tell

4576
02:45:46,680 --> 02:45:52,680
C that this variable is of type string

4577
02:45:50,880 --> 02:45:54,160
so it's a little wordy but you get used

4578
02:45:52,680 --> 02:45:56,279
to it and you just have to be precise

4579
02:45:54,160 --> 02:45:58,399
you're informing the computer what type

4580
02:45:56,279 --> 02:46:00,279
of value is going in this

4581
02:45:58,399 --> 02:46:03,199
variable all right it's so close to

4582
02:46:00,279 --> 02:46:04,920
being correct but I have omitted

4583
02:46:03,200 --> 02:46:08,880
something that's annoyingly important

4584
02:46:04,920 --> 02:46:11,160
still what's missing still yeah so

4585
02:46:08,880 --> 02:46:13,839
semicolon this is a statement this is

4586
02:46:11,160 --> 02:46:16,080
like a a a full thought if you will in

4587
02:46:13,840 --> 02:46:18,760
code I do need to end It ultimately with

4588
02:46:16,080 --> 02:46:20,359
the semicolon at the end there all right

4589
02:46:18,760 --> 02:46:22,600
so this was more of a mouthful but let's

4590
02:46:20,359 --> 02:46:25,040
try using this in now my code let me go

4591
02:46:22,600 --> 02:46:27,800
back to vs code where I have version

4592
02:46:25,040 --> 02:46:30,359
zero of my code here let me go ahead and

4593
02:46:27,800 --> 02:46:34,479
include one other file at the top of

4594
02:46:30,359 --> 02:46:36,520
hello.c namely include cs50.h so that I

4595
02:46:34,479 --> 02:46:39,039
have access now to get string and

4596
02:46:36,520 --> 02:46:42,000
anything else I might want now let me go

4597
02:46:39,040 --> 02:46:43,920
ahead and add a line of cod here inside

4598
02:46:42,000 --> 02:46:47,319
of these curly braces and let me go

4599
02:46:43,920 --> 02:46:50,040
ahead and do this string answer equals

4600
02:46:47,319 --> 02:46:52,119
get string quote unquote what's your

4601
02:46:50,040 --> 02:46:53,920
name question mark I'm going to add an

4602
02:46:52,120 --> 02:46:56,160
extra space before the double quote I'm

4603
02:46:53,920 --> 02:46:58,960
going to indeed end my thought with a

4604
02:46:56,160 --> 02:47:00,840
semicolon and now let me deliberately

4605
02:46:58,960 --> 02:47:03,599
make a mistake just to make a point here

4606
02:47:00,840 --> 02:47:07,680
let me now try changing hello world to

4607
02:47:03,600 --> 02:47:08,960
hello comma answer all right now perhaps

4608
02:47:07,680 --> 02:47:10,800
even though this is some new lines of

4609
02:47:08,960 --> 02:47:12,240
code you can see where I've aired

4610
02:47:10,800 --> 02:47:15,240
already but let me try making this

4611
02:47:12,240 --> 02:47:16,880
program now so far so good so no error

4612
02:47:15,240 --> 02:47:19,920
messages so that's a good thing let me

4613
02:47:16,880 --> 02:47:21,960
go ahead and run /hello and you'll see

4614
02:47:19,920 --> 02:47:23,840
the prompt what's your name question

4615
02:47:21,960 --> 02:47:25,160
mark and notice the cursor indeed one

4616
02:47:23,840 --> 02:47:26,479
space to the right just because I

4617
02:47:25,160 --> 02:47:28,479
thought it would look prettier to put a

4618
02:47:26,479 --> 02:47:30,240
little Blank Space there as opposed to

4619
02:47:28,479 --> 02:47:32,479
leaving it right after the question mark

4620
02:47:30,240 --> 02:47:34,359
let me type my name but even if you've

4621
02:47:32,479 --> 02:47:35,800
never programmed before I have screwed

4622
02:47:34,359 --> 02:47:38,120
up here what are we going to see on the

4623
02:47:35,800 --> 02:47:41,438
screen when I hit

4624
02:47:38,120 --> 02:47:42,800
enter yeah hello answer most likely why

4625
02:47:41,439 --> 02:47:44,680
cuz the computer is going to take me

4626
02:47:42,800 --> 02:47:47,000
literally and if I say quote unquote

4627
02:47:44,680 --> 02:47:48,479
hello answer that is the string of text

4628
02:47:47,000 --> 02:47:50,359
followed by a new line that's going to

4629
02:47:48,479 --> 02:47:52,760
be outputed to the screen so we need

4630
02:47:50,359 --> 02:47:55,920
some way of actually plugging answer

4631
02:47:52,760 --> 02:47:57,240
into this line of code it's not quite as

4632
02:47:55,920 --> 02:47:59,279
simple as scratch where you could just

4633
02:47:57,240 --> 02:48:01,119
grab like a second say block and drag

4634
02:47:59,279 --> 02:48:02,760
and drop the variable there we actually

4635
02:48:01,120 --> 02:48:05,040
need a new syntax and it's going to look

4636
02:48:02,760 --> 02:48:07,399
weird at first but it is everywhere in

4637
02:48:05,040 --> 02:48:09,640
software nowadays especially in the

4638
02:48:07,399 --> 02:48:12,519
world of c and certain other languages

4639
02:48:09,640 --> 02:48:15,080
so let me go ahead and propose that I

4640
02:48:12,520 --> 02:48:16,920
solve it as follows well back when we

4641
02:48:15,080 --> 02:48:19,160
did this in scratch remember that the

4642
02:48:16,920 --> 02:48:21,040
most elegant solution was this here we

4643
02:48:19,160 --> 02:48:23,479
used the say block still which is going

4644
02:48:21,040 --> 02:48:25,880
to be analogous to print F today but I

4645
02:48:23,479 --> 02:48:28,640
use the join puzzle piece in scratch to

4646
02:48:25,880 --> 02:48:30,960
combine hello comma space and then the

4647
02:48:28,640 --> 02:48:33,160
name of the human so how do we translate

4648
02:48:30,960 --> 02:48:35,119
this code to C well it's going to look a

4649
02:48:33,160 --> 02:48:37,560
little different now I'm going to start

4650
02:48:35,120 --> 02:48:40,439
with print f with some parth C's and a

4651
02:48:37,560 --> 02:48:42,119
semicolon representing the say block but

4652
02:48:40,439 --> 02:48:43,800
how do I now do this joining this is

4653
02:48:42,120 --> 02:48:45,800
where the puzzle pieces don't quite

4654
02:48:43,800 --> 02:48:48,679
translate perfectly this would be the

4655
02:48:45,800 --> 02:48:50,720
way to do this you put hello comma and

4656
02:48:48,680 --> 02:48:53,479
then a placeholder so this is what's

4657
02:48:50,720 --> 02:48:56,119
known as a format code in C specifically

4658
02:48:53,479 --> 02:48:58,519
for printf and it just means this is a

4659
02:48:56,120 --> 02:49:01,040
placeholder for a string again a string

4660
02:48:58,520 --> 02:49:03,720
is just text so this means hey computer

4661
02:49:01,040 --> 02:49:05,680
print out literally hello comma space

4662
02:49:03,720 --> 02:49:08,960
and then not literally percent s percent

4663
02:49:05,680 --> 02:49:11,160
s is uh treated specially to mean plug

4664
02:49:08,960 --> 02:49:12,919
in some value here all right so what

4665
02:49:11,160 --> 02:49:15,200
else do I still need well this is still

4666
02:49:12,920 --> 02:49:18,200
some text so I'm still going going to

4667
02:49:15,200 --> 02:49:20,880
surround the whole thing with double

4668
02:49:18,200 --> 02:49:22,800
quotes I'm still going to include my

4669
02:49:20,880 --> 02:49:25,000
back sln just to keep things tidy and

4670
02:49:22,800 --> 02:49:28,880
move the cursor to the next line so the

4671
02:49:25,000 --> 02:49:32,120
last step here in C is to somehow join

4672
02:49:28,880 --> 02:49:35,119
the answer with that word hello and the

4673
02:49:32,120 --> 02:49:37,080
way you do this is with printf passing

4674
02:49:35,120 --> 02:49:39,160
it not one argument which is what I keep

4675
02:49:37,080 --> 02:49:41,359
doing I keep passing it one string of

4676
02:49:39,160 --> 02:49:44,279
text quote unquote I'm going to now add

4677
02:49:41,359 --> 02:49:46,760
a comma and then the name of the value

4678
02:49:44,279 --> 02:49:50,080
that I want want printf to go back and

4679
02:49:46,760 --> 02:49:52,479
plug into that percent s and printf is

4680
02:49:50,080 --> 02:49:54,720
just smart about this if you have 1% s

4681
02:49:52,479 --> 02:49:56,800
and one additional argument after a

4682
02:49:54,720 --> 02:49:59,640
comma it just does from right to left it

4683
02:49:56,800 --> 02:50:02,560
plugs it in if you have two percent S's

4684
02:49:59,640 --> 02:50:03,840
and two variables after the comma that's

4685
02:50:02,560 --> 02:50:05,519
okay too if you separate them with

4686
02:50:03,840 --> 02:50:07,760
commas it'll plug the first into the

4687
02:50:05,520 --> 02:50:09,399
first percent s and the second variable

4688
02:50:07,760 --> 02:50:11,479
into the second percent s so it's just

4689
02:50:09,399 --> 02:50:14,000
left to right order of operations it's

4690
02:50:11,479 --> 02:50:17,399
not as pretty or as uh simple as this

4691
02:50:14,000 --> 02:50:18,840
but this is how it's done in C all right

4692
02:50:17,399 --> 02:50:21,000
let me pause because this is a lot of

4693
02:50:18,840 --> 02:50:22,420
symbology any questions on this

4694
02:50:21,000 --> 02:50:26,120
technique here

4695
02:50:22,420 --> 02:50:28,960
[Music]

4696
02:50:26,120 --> 02:50:32,279
yeah yeah really good question why did I

4697
02:50:28,960 --> 02:50:34,399
exclude the backslash n a moment ago

4698
02:50:32,279 --> 02:50:36,520
really just my sense of Aesthetics if

4699
02:50:34,399 --> 02:50:38,439
you will No Good Reason beyond that so

4700
02:50:36,520 --> 02:50:39,920
if I look back at my code you quite

4701
02:50:38,439 --> 02:50:42,040
rightly noticed that I didn't have a

4702
02:50:39,920 --> 02:50:44,040
backslash in there that's just because

4703
02:50:42,040 --> 02:50:46,040
for whatever sense of style that I have

4704
02:50:44,040 --> 02:50:48,359
I wanted the name to be typed right

4705
02:50:46,040 --> 02:50:50,200
after the question I totally could have

4706
02:50:48,359 --> 02:50:52,040
added a back sln there instead of a

4707
02:50:50,200 --> 02:50:54,399
space that would have just allowed me to

4708
02:50:52,040 --> 02:50:56,319
type down here totally fine just wanted

4709
02:50:54,399 --> 02:50:57,720
to show you something different good

4710
02:50:56,319 --> 02:51:01,160
good catch

4711
02:50:57,720 --> 02:51:04,039
yeah can I show an example with 2% s's

4712
02:51:01,160 --> 02:51:05,520
surely so let me uh in vs code do this

4713
02:51:04,040 --> 02:51:08,040
let me clear my terminal window to clean

4714
02:51:05,520 --> 02:51:09,760
things up and let me do this instead of

4715
02:51:08,040 --> 02:51:13,239
calling the variable answer all over the

4716
02:51:09,760 --> 02:51:15,560
place let me call it uh first and I'll

4717
02:51:13,239 --> 02:51:18,239
ask two questions what's your first name

4718
02:51:15,560 --> 02:51:20,479
and now let me do string last equals get

4719
02:51:18,239 --> 02:51:22,720
string quot whoops capitalization

4720
02:51:20,479 --> 02:51:25,679
matters so let me fix my capital S there

4721
02:51:22,720 --> 02:51:29,920
quote unquote what's your last name

4722
02:51:25,680 --> 02:51:32,920
question mark semicolon and now we'll

4723
02:51:29,920 --> 02:51:35,279
plug in one percent s and a second

4724
02:51:32,920 --> 02:51:39,479
percent s and now I'm going to plug in

4725
02:51:35,279 --> 02:51:40,800
first first and last last coincidentally

4726
02:51:39,479 --> 02:51:44,119
and now I'm going to go back to the

4727
02:51:40,800 --> 02:51:45,160
terminal window make hello crossing my

4728
02:51:44,120 --> 02:51:48,359
fingers

4729
02:51:45,160 --> 02:51:51,479
all good/ hello here's my first question

4730
02:51:48,359 --> 02:51:54,080
David here's my second question me and

4731
02:51:51,479 --> 02:51:55,960
again hello David Ma so it just inserts

4732
02:51:54,080 --> 02:51:57,640
them left to right all I was doing for

4733
02:51:55,960 --> 02:51:59,880
parody with scratch though and let me go

4734
02:51:57,640 --> 02:52:03,399
ahead and undo this again I'll go back

4735
02:51:59,880 --> 02:52:04,759
to answer like this I'll go back to just

4736
02:52:03,399 --> 02:52:06,278
asking for the person's name I'm going

4737
02:52:04,760 --> 02:52:08,520
to delete mention of last I'm going to

4738
02:52:06,279 --> 02:52:10,880
delete mention of the second perc s and

4739
02:52:08,520 --> 02:52:14,520
now if I recompile this simpler

4740
02:52:10,880 --> 02:52:17,119
version I did screw up didn't intend it

4741
02:52:14,520 --> 02:52:17,120
what did I do

4742
02:52:17,640 --> 02:52:22,800
wrong yeah so just newbie mistakes so I

4743
02:52:20,640 --> 02:52:24,760
changed my variable back to answer just

4744
02:52:22,800 --> 02:52:27,278
to be consistent with week zero but I

4745
02:52:24,760 --> 02:52:29,479
didn't change it here so I have an use

4746
02:52:27,279 --> 02:52:31,560
of Undeclared identifier first it's

4747
02:52:29,479 --> 02:52:34,039
Undeclared in the sense that I declared

4748
02:52:31,560 --> 02:52:36,399
answer align prior I didn't declare

4749
02:52:34,040 --> 02:52:38,319
first so indeed intuitively I want to

4750
02:52:36,399 --> 02:52:42,239
just change that to that let me now do

4751
02:52:38,319 --> 02:52:44,479
make hello again /hello type in just my

4752
02:52:42,239 --> 02:52:47,680
first name this time and there it is

4753
02:52:44,479 --> 02:52:50,920
hello David questions on this then

4754
02:52:47,680 --> 02:52:53,600
syntax with print F

4755
02:52:50,920 --> 02:52:56,520
yeah uh the placeholder I'll zoom in is

4756
02:52:53,600 --> 02:53:01,600
just a single percent and then an S so

4757
02:52:56,520 --> 02:53:03,399
inside of my string here is percent s

4758
02:53:01,600 --> 02:53:05,520
and then I have a comma outside the

4759
02:53:03,399 --> 02:53:09,000
quotes and then the name of the variable

4760
02:53:05,520 --> 02:53:11,920
whose value I want to plug in for that

4761
02:53:09,000 --> 02:53:15,040
percent s and now notice there's

4762
02:53:11,920 --> 02:53:17,720
technically two commas in side of these

4763
02:53:15,040 --> 02:53:20,760
parentheses on line seven and yet I

4764
02:53:17,720 --> 02:53:23,438
claim that printf at the moment is only

4765
02:53:20,760 --> 02:53:27,359
taking in two

4766
02:53:23,439 --> 02:53:29,239
arguments why is there then two commas

4767
02:53:27,359 --> 02:53:30,160
but only two arguments if there were two

4768
02:53:29,239 --> 02:53:33,439
commas you would think there would be

4769
02:53:30,160 --> 02:53:33,439
three arguments

4770
02:53:35,840 --> 02:53:39,960
right exactly the comma in between the

4771
02:53:38,279 --> 02:53:42,279
quotes is just an English thing it's

4772
02:53:39,960 --> 02:53:43,880
separating the hello from the name so

4773
02:53:42,279 --> 02:53:45,600
that's why indeed it's not only in

4774
02:53:43,880 --> 02:53:48,119
quotes that that's also why programs

4775
02:53:45,600 --> 02:53:49,920
like VSS code tend to syntax highlight

4776
02:53:48,120 --> 02:53:52,200
it a little differently just so that it

4777
02:53:49,920 --> 02:53:53,439
sort of jumps out as different to you

4778
02:53:52,200 --> 02:53:55,640
even though in this case it's a little

4779
02:53:53,439 --> 02:53:57,800
subtle a light blue versus white but

4780
02:53:55,640 --> 02:54:01,880
indeed it's trying its best other

4781
02:53:57,800 --> 02:54:01,880
questions now on this placeholder

4782
02:54:08,120 --> 02:54:12,479
yeah ah good question if I wanted to add

4783
02:54:10,399 --> 02:54:14,358
an exclamation point after the name

4784
02:54:12,479 --> 02:54:15,560
would I have to add another placeholder

4785
02:54:14,359 --> 02:54:17,760
and so forth I could actually do that

4786
02:54:15,560 --> 02:54:19,479
much more simply I can just put the

4787
02:54:17,760 --> 02:54:21,239
exclamation point right after the

4788
02:54:19,479 --> 02:54:24,080
percent sign I don't need an additional

4789
02:54:21,239 --> 02:54:27,080
placeholder per se if I zoom out now and

4790
02:54:24,080 --> 02:54:29,039
run make hello again/ hello and type in

4791
02:54:27,080 --> 02:54:31,479
just my name no exclamation point now

4792
02:54:29,040 --> 02:54:33,720
you'll see more excitedly hello comma

4793
02:54:31,479 --> 02:54:37,000
David So print f is smart it will figure

4794
02:54:33,720 --> 02:54:40,000
out where the percent s is and then go

4795
02:54:37,000 --> 02:54:41,720
and replace it now let me propose that a

4796
02:54:40,000 --> 02:54:43,160
common thing in programming is that as

4797
02:54:41,720 --> 02:54:44,880
soon as we make a decision as to how to

4798
02:54:43,160 --> 02:54:46,680
design something we often paint

4799
02:54:44,880 --> 02:54:50,039
ourselves into a corner and sort of

4800
02:54:46,680 --> 02:54:53,040
regret a decision can anyone think of a

4801
02:54:50,040 --> 02:54:54,200
problem that arises from using percent S

4802
02:54:53,040 --> 02:54:58,359
as a

4803
02:54:54,200 --> 02:54:59,880
placeholder in this string to print F

4804
02:54:58,359 --> 02:55:03,040
what could go wrong if we're using

4805
02:54:59,880 --> 02:55:03,039
percent in this special

4806
02:55:03,080 --> 02:55:07,800
way yeah if you literally want to say

4807
02:55:05,560 --> 02:55:09,278
for whatever weird reason percent s on

4808
02:55:07,800 --> 02:55:10,880
the screen or honestly even just a

4809
02:55:09,279 --> 02:55:14,040
single percent it turns out that a

4810
02:55:10,880 --> 02:55:17,199
percent sign is treated specially inside

4811
02:55:14,040 --> 02:55:19,239
of of print F strings so what's the

4812
02:55:17,200 --> 02:55:21,040
solution here there's different uh

4813
02:55:19,239 --> 02:55:25,359
patterns of solutions to problems like

4814
02:55:21,040 --> 02:55:28,359
these but suppose you wanted to say uh I

4815
02:55:25,359 --> 02:55:30,560
got 100% for instance let me let me go

4816
02:55:28,359 --> 02:55:34,040
ahead and change this completely so I

4817
02:55:30,560 --> 02:55:36,600
got 100% on your test or whatever all

4818
02:55:34,040 --> 02:55:39,319
right let me go ahead and run make hello

4819
02:55:36,600 --> 02:55:40,760
enter all right so invalid conversion

4820
02:55:39,319 --> 02:55:42,160
specifier I mean I have no idea what

4821
02:55:40,760 --> 02:55:44,520
this means but it's underlining the

4822
02:55:42,160 --> 02:55:46,760
percent sign is problematic well it

4823
02:55:44,520 --> 02:55:48,359
turns out that humans years ago decided

4824
02:55:46,760 --> 02:55:52,080
all right damn it we already Ed percent

4825
02:55:48,359 --> 02:55:56,160
well 2% signs will mean 1% literally so

4826
02:55:52,080 --> 02:55:58,120
now if I rerun make hello aha hello I

4827
02:55:56,160 --> 02:55:59,399
got 100% so there's going to be things

4828
02:55:58,120 --> 02:56:00,520
like that honestly that you have to ask

4829
02:55:59,399 --> 02:56:01,960
someone you have to Google you have to

4830
02:56:00,520 --> 02:56:03,640
look it up in the documentation but

4831
02:56:01,960 --> 02:56:05,199
there's always a solution to those kinds

4832
02:56:03,640 --> 02:56:08,399
of problems and thankfully they don't

4833
02:56:05,200 --> 02:56:10,090
come up all that often yeah oh just

4834
02:56:08,399 --> 02:56:13,119
poting other questions

4835
02:56:10,090 --> 02:56:16,439
[Music]

4836
02:56:13,120 --> 02:56:18,760
yeah if you have multiple variables it

4837
02:56:16,439 --> 02:56:20,760
is in the Left Right order so print F

4838
02:56:18,760 --> 02:56:22,399
will analyze the first string of text

4839
02:56:20,760 --> 02:56:24,720
that you pass in between quotes and

4840
02:56:22,399 --> 02:56:26,199
whatever the first percent is the next

4841
02:56:24,720 --> 02:56:28,080
the first variable that's passed in

4842
02:56:26,200 --> 02:56:29,479
after a comma gets plugged in there and

4843
02:56:28,080 --> 02:56:31,080
then the second gets plugged into the

4844
02:56:29,479 --> 02:56:33,000
second third and to the third and so

4845
02:56:31,080 --> 02:56:36,000
forth so it's just based on left to

4846
02:56:33,000 --> 02:56:36,000
right

4847
02:56:38,720 --> 02:56:43,278
yeah it's just a placeholder it's called

4848
02:56:41,040 --> 02:56:45,840
a format code and it just means

4849
02:56:43,279 --> 02:56:47,600
colloquially plug in some value here and

4850
02:56:45,840 --> 02:56:50,200
printf the like the humans who wrote

4851
02:56:47,600 --> 02:56:52,200
printf decades ago decided to treat

4852
02:56:50,200 --> 02:56:54,279
percent s special why just because they

4853
02:56:52,200 --> 02:56:55,560
needed some placeholder they decided

4854
02:56:54,279 --> 02:56:57,359
that eh no one's ever going to really

4855
02:56:55,560 --> 02:56:59,800
want to type percent s and if they do

4856
02:56:57,359 --> 02:57:01,600
they can just do percent percent s so

4857
02:56:59,800 --> 02:57:03,880
they decided to implement printf in such

4858
02:57:01,600 --> 02:57:05,920
a way that they have code that look

4859
02:57:03,880 --> 02:57:08,239
analyzes whatever text comes in looks

4860
02:57:05,920 --> 02:57:10,760
for percent s and then somehow plugs in

4861
02:57:08,239 --> 02:57:14,609
the subsequent values into that

4862
02:57:10,760 --> 02:57:17,319
placeholder and just this H question

4863
02:57:14,610 --> 02:57:19,520
[Music]

4864
02:57:17,319 --> 02:57:21,640
sorry ah so what if you wanted to do

4865
02:57:19,520 --> 02:57:24,640
single characters like initials like DM

4866
02:57:21,640 --> 02:57:26,599
or djm for first middle last absolutely

4867
02:57:24,640 --> 02:57:28,439
and that too is a perfect segue from the

4868
02:57:26,600 --> 02:57:31,680
two of you to what in general are going

4869
02:57:28,439 --> 02:57:34,600
to be called data types in C so it turns

4870
02:57:31,680 --> 02:57:36,319
out in C there's not only strings as

4871
02:57:34,600 --> 02:57:37,399
text and we'll see in more detail in

4872
02:57:36,319 --> 02:57:39,439
over the next couple of weeks what a

4873
02:57:37,399 --> 02:57:41,080
string really is underneath the hood but

4874
02:57:39,439 --> 02:57:42,800
strings of text are not the only thing

4875
02:57:41,080 --> 02:57:45,560
that programs can output they can indeed

4876
02:57:42,800 --> 02:57:47,960
output single characters as for initials

4877
02:57:45,560 --> 02:57:49,760
they can output integers as well turns

4878
02:57:47,960 --> 02:57:52,119
out that printf has different format

4879
02:57:49,760 --> 02:57:53,960
codes for all sorts of different data

4880
02:57:52,120 --> 02:57:55,520
types and just some of the data types

4881
02:57:53,960 --> 02:57:57,199
we'll see in the coming weeks will be

4882
02:57:55,520 --> 02:57:59,960
this list here which you'll notice it

4883
02:57:57,200 --> 02:58:01,800
almost perfectly lines up with the cs50

4884
02:57:59,960 --> 02:58:04,438
functions that I rattled off earlier

4885
02:58:01,800 --> 02:58:06,358
like get Char get int get string the

4886
02:58:04,439 --> 02:58:07,760
reason we called those functions that is

4887
02:58:06,359 --> 02:58:10,080
because each of them is designed to

4888
02:58:07,760 --> 02:58:11,840
return to you a different type of value

4889
02:58:10,080 --> 02:58:14,479
we've used get string already in this

4890
02:58:11,840 --> 02:58:16,640
example here we'll soon see get in and

4891
02:58:14,479 --> 02:58:19,319
we'll see opportunities to use others

4892
02:58:16,640 --> 02:58:21,800
but these indeed are the menu of

4893
02:58:19,319 --> 02:58:23,800
available data types plus others dot dot

4894
02:58:21,800 --> 02:58:26,278
dot that you can use when writing a

4895
02:58:23,800 --> 02:58:28,519
program in C the onus therefore is on

4896
02:58:26,279 --> 02:58:30,319
you to decide in advance do I want to

4897
02:58:28,520 --> 02:58:32,279
store an INT in this variable or a

4898
02:58:30,319 --> 02:58:35,160
string or heck when writing fancier code

4899
02:58:32,279 --> 02:58:36,920
an image or a sound or a video even

4900
02:58:35,160 --> 02:58:38,840
those can all be different data types

4901
02:58:36,920 --> 02:58:41,359
dot dot dot but for now we'll focus

4902
02:58:38,840 --> 02:58:43,160
really on just these Primitives that was

4903
02:58:41,359 --> 02:58:45,000
a lot let's go ahead and take a 5minute

4904
02:58:43,160 --> 02:58:46,439
break here no cookies yet but in 5

4905
02:58:45,000 --> 02:58:47,840
minutes we'll come back dive into more

4906
02:58:46,439 --> 02:58:50,120
detail and our second break today we'll

4907
02:58:47,840 --> 02:58:50,120
have

4908
02:58:51,399 --> 02:58:55,880
cookies all right we are back and so if

4909
02:58:54,239 --> 02:58:57,319
you have been playing along at home but

4910
02:58:55,880 --> 02:58:58,839
hitting some bumps in the road that's

4911
02:58:57,319 --> 02:59:01,319
totally normal and indeed the goals of

4912
02:58:58,840 --> 02:59:03,319
lecture generally will be to give you a

4913
02:59:01,319 --> 02:59:04,800
sense uh conceptually of where we'll be

4914
02:59:03,319 --> 02:59:06,359
going during the course of the week but

4915
02:59:04,800 --> 02:59:07,679
it's indeed through the Hands-On labs

4916
02:59:06,359 --> 02:59:09,960
and problem sets that you'll really have

4917
02:59:07,680 --> 02:59:11,840
an opportunity at your own pace to work

4918
02:59:09,960 --> 02:59:14,039
through uh some of those same bumps in

4919
02:59:11,840 --> 02:59:15,920
the road but for today let me give you a

4920
02:59:14,040 --> 02:59:18,120
few more building blocks and these two

4921
02:59:15,920 --> 02:59:19,760
will translate from scratch initially

4922
02:59:18,120 --> 02:59:22,560
namely like conditionals like how now

4923
02:59:19,760 --> 02:59:25,479
and see after knowing now how we can use

4924
02:59:22,560 --> 02:59:27,760
functions at least uh get string and

4925
02:59:25,479 --> 02:59:30,319
print F and we can use variables like

4926
02:59:27,760 --> 02:59:31,520
the string I created earlier how can I

4927
02:59:30,319 --> 02:59:33,840
now add to the mix things like

4928
02:59:31,520 --> 02:59:35,800
decisionmaking and conditionals at that

4929
02:59:33,840 --> 02:59:37,920
well with conditionals in scratch we had

4930
02:59:35,800 --> 02:59:40,000
this kind of syntax on the left here in

4931
02:59:37,920 --> 02:59:43,000
scratch is how you might Express if two

4932
02:59:40,000 --> 02:59:45,880
variables X and Y have this relationship

4933
02:59:43,000 --> 02:59:47,960
if x is less than y then say on the

4934
02:59:45,880 --> 02:59:49,640
screen X is less than y well let me

4935
02:59:47,960 --> 02:59:52,239
translate that to the right now in C

4936
02:59:49,640 --> 02:59:54,160
code so in C the corresponding code is

4937
02:59:52,239 --> 02:59:56,640
going to look like this assuming X and Y

4938
02:59:54,160 --> 02:59:58,640
already exist more on that later and

4939
02:59:56,640 --> 03:00:01,160
notice a pattern we're going to see

4940
02:59:58,640 --> 03:00:04,479
again and again there is going to be

4941
03:00:01,160 --> 03:00:06,000
parentheses around the X and less than y

4942
03:00:04,479 --> 03:00:07,960
so parentheses around the Boolean

4943
03:00:06,000 --> 03:00:10,359
expression recall the Boolean expression

4944
03:00:07,960 --> 03:00:11,960
is the true false the yes no answer that

4945
03:00:10,359 --> 03:00:13,840
a question that you're trying to ask in

4946
03:00:11,960 --> 03:00:15,800
order to decide whether or not to do

4947
03:00:13,840 --> 03:00:19,080
something so you use parentheses there

4948
03:00:15,800 --> 03:00:21,080
so similar in functions where we Ed

4949
03:00:19,080 --> 03:00:23,200
parentheses for printf and parentheses

4950
03:00:21,080 --> 03:00:25,920
for get string and this is just a weird

4951
03:00:23,200 --> 03:00:28,439
inconsistency stylistically when using

4952
03:00:25,920 --> 03:00:30,439
the keyword if you should as a matter of

4953
03:00:28,439 --> 03:00:32,880
better best practice put a space after

4954
03:00:30,439 --> 03:00:36,080
the word if when using a function like

4955
03:00:32,880 --> 03:00:37,759
print F or get string you shouldn't both

4956
03:00:36,080 --> 03:00:39,319
will work but you'll find that these are

4957
03:00:37,760 --> 03:00:41,800
conventions stylistically that most

4958
03:00:39,319 --> 03:00:44,239
people adhere to so space when using an

4959
03:00:41,800 --> 03:00:46,880
if here all right now inside of the

4960
03:00:44,239 --> 03:00:48,359
curly braces is where the actual code

4961
03:00:46,880 --> 03:00:50,039
goes that you want to execute

4962
03:00:48,359 --> 03:00:53,040
conditionally so if you want to print

4963
03:00:50,040 --> 03:00:55,520
out X is less than y only if x is

4964
03:00:53,040 --> 03:00:57,200
actually less than y in C you use this

4965
03:00:55,520 --> 03:00:58,760
open curly brace which up until now

4966
03:00:57,200 --> 03:01:00,960
you've probably rarely used on your

4967
03:00:58,760 --> 03:01:02,800
keyboard and the Clos curly brace down

4968
03:01:00,960 --> 03:01:05,278
here and those are kind of hugging if

4969
03:01:02,800 --> 03:01:07,519
you will the one or more lines of code

4970
03:01:05,279 --> 03:01:09,720
underneath the if very similar in spirit

4971
03:01:07,520 --> 03:01:11,680
to how the orange block here kind of

4972
03:01:09,720 --> 03:01:13,800
hugs the purple puzzle piece here so

4973
03:01:11,680 --> 03:01:15,439
there's no Graphics in C it's all text

4974
03:01:13,800 --> 03:01:18,759
so you can think of those curly braces

4975
03:01:15,439 --> 03:01:21,760
as really representing the same idea as

4976
03:01:18,760 --> 03:01:24,920
a side note if you only have one line of

4977
03:01:21,760 --> 03:01:26,880
code inside of the if condition if you

4978
03:01:24,920 --> 03:01:28,800
will you strictly speaking don't need

4979
03:01:26,880 --> 03:01:30,960
the curly braces but as a matter of good

4980
03:01:28,800 --> 03:01:33,278
style do include them it will make more

4981
03:01:30,960 --> 03:01:35,399
obvious what your intent is how about in

4982
03:01:33,279 --> 03:01:37,800
scratch if you wanted to express this

4983
03:01:35,399 --> 03:01:40,278
two ways in the road that you might go

4984
03:01:37,800 --> 03:01:42,720
left or right so to speak well if x is

4985
03:01:40,279 --> 03:01:45,279
less than y I want to say x is less than

4986
03:01:42,720 --> 03:01:48,000
y else I want want to say the opposite X

4987
03:01:45,279 --> 03:01:49,640
is not less than y in this case so I'm

4988
03:01:48,000 --> 03:01:52,560
making a decision based on that Boolean

4989
03:01:49,640 --> 03:01:54,920
expression in C it's almost the same but

4990
03:01:52,560 --> 03:01:57,039
you're adding to the mix the keyword Els

4991
03:01:54,920 --> 03:01:59,080
so MIT borrowed for scratch the same

4992
03:01:57,040 --> 03:02:01,560
keyword there and a second pair of curly

4993
03:01:59,080 --> 03:02:03,520
braces open and close respectively and

4994
03:02:01,560 --> 03:02:06,319
you might guess now what goes inside of

4995
03:02:03,520 --> 03:02:09,760
those well you print out X's less than y

4996
03:02:06,319 --> 03:02:11,359
or you print out X's not less than y all

4997
03:02:09,760 --> 03:02:12,920
right what if there's a three-way fork

4998
03:02:11,359 --> 03:02:15,319
in the road in scratch this actually

4999
03:02:12,920 --> 03:02:17,560
gets a little unwieldy graphically if

5000
03:02:15,319 --> 03:02:20,479
you will but notice that in scratch this

5001
03:02:17,560 --> 03:02:24,479
is how we could express if x is less

5002
03:02:20,479 --> 03:02:27,479
than y say x is less than y else if x is

5003
03:02:24,479 --> 03:02:31,438
greater than y say x is greater than y

5004
03:02:27,479 --> 03:02:35,840
else if x equals y then say x is equal

5005
03:02:31,439 --> 03:02:37,920
to Y now minor inconsistency here just a

5006
03:02:35,840 --> 03:02:41,120
little bit ago I claimed in C that a

5007
03:02:37,920 --> 03:02:43,680
equal sign represents what

5008
03:02:41,120 --> 03:02:45,800
operation assignment from right to left

5009
03:02:43,680 --> 03:02:46,960
left in so far as scratch is really

5010
03:02:45,800 --> 03:02:48,560
meant for kids and they didn't really

5011
03:02:46,960 --> 03:02:51,599
want to get into the weeds of this kind

5012
03:02:48,560 --> 03:02:53,680
of uh semantic equal sign in scratch

5013
03:02:51,600 --> 03:02:55,640
means equality however we're going to

5014
03:02:53,680 --> 03:02:57,840
need to fix this in C in just a moment

5015
03:02:55,640 --> 03:02:59,840
in c equal sign means assignment right

5016
03:02:57,840 --> 03:03:01,359
to left in scratch it literally means

5017
03:02:59,840 --> 03:03:03,760
what you would expect all right let's

5018
03:03:01,359 --> 03:03:06,640
translate this code then to C on the

5019
03:03:03,760 --> 03:03:09,200
right this code would correspond really

5020
03:03:06,640 --> 03:03:11,239
to this and you can perhaps see somewhat

5021
03:03:09,200 --> 03:03:13,080
goofy what the solution was not unlike

5022
03:03:11,239 --> 03:03:14,760
the percent percent solution earlier

5023
03:03:13,080 --> 03:03:17,880
when hum painted themselves into one

5024
03:03:14,760 --> 03:03:20,279
other corner you say if you say else if

5025
03:03:17,880 --> 03:03:22,720
and you say else if and how did we

5026
03:03:20,279 --> 03:03:24,880
resolve the use of a single equal sign

5027
03:03:22,720 --> 03:03:26,479
already in C when you want to repr when

5028
03:03:24,880 --> 03:03:28,119
you want to express equality is the

5029
03:03:26,479 --> 03:03:30,319
thing on the left equal to the thing on

5030
03:03:28,120 --> 03:03:32,200
the right you literally use two equal

5031
03:03:30,319 --> 03:03:35,479
signs right next to each other no space

5032
03:03:32,200 --> 03:03:37,279
in between them but now this code would

5033
03:03:35,479 --> 03:03:38,438
be correct on both the left and the

5034
03:03:37,279 --> 03:03:41,080
right whether you're doing this in

5035
03:03:38,439 --> 03:03:43,319
scratch or C respectively but now we can

5036
03:03:41,080 --> 03:03:46,160
kind of nitpick our code specifically

5037
03:03:43,319 --> 03:03:49,479
the the design thereof logically can

5038
03:03:46,160 --> 03:03:51,359
anyone critique the design of this code

5039
03:03:49,479 --> 03:03:55,239
either in scratch or C like I feel like

5040
03:03:51,359 --> 03:03:55,239
we could do better how about in

5041
03:03:59,040 --> 03:04:04,880
back perfect logically it's got to be

5042
03:04:02,239 --> 03:04:08,000
the case that X is less than y or X is

5043
03:04:04,880 --> 03:04:10,239
greater than y or by conclusion it's got

5044
03:04:08,000 --> 03:04:12,000
to be equal to Y so why are you wasting

5045
03:04:10,239 --> 03:04:13,840
my time or the computer's time asking a

5046
03:04:12,000 --> 03:04:16,279
third question you don't need to ask

5047
03:04:13,840 --> 03:04:18,479
this final else if because logically as

5048
03:04:16,279 --> 03:04:20,239
you knowe it should go without saying so

5049
03:04:18,479 --> 03:04:22,960
it's a minor tweak like you're doing

5050
03:04:20,239 --> 03:04:25,080
extra work potentially in cases where x

5051
03:04:22,960 --> 03:04:26,519
equals y so we can just refine that and

5052
03:04:25,080 --> 03:04:29,200
just like in scratch you could just use

5053
03:04:26,520 --> 03:04:32,080
an else block similarly in C could we

5054
03:04:29,200 --> 03:04:34,040
simplify this code to just an else a

5055
03:04:32,080 --> 03:04:35,920
sort of catchall logically that just

5056
03:04:34,040 --> 03:04:38,040
handles the reality that of course

5057
03:04:35,920 --> 03:04:40,000
that's going to be the final situation

5058
03:04:38,040 --> 03:04:42,239
instead all right so we have this

5059
03:04:40,000 --> 03:04:44,160
ability now to express conditionals with

5060
03:04:42,239 --> 03:04:45,840
Boolean expressions let's actually do

5061
03:04:44,160 --> 03:04:48,720
something with this next here so let me

5062
03:04:45,840 --> 03:04:50,200
go back to vs code I've closed hello.c

5063
03:04:48,720 --> 03:04:52,319
and I want to create a second file for

5064
03:04:50,200 --> 03:04:54,960
the sake of some demos now recall that

5065
03:04:52,319 --> 03:04:56,720
you can create new files by typing code

5066
03:04:54,960 --> 03:04:59,080
space and then the name of the file you

5067
03:04:56,720 --> 03:05:01,438
want to create uh for instance I might

5068
03:04:59,080 --> 03:05:02,720
do compare. c I want to write a program

5069
03:05:01,439 --> 03:05:05,000
that's going to start comparing some

5070
03:05:02,720 --> 03:05:06,840
values for demonstration sake but before

5071
03:05:05,000 --> 03:05:09,359
I do that let me just show you by

5072
03:05:06,840 --> 03:05:11,720
opening the file explorer at right this

5073
03:05:09,359 --> 03:05:13,800
is similar in spirit to a Mac or PC like

5074
03:05:11,720 --> 03:05:15,399
you can go up here and click on an icon

5075
03:05:13,800 --> 03:05:17,720
and you can click on the plus icon and

5076
03:05:15,399 --> 03:05:19,680
you'll get a blue box and I can type in

5077
03:05:17,720 --> 03:05:21,960
compare. C and I can just manually

5078
03:05:19,680 --> 03:05:24,920
create it that way notice that opens the

5079
03:05:21,960 --> 03:05:26,800
tab even without my having typed code so

5080
03:05:24,920 --> 03:05:28,520
again on the left you have a guey a

5081
03:05:26,800 --> 03:05:30,560
graphical user interface albeit a

5082
03:05:28,520 --> 03:05:31,920
simplistic one on the right and at the

5083
03:05:30,560 --> 03:05:34,000
bottom here you have a command line

5084
03:05:31,920 --> 03:05:35,840
interface but they're one and the same

5085
03:05:34,000 --> 03:05:38,760
what's nice though is that if I close

5086
03:05:35,840 --> 03:05:41,319
this file accidentally intentionally

5087
03:05:38,760 --> 03:05:43,319
whatnot I can reopen it without creating

5088
03:05:41,319 --> 03:05:46,039
a new one by just running that same

5089
03:05:43,319 --> 03:05:47,880
command code space compare. c so code is

5090
03:05:46,040 --> 03:05:50,399
a vs code thing it's just a userfriendly

5091
03:05:47,880 --> 03:05:52,679
shortcut but it's just creating a file

5092
03:05:50,399 --> 03:05:54,039
or opening an existing file like that

5093
03:05:52,680 --> 03:05:55,600
I'm going to hide the file explorer just

5094
03:05:54,040 --> 03:05:57,160
to make more room for code here and

5095
03:05:55,600 --> 03:05:59,920
let's go ahead and do this let's write a

5096
03:05:57,160 --> 03:06:01,720
program that compares two values that

5097
03:05:59,920 --> 03:06:03,960
the human inputs but not strings this

5098
03:06:01,720 --> 03:06:05,720
time let's use some actual integers all

5099
03:06:03,960 --> 03:06:08,839
right I'm going to go ahead and include

5100
03:06:05,720 --> 03:06:11,080
the cs-50 librar header file at top

5101
03:06:08,840 --> 03:06:14,000
cs50.h I'm going to also include

5102
03:06:11,080 --> 03:06:16,600
standard io. why one gives me

5103
03:06:14,000 --> 03:06:18,520
userfriendly input via get string get

5104
03:06:16,600 --> 03:06:20,760
int and so forth one gives me user

5105
03:06:18,520 --> 03:06:23,120
friendly output via printf in the case

5106
03:06:20,760 --> 03:06:25,160
of standard i.h now I'm just going to

5107
03:06:23,120 --> 03:06:26,800
kind of blindly type this line of code

5108
03:06:25,160 --> 03:06:29,039
which we'll come back to in future weeks

5109
03:06:26,800 --> 03:06:31,759
but for now that's analogous to the when

5110
03:06:29,040 --> 03:06:33,600
green flag clicked code in scratch and

5111
03:06:31,760 --> 03:06:36,200
now let's go ahead and do this let me go

5112
03:06:33,600 --> 03:06:38,760
ahead and get an INT from the user and

5113
03:06:36,200 --> 03:06:40,040
ask the user what's X question mark I'm

5114
03:06:38,760 --> 03:06:41,720
not going to bother with a new line I

5115
03:06:40,040 --> 03:06:44,200
want to keep it all in one line just for

5116
03:06:41,720 --> 03:06:46,599
Aesthetics sake but when I get back an

5117
03:06:44,200 --> 03:06:49,200
INT just like I get back a string I get

5118
03:06:46,600 --> 03:06:52,880
back a return value so if I want to

5119
03:06:49,200 --> 03:06:54,760
store the result of get int somewhere I

5120
03:06:52,880 --> 03:06:56,399
had better put it in a variable and I

5121
03:06:54,760 --> 03:06:58,920
can call the variable anything I want

5122
03:06:56,399 --> 03:07:01,479
previously I used answer or first or

5123
03:06:58,920 --> 03:07:04,120
last now I'm going to use x but there's

5124
03:07:01,479 --> 03:07:05,239
still two things left to do here

5125
03:07:04,120 --> 03:07:06,800
logically even though we haven't

5126
03:07:05,239 --> 03:07:08,520
technically done this yet what do I

5127
03:07:06,800 --> 03:07:11,640
still need to

5128
03:07:08,520 --> 03:07:14,800
do so I need the semicolon at the

5129
03:07:11,640 --> 03:07:17,080
end and the in at the beginning you the

5130
03:07:14,800 --> 03:07:18,319
programmer starting today kind of need

5131
03:07:17,080 --> 03:07:19,800
to decide what you're going to be

5132
03:07:18,319 --> 03:07:21,800
storing in your variables and you just

5133
03:07:19,800 --> 03:07:23,800
need to tell the computer that so that

5134
03:07:21,800 --> 03:07:26,039
it knows now as a teaser for languages

5135
03:07:23,800 --> 03:07:27,640
like python more modern languages turns

5136
03:07:26,040 --> 03:07:29,160
out humans realize well gee this is

5137
03:07:27,640 --> 03:07:30,519
stupid like why can't the computer just

5138
03:07:29,160 --> 03:07:32,720
figure out that I'm putting an INT there

5139
03:07:30,520 --> 03:07:34,680
why do I have to tell it proactively so

5140
03:07:32,720 --> 03:07:36,358
in some languages nowadays like python

5141
03:07:34,680 --> 03:07:37,920
we'll get rid of some of this syntax

5142
03:07:36,359 --> 03:07:39,880
we'll get rid of the semicolons but for

5143
03:07:37,920 --> 03:07:41,840
now we're looking at really the origins

5144
03:07:39,880 --> 03:07:44,000
of how this all worked all right so I've

5145
03:07:41,840 --> 03:07:45,600
done this one line ending with semicolon

5146
03:07:44,000 --> 03:07:48,040
let me do one other and let me get a

5147
03:07:45,600 --> 03:07:50,840
second int asking the user what's why

5148
03:07:48,040 --> 03:07:52,640
question mark so almost identical but

5149
03:07:50,840 --> 03:07:54,640
different responses from the user

5150
03:07:52,640 --> 03:07:58,519
hopefully and let me just ask simply if

5151
03:07:54,640 --> 03:08:00,640
x is less than y in parentheses then

5152
03:07:58,520 --> 03:08:04,239
some curly braces let me go ahead and

5153
03:08:00,640 --> 03:08:07,519
print out quote unquote X is less than y

5154
03:08:04,239 --> 03:08:10,279
back sln and now just as a side note I I

5155
03:08:07,520 --> 03:08:12,080
seem to be typing kind of fast some of

5156
03:08:10,279 --> 03:08:13,640
that is because vs code is helping me

5157
03:08:12,080 --> 03:08:16,920
let me go back to this

5158
03:08:13,640 --> 03:08:18,560
first line with the if hit enter and now

5159
03:08:16,920 --> 03:08:21,399
I'm only on my keyboard going to type

5160
03:08:18,560 --> 03:08:23,119
the open curly brace this is a feature

5161
03:08:21,399 --> 03:08:25,278
of many text editors nowadays it

5162
03:08:23,120 --> 03:08:26,880
finishes part of your thought why just

5163
03:08:25,279 --> 03:08:28,439
to save yourself a keystroke to make

5164
03:08:26,880 --> 03:08:30,319
sure you don't accidentally forget the

5165
03:08:28,439 --> 03:08:31,479
closing one so you'll notice sometimes

5166
03:08:30,319 --> 03:08:33,800
that things are happening that you

5167
03:08:31,479 --> 03:08:35,479
didn't type it's just vs code or future

5168
03:08:33,800 --> 03:08:37,438
programs you use trying to be helpful

5169
03:08:35,479 --> 03:08:41,399
for you I'll go ahead and manually type

5170
03:08:37,439 --> 03:08:44,160
out now printf uh X is less than y back

5171
03:08:41,399 --> 03:08:47,399
slend close quote semicolon so let me go

5172
03:08:44,160 --> 03:08:50,439
ahead now and try to run this and we'll

5173
03:08:47,399 --> 03:08:52,319
see let's see so make not hello but make

5174
03:08:50,439 --> 03:08:56,439
compare because this file is called

5175
03:08:52,319 --> 03:08:58,119
compare. C hitting enter okay no output

5176
03:08:56,439 --> 03:09:00,920
is good because it means I haven't

5177
03:08:58,120 --> 03:09:04,120
messed up let me do dot SL compare

5178
03:09:00,920 --> 03:09:07,560
instead of/ hello enter what's X how

5179
03:09:04,120 --> 03:09:10,279
about one what's Y how about two x is

5180
03:09:07,560 --> 03:09:11,800
less than y well let's try it again and

5181
03:09:10,279 --> 03:09:13,760
here I'll save you some keystrokes too

5182
03:09:11,800 --> 03:09:16,160
let me clear my screen instead of

5183
03:09:13,760 --> 03:09:17,960
constantly typing dot slash this and Dot

5184
03:09:16,160 --> 03:09:20,239
slash that you can also use your

5185
03:09:17,960 --> 03:09:22,960
keyboard's arrow keys in vs code to

5186
03:09:20,239 --> 03:09:24,640
scroll back through time so if I hit up

5187
03:09:22,960 --> 03:09:26,640
once there's the last command I wrote If

5188
03:09:24,640 --> 03:09:28,479
I write uh do it up twice there's the

5189
03:09:26,640 --> 03:09:29,720
second to last command I wrote so

5190
03:09:28,479 --> 03:09:30,880
sometimes if you see me doing things

5191
03:09:29,720 --> 03:09:32,519
fast it's just because I'm kind of

5192
03:09:30,880 --> 03:09:34,160
cheating and going through my history

5193
03:09:32,520 --> 03:09:35,120
like that all right let me go ahead

5194
03:09:34,160 --> 03:09:38,840
though and

5195
03:09:35,120 --> 03:09:42,399
rerun compare enter let's reverse it

5196
03:09:38,840 --> 03:09:43,760
this time two for x one for y and now of

5197
03:09:42,399 --> 03:09:45,319
course there's no no output all right

5198
03:09:43,760 --> 03:09:46,720
well that's logically to be expected

5199
03:09:45,319 --> 03:09:49,399
because we didn't have an else here so

5200
03:09:46,720 --> 03:09:51,479
let's add that else now let's open my

5201
03:09:49,399 --> 03:09:54,560
curly braces letting vs code do one of

5202
03:09:51,479 --> 03:09:59,199
them for me print F quote unquote X is

5203
03:09:54,560 --> 03:10:02,278
not less than y back sln semicolon let

5204
03:09:59,200 --> 03:10:05,960
me go ahead and try this again/ compare

5205
03:10:02,279 --> 03:10:08,680
enter again two for x one for y and we

5206
03:10:05,960 --> 03:10:11,919
should see

5207
03:10:08,680 --> 03:10:15,800
huh what did I do wrong why am I not

5208
03:10:11,920 --> 03:10:15,800
seeing any else output

5209
03:10:16,439 --> 03:10:19,840
yeah exactly you got to get into the

5210
03:10:18,600 --> 03:10:21,720
Habit after you change your code of

5211
03:10:19,840 --> 03:10:24,239
recompiling it otherwise the zeros and

5212
03:10:21,720 --> 03:10:26,160
ones in the server are the old ones

5213
03:10:24,239 --> 03:10:28,239
until you manually compile so let's fix

5214
03:10:26,160 --> 03:10:32,399
this make compare enter no error

5215
03:10:28,239 --> 03:10:34,920
messages that's good do/ compare 2 1 and

5216
03:10:32,399 --> 03:10:37,519
now I get back the output so X is not

5217
03:10:34,920 --> 03:10:40,120
less than y how about if I go and add in

5218
03:10:37,520 --> 03:10:42,399
the third condition well we can do this

5219
03:10:40,120 --> 03:10:44,520
either efficiently or inefficiently let

5220
03:10:42,399 --> 03:10:47,319
me go ahead head and refine this so else

5221
03:10:44,520 --> 03:10:51,359
if x is greater than y let's literally

5222
03:10:47,319 --> 03:10:54,800
say x is greater than y and now I could

5223
03:10:51,359 --> 03:10:56,120
do X else if x equals equals y but I

5224
03:10:54,800 --> 03:10:58,278
think we already claim that that's

5225
03:10:56,120 --> 03:11:00,279
unnecessarily inefficient so let's just

5226
03:10:58,279 --> 03:11:04,359
have our catchall and here I'm going to

5227
03:11:00,279 --> 03:11:07,720
say quote unquote X is equal 2 y back

5228
03:11:04,359 --> 03:11:09,720
sln close quote there so I think now

5229
03:11:07,720 --> 03:11:11,880
with this code we've handled all three

5230
03:11:09,720 --> 03:11:15,960
scenarios let me go ahead and recompile

5231
03:11:11,880 --> 03:11:19,640
it properly compare do/ compare and now

5232
03:11:15,960 --> 03:11:23,560
1 and 2 x is less than y let me run it

5233
03:11:19,640 --> 03:11:27,880
again 2 and One X is greater than y and

5234
03:11:23,560 --> 03:11:29,399
lastly one and one and X is equal to Y

5235
03:11:27,880 --> 03:11:31,599
so for the most part our code's getting

5236
03:11:29,399 --> 03:11:33,080
longer we're up to like 21 lines of code

5237
03:11:31,600 --> 03:11:34,880
though some of them are just single

5238
03:11:33,080 --> 03:11:36,479
characters on the screen almost

5239
03:11:34,880 --> 03:11:39,920
everything else is the same I'm using

5240
03:11:36,479 --> 03:11:43,160
the cs50 libraries header file for my

5241
03:11:39,920 --> 03:11:45,239
get int function standard i.h for my

5242
03:11:43,160 --> 03:11:47,840
print F function and the rest of this is

5243
03:11:45,239 --> 03:11:50,239
just now new syntax for conditionals as

5244
03:11:47,840 --> 03:11:52,319
well questions then on this C

5245
03:11:50,239 --> 03:11:53,920
implementation of just some basic

5246
03:11:52,319 --> 03:11:57,519
comparisons like

5247
03:11:53,920 --> 03:12:00,239
this any questions

5248
03:11:57,520 --> 03:12:02,359
[Music]

5249
03:12:00,239 --> 03:12:03,920
yeah good question do the opening

5250
03:12:02,359 --> 03:12:06,600
brackets need to be on a separate line

5251
03:12:03,920 --> 03:12:08,080
in cs50 yes what you'll see is that as

5252
03:12:06,600 --> 03:12:10,600
part of the submission process We

5253
03:12:08,080 --> 03:12:12,880
compare your code against a style guide

5254
03:12:10,600 --> 03:12:14,680
which is the norm in Industry a company

5255
03:12:12,880 --> 03:12:16,239
would have its own sense of style and

5256
03:12:14,680 --> 03:12:17,720
how its code should look and there's

5257
03:12:16,239 --> 03:12:19,880
generally automated tools within a

5258
03:12:17,720 --> 03:12:22,319
company that help uh give feedback on

5259
03:12:19,880 --> 03:12:24,519
the code or stylize it as such there are

5260
03:12:22,319 --> 03:12:27,278
alternative Styles than what we use in

5261
03:12:24,520 --> 03:12:29,120
the class we deliberately keep and ask

5262
03:12:27,279 --> 03:12:31,960
that you keep the curly braces on their

5263
03:12:29,120 --> 03:12:34,080
own line if only because it rather

5264
03:12:31,960 --> 03:12:36,039
resembles like the hugging nature of

5265
03:12:34,080 --> 03:12:38,239
scratches blocks and just makes clear

5266
03:12:36,040 --> 03:12:40,760
that they're balanced open and closed

5267
03:12:38,239 --> 03:12:42,840
however another common Paradigm in some

5268
03:12:40,760 --> 03:12:45,600
languages and with some programmers is

5269
03:12:42,840 --> 03:12:48,520
to do something like this uh on each of

5270
03:12:45,600 --> 03:12:50,840
them so you have the opening curly brace

5271
03:12:48,520 --> 03:12:52,520
on the same line as here we do not

5272
03:12:50,840 --> 03:12:54,840
recommend this this is invogue in the

5273
03:12:52,520 --> 03:12:56,439
JavaScript world and some others um but

5274
03:12:54,840 --> 03:12:58,439
ultimately in the real world it's up to

5275
03:12:56,439 --> 03:12:59,680
each individual programmer Andor the

5276
03:12:58,439 --> 03:13:01,880
company they're working for if

5277
03:12:59,680 --> 03:13:04,800
applicable to decide on those

5278
03:13:01,880 --> 03:13:05,920
things all right so beyond then these

5279
03:13:04,800 --> 03:13:07,880
conditionals what if we want to do

5280
03:13:05,920 --> 03:13:09,200
something that's maybe pretty common so

5281
03:13:07,880 --> 03:13:11,278
almost every piece of software or

5282
03:13:09,200 --> 03:13:13,080
website nowadays that you use has you

5283
03:13:11,279 --> 03:13:15,560
like agree to some terms and conditions

5284
03:13:13,080 --> 03:13:17,680
by typing like yes or no or just y for

5285
03:13:15,560 --> 03:13:19,880
yes and N for no so how could we

5286
03:13:17,680 --> 03:13:21,520
Implement some kind of Agreement System

5287
03:13:19,880 --> 03:13:24,599
well let me do this let me create a new

5288
03:13:21,520 --> 03:13:26,600
program a third one called agree. C so

5289
03:13:24,600 --> 03:13:28,439
I'm going to write code agree. C just to

5290
03:13:26,600 --> 03:13:31,040
give myself a new tab I'm going to start

5291
03:13:28,439 --> 03:13:34,239
as always now include cs50.h let's

5292
03:13:31,040 --> 03:13:36,920
include standard i.h and then let me do

5293
03:13:34,239 --> 03:13:38,560
my int main void which again for today's

5294
03:13:36,920 --> 03:13:41,000
purposes we'll take it face value is

5295
03:13:38,560 --> 03:13:43,720
just copy paste and if I just want to

5296
03:13:41,000 --> 03:13:46,880
get y or n for instance instead of yes

5297
03:13:43,720 --> 03:13:49,319
or no we can just use a simpler variable

5298
03:13:46,880 --> 03:13:51,839
here how about just a Char a character A

5299
03:13:49,319 --> 03:13:54,519
Single Character so I can use get Char

5300
03:13:51,840 --> 03:13:58,080
to ask the user for instance do you

5301
03:13:54,520 --> 03:13:59,680
agree question mark but before as before

5302
03:13:58,080 --> 03:14:01,039
I need to store this somewhere so I

5303
03:13:59,680 --> 03:14:03,080
don't want a string because it's a

5304
03:14:01,040 --> 03:14:06,000
single Char I don't want an INT I just

5305
03:14:03,080 --> 03:14:07,080
want a Char and it's literally CH h a r

5306
03:14:06,000 --> 03:14:09,080
and then I could call this thing

5307
03:14:07,080 --> 03:14:11,359
anything I want it's conventional if you

5308
03:14:09,080 --> 03:14:13,640
have a simple program with just a single

5309
03:14:11,359 --> 03:14:15,359
variable and it's of type Char call it C

5310
03:14:13,640 --> 03:14:17,239
if it's an INT call it I if it's a

5311
03:14:15,359 --> 03:14:19,600
string call it s for now I'm just going

5312
03:14:17,239 --> 03:14:23,560
to keep it simple and call it C and now

5313
03:14:19,600 --> 03:14:28,200
I'm going to ask a question so if C

5314
03:14:23,560 --> 03:14:32,479
equals equals how about quote unquote

5315
03:14:28,200 --> 03:14:34,800
y then let me go ahead and print out uh

5316
03:14:32,479 --> 03:14:38,039
agreed back sln as though they agreed to

5317
03:14:34,800 --> 03:14:40,679
my terms and conditions uh otherwise

5318
03:14:38,040 --> 03:14:43,120
let's see else if the character equals

5319
03:14:40,680 --> 03:14:45,680
equals quote unquote n

5320
03:14:43,120 --> 03:14:49,040
then let me go ahead and print out uh

5321
03:14:45,680 --> 03:14:52,399
say not agreed as though they didn't

5322
03:14:49,040 --> 03:14:54,479
quote unquote and let's leave it at that

5323
03:14:52,399 --> 03:14:58,479
I think here initially now you'll notice

5324
03:14:54,479 --> 03:15:00,119
one curiosity one inconsistency perhaps

5325
03:14:58,479 --> 03:15:01,399
does anyone want to call it out though

5326
03:15:00,120 --> 03:15:03,399
it's somewhat

5327
03:15:01,399 --> 03:15:05,840
subtle I've done something ever so

5328
03:15:03,399 --> 03:15:10,080
slightly differently without explaining

5329
03:15:05,840 --> 03:15:12,479
it yet do you see it single single yeah

5330
03:15:10,080 --> 03:15:14,840
so I've suddenly used single quotation

5331
03:15:12,479 --> 03:15:16,760
marks for my single characters and

5332
03:15:14,840 --> 03:15:18,880
double quotes for my actual strings of

5333
03:15:16,760 --> 03:15:20,760
text this is a necessity in C when

5334
03:15:18,880 --> 03:15:23,119
you're dealing with strings like strings

5335
03:15:20,760 --> 03:15:24,920
of text like someone's name a sentence a

5336
03:15:23,120 --> 03:15:27,560
paragraph anything really more than one

5337
03:15:24,920 --> 03:15:29,760
character you typically use uh double

5338
03:15:27,560 --> 03:15:32,519
quotes and indeed you must when dealing

5339
03:15:29,760 --> 03:15:35,640
with deliberately single characters like

5340
03:15:32,520 --> 03:15:37,800
I am here for y or n you must use single

5341
03:15:35,640 --> 03:15:39,319
quotes instead why because that makes

5342
03:15:37,800 --> 03:15:41,599
sure that the computer knows that it's

5343
03:15:39,319 --> 03:15:43,319
indeed a Char and not a string so double

5344
03:15:41,600 --> 03:15:46,000
quotes are for Strings single quotes are

5345
03:15:43,319 --> 03:15:48,399
for chars so with that said let me go

5346
03:15:46,000 --> 03:15:51,560
ahead and zoom out let me go ahead in my

5347
03:15:48,399 --> 03:15:53,239
terminal window run make agree enter

5348
03:15:51,560 --> 03:15:57,080
seems to work okay so let me go ahead

5349
03:15:53,239 --> 03:16:01,080
and do/ agree uh let me go ahead now and

5350
03:15:57,080 --> 03:16:04,520
type in y here we go

5351
03:16:01,080 --> 03:16:08,319
enter huh uh let me try that again rerun

5352
03:16:04,520 --> 03:16:11,160
do/ agree how about no

5353
03:16:08,319 --> 03:16:14,239
enter why is it not behaving as I would

5354
03:16:11,160 --> 03:16:16,439
have expected uh because you the capital

5355
03:16:14,239 --> 03:16:17,960
Y yeah I kind of cheated there and I hit

5356
03:16:16,439 --> 03:16:19,279
the caps lock key just as I started

5357
03:16:17,960 --> 03:16:21,399
typing in input why because I

5358
03:16:19,279 --> 03:16:23,239
deliberately wanted to type in uppercase

5359
03:16:21,399 --> 03:16:25,039
instead of lowercase which is kind of

5360
03:16:23,239 --> 03:16:26,920
reasonable right it's a little obnoxious

5361
03:16:25,040 --> 03:16:28,399
if you force the user to toggle their

5362
03:16:26,920 --> 03:16:30,000
caps lock key on or off when you just

5363
03:16:28,399 --> 03:16:32,760
need a simple answer that's not the best

5364
03:16:30,000 --> 03:16:34,720
user experience or ux but it would work

5365
03:16:32,760 --> 03:16:38,840
if I cooperated let me run this again

5366
03:16:34,720 --> 03:16:41,920
without caps lock on y lowercase for yes

5367
03:16:38,840 --> 03:16:43,479
ah that worked and uh lowercase for no

5368
03:16:41,920 --> 03:16:45,760
that work worked but how could I get it

5369
03:16:43,479 --> 03:16:47,198
to work for both well how about this let

5370
03:16:45,760 --> 03:16:50,880
me go ahead and just add two

5371
03:16:47,199 --> 03:16:54,239
possibilities so else if C equals equals

5372
03:16:50,880 --> 03:16:58,640
quote unquote capital Y then also do

5373
03:16:54,239 --> 03:17:02,600
printf agreed back sln and down here

5374
03:16:58,640 --> 03:17:05,680
else if C equals equals uh single quote

5375
03:17:02,600 --> 03:17:08,880
uh capital N then go ahead and print out

5376
03:17:05,680 --> 03:17:11,479
again not agreed okay this I will claim

5377
03:17:08,880 --> 03:17:14,198
now is correct and I'll do make agree

5378
03:17:11,479 --> 03:17:17,239
real fast do slash agree and I'll use

5379
03:17:14,199 --> 03:17:19,920
Capital it now works I'll use uh Capital

5380
03:17:17,239 --> 03:17:22,080
it again works but this is perhaps not

5381
03:17:19,920 --> 03:17:23,720
the best design let me hide the terminal

5382
03:17:22,080 --> 03:17:25,279
window and pull this up on the screen

5383
03:17:23,720 --> 03:17:28,000
all at

5384
03:17:25,279 --> 03:17:31,399
once why might this arguably not be the

5385
03:17:28,000 --> 03:17:31,399
best design even though it's

5386
03:17:31,760 --> 03:17:36,640
correct there's another term of art we

5387
03:17:33,920 --> 03:17:38,000
can toss here like something smells kind

5388
03:17:36,640 --> 03:17:39,599
of funky about this code this is an

5389
03:17:38,000 --> 03:17:41,800
actual term of art like there's code

5390
03:17:39,600 --> 03:17:44,860
smell here like something smells a

5391
03:17:41,800 --> 03:17:47,929
little off why what do you

5392
03:17:44,860 --> 03:17:47,929
[Music]

5393
03:17:50,800 --> 03:17:55,399
[Music]

5394
03:17:53,120 --> 03:17:57,239
think yeah there's the same output again

5395
03:17:55,399 --> 03:17:58,439
and again I mean I manually typed it but

5396
03:17:57,239 --> 03:18:00,279
honestly I might as well have just

5397
03:17:58,439 --> 03:18:02,479
copied and pasted most of my original

5398
03:18:00,279 --> 03:18:06,239
code to do it again and again for the C

5399
03:18:02,479 --> 03:18:09,358
two capital letters so if line 10 and 14

5400
03:18:06,239 --> 03:18:11,119
are the same and line 18 and 22 are the

5401
03:18:09,359 --> 03:18:13,880
same and then the rest of these if and

5402
03:18:11,120 --> 03:18:15,239
Els ifs are almost the same like like

5403
03:18:13,880 --> 03:18:17,119
there's some code smell there like it's

5404
03:18:15,239 --> 03:18:18,800
not well-designed why because if I want

5405
03:18:17,120 --> 03:18:20,279
to change things now just like last week

5406
03:18:18,800 --> 03:18:22,679
in scratch I might have to change my

5407
03:18:20,279 --> 03:18:24,760
code in multiple places or copy paste is

5408
03:18:22,680 --> 03:18:27,120
never a good thing and go God forbid I

5409
03:18:24,760 --> 03:18:29,399
want to add support for yes and no as

5410
03:18:27,120 --> 03:18:31,160
full words it's really going to get long

5411
03:18:29,399 --> 03:18:33,399
so how can we solve this well it turns

5412
03:18:31,160 --> 03:18:35,000
out like we can combine some of these

5413
03:18:33,399 --> 03:18:37,680
thoughts so let me try to improve the

5414
03:18:35,000 --> 03:18:40,600
yeses first it turns out if I delete

5415
03:18:37,680 --> 03:18:42,080
that Clause I can actually or things

5416
03:18:40,600 --> 03:18:43,800
together in scratch there's a couple

5417
03:18:42,080 --> 03:18:45,680
puzzle pieces if you didn't discover

5418
03:18:43,800 --> 03:18:47,319
them that literally have the word or and

5419
03:18:45,680 --> 03:18:49,359
the word and on them which allow you to

5420
03:18:47,319 --> 03:18:52,278
combine Boolean Expressions so that

5421
03:18:49,359 --> 03:18:55,040
either this or this is true or this and

5422
03:18:52,279 --> 03:18:58,600
this is true in C you can't just say the

5423
03:18:55,040 --> 03:19:02,120
word or you instead use two vertical

5424
03:18:58,600 --> 03:19:04,600
bars and vertical bars together mean or

5425
03:19:02,120 --> 03:19:08,479
logically and so I can say C equals

5426
03:19:04,600 --> 03:19:10,359
equals quote unquote capital Y agreed

5427
03:19:08,479 --> 03:19:13,198
and now I can get rid of this code down

5428
03:19:10,359 --> 03:19:16,880
here and let me go ahead and say

5429
03:19:13,199 --> 03:19:19,680
vertical vertical bar twice C equals uh

5430
03:19:16,880 --> 03:19:21,960
quote unquote n in all caps and now my

5431
03:19:19,680 --> 03:19:24,040
program's like you know roughly a third

5432
03:19:21,960 --> 03:19:25,960
uh smaller which is good there's less

5433
03:19:24,040 --> 03:19:30,239
redundancy and if I reopen my terminal

5434
03:19:25,960 --> 03:19:34,000
window rerun make of agree SL agree now

5435
03:19:30,239 --> 03:19:37,439
I can type little y or Big Y and same

5436
03:19:34,000 --> 03:19:39,560
thing for lowercase and uppercase n any

5437
03:19:37,439 --> 03:19:40,920
questions then on this syntax whereby

5438
03:19:39,560 --> 03:19:43,319
now you can combine thoughts and just

5439
03:19:40,920 --> 03:19:46,760
kind of tighten things up

5440
03:19:43,319 --> 03:19:46,760
and there'll be other such tricks too

5441
03:19:47,880 --> 03:19:53,399
yeah a really good question is there not

5442
03:19:50,239 --> 03:19:55,720
a function to just ignore the case short

5443
03:19:53,399 --> 03:19:57,198
answer there is and we'll see how to do

5444
03:19:55,720 --> 03:19:59,000
that in actually just about a week's

5445
03:19:57,199 --> 03:20:01,040
time and in other languages there's even

5446
03:19:59,000 --> 03:20:03,279
more ways to just canonicalize the

5447
03:20:01,040 --> 03:20:04,680
user's input throwing away any space

5448
03:20:03,279 --> 03:20:06,760
characters they might have accidentally

5449
03:20:04,680 --> 03:20:09,040
hit forcing everything to lower case in

5450
03:20:06,760 --> 03:20:10,880
C it's going to be a little more work on

5451
03:20:09,040 --> 03:20:12,399
our part to do that but in fact as early

5452
03:20:10,880 --> 03:20:14,278
as next week we'll see how we can do

5453
03:20:12,399 --> 03:20:17,869
that but for now we're comparing indeed

5454
03:20:14,279 --> 03:20:23,920
just these literal values other

5455
03:20:17,870 --> 03:20:26,120
[Music]

5456
03:20:23,920 --> 03:20:28,279
questions really good question so we are

5457
03:20:26,120 --> 03:20:29,880
assuming with this program in all of my

5458
03:20:28,279 --> 03:20:31,439
last ones that the human's cooperating

5459
03:20:29,880 --> 03:20:33,438
when I asked for their name they typed

5460
03:20:31,439 --> 03:20:35,120
in David and not one two three or in

5461
03:20:33,439 --> 03:20:37,399
this case they typed in a single

5462
03:20:35,120 --> 03:20:39,520
character and not a full word so this is

5463
03:20:37,399 --> 03:20:41,680
one of the features often of using a

5464
03:20:39,520 --> 03:20:42,720
library so for instance if I run agree

5465
03:20:41,680 --> 03:20:46,560
again

5466
03:20:42,720 --> 03:20:50,479
and I say something like sure enter it

5467
03:20:46,560 --> 03:20:52,840
rejects it alt together why because s e

5468
03:20:50,479 --> 03:20:54,840
is a string of characters it's not a

5469
03:20:52,840 --> 03:20:57,040
single character now I could just say

5470
03:20:54,840 --> 03:20:59,600
something like X which is neither y nor

5471
03:20:57,040 --> 03:21:00,920
n of course but it tolerates that

5472
03:20:59,600 --> 03:21:03,080
because it's a single character but

5473
03:21:00,920 --> 03:21:05,279
built into cs50's library is some

5474
03:21:03,080 --> 03:21:07,279
built-in rejections of inputs that's not

5475
03:21:05,279 --> 03:21:09,560
expected so if you use get int and the

5476
03:21:07,279 --> 03:21:12,359
user types in not the number one or two

5477
03:21:09,560 --> 03:21:14,160
but cat C A it will just prompt them

5478
03:21:12,359 --> 03:21:15,760
again prompt them again and this is

5479
03:21:14,160 --> 03:21:18,119
where too if you were to do this

5480
03:21:15,760 --> 03:21:20,399
manually in C you end up writing this

5481
03:21:18,120 --> 03:21:21,760
much code just to check for all of these

5482
03:21:20,399 --> 03:21:23,920
errors that's why we use these training

5483
03:21:21,760 --> 03:21:25,600
wheels for a few weeks just to make the

5484
03:21:23,920 --> 03:21:27,399
code more robust but in a few weeks time

5485
03:21:25,600 --> 03:21:29,880
we'll take the library away and you'll

5486
03:21:27,399 --> 03:21:32,439
see and understand how it's doing all

5487
03:21:29,880 --> 03:21:34,399
it's indeed doing all that all right so

5488
03:21:32,439 --> 03:21:36,160
how about this let's now transition to

5489
03:21:34,399 --> 03:21:38,160
something a little more scratch like

5490
03:21:36,160 --> 03:21:40,039
literally uh by creating how about

5491
03:21:38,160 --> 03:21:42,160
another program here called meow so

5492
03:21:40,040 --> 03:21:43,680
meow. C we won't have any audio

5493
03:21:42,160 --> 03:21:46,039
capabilities for this one will just rely

5494
03:21:43,680 --> 03:21:48,479
on print and suppose that I wanted to

5495
03:21:46,040 --> 03:21:50,199
write a program in C that just simulates

5496
03:21:48,479 --> 03:21:51,960
like a cat meowing so I don't need any

5497
03:21:50,199 --> 03:21:54,199
user input just yet so I'm just going to

5498
03:21:51,960 --> 03:21:56,880
use standard i.h I'm going to do my

5499
03:21:54,199 --> 03:21:58,640
usual int main void up here and then I'm

5500
03:21:56,880 --> 03:22:01,759
just going to go ahead and do printf

5501
03:21:58,640 --> 03:22:03,519
meow back sln and let's have this C meow

5502
03:22:01,760 --> 03:22:06,520
three times like last week so I'm going

5503
03:22:03,520 --> 03:22:07,800
to do meow meow meow notice as an aside

5504
03:22:06,520 --> 03:22:09,439
whenever you highlight the lines you'll

5505
03:22:07,800 --> 03:22:11,319
see little dots appear this is just a

5506
03:22:09,439 --> 03:22:13,880
visual cue to you to let you figure out

5507
03:22:11,319 --> 03:22:15,560
how many spaces you've indented vs code

5508
03:22:13,880 --> 03:22:17,278
like a lot of editors will automatically

5509
03:22:15,560 --> 03:22:18,920
indent your code for you I've not been

5510
03:22:17,279 --> 03:22:20,960
hitting the space bar four times every

5511
03:22:18,920 --> 03:22:23,840
time I've not even been hitting tab

5512
03:22:20,960 --> 03:22:26,519
however in C the convention is indeed to

5513
03:22:23,840 --> 03:22:28,960
indent lines where appropriate by four

5514
03:22:26,520 --> 03:22:30,479
spaces so not three not five and these

5515
03:22:28,960 --> 03:22:32,599
dots help you see things so that they

5516
03:22:30,479 --> 03:22:34,119
just line up as a matter of good style

5517
03:22:32,600 --> 03:22:35,640
all right so this program I'm just going

5518
03:22:34,120 --> 03:22:38,040
to stipulate right now is indeed going

5519
03:22:35,640 --> 03:22:41,080
to work make meow which is kind of cute

5520
03:22:38,040 --> 03:22:42,680
and now meow there three times correct

5521
03:22:41,080 --> 03:22:44,080
it's meowing three times but of course

5522
03:22:42,680 --> 03:22:47,279
this is not well designed it wasn't well

5523
03:22:44,080 --> 03:22:48,960
designed in scratch last week why what

5524
03:22:47,279 --> 03:22:51,040
should I be doing

5525
03:22:48,960 --> 03:22:52,800
differently

5526
03:22:51,040 --> 03:22:55,640
yeah

5527
03:22:52,800 --> 03:22:57,198
yeah it's a perfect like opportunity for

5528
03:22:55,640 --> 03:22:58,960
a loop why because if you wanted to

5529
03:22:57,199 --> 03:23:00,920
change maybe the capitalization of these

5530
03:22:58,960 --> 03:23:02,759
words you wanted to change the sound to

5531
03:23:00,920 --> 03:23:04,520
like woof or a dog or something like

5532
03:23:02,760 --> 03:23:06,560
you'd have to change it one two three

5533
03:23:04,520 --> 03:23:08,120
places and that's just kind of stupid

5534
03:23:06,560 --> 03:23:11,119
right in code you should ideally change

5535
03:23:08,120 --> 03:23:13,840
things in one place so how might I do

5536
03:23:11,120 --> 03:23:15,279
that well we could introduce a loop yes

5537
03:23:13,840 --> 03:23:17,040
but we're going to need another building

5538
03:23:15,279 --> 03:23:19,399
block as well that we had in scratch

5539
03:23:17,040 --> 03:23:21,000
namely those things called variables so

5540
03:23:19,399 --> 03:23:24,479
we're call that a variable like in

5541
03:23:21,000 --> 03:23:28,000
algebra x y z whatever can store a value

5542
03:23:24,479 --> 03:23:29,840
for you and a variable in scratch might

5543
03:23:28,000 --> 03:23:31,800
have looked like this you use this

5544
03:23:29,840 --> 03:23:33,920
orange puzzle piece to set a variable of

5545
03:23:31,800 --> 03:23:35,720
any name not just X Y or Z but you could

5546
03:23:33,920 --> 03:23:37,880
call it something more descriptive like

5547
03:23:35,720 --> 03:23:41,560
counter and you can set it equal to some

5548
03:23:37,880 --> 03:23:43,239
value in C the way to do this is similar

5549
03:23:41,560 --> 03:23:45,239
to to Spirit to some of the syntax we've

5550
03:23:43,239 --> 03:23:46,960
seen thus far you start by saying the

5551
03:23:45,239 --> 03:23:48,640
name of the variable you want a single

5552
03:23:46,960 --> 03:23:51,319
equal sign and then the value you want

5553
03:23:48,640 --> 03:23:53,239
to initialize it to copying therefore

5554
03:23:51,319 --> 03:23:55,359
from right to left why because the equal

5555
03:23:53,239 --> 03:23:57,439
sign denotes again assignment from right

5556
03:23:55,359 --> 03:23:58,920
to left this isn't enough though you

5557
03:23:57,439 --> 03:24:01,600
might have the intuition already what's

5558
03:23:58,920 --> 03:24:04,439
missing probably from this line of code

5559
03:24:01,600 --> 03:24:06,199
just to create a variable so we need int

5560
03:24:04,439 --> 03:24:09,239
to make sure the computer knows that

5561
03:24:06,199 --> 03:24:11,359
this is indeed an INT and then lastly

5562
03:24:09,239 --> 03:24:12,680
semicolon as well and that now completes

5563
03:24:11,359 --> 03:24:14,520
the thought so a little more annoying

5564
03:24:12,680 --> 03:24:16,199
than scratch but we're starting to see

5565
03:24:14,520 --> 03:24:17,920
patterns here so not every piece of

5566
03:24:16,199 --> 03:24:20,040
syntax will be new all right if you

5567
03:24:17,920 --> 03:24:21,800
wanted to increment the counter by one

5568
03:24:20,040 --> 03:24:24,399
scratch uses the verb change and they

5569
03:24:21,800 --> 03:24:27,000
mean add the value to counter so if I

5570
03:24:24,399 --> 03:24:29,319
want to increment an existing variable

5571
03:24:27,000 --> 03:24:31,680
called counter this syntax is a little

5572
03:24:29,319 --> 03:24:34,160
more interesting it turns out the code

5573
03:24:31,680 --> 03:24:37,080
looks like this which almost seems like

5574
03:24:34,160 --> 03:24:39,119
a paradox like how can counter equal

5575
03:24:37,080 --> 03:24:41,600
counter plus one like that's not how

5576
03:24:39,120 --> 03:24:43,760
math works but again a single equal sign

5577
03:24:41,600 --> 03:24:45,120
is assignment from right to left so this

5578
03:24:43,760 --> 03:24:47,479
is saying take whatever the value of

5579
03:24:45,120 --> 03:24:49,920
counter is add one to it and copy that

5580
03:24:47,479 --> 03:24:53,479
value from right to left into counter

5581
03:24:49,920 --> 03:24:55,960
itself you still need the semicolon but

5582
03:24:53,479 --> 03:24:59,198
I claim you do not need to mention the

5583
03:24:55,960 --> 03:25:01,278
keyword int when updating an existing

5584
03:24:59,199 --> 03:25:04,040
variable so only when you create a

5585
03:25:01,279 --> 03:25:05,840
variable in C do you use the word string

5586
03:25:04,040 --> 03:25:07,960
or the word int or any of the others

5587
03:25:05,840 --> 03:25:10,120
will eventually see only when creating

5588
03:25:07,960 --> 03:25:11,679
it or initializing It For the First Time

5589
03:25:10,120 --> 03:25:13,720
thereafter if you want to change it it

5590
03:25:11,680 --> 03:25:15,199
just exists it's the word you gave it

5591
03:25:13,720 --> 03:25:17,438
the computer's smart enough to at least

5592
03:25:15,199 --> 03:25:20,359
remember what type it is so this line is

5593
03:25:17,439 --> 03:25:21,920
now complete turns out in code as we'll

5594
03:25:20,359 --> 03:25:23,560
see it's pretty common to want to add

5595
03:25:21,920 --> 03:25:25,080
things together increase increment

5596
03:25:23,560 --> 03:25:27,519
Things by One so there's actually

5597
03:25:25,080 --> 03:25:29,880
different Syntax for the same idea the

5598
03:25:27,520 --> 03:25:32,239
term of art here is syntactic sugar like

5599
03:25:29,880 --> 03:25:33,720
there's often in code many ways to do

5600
03:25:32,239 --> 03:25:35,800
the same thing even though at the end of

5601
03:25:33,720 --> 03:25:38,119
the day they do exactly the same

5602
03:25:35,800 --> 03:25:40,239
functionality so for instance if after a

5603
03:25:38,120 --> 03:25:42,479
few days of cs50 you find this a little

5604
03:25:40,239 --> 03:25:44,760
tedious to keep typing and some program

5605
03:25:42,479 --> 03:25:47,039
you can simplify it to just this this is

5606
03:25:44,760 --> 03:25:49,199
the syntactic sugar you can use plus

5607
03:25:47,040 --> 03:25:51,239
equals and only mention the variable

5608
03:25:49,199 --> 03:25:53,279
name once on the left and it just knows

5609
03:25:51,239 --> 03:25:57,119
that that means the previous thing it's

5610
03:25:53,279 --> 03:25:58,800
just slightly uh more uh more succinct

5611
03:25:57,120 --> 03:26:00,160
this to is such a common thing to add

5612
03:25:58,800 --> 03:26:01,720
one to a value and it doesn't have to be

5613
03:26:00,160 --> 03:26:03,960
one but in this case it is but if it is

5614
03:26:01,720 --> 03:26:07,519
indeed one you can further tighten the

5615
03:26:03,960 --> 03:26:09,800
code up to just do this counter Plus+ so

5616
03:26:07,520 --> 03:26:12,359
anytime in C you see plus plus it means

5617
03:26:09,800 --> 03:26:14,319
literally adding one to that particular

5618
03:26:12,359 --> 03:26:16,160
variable there's other ways to do this

5619
03:26:14,319 --> 03:26:18,519
in the other direction if you want to

5620
03:26:16,160 --> 03:26:20,439
subtract one from a variable you can use

5621
03:26:18,520 --> 03:26:22,640
any of the previous syntax using a minus

5622
03:26:20,439 --> 03:26:25,239
sign instead of Plus or you can more

5623
03:26:22,640 --> 03:26:27,760
succinctly do counter minus minus this

5624
03:26:25,239 --> 03:26:30,680
is the way a typical C programmer would

5625
03:26:27,760 --> 03:26:33,439
do this all right so if we have now

5626
03:26:30,680 --> 03:26:35,520
variables let's go and solve the meowing

5627
03:26:33,439 --> 03:26:37,120
with loops so in scratch we saw Loops

5628
03:26:35,520 --> 03:26:41,120
like this this of course had the cat

5629
03:26:37,120 --> 03:26:42,279
meow three times how do we do this in C

5630
03:26:41,120 --> 03:26:45,800
now this this is where things get a

5631
03:26:42,279 --> 03:26:47,760
little more uh involved codewise but if

5632
03:26:45,800 --> 03:26:50,640
you understand each and every line it

5633
03:26:47,760 --> 03:26:54,160
will follow logically what's going on so

5634
03:26:50,640 --> 03:26:57,119
here I claim is one way to implement a

5635
03:26:54,160 --> 03:26:59,119
loop that iterates three times in C and

5636
03:26:57,120 --> 03:27:01,120
this is kind of ridiculous right like we

5637
03:26:59,120 --> 03:27:03,479
went from two super simple puzzle pieces

5638
03:27:01,120 --> 03:27:05,000
like this to my God like it's 1 2 3 four

5639
03:27:03,479 --> 03:27:06,720
five six lines of code all of which are

5640
03:27:05,000 --> 03:27:08,640
pretty involved so like that escalated

5641
03:27:06,720 --> 03:27:10,119
quickly but what's each line doing and

5642
03:27:08,640 --> 03:27:12,960
we'll see other ways to do this more

5643
03:27:10,120 --> 03:27:16,000
simply so we're izing a variable called

5644
03:27:12,960 --> 03:27:17,759
counter to three just like before why

5645
03:27:16,000 --> 03:27:19,800
well what does it mean to Loop or to

5646
03:27:17,760 --> 03:27:21,800
repeat something three times well it's

5647
03:27:19,800 --> 03:27:23,720
kind of like doing something three times

5648
03:27:21,800 --> 03:27:25,239
and then do it and then count down and

5649
03:27:23,720 --> 03:27:28,239
then do it and then count down and then

5650
03:27:25,239 --> 03:27:29,800
do it until you're all out of counts so

5651
03:27:28,239 --> 03:27:31,880
this is declaring a variable called

5652
03:27:29,800 --> 03:27:34,840
counter setting it equal to three then

5653
03:27:31,880 --> 03:27:37,319
I'm inducing a loop in C which is

5654
03:27:34,840 --> 03:27:39,040
similar in spirit to repeat three but

5655
03:27:37,319 --> 03:27:40,359
you have to do more of the math yourself

5656
03:27:39,040 --> 03:27:41,880
so I'm asking the question in

5657
03:27:40,359 --> 03:27:44,840
parentheses

5658
03:27:41,880 --> 03:27:47,239
while counter is greater than zero what

5659
03:27:44,840 --> 03:27:49,720
do I want to do well Pur the indentation

5660
03:27:47,239 --> 03:27:51,880
inside the curly braces I want to meow

5661
03:27:49,720 --> 03:27:54,239
one time and then to be clear what's

5662
03:27:51,880 --> 03:27:57,399
this last line of code doing if counter

5663
03:27:54,239 --> 03:27:59,439
starts off at three this makes it two by

5664
03:27:57,399 --> 03:28:01,920
subtracting one from it then what

5665
03:27:59,439 --> 03:28:03,800
happens by nature of a loop just like in

5666
03:28:01,920 --> 03:28:05,160
scratch it kind of knows to go back and

5667
03:28:03,800 --> 03:28:07,759
forth even though there's nice pretty

5668
03:28:05,160 --> 03:28:10,560
arrow in scratch and there isn't here C

5669
03:28:07,760 --> 03:28:13,040
knows to do this again and again and

5670
03:28:10,560 --> 03:28:15,439
again con stantly asking this question

5671
03:28:13,040 --> 03:28:17,080
and then updating this value at the end

5672
03:28:15,439 --> 03:28:20,359
so if I highlight just a few of these

5673
03:28:17,080 --> 03:28:21,760
steps the variable starts off at three

5674
03:28:20,359 --> 03:28:23,720
and actually let me simplify two I

5675
03:28:21,760 --> 03:28:25,479
claimed earlier that uh when using

5676
03:28:23,720 --> 03:28:28,319
single variables people very often just

5677
03:28:25,479 --> 03:28:29,519
call it I for INT or c for Char or s for

5678
03:28:28,319 --> 03:28:31,278
string unless you have multiple

5679
03:28:29,520 --> 03:28:32,800
variables so let me tighten the code up

5680
03:28:31,279 --> 03:28:34,560
and this already makes it look a little

5681
03:28:32,800 --> 03:28:37,278
more tolerable let me actually tighten

5682
03:28:34,560 --> 03:28:39,519
it up further and one more step so now

5683
03:28:37,279 --> 03:28:41,520
this is about as tight as succinct as

5684
03:28:39,520 --> 03:28:42,800
you can make this code at the moment so

5685
03:28:41,520 --> 03:28:44,359
what's actually going to happen here

5686
03:28:42,800 --> 03:28:46,759
well the first line of code executes and

5687
03:28:44,359 --> 03:28:48,880
that initializes I to 3 then we check

5688
03:28:46,760 --> 03:28:50,880
the condition while I is greater than

5689
03:28:48,880 --> 03:28:52,960
zero is I greater than zero we'll per my

5690
03:28:50,880 --> 03:28:55,679
three fingers obviously so we print out

5691
03:28:52,960 --> 03:28:58,519
meow on the screen then we subtract one

5692
03:28:55,680 --> 03:29:00,960
from I at which point now we have two as

5693
03:28:58,520 --> 03:29:02,760
the value of I then the code goes back

5694
03:29:00,960 --> 03:29:04,399
to the condition and notice the

5695
03:29:02,760 --> 03:29:06,880
condition there is in parentheses that's

5696
03:29:04,399 --> 03:29:09,080
another Boolean expression so Loops can

5697
03:29:06,880 --> 03:29:10,759
use Boolean Expressions just like

5698
03:29:09,080 --> 03:29:12,399
conditionals use Boolean Expressions to

5699
03:29:10,760 --> 03:29:14,160
make decis ision the loop though is

5700
03:29:12,399 --> 03:29:16,080
deciding not whether to do this thing or

5701
03:29:14,160 --> 03:29:18,439
that but whether to do the same thing

5702
03:29:16,080 --> 03:29:20,319
again and again and again and as it

5703
03:29:18,439 --> 03:29:22,399
ticks through the code one line after

5704
03:29:20,319 --> 03:29:26,000
the other it's ultimately going to get

5705
03:29:22,399 --> 03:29:28,599
down to uh one and then zero and then

5706
03:29:26,000 --> 03:29:31,840
stop so put another way came with some

5707
03:29:28,600 --> 03:29:33,880
props here so suppose uh this bowl here

5708
03:29:31,840 --> 03:29:36,160
is your variable and you initialize it

5709
03:29:33,880 --> 03:29:38,160
to three with like three stress balls

5710
03:29:36,160 --> 03:29:39,960
you can do something three times right

5711
03:29:38,160 --> 03:29:41,319
if I want to give out three stress balls

5712
03:29:39,960 --> 03:29:42,880
here's your chance for free stress ball

5713
03:29:41,319 --> 03:29:45,039
without having to answer any questions

5714
03:29:42,880 --> 03:29:46,920
any okay there we go so here we go

5715
03:29:45,040 --> 03:29:50,720
subtracting one from my variable I'm

5716
03:29:46,920 --> 03:29:52,000
left with two uh oh my God all right uh

5717
03:29:50,720 --> 03:29:56,599
don't tell

5718
03:29:52,000 --> 03:29:59,199
Sounders oh I'm sorry oh okay that ended

5719
03:29:56,600 --> 03:30:01,160
poorly apologies all right but now the

5720
03:29:59,199 --> 03:30:03,160
educational point though is that my

5721
03:30:01,160 --> 03:30:04,680
variable has been uh decremented further

5722
03:30:03,160 --> 03:30:07,039
to just have I'm not throwing that far

5723
03:30:04,680 --> 03:30:08,600
again I can't do this in here we go all

5724
03:30:07,040 --> 03:30:11,520
right here we go and one final

5725
03:30:08,600 --> 03:30:13,640
subtraction and now our variable is left

5726
03:30:11,520 --> 03:30:15,239
so we have three stress balls there and

5727
03:30:13,640 --> 03:30:17,000
that's all a variable is right it's some

5728
03:30:15,239 --> 03:30:19,319
kind of storage it's actually of course

5729
03:30:17,000 --> 03:30:21,080
implemented in the computer's memory but

5730
03:30:19,319 --> 03:30:23,039
metaphorically it's really just like a

5731
03:30:21,080 --> 03:30:24,760
bow with some values and every time you

5732
03:30:23,040 --> 03:30:26,560
add or in this case subtract you're just

5733
03:30:24,760 --> 03:30:28,720
changing the value of that variable and

5734
03:30:26,560 --> 03:30:30,880
then the code meanwhile of course in

5735
03:30:28,720 --> 03:30:32,399
parenthesis is just checking is the bow

5736
03:30:30,880 --> 03:30:37,080
empty is the bowl empty is the bowl

5737
03:30:32,399 --> 03:30:38,840
empty AKA is I greater than zero or not

5738
03:30:37,080 --> 03:30:41,800
any questions on how we've implemented

5739
03:30:38,840 --> 03:30:44,760
Loops in this way

5740
03:30:41,800 --> 03:30:47,599
and I I'll you a stress ball after class

5741
03:30:44,760 --> 03:30:50,680
questions on Loops all right so it turns

5742
03:30:47,600 --> 03:30:52,359
out this is kind of ugly and like this

5743
03:30:50,680 --> 03:30:54,359
really starts to take the fun out of

5744
03:30:52,359 --> 03:30:56,199
programming uh when you have to like

5745
03:30:54,359 --> 03:30:57,640
write out this uh sequence of steps so

5746
03:30:56,199 --> 03:30:59,439
it turns out there's other ways to do

5747
03:30:57,640 --> 03:31:00,800
this but first let's see logically how

5748
03:30:59,439 --> 03:31:03,160
else you might Express this because it's

5749
03:31:00,800 --> 03:31:05,358
a little weird that we keep using zero

5750
03:31:03,160 --> 03:31:07,560
so the one other way to do this would be

5751
03:31:05,359 --> 03:31:09,760
to invert the logic you could absolutely

5752
03:31:07,560 --> 03:31:12,160
start with your variable call it I equal

5753
03:31:09,760 --> 03:31:15,359
to one and then you ask the question is

5754
03:31:12,160 --> 03:31:17,640
I less than or equal to three and notice

5755
03:31:15,359 --> 03:31:19,880
a bit of new syntax here on your uh

5756
03:31:17,640 --> 03:31:21,760
typical keyboard there is no less than

5757
03:31:19,880 --> 03:31:23,160
or equal sign or greater than or equal

5758
03:31:21,760 --> 03:31:25,680
sign like you would write in math class

5759
03:31:23,160 --> 03:31:28,080
with one over the other and so in C you

5760
03:31:25,680 --> 03:31:30,399
use two characters less than followed by

5761
03:31:28,080 --> 03:31:32,359
an equal sign or if appropriate greater

5762
03:31:30,399 --> 03:31:34,880
than followed by an equal sign and that

5763
03:31:32,359 --> 03:31:37,160
logically captures that idea so notice

5764
03:31:34,880 --> 03:31:39,080
that I'm kind of changing my questions

5765
03:31:37,160 --> 03:31:41,479
I'm initializing I to one and then I'm

5766
03:31:39,080 --> 03:31:43,399
going to increment It ultimately to two

5767
03:31:41,479 --> 03:31:44,960
and then three but because I'm doing

5768
03:31:43,399 --> 03:31:48,278
less than or equal to it's still going

5769
03:31:44,960 --> 03:31:50,198
to go from 1 to three so that works too

5770
03:31:48,279 --> 03:31:53,359
we could similarly do this yet another

5771
03:31:50,199 --> 03:31:56,439
way we could initialize I to zero and

5772
03:31:53,359 --> 03:31:58,479
then we could say well I is less than

5773
03:31:56,439 --> 03:32:00,239
three and keep incrementing it and I

5774
03:31:58,479 --> 03:32:02,560
showed this last form is actually the

5775
03:32:00,239 --> 03:32:04,439
most canonical like it might be the most

5776
03:32:02,560 --> 03:32:06,760
humanlike to think in terms of 1 to

5777
03:32:04,439 --> 03:32:09,279
three it might be the most stress ball

5778
03:32:06,760 --> 03:32:11,920
like to think in terms of three to zero

5779
03:32:09,279 --> 03:32:13,760
counting down but Ty typically the go-to

5780
03:32:11,920 --> 03:32:16,239
Syntax for most programmers once you get

5781
03:32:13,760 --> 03:32:18,680
comfortable counting from zero is to

5782
03:32:16,239 --> 03:32:21,279
always start counting from zero and

5783
03:32:18,680 --> 03:32:23,399
count up to less than the value you're

5784
03:32:21,279 --> 03:32:25,199
counting up to so it would be incorrect

5785
03:32:23,399 --> 03:32:27,760
why to change this to less than or equal

5786
03:32:25,199 --> 03:32:29,000
to three here what would happen if I

5787
03:32:27,760 --> 03:32:31,920
Chang the less than to less than or

5788
03:32:29,000 --> 03:32:33,920
equal to it'll me out twice yeah it'll

5789
03:32:31,920 --> 03:32:35,600
out an extra a fourth time in fact total

5790
03:32:33,920 --> 03:32:38,359
right because you'll start at zero then

5791
03:32:35,600 --> 03:32:40,399
one then two then three and less than or

5792
03:32:38,359 --> 03:32:43,040
equal to three sorry three will give you

5793
03:32:40,399 --> 03:32:45,680
the fourth time so we do want it indeed

5794
03:32:43,040 --> 03:32:48,000
to be just a single less than all right

5795
03:32:45,680 --> 03:32:49,439
so now that we have those options let me

5796
03:32:48,000 --> 03:32:50,960
just give you one other and this one

5797
03:32:49,439 --> 03:32:52,640
takes a little more getting used to as

5798
03:32:50,960 --> 03:32:54,759
well but it's probably the more common

5799
03:32:52,640 --> 03:32:57,560
way to write this let me go ahead and

5800
03:32:54,760 --> 03:33:00,040
propose that we implement this as

5801
03:32:57,560 --> 03:33:04,479
follows let me go back to my code here

5802
03:33:00,040 --> 03:33:06,800
let me go into my several printfs

5803
03:33:04,479 --> 03:33:08,920
getting rid of all but one of them

5804
03:33:06,800 --> 03:33:12,000
ultimately and let's implement this in

5805
03:33:08,920 --> 03:33:16,279
code so let's do in I get that's zero

5806
03:33:12,000 --> 03:33:18,800
how about then while I is less than

5807
03:33:16,279 --> 03:33:22,800
three then let's go ahead and say print

5808
03:33:18,800 --> 03:33:26,880
F quote unquote meow uh mellow meow back

5809
03:33:22,800 --> 03:33:28,080
sln and then we have to do I minus minus

5810
03:33:26,880 --> 03:33:30,438
or plus

5811
03:33:28,080 --> 03:33:33,160
plus so plus plus because we're starting

5812
03:33:30,439 --> 03:33:35,439
at zero and going up two but not through

5813
03:33:33,160 --> 03:33:38,239
three so let me go ahead now and make

5814
03:33:35,439 --> 03:33:40,000
meow after clearing my terminal SL meow

5815
03:33:38,239 --> 03:33:42,960
and it's still just as correct but it's

5816
03:33:40,000 --> 03:33:44,920
a little more uh it's a little better

5817
03:33:42,960 --> 03:33:47,000
designed why because now if I want to

5818
03:33:44,920 --> 03:33:48,840
change it from three to 30 times for

5819
03:33:47,000 --> 03:33:52,279
instance I can change it there I can

5820
03:33:48,840 --> 03:33:53,920
recompile my code I can do/ meow and

5821
03:33:52,279 --> 03:33:56,239
done I don't have to copy and paste it

5822
03:33:53,920 --> 03:33:58,000
27 more times to get that effect and I

5823
03:33:56,239 --> 03:34:00,319
can even change what the word is by

5824
03:33:58,000 --> 03:34:02,000
changing it in just one location but it

5825
03:34:00,319 --> 03:34:04,278
turns out there's other ways to do this

5826
03:34:02,000 --> 03:34:07,239
too and let me propose that we introduce

5827
03:34:04,279 --> 03:34:08,760
you to what's called a for loop as well

5828
03:34:07,239 --> 03:34:10,840
so if you want to repeat something three

5829
03:34:08,760 --> 03:34:13,080
times you can absolutely take the while

5830
03:34:10,840 --> 03:34:15,239
Loop approach that we just saw or you

5831
03:34:13,080 --> 03:34:16,960
can do this and this one's a little

5832
03:34:15,239 --> 03:34:19,160
takes a little more getting used to but

5833
03:34:16,960 --> 03:34:21,759
it kind of consolidates into one line

5834
03:34:19,160 --> 03:34:24,640
all of the same logic so notice we have

5835
03:34:21,760 --> 03:34:26,239
the keyword four here and four is just a

5836
03:34:24,640 --> 03:34:28,960
a preposition in this case that

5837
03:34:26,239 --> 03:34:32,039
generally implies here comes a loop

5838
03:34:28,960 --> 03:34:33,640
inside of parenthesis here is not just a

5839
03:34:32,040 --> 03:34:35,920
Boolean expression and this where things

5840
03:34:33,640 --> 03:34:37,800
get a little weird there's three things

5841
03:34:35,920 --> 03:34:39,720
to the left of the semicolon in the

5842
03:34:37,800 --> 03:34:42,080
middle of the two semicolons and to the

5843
03:34:39,720 --> 03:34:43,599
right of the semicolon this is really

5844
03:34:42,080 --> 03:34:45,520
the only other context we'll see

5845
03:34:43,600 --> 03:34:47,319
semicolons and it's weird normally it's

5846
03:34:45,520 --> 03:34:48,800
been at the end of the line now it's two

5847
03:34:47,319 --> 03:34:50,760
of them in the middle of the line but

5848
03:34:48,800 --> 03:34:53,160
this is the way humans decided years ago

5849
03:34:50,760 --> 03:34:56,479
to do it so what is this doing almost

5850
03:34:53,160 --> 03:34:59,680
the same thing it is going to initialize

5851
03:34:56,479 --> 03:35:03,239
a variable called I to zero it's going

5852
03:34:59,680 --> 03:35:05,120
to then check if it's less than three

5853
03:35:03,239 --> 03:35:07,720
it's then going to do what's ever in the

5854
03:35:05,120 --> 03:35:10,120
curly braces is and it's lastly going to

5855
03:35:07,720 --> 03:35:12,960
increment I and repeat so just

5856
03:35:10,120 --> 03:35:15,199
highlighting in turn at first I is

5857
03:35:12,960 --> 03:35:17,640
initialized to zero just like before

5858
03:35:15,199 --> 03:35:19,800
then this condition is checked this is a

5859
03:35:17,640 --> 03:35:22,039
Boolean expression yes or no true or

5860
03:35:19,800 --> 03:35:23,479
false will be its answer and if I is

5861
03:35:22,040 --> 03:35:25,399
less than three which it should be once

5862
03:35:23,479 --> 03:35:28,039
it starts at zero well then we're going

5863
03:35:25,399 --> 03:35:29,800
to go ahead and print out meow then I is

5864
03:35:28,040 --> 03:35:32,640
going to get incremented so it starts at

5865
03:35:29,800 --> 03:35:34,800
zero it goes now to one at that point

5866
03:35:32,640 --> 03:35:37,080
the Boolean expression is checked again

5867
03:35:34,800 --> 03:35:40,000
so you don't keep changing I back to

5868
03:35:37,080 --> 03:35:41,960
zero that first step happens only once

5869
03:35:40,000 --> 03:35:43,960
but now you repeat through those three

5870
03:35:41,960 --> 03:35:46,438
other highlights I check if I is less

5871
03:35:43,960 --> 03:35:49,239
than three it is so I print out meow it

5872
03:35:46,439 --> 03:35:51,199
then increments I I check if I now two

5873
03:35:49,239 --> 03:35:54,119
is less than three it is I print out

5874
03:35:51,199 --> 03:35:56,319
meow I gets incremented I now check is I

5875
03:35:54,120 --> 03:35:58,439
less than three no it's not because

5876
03:35:56,319 --> 03:36:00,560
three is not less than three and so the

5877
03:35:58,439 --> 03:36:03,120
whole thing stops and whatever code is

5878
03:36:00,560 --> 03:36:04,840
below this curly brace if any starts

5879
03:36:03,120 --> 03:36:07,439
executing instead just like in scratch

5880
03:36:04,840 --> 03:36:10,080
you break out of the loop and the the

5881
03:36:07,439 --> 03:36:13,720
puzzle piece being hugged questions then

5882
03:36:10,080 --> 03:36:19,399
about this alternative Syntax

5883
03:36:13,720 --> 03:36:19,399
for Loops AKA a four

5884
03:36:20,279 --> 03:36:25,560
Loop sorry say

5885
03:36:23,319 --> 03:36:27,720
again yeah can I explain again why it

5886
03:36:25,560 --> 03:36:29,640
doesn't reset to zero honestly just

5887
03:36:27,720 --> 03:36:31,640
because like this was the syntax they

5888
03:36:29,640 --> 03:36:33,840
chose this first part before the first

5889
03:36:31,640 --> 03:36:35,519
semicolon is only executed once just

5890
03:36:33,840 --> 03:36:38,359
because that's how it's designed

5891
03:36:35,520 --> 03:36:40,359
everything else Cycles again and again

5892
03:36:38,359 --> 03:36:41,960
and this is just an alternative syntax

5893
03:36:40,359 --> 03:36:43,439
to to using the slightly more lines of

5894
03:36:41,960 --> 03:36:45,399
code it was like six lines of code using

5895
03:36:43,439 --> 03:36:47,319
the while loop logically it's the same

5896
03:36:45,399 --> 03:36:48,800
thing programmers once they get more

5897
03:36:47,319 --> 03:36:50,399
comfortable tend to prefer this because

5898
03:36:48,800 --> 03:36:55,438
it just expresses all your same thoughts

5899
03:36:50,399 --> 03:36:57,439
more succinctly that's all yeah okay so

5900
03:36:55,439 --> 03:36:59,319
let's just work this into my meow

5901
03:36:57,439 --> 03:37:00,960
example let me go back to the code here

5902
03:36:59,319 --> 03:37:02,560
and notice indeed if I highlight all

5903
03:37:00,960 --> 03:37:04,080
these lines I think we can tighten this

5904
03:37:02,560 --> 03:37:08,640
up let me get rid of all of those and

5905
03:37:04,080 --> 03:37:10,520
instead do four in I equals 0 and I'm

5906
03:37:08,640 --> 03:37:13,720
saying equals most programmers would say

5907
03:37:10,520 --> 03:37:16,399
gets so in I gets zero means assignment

5908
03:37:13,720 --> 03:37:19,800
the word get now I'm going to do I is

5909
03:37:16,399 --> 03:37:22,278
less than three i+ plus now in here I'm

5910
03:37:19,800 --> 03:37:25,399
going to do my print F quote unquote

5911
03:37:22,279 --> 03:37:26,600
meow back sln and so it's indeed a

5912
03:37:25,399 --> 03:37:28,039
little tighter I mean two of the lines

5913
03:37:26,600 --> 03:37:30,479
are just curly braces there's really

5914
03:37:28,040 --> 03:37:32,160
only two juicy lines of code now let me

5915
03:37:30,479 --> 03:37:35,319
go ahead and do make

5916
03:37:32,160 --> 03:37:37,279
meow meow and again we're back in

5917
03:37:35,319 --> 03:37:39,239
business with three of them printing

5918
03:37:37,279 --> 03:37:41,000
only all right there's one last

5919
03:37:39,239 --> 03:37:44,080
structure we should explore just cuz

5920
03:37:41,000 --> 03:37:46,120
it's sometimes useful this was a forever

5921
03:37:44,080 --> 03:37:48,160
block and this would be a little weird

5922
03:37:46,120 --> 03:37:49,920
in scratch to just say meow Forever at

5923
03:37:48,160 --> 03:37:51,479
least without waiting but there is

5924
03:37:49,920 --> 03:37:54,479
indeed a forever Block in scratch which

5925
03:37:51,479 --> 03:37:56,358
means do the following forever and I

5926
03:37:54,479 --> 03:37:57,920
proposed I think verbally last week's at

5927
03:37:56,359 --> 03:37:59,840
least one example where this is useful

5928
03:37:57,920 --> 03:38:01,560
meowing forever little annoying but can

5929
03:37:59,840 --> 03:38:03,520
you think of common cases where you

5930
03:38:01,560 --> 03:38:07,600
might want to write code or use a

5931
03:38:03,520 --> 03:38:10,479
program that Loops forever

5932
03:38:07,600 --> 03:38:12,080
yeah yeah playing music like Spotify

5933
03:38:10,479 --> 03:38:14,039
playlist just repeating again and again

5934
03:38:12,080 --> 03:38:16,039
would be some kind of loop for

5935
03:38:14,040 --> 03:38:17,199
collisions checking for collisions and

5936
03:38:16,040 --> 03:38:21,080
scratch so seeing if something's

5937
03:38:17,199 --> 03:38:21,080
bouncing off the wall or another Sprite

5938
03:38:22,520 --> 03:38:27,000
yeah checking for input so yeah get

5939
03:38:25,040 --> 03:38:28,680
string is essentially just waiting there

5940
03:38:27,000 --> 03:38:31,920
forever for me to type in some input

5941
03:38:28,680 --> 03:38:33,640
until I do the time checking the time

5942
03:38:31,920 --> 03:38:35,479
and actually maintaining like human time

5943
03:38:33,640 --> 03:38:36,399
like a wall clock behind you was that

5944
03:38:35,479 --> 03:38:39,519
the

5945
03:38:36,399 --> 03:38:40,960
same okay checking the time and one more

5946
03:38:39,520 --> 03:38:42,520
detecting a key press too like in

5947
03:38:40,960 --> 03:38:44,358
scratch just waiting for some kind of

5948
03:38:42,520 --> 03:38:45,840
event to happen just like on a phone or

5949
03:38:44,359 --> 03:38:47,239
a browser and so there's so many

5950
03:38:45,840 --> 03:38:48,960
examples where you might want to do

5951
03:38:47,239 --> 03:38:51,319
something forever just so you've seen

5952
03:38:48,960 --> 03:38:53,720
the corresponding C building block it's

5953
03:38:51,319 --> 03:38:56,800
a little weird but this is probably the

5954
03:38:53,720 --> 03:38:58,760
most canonical way to do it in C if you

5955
03:38:56,800 --> 03:39:00,560
want to print meow forever which would

5956
03:38:58,760 --> 03:39:02,120
be a little crazy because it literally

5957
03:39:00,560 --> 03:39:04,039
print and take over your computer

5958
03:39:02,120 --> 03:39:06,479
printing forever meow you would

5959
03:39:04,040 --> 03:39:08,479
generally do it like this why well a

5960
03:39:06,479 --> 03:39:09,880
while loop expects in parentheses a

5961
03:39:08,479 --> 03:39:11,760
Boolean expression and a Boolean

5962
03:39:09,880 --> 03:39:13,720
expression is again a yes no a true

5963
03:39:11,760 --> 03:39:16,160
false question but if you want the

5964
03:39:13,720 --> 03:39:18,760
answer to that question always to be yes

5965
03:39:16,160 --> 03:39:20,800
or really always to be true turns out in

5966
03:39:18,760 --> 03:39:23,880
C in a lot of languages well then just

5967
03:39:20,800 --> 03:39:25,720
say true because true T R is never going

5968
03:39:23,880 --> 03:39:27,599
to change magically to false I mean it's

5969
03:39:25,720 --> 03:39:29,960
just a special word in the programming

5970
03:39:27,600 --> 03:39:32,880
language so by saying while true it just

5971
03:39:29,960 --> 03:39:35,198
means do the following forever another

5972
03:39:32,880 --> 03:39:37,880
common Paradigm before true and false

5973
03:39:35,199 --> 03:39:41,000
became common place would be to do uh

5974
03:39:37,880 --> 03:39:43,438
this instead change uh while one you

5975
03:39:41,000 --> 03:39:45,600
might see in online examples and texts

5976
03:39:43,439 --> 03:39:48,880
and the like while one is really the

5977
03:39:45,600 --> 03:39:50,840
same thing any value that is zero is

5978
03:39:48,880 --> 03:39:54,198
generally interpreted as false by a

5979
03:39:50,840 --> 03:39:56,439
computer any value that is one or any

5980
03:39:54,199 --> 03:39:58,800
other nonzero value is generally

5981
03:39:56,439 --> 03:40:00,600
interpreted as true and so this too

5982
03:39:58,800 --> 03:40:02,840
would have the same effect saying while

5983
03:40:00,600 --> 03:40:04,800
true or while one generally speaking

5984
03:40:02,840 --> 03:40:06,880
while true is perhaps a little clearer

5985
03:40:04,800 --> 03:40:09,039
these days now meowing forever is not a

5986
03:40:06,880 --> 03:40:11,039
good thing but suppose I did that by

5987
03:40:09,040 --> 03:40:13,160
intent or by accident well let's try

5988
03:40:11,040 --> 03:40:14,439
this so here I'll go into my code I'm

5989
03:40:13,160 --> 03:40:17,600
going to get rid of my for Loop and

5990
03:40:14,439 --> 03:40:21,120
change my while loop to uh how about

5991
03:40:17,600 --> 03:40:24,960
true um and in this case here well we'll

5992
03:40:21,120 --> 03:40:27,160
keep it let's do this make meow enter

5993
03:40:24,960 --> 03:40:28,960
and you'll see this use of Undeclared

5994
03:40:27,160 --> 03:40:31,960
identifier or true this is actually

5995
03:40:28,960 --> 03:40:33,839
hinting at my mention that the old way

5996
03:40:31,960 --> 03:40:36,560
was zero and one nowadays you could say

5997
03:40:33,840 --> 03:40:38,960
true or false but true and false are

5998
03:40:36,560 --> 03:40:41,239
themselves special words that you have

5999
03:40:38,960 --> 03:40:43,278
to include and it turns out if you want

6000
03:40:41,239 --> 03:40:44,600
to use special Boolean values like this

6001
03:40:43,279 --> 03:40:47,479
there's another header file we haven't

6002
03:40:44,600 --> 03:40:50,359
seen called standard bu that essentially

6003
03:40:47,479 --> 03:40:52,800
creates true and false as keywords

6004
03:40:50,359 --> 03:40:54,800
alternatively cs50 includes that same

6005
03:40:52,800 --> 03:40:56,920
file so it's more common in cs50 to see

6006
03:40:54,800 --> 03:40:59,358
it like this now if I clear my terminal

6007
03:40:56,920 --> 03:41:02,640
window and do make meow and then do/

6008
03:40:59,359 --> 03:41:04,600
meow and hit enter well unfortunately

6009
03:41:02,640 --> 03:41:06,880
this isn't the best thing to do uh

6010
03:41:04,600 --> 03:41:09,520
infinitely when you're in the cloud

6011
03:41:06,880 --> 03:41:12,160
using a browser this is indeed a a

6012
03:41:09,520 --> 03:41:14,439
browser full screened here um this means

6013
03:41:12,160 --> 03:41:16,720
I'm sending millions of meows over the

6014
03:41:14,439 --> 03:41:17,760
internet to my computer here uh so this

6015
03:41:16,720 --> 03:41:19,399
will happen to you at some point

6016
03:41:17,760 --> 03:41:21,040
probably not with meow but you'll lose

6017
03:41:19,399 --> 03:41:22,119
control over your terminal window why

6018
03:41:21,040 --> 03:41:23,239
because you screwed up and like you have

6019
03:41:22,120 --> 03:41:24,479
an infinite Loop you didn't really

6020
03:41:23,239 --> 03:41:26,880
intend it or maybe you did you were

6021
03:41:24,479 --> 03:41:30,640
curious to see what happens what do you

6022
03:41:26,880 --> 03:41:32,599
do like when when does the meowing stop

6023
03:41:30,640 --> 03:41:35,319
what recourse do we have here all right

6024
03:41:32,600 --> 03:41:36,600
well control c will be your friend

6025
03:41:35,319 --> 03:41:38,880
sometimes you have to hit it a bunch in

6026
03:41:36,600 --> 03:41:41,520
a cloud environment but control C for

6027
03:41:38,880 --> 03:41:43,880
cancel with will interrupt a program

6028
03:41:41,520 --> 03:41:45,359
that's running and I promise that almost

6029
03:41:43,880 --> 03:41:47,640
all of you will at some point

6030
03:41:45,359 --> 03:41:49,479
accidentally introduce an infinite Loop

6031
03:41:47,640 --> 03:41:51,000
because you're math is slightly off when

6032
03:41:49,479 --> 03:41:53,198
in doubt click in the terminal window

6033
03:41:51,000 --> 03:41:55,080
and hit contrl C sometimes multiple

6034
03:41:53,199 --> 03:41:56,760
times and that will indeed cancel

6035
03:41:55,080 --> 03:41:58,520
whatever is happening there in this case

6036
03:41:56,760 --> 03:42:01,960
I might have intended it but sometimes

6037
03:41:58,520 --> 03:42:03,680
it's not in fact intended all right so

6038
03:42:01,960 --> 03:42:05,839
we've been taking for granted this whole

6039
03:42:03,680 --> 03:42:09,159
graphical user interface for some time

6040
03:42:05,840 --> 03:42:10,560
and indeed uh the uh commands that I'm

6041
03:42:09,159 --> 03:42:11,920
typing and the buttons I'm clicking and

6042
03:42:10,560 --> 03:42:14,239
let me just give you a better sense of

6043
03:42:11,920 --> 03:42:16,560
what it is we are using underneath the

6044
03:42:14,239 --> 03:42:18,720
hood this whole time um namely an

6045
03:42:16,560 --> 03:42:20,399
operating system called Linux so I keep

6046
03:42:18,720 --> 03:42:22,039
alluding verbally of course to Macs and

6047
03:42:20,399 --> 03:42:24,399
PCs because almost all of us are running

6048
03:42:22,040 --> 03:42:26,239
Mac OS or Windows on our desktops or

6049
03:42:24,399 --> 03:42:27,560
laptops nowadays but there's lots of

6050
03:42:26,239 --> 03:42:29,279
other operating systems out there and

6051
03:42:27,560 --> 03:42:32,278
one of the most popular one is called

6052
03:42:29,279 --> 03:42:34,760
Linux and Linux is very often used on

6053
03:42:32,279 --> 03:42:36,720
servers nowadays companies that host

6054
03:42:34,760 --> 03:42:38,920
email companies that host websites or

6055
03:42:36,720 --> 03:42:40,560
apps more generally um certain computer

6056
03:42:38,920 --> 03:42:42,239
scientists or computer science students

6057
03:42:40,560 --> 03:42:44,439
often like to brag that they run Linux

6058
03:42:42,239 --> 03:42:46,920
just because that's a thing um but it is

6059
03:42:44,439 --> 03:42:49,680
really just an alternative to Mac OS or

6060
03:42:46,920 --> 03:42:51,680
windows that provides you with both a

6061
03:42:49,680 --> 03:42:54,199
guey if you want it but also and

6062
03:42:51,680 --> 03:42:56,960
especially a command line environment

6063
03:42:54,199 --> 03:42:58,680
now fun fact Windows and Mac OS do have

6064
03:42:56,960 --> 03:43:00,519
terminal windows or the equivalent

6065
03:42:58,680 --> 03:43:02,279
thereof and eventually you might uh use

6066
03:43:00,520 --> 03:43:04,920
it on your own Mac or PC to solve some

6067
03:43:02,279 --> 03:43:06,520
problem but Linux is really known for

6068
03:43:04,920 --> 03:43:08,479
along with other operating systems it's

6069
03:43:06,520 --> 03:43:10,880
command line environment which again I

6070
03:43:08,479 --> 03:43:13,438
distinguished earlier from Guy as a

6071
03:43:10,880 --> 03:43:16,119
command line interface or CLI and that

6072
03:43:13,439 --> 03:43:18,600
refers really to the terminal window so

6073
03:43:16,120 --> 03:43:20,640
if I go back to VSS code here and let me

6074
03:43:18,600 --> 03:43:22,960
in fact go ahead and close my tab and

6075
03:43:20,640 --> 03:43:24,880
focus entirely on the terminal window

6076
03:43:22,960 --> 03:43:27,479
this terminal window is really just your

6077
03:43:24,880 --> 03:43:29,800
command line interface to your very own

6078
03:43:27,479 --> 03:43:32,000
server in the cloud the term of art here

6079
03:43:29,800 --> 03:43:33,479
is you each will have your own container

6080
03:43:32,000 --> 03:43:35,399
in the cloud which is like your own

6081
03:43:33,479 --> 03:43:37,560
computer running somewhere on the

6082
03:43:35,399 --> 03:43:39,198
internet with your own username and

6083
03:43:37,560 --> 03:43:41,439
password to which you have access and

6084
03:43:39,199 --> 03:43:43,239
your own hard drive if you will your own

6085
03:43:41,439 --> 03:43:45,439
home folder that has all of your files

6086
03:43:43,239 --> 03:43:47,359
for the class and it's only accessible

6087
03:43:45,439 --> 03:43:49,560
to you unless you enable live sharing

6088
03:43:47,359 --> 03:43:51,319
thereof so when you're typing commands

6089
03:43:49,560 --> 03:43:53,399
here it looks like you're typing them of

6090
03:43:51,319 --> 03:43:56,439
course on your own Mac or PC but they're

6091
03:43:53,399 --> 03:43:58,760
actually being sent over the browser to

6092
03:43:56,439 --> 03:44:01,640
uh some server in the cloud where you

6093
03:43:58,760 --> 03:44:04,319
are controlling really your own account

6094
03:44:01,640 --> 03:44:05,960
therein so it turns out that there are

6095
03:44:04,319 --> 03:44:07,519
other commands that are worth knowing

6096
03:44:05,960 --> 03:44:09,358
and we'll give you just a few of these

6097
03:44:07,520 --> 03:44:11,040
today and over the coming weeks will you

6098
03:44:09,359 --> 03:44:12,399
have opport ities to play with others as

6099
03:44:11,040 --> 03:44:14,520
well but these are kind of some of the

6100
03:44:12,399 --> 03:44:16,358
basics and they're all incredibly

6101
03:44:14,520 --> 03:44:17,840
succinct because indeed for things

6102
03:44:16,359 --> 03:44:19,319
you're typing at the command line humans

6103
03:44:17,840 --> 03:44:21,159
generally have not wanted to type out

6104
03:44:19,319 --> 03:44:23,600
long commands so a lot of these are

6105
03:44:21,159 --> 03:44:26,159
abbreviations here now perhaps the most

6106
03:44:23,600 --> 03:44:28,680
common one I'll start with first is LS a

6107
03:44:26,159 --> 03:44:31,760
lowercase l and a lowercase s that

6108
03:44:28,680 --> 03:44:33,800
stands for succinctly list so if I go to

6109
03:44:31,760 --> 03:44:36,000
my terminal window now where up until

6110
03:44:33,800 --> 03:44:37,479
now I've only typed code which is a vs

6111
03:44:36,000 --> 03:44:39,880
code thing for creating and opening

6112
03:44:37,479 --> 03:44:42,960
files and make which triggers the compil

6113
03:44:39,880 --> 03:44:45,759
ation of my code what if I now type LS

6114
03:44:42,960 --> 03:44:47,519
this will list all of the files in my

6115
03:44:45,760 --> 03:44:49,840
current folder my hard drive in the

6116
03:44:47,520 --> 03:44:52,399
cloud if you will so if I hit enter

6117
03:44:49,840 --> 03:44:54,640
you'll see a whole bunch of results now

6118
03:44:52,399 --> 03:44:57,800
they're color-coded too the white ones

6119
03:44:54,640 --> 03:44:59,519
here and in. c those are the source code

6120
03:44:57,800 --> 03:45:02,519
files I've written during class today

6121
03:44:59,520 --> 03:45:04,279
agree. C compare. C hello.c and meow. C

6122
03:45:02,520 --> 03:45:06,040
and you can perhaps guess the green ones

6123
03:45:04,279 --> 03:45:07,520
here that just by convention have an

6124
03:45:06,040 --> 03:45:11,000
asterisk on the end to denote that

6125
03:45:07,520 --> 03:45:13,640
they're special represent what

6126
03:45:11,000 --> 03:45:16,560
what are the four others

6127
03:45:13,640 --> 03:45:18,800
yeah yeah the machine code so those are

6128
03:45:16,560 --> 03:45:21,439
my actual programs that are identically

6129
03:45:18,800 --> 03:45:23,479
named minus the C extension and the

6130
03:45:21,439 --> 03:45:24,840
asterisk means that they're executable

6131
03:45:23,479 --> 03:45:26,560
that is in the world of Mac OS or

6132
03:45:24,840 --> 03:45:28,159
Windows you would double click but in

6133
03:45:26,560 --> 03:45:30,000
the world of a command line environment

6134
03:45:28,159 --> 03:45:32,479
that means you do dot slash and then the

6135
03:45:30,000 --> 03:45:35,080
name without the asterisk to execute or

6136
03:45:32,479 --> 03:45:37,479
run the code therein so if I open up my

6137
03:45:35,080 --> 03:45:39,199
file explorer and I'm hitting command B

6138
03:45:37,479 --> 03:45:41,640
on my computer here just as a keyboard

6139
03:45:39,199 --> 03:45:44,279
shortcut you'll see the exact same thing

6140
03:45:41,640 --> 03:45:46,239
so LS is the command line interface for

6141
03:45:44,279 --> 03:45:48,800
listing the files in your account but

6142
03:45:46,239 --> 03:45:51,600
here because I'm using vs code or any

6143
03:45:48,800 --> 03:45:53,358
program like it I also get a graphical

6144
03:45:51,600 --> 03:45:55,080
user interface as well so it's just two

6145
03:45:53,359 --> 03:45:56,439
different places to be you're welcome to

6146
03:45:55,080 --> 03:45:58,319
use whatever you're comfortable with but

6147
03:45:56,439 --> 03:45:59,960
over time will you naturally get more

6148
03:45:58,319 --> 03:46:02,119
comfortable and capable with the

6149
03:45:59,960 --> 03:46:04,239
terminal window alone well what else is

6150
03:46:02,120 --> 03:46:05,920
on this this list here well during the

6151
03:46:04,239 --> 03:46:08,520
break I saw that at least one of you for

6152
03:46:05,920 --> 03:46:10,720
instance had created a file called hello

6153
03:46:08,520 --> 03:46:12,239
instead of hello. so you were in a

6154
03:46:10,720 --> 03:46:14,278
situation where you did this

6155
03:46:12,239 --> 03:46:16,239
accidentally and hit enter and then you

6156
03:46:14,279 --> 03:46:18,399
went ahead and typed in all of your code

6157
03:46:16,239 --> 03:46:20,640
like this and then down in your terminal

6158
03:46:18,399 --> 03:46:24,439
window you were trying to do make hello

6159
03:46:20,640 --> 03:46:27,599
enter and this now didn't actually do

6160
03:46:24,439 --> 03:46:29,239
anything like I can't I'm hitting um I'm

6161
03:46:27,600 --> 03:46:31,080
trying to run the command I got

6162
03:46:29,239 --> 03:46:32,840
permission denied as at least one of you

6163
03:46:31,080 --> 03:46:36,439
did now why is that well let's just do a

6164
03:46:32,840 --> 03:46:38,479
quick check if I do LS I see now hello

6165
03:46:36,439 --> 03:46:40,040
but hello has no asteris next to it

6166
03:46:38,479 --> 03:46:42,239
which means it's not executable that's

6167
03:46:40,040 --> 03:46:44,399
my code why well notice the top of my

6168
03:46:42,239 --> 03:46:46,680
tab confirms oh I screwed up I didn't

6169
03:46:44,399 --> 03:46:48,920
name my file hello.c which it just has

6170
03:46:46,680 --> 03:46:51,319
to be so what do you do well you could

6171
03:46:48,920 --> 03:46:53,399
very hackish like copy this create a new

6172
03:46:51,319 --> 03:46:55,159
file paste it in or no no no like we

6173
03:46:53,399 --> 03:46:56,840
know how to rename things now here

6174
03:46:55,159 --> 03:47:01,239
because that's one of our options let me

6175
03:46:56,840 --> 03:47:04,479
do this let me do MV for move hello and

6176
03:47:01,239 --> 03:47:06,359
then hello.c and hit enter you'll see

6177
03:47:04,479 --> 03:47:09,239
the tab closes cuz hello no longer

6178
03:47:06,359 --> 03:47:12,640
exists but if I now now type LS you'll

6179
03:47:09,239 --> 03:47:15,159
see ah there is hello.c and if I open

6180
03:47:12,640 --> 03:47:18,039
that file now there's all of my same

6181
03:47:15,159 --> 03:47:21,680
code and now if I do make hello make

6182
03:47:18,040 --> 03:47:24,880
hello now I do get an executable file

6183
03:47:21,680 --> 03:47:26,640
wherein the world is restored so MV is

6184
03:47:24,880 --> 03:47:28,479
just a command not just for renaming but

6185
03:47:26,640 --> 03:47:30,479
it also turns out eventually for moving

6186
03:47:28,479 --> 03:47:32,519
files as well you can also create

6187
03:47:30,479 --> 03:47:35,679
directories or folders so for instance

6188
03:47:32,520 --> 03:47:37,359
if I go into vs code again and suppose I

6189
03:47:35,680 --> 03:47:39,720
hover over here and click not on the

6190
03:47:37,359 --> 03:47:41,520
plus file icon but plus folder I can

6191
03:47:39,720 --> 03:47:43,720
create a folder called for instance like

6192
03:47:41,520 --> 03:47:45,720
pset one for problem set one in the

6193
03:47:43,720 --> 03:47:47,640
class and you'll see now that it's empty

6194
03:47:45,720 --> 03:47:50,080
CU all of my other files are in the

6195
03:47:47,640 --> 03:47:52,640
default folder of my account but I could

6196
03:47:50,080 --> 03:47:55,840
also go in there like this and I could

6197
03:47:52,640 --> 03:47:58,399
click on file and now I can create a new

6198
03:47:55,840 --> 03:48:00,279
file called like mario.c which is uh one

6199
03:47:58,399 --> 03:48:02,239
of the first problems for instance but

6200
03:48:00,279 --> 03:48:05,600
you'll notice now that

6201
03:48:02,239 --> 03:48:08,880
mario.c is inside of the pet one folder

6202
03:48:05,600 --> 03:48:10,040
so if I zoom out and I type LS at my

6203
03:48:08,880 --> 03:48:13,880
terminal window

6204
03:48:10,040 --> 03:48:16,040
I won't see mario. C anywhere but I do

6205
03:48:13,880 --> 03:48:17,800
see a pet one folder and it's in light

6206
03:48:16,040 --> 03:48:19,239
blue followed by a slash which you don't

6207
03:48:17,800 --> 03:48:21,599
have to type it just indicates that's a

6208
03:48:19,239 --> 03:48:24,359
folder now I can visually at top left

6209
03:48:21,600 --> 03:48:26,120
obviously see pet one contains mario.c

6210
03:48:24,359 --> 03:48:29,239
but if I try to do something like make

6211
03:48:26,120 --> 03:48:31,279
Mario here no rule to make Target Mario

6212
03:48:29,239 --> 03:48:32,479
like it just doesn't seem to exist and

6213
03:48:31,279 --> 03:48:34,760
that's because you're in the wrong

6214
03:48:32,479 --> 03:48:35,880
directory so in a command line interface

6215
03:48:34,760 --> 03:48:38,239
it's not quite as simple as just

6216
03:48:35,880 --> 03:48:41,198
clicking on a folder and voila it opens

6217
03:48:38,239 --> 03:48:43,840
you have to change into the directory or

6218
03:48:41,199 --> 03:48:45,920
folder and CD is going to be the command

6219
03:48:43,840 --> 03:48:48,840
there so if I want to actually change

6220
03:48:45,920 --> 03:48:51,720
into that directory I can do CD space

6221
03:48:48,840 --> 03:48:53,560
pet one enter and now you'll see my

6222
03:48:51,720 --> 03:48:55,399
prompt changes and this is just a common

6223
03:48:53,560 --> 03:48:57,359
convention but it's not the only one out

6224
03:48:55,399 --> 03:48:58,599
there now I still have a dollar sign

6225
03:48:57,359 --> 03:49:01,399
which indicates where I can type

6226
03:48:58,600 --> 03:49:03,600
commands but before it I see a reminder

6227
03:49:01,399 --> 03:49:05,319
constantly what folder I'm in and we put

6228
03:49:03,600 --> 03:49:07,640
that there deliberately like a lot of

6229
03:49:05,319 --> 03:49:09,519
Linux users do just to remind themselves

6230
03:49:07,640 --> 03:49:11,159
where they are cuz unlike Mac OS where

6231
03:49:09,520 --> 03:49:13,080
you or Windows where you have a nice big

6232
03:49:11,159 --> 03:49:14,399
window telling you where you are at the

6233
03:49:13,080 --> 03:49:17,000
command line you kind of need to be

6234
03:49:14,399 --> 03:49:20,198
reminded textually but now if I type LS

6235
03:49:17,000 --> 03:49:23,920
and hit enter what should I

6236
03:49:20,199 --> 03:49:26,239
see yeah mario.c and now if I want to

6237
03:49:23,920 --> 03:49:28,239
open it uh if I want to uh actually

6238
03:49:26,239 --> 03:49:29,960
compile it I can run make Mario in this

6239
03:49:28,239 --> 03:49:32,198
directory once I actually type out all

6240
03:49:29,960 --> 03:49:34,278
the code rest assured that in problem

6241
03:49:32,199 --> 03:49:35,800
sets in Labs we almost always certainly

6242
03:49:34,279 --> 03:49:38,080
in the first weeks of the class give you

6243
03:49:35,800 --> 03:49:39,640
exactly the commands to type odds are

6244
03:49:38,080 --> 03:49:41,159
because it's new to many of you view you

6245
03:49:39,640 --> 03:49:43,358
will accidentally type the wrong

6246
03:49:41,159 --> 03:49:45,039
commands no big deal just remember that

6247
03:49:43,359 --> 03:49:46,479
you have different ways to solve these

6248
03:49:45,040 --> 03:49:47,840
problems you've got like the graphical

6249
03:49:46,479 --> 03:49:50,080
file explorer which should feel a little

6250
03:49:47,840 --> 03:49:52,319
more familiar but in time you'll start

6251
03:49:50,080 --> 03:49:54,560
to know and honestly probably prefer

6252
03:49:52,319 --> 03:49:58,278
commands like these so CD for change

6253
03:49:54,560 --> 03:50:01,239
directory CP for copy a file uh LS for

6254
03:49:58,279 --> 03:50:03,319
list MK dirt to make a directory create

6255
03:50:01,239 --> 03:50:06,239
a new folder at the command line instead

6256
03:50:03,319 --> 03:50:08,239
of with the button MV for move or rename

6257
03:50:06,239 --> 03:50:11,399
RM

6258
03:50:08,239 --> 03:50:13,560
for remove so be careful with that one

6259
03:50:11,399 --> 03:50:15,519
RM dur remove directory and there's

6260
03:50:13,560 --> 03:50:17,359
dozens hundreds of other commands you

6261
03:50:15,520 --> 03:50:19,399
won't need many of them but we'll start

6262
03:50:17,359 --> 03:50:21,359
to scratch the surface all the more over

6263
03:50:19,399 --> 03:50:23,519
time but ultimately this command line

6264
03:50:21,359 --> 03:50:25,520
interface is going to be a more powerful

6265
03:50:23,520 --> 03:50:26,960
mechanism a more capable mechanism and

6266
03:50:25,520 --> 03:50:28,960
ultimately a more efficient mechanism

6267
03:50:26,960 --> 03:50:30,560
for writing code running commands uh

6268
03:50:28,960 --> 03:50:32,519
solving problems analyzing data more

6269
03:50:30,560 --> 03:50:35,198
generally even though no there's going

6270
03:50:32,520 --> 03:50:37,600
to be some uh some Growing Pains early

6271
03:50:35,199 --> 03:50:40,120
on just because it's probably so new for

6272
03:50:37,600 --> 03:50:41,880
many of you so with that said we have

6273
03:50:40,120 --> 03:50:43,600
some problems still to solve but we

6274
03:50:41,880 --> 03:50:45,358
promised cookies today so let's go ahead

6275
03:50:43,600 --> 03:50:47,399
and take a 10-minute break cookies are

6276
03:50:45,359 --> 03:50:48,760
now served in the transcept and we'll be

6277
03:50:47,399 --> 03:50:52,000
back here in

6278
03:50:48,760 --> 03:50:54,680
10 all right we are back and up until

6279
03:50:52,000 --> 03:50:56,080
now each of the code examples in C we've

6280
03:50:54,680 --> 03:50:57,960
done if been kind of designed to show

6281
03:50:56,080 --> 03:50:59,960
one specific topic but we thought we'd

6282
03:50:57,960 --> 03:51:01,800
try to take a step back and solve a more

6283
03:50:59,960 --> 03:51:04,239
General problem and give you a sense of

6284
03:51:01,800 --> 03:51:05,479
when given a problem set for instance or

6285
03:51:04,239 --> 03:51:07,359
just a programming problem more

6286
03:51:05,479 --> 03:51:08,920
generally like where you even begin and

6287
03:51:07,359 --> 03:51:11,120
how you go about approaching it when

6288
03:51:08,920 --> 03:51:13,239
it's not obvious what the point of the

6289
03:51:11,120 --> 03:51:15,439
exercise is so one of my favorite games

6290
03:51:13,239 --> 03:51:17,080
from yester year is this one here Super

6291
03:51:15,439 --> 03:51:18,920
Mario Brothers that has come in so many

6292
03:51:17,080 --> 03:51:21,439
different forms since but in this

6293
03:51:18,920 --> 03:51:23,720
original uh two-dimensional Sid scroller

6294
03:51:21,439 --> 03:51:25,439
game there was a lot of artwork like

6295
03:51:23,720 --> 03:51:27,800
this so for instance up here in the sky

6296
03:51:25,439 --> 03:51:29,760
were four question marks and we'll find

6297
03:51:27,800 --> 03:51:32,000
that in C in a lot of programming

6298
03:51:29,760 --> 03:51:33,720
languages initially it's a lot easier a

6299
03:51:32,000 --> 03:51:35,199
lot more accessible to focus really on

6300
03:51:33,720 --> 03:51:36,560
black and white type interactive

6301
03:51:35,199 --> 03:51:38,080
programs textually as opposed to

6302
03:51:36,560 --> 03:51:40,560
full-fledged graphics and the like but

6303
03:51:38,080 --> 03:51:42,880
more on the more Gra graphical acoustic

6304
03:51:40,560 --> 03:51:45,198
uh type of programs before long but for

6305
03:51:42,880 --> 03:51:47,960
now let me go over and propose that we

6306
03:51:45,199 --> 03:51:49,640
try to just Implement an asy art aski

6307
03:51:47,960 --> 03:51:52,679
again being the code that Maps numbers

6308
03:51:49,640 --> 03:51:54,760
to letters at least for English um into

6309
03:51:52,680 --> 03:51:56,760
a textual version of these four question

6310
03:51:54,760 --> 03:51:58,640
marks in the sky so for this let me go

6311
03:51:56,760 --> 03:52:00,680
over to vs code I'll create my own

6312
03:51:58,640 --> 03:52:02,519
version of mario.c that will be

6313
03:52:00,680 --> 03:52:04,120
different from the one you're challenged

6314
03:52:02,520 --> 03:52:05,520
with in problem set one indeed in

6315
03:52:04,120 --> 03:52:07,560
problem set one you'll be challenged to

6316
03:52:05,520 --> 03:52:10,319
build a little something like this

6317
03:52:07,560 --> 03:52:12,840
albeit with hashtags uh for asky art

6318
03:52:10,319 --> 03:52:14,319
instead of graphics and in mario.c I

6319
03:52:12,840 --> 03:52:16,439
want to just solve this simple problem

6320
03:52:14,319 --> 03:52:18,720
first so it's all involving output so

6321
03:52:16,439 --> 03:52:21,399
I'll do include standard i.h so I can

6322
03:52:18,720 --> 03:52:23,358
use printf I'll do my int main void more

6323
03:52:21,399 --> 03:52:24,920
on why we keep doing that in future

6324
03:52:23,359 --> 03:52:28,880
weeks and I'm just going to do something

6325
03:52:24,920 --> 03:52:31,359
simple initially like 1 2 3 4 back sln

6326
03:52:28,880 --> 03:52:34,119
this is about the simplest way I can

6327
03:52:31,359 --> 03:52:36,520
Implement four question marks in the sky

6328
03:52:34,120 --> 03:52:38,159
like these here using pure text like

6329
03:52:36,520 --> 03:52:41,359
this so let me go ahead and do make

6330
03:52:38,159 --> 03:52:43,199
Mario / Mario and voila we have those

6331
03:52:41,359 --> 03:52:45,159
four question marks but we've seen of

6332
03:52:43,199 --> 03:52:47,439
course that there are better ways to do

6333
03:52:45,159 --> 03:52:50,119
this and if you wanted to generalize

6334
03:52:47,439 --> 03:52:51,960
this to be five question marks six 60

6335
03:52:50,120 --> 03:52:54,159
different question marks you know Loop

6336
03:52:51,960 --> 03:52:57,119
was always the answer for not repeating

6337
03:52:54,159 --> 03:52:58,880
ourselves so maybe I should rewrite this

6338
03:52:57,120 --> 03:53:01,120
a little bit more flexibly and say

6339
03:52:58,880 --> 03:53:04,039
something like this four in I gets zero

6340
03:53:01,120 --> 03:53:06,080
I less than four I plus plus and then

6341
03:53:04,040 --> 03:53:10,239
inside of the for Loop now I can just do

6342
03:53:06,080 --> 03:53:12,880
a single question mark But I don't think

6343
03:53:10,239 --> 03:53:15,119
what I've just done is correct anyone

6344
03:53:12,880 --> 03:53:18,438
spot the aesthetic bug

6345
03:53:15,120 --> 03:53:22,750
already yeah why is this why is this

6346
03:53:18,439 --> 03:53:24,560
wrong if I want to print the same thing

6347
03:53:22,750 --> 03:53:26,479
[Music]

6348
03:53:24,560 --> 03:53:28,399
yeah yeah so I don't think I want to

6349
03:53:26,479 --> 03:53:29,960
backs slash in after every question mark

6350
03:53:28,399 --> 03:53:32,278
because the goal is again this like row

6351
03:53:29,960 --> 03:53:34,278
of question marks in the sky so if I now

6352
03:53:32,279 --> 03:53:37,479
recompile this make

6353
03:53:34,279 --> 03:53:39,640
Mario Mario okay it's almost there but

6354
03:53:37,479 --> 03:53:42,159
now I have that regression to where the

6355
03:53:39,640 --> 03:53:43,640
dollar sign's not on its own line so I

6356
03:53:42,159 --> 03:53:45,720
think I need a new line but I don't

6357
03:53:43,640 --> 03:53:48,840
think I want it here cuz that was not

6358
03:53:45,720 --> 03:53:51,399
going to end well where do I want it

6359
03:53:48,840 --> 03:53:54,159
instead any Instinct

6360
03:53:51,399 --> 03:53:56,319
yeah yeah so outside the for Loop so

6361
03:53:54,159 --> 03:53:58,279
indeed I can just go below line eight

6362
03:53:56,319 --> 03:54:00,479
and above line nine creating a new one

6363
03:53:58,279 --> 03:54:02,000
and now there's it's totally fine to

6364
03:54:00,479 --> 03:54:03,519
just print a new line like that you

6365
03:54:02,000 --> 03:54:05,479
don't have to print anything else with

6366
03:54:03,520 --> 03:54:08,040
it it's indeed a character unto itself

6367
03:54:05,479 --> 03:54:10,159
so let's do make Mario one last time/

6368
03:54:08,040 --> 03:54:11,960
Mario okay so now we're back in business

6369
03:54:10,159 --> 03:54:14,399
there well what if we wanted to do some

6370
03:54:11,960 --> 03:54:15,919
other scene from Mario uh such as this

6371
03:54:14,399 --> 03:54:18,159
one here where there's a lot of vertical

6372
03:54:15,920 --> 03:54:20,120
obstacles like the These Bricks here if

6373
03:54:18,159 --> 03:54:22,119
I wanted to print out now a column of

6374
03:54:20,120 --> 03:54:24,760
three bricks and I'll use hashtags for

6375
03:54:22,120 --> 03:54:27,479
these instead of anything graphical well

6376
03:54:24,760 --> 03:54:29,800
I think we're almost there right like I

6377
03:54:27,479 --> 03:54:32,278
think I can now it's almost maybe a

6378
03:54:29,800 --> 03:54:33,399
little easier I can go back here change

6379
03:54:32,279 --> 03:54:35,120
the question mark to something that

6380
03:54:33,399 --> 03:54:37,319
looks more like a brick like this hash

6381
03:54:35,120 --> 03:54:39,120
symbol and I think now I do want the new

6382
03:54:37,319 --> 03:54:42,560
line character because when I now do

6383
03:54:39,120 --> 03:54:44,840
make Mario Mario okay there's my wall of

6384
03:54:42,560 --> 03:54:46,560
four oh but wait I didn't want four I

6385
03:54:44,840 --> 03:54:48,279
wanted to be consistent just with this

6386
03:54:46,560 --> 03:54:50,840
particular scene here so I just want

6387
03:54:48,279 --> 03:54:52,960
three so I can still change it in one

6388
03:54:50,840 --> 03:54:55,120
place and here again is that Paradigm

6389
03:54:52,960 --> 03:54:57,039
even whether you're using four or three

6390
03:54:55,120 --> 03:54:59,720
if you get into the habit of starting

6391
03:54:57,040 --> 03:55:01,920
counting from zero you go on up to but

6392
03:54:59,720 --> 03:55:04,560
not through the value you want to count

6393
03:55:01,920 --> 03:55:06,600
up to so that's why I'm using less than

6394
03:55:04,560 --> 03:55:08,239
instead of less than or equals to there

6395
03:55:06,600 --> 03:55:09,439
so this would be the common Paradigm

6396
03:55:08,239 --> 03:55:12,119
though you could certainly count it like

6397
03:55:09,439 --> 03:55:14,239
we saw earlier in different ways but

6398
03:55:12,120 --> 03:55:15,279
what if things escalate one level

6399
03:55:14,239 --> 03:55:17,080
further and when you're in the

6400
03:55:15,279 --> 03:55:18,159
underground version of Super Mario

6401
03:55:17,080 --> 03:55:20,359
Brothers there's a lot of these

6402
03:55:18,159 --> 03:55:22,359
underground obstructions including like

6403
03:55:20,359 --> 03:55:24,080
grids of bricks like this and let me

6404
03:55:22,359 --> 03:55:27,359
conjecture that if you slice this up

6405
03:55:24,080 --> 03:55:29,680
it's roughly a 3X3 grid of bricks that

6406
03:55:27,359 --> 03:55:32,239
all interlock uh prettily to give us

6407
03:55:29,680 --> 03:55:35,520
just one big large brick like this so if

6408
03:55:32,239 --> 03:55:36,840
I want to print out a 3X3 grid now

6409
03:55:35,520 --> 03:55:38,840
things are getting a little more

6410
03:55:36,840 --> 03:55:41,479
interesting because up until now I

6411
03:55:38,840 --> 03:55:43,840
printed either one row horizontally or

6412
03:55:41,479 --> 03:55:45,438
one column vertically but we haven't

6413
03:55:43,840 --> 03:55:47,120
really seen any code where I'm sort of

6414
03:55:45,439 --> 03:55:49,640
printing or living in two different

6415
03:55:47,120 --> 03:55:52,319
dimensions like the game would imply but

6416
03:55:49,640 --> 03:55:54,399
let me propose that we could do this let

6417
03:55:52,319 --> 03:55:57,600
me go ahead and say all right suppose I

6418
03:55:54,399 --> 03:56:01,119
want to print a 3X3 grid of bricks it's

6419
03:55:57,600 --> 03:56:04,560
really that I want to print what three

6420
03:56:01,120 --> 03:56:06,439
rows of bricks like a grid is three rows

6421
03:56:04,560 --> 03:56:08,319
so if I take the highle idea and reduce

6422
03:56:06,439 --> 03:56:09,800
it to something a little simpler how do

6423
03:56:08,319 --> 03:56:11,800
I do that well let me get rid of the

6424
03:56:09,800 --> 03:56:13,840
print for a moment as I did and let me

6425
03:56:11,800 --> 03:56:15,840
just stipulate that this for Loop even

6426
03:56:13,840 --> 03:56:18,960
though it doesn't do anything useful yet

6427
03:56:15,840 --> 03:56:21,199
will do something how many times just by

6428
03:56:18,960 --> 03:56:22,800
Design all right three times right this

6429
03:56:21,199 --> 03:56:25,040
for Loop is good to go it will do

6430
03:56:22,800 --> 03:56:26,920
something three times by just using I to

6431
03:56:25,040 --> 03:56:30,399
do the counting all right well if I want

6432
03:56:26,920 --> 03:56:32,520
to print out now a row of three bricks

6433
03:56:30,399 --> 03:56:34,439
all on the same line that's pretty

6434
03:56:32,520 --> 03:56:36,680
similar to what we did earlier when I

6435
03:56:34,439 --> 03:56:38,680
just wanted to print out four question

6436
03:56:36,680 --> 03:56:40,319
marks in the sky so we've kind of seen a

6437
03:56:38,680 --> 03:56:42,640
solution there and I dare say we can

6438
03:56:40,319 --> 03:56:45,920
compose one into the other so if I want

6439
03:56:42,640 --> 03:56:49,840
to print out a row of bricks I could

6440
03:56:45,920 --> 03:56:53,000
just do this four in I gets zero I less

6441
03:56:49,840 --> 03:56:55,560
than three I ++ and then inside of this

6442
03:56:53,000 --> 03:57:00,479
inner loop if you will let me print out

6443
03:56:55,560 --> 03:57:02,000
a single brick like this and then I I

6444
03:57:00,479 --> 03:57:03,840
don't like where this is going yet but I

6445
03:57:02,000 --> 03:57:05,080
think I've taken two ideas and I've

6446
03:57:03,840 --> 03:57:07,600
combined them but what might be

6447
03:57:05,080 --> 03:57:09,800
problematic about lines five and seven

6448
03:57:07,600 --> 03:57:13,720
at the moment

6449
03:57:09,800 --> 03:57:13,720
what might be bad here uh yeah and

6450
03:57:13,800 --> 03:57:18,159
back yeah I'm using the same integer ey

6451
03:57:16,439 --> 03:57:19,520
which I feel like could get me into

6452
03:57:18,159 --> 03:57:21,600
trouble right if I'm sort of trying to

6453
03:57:19,520 --> 03:57:23,680
count three things here but then I'm

6454
03:57:21,600 --> 03:57:25,720
hijacking this variable and using it

6455
03:57:23,680 --> 03:57:27,720
inside of the loop like I feel like I

6456
03:57:25,720 --> 03:57:30,080
should avoid this this Collision of

6457
03:57:27,720 --> 03:57:32,519
names and so what's a good alternative

6458
03:57:30,080 --> 03:57:33,880
to I well a programmer if nesting Loops

6459
03:57:32,520 --> 03:57:35,760
in this way would pretty commonly go

6460
03:57:33,880 --> 03:57:38,039
with J you could certainly change this

6461
03:57:35,760 --> 03:57:39,880
to be like rows and columns if you want

6462
03:57:38,040 --> 03:57:42,120
more descriptive variables but I and J

6463
03:57:39,880 --> 03:57:45,000
is pretty canonical so I'm going to go

6464
03:57:42,120 --> 03:57:46,880
ahead and do this j++ instead of i++

6465
03:57:45,000 --> 03:57:48,680
everywhere and let me try compiling this

6466
03:57:46,880 --> 03:57:50,198
so make Mario

6467
03:57:48,680 --> 03:57:52,600
enter

6468
03:57:50,199 --> 03:57:55,319
Mario okay so a couple of things are

6469
03:57:52,600 --> 03:57:56,960
wrong here this is not a 3X3 grid but if

6470
03:57:55,319 --> 03:57:58,880
you count these things how many did I

6471
03:57:56,960 --> 03:58:01,880
indeed print at

6472
03:57:58,880 --> 03:58:03,560
least can probably just guess logically

6473
03:58:01,880 --> 03:58:05,119
yeah there's nine hashes there

6474
03:58:03,560 --> 03:58:08,159
unfortunately they're all on the same

6475
03:58:05,120 --> 03:58:11,800
line instead of on three different lines

6476
03:58:08,159 --> 03:58:13,199
so where logically can I fix this I'm

6477
03:58:11,800 --> 03:58:16,438
definitely printing all the bricks

6478
03:58:13,199 --> 03:58:16,439
they're just not on the right levels

6479
03:58:18,520 --> 03:58:23,159
yeah yeah so put a new line after the

6480
03:58:21,080 --> 03:58:24,920
first Loop this inner loop if you will

6481
03:58:23,159 --> 03:58:27,080
the nested Loop if you will so let me go

6482
03:58:24,920 --> 03:58:29,439
ahead and print out just a back slash n

6483
03:58:27,080 --> 03:58:30,840
here and what's this doing well I think

6484
03:58:29,439 --> 03:58:32,399
that's going to solve it by just moving

6485
03:58:30,840 --> 03:58:34,600
the cursor to the next line after you've

6486
03:58:32,399 --> 03:58:37,960
done one row so let me go ahead and do

6487
03:58:34,600 --> 03:58:39,920
make Mario enter SL Mario and now we're

6488
03:58:37,960 --> 03:58:41,720
in business so it's a very simplistic

6489
03:58:39,920 --> 03:58:43,800
version of the same graphic but I'm

6490
03:58:41,720 --> 03:58:46,039
leveraging two different ideas now the

6491
03:58:43,800 --> 03:58:48,358
same or the same idea twice rather now

6492
03:58:46,040 --> 03:58:50,960
I'm using one Loop to kind of control my

6493
03:58:48,359 --> 03:58:52,680
cursor going row by row by row but then

6494
03:58:50,960 --> 03:58:55,159
within that Loop I'm doing left to right

6495
03:58:52,680 --> 03:58:57,840
do do dot dot dot with printing out each

6496
03:58:55,159 --> 03:59:00,000
of these individual bricks like this now

6497
03:58:57,840 --> 03:59:01,600
there's a little sloppiness here still

6498
03:59:00,000 --> 03:59:03,640
like if I want this to always be a

6499
03:59:01,600 --> 03:59:05,680
square just because that's what it looks

6500
03:59:03,640 --> 03:59:09,599
like in the game well I could change it

6501
03:59:05,680 --> 03:59:13,479
to be a 4x4 uh Square by doing this or a

6502
03:59:09,600 --> 03:59:15,279
5x5 grid whoops by doing this why is

6503
03:59:13,479 --> 03:59:16,960
this perhaps not the best design to just

6504
03:59:15,279 --> 03:59:19,040
keep changing the numbers when I want to

6505
03:59:16,960 --> 03:59:23,198
change the

6506
03:59:19,040 --> 03:59:23,199
size where could this go AR

6507
03:59:24,600 --> 03:59:27,680
yeah yeah if it's always going to be a

6508
03:59:26,560 --> 03:59:29,319
square and height is going to be the

6509
03:59:27,680 --> 03:59:30,560
same as width I'm just inviting trouble

6510
03:59:29,319 --> 03:59:31,920
here right eventually I'm going to screw

6511
03:59:30,560 --> 03:59:33,000
up I'm going to change one but not the

6512
03:59:31,920 --> 03:59:34,880
other then it's going to come out to be

6513
03:59:33,000 --> 03:59:36,640
a rectangle instead of a proper Square

6514
03:59:34,880 --> 03:59:38,278
so I should probably solve this a little

6515
03:59:36,640 --> 03:59:40,680
differently so let me do that at the top

6516
03:59:38,279 --> 03:59:43,239
of my main function here let me go ahead

6517
03:59:40,680 --> 03:59:45,840
and give myself a variable called maybe

6518
03:59:43,239 --> 03:59:48,000
uh n for the number of bricks I want

6519
03:59:45,840 --> 03:59:50,279
horizontally and vertically and I'll

6520
03:59:48,000 --> 03:59:52,000
just initialize that to three initially

6521
03:59:50,279 --> 03:59:53,880
and instead of putting three here I'll

6522
03:59:52,000 --> 03:59:55,920
literally just use n but I'll do it in

6523
03:59:53,880 --> 03:59:57,358
both places so that now henceforth if I

6524
03:59:55,920 --> 03:59:59,600
ever want to change this and change it

6525
03:59:57,359 --> 04:00:01,279
to four or five or anything else like

6526
03:59:59,600 --> 04:00:02,720
I'm all done like it's better designed

6527
04:00:01,279 --> 04:00:04,880
because there's a lower probability of

6528
04:00:02,720 --> 04:00:06,880
mistakes but I could technically SK

6529
04:00:04,880 --> 04:00:08,839
still screw up somehow I could

6530
04:00:06,880 --> 04:00:12,198
technically accidentally write line of

6531
04:00:08,840 --> 04:00:13,920
code like n++ or you know I could just

6532
04:00:12,199 --> 04:00:15,640
change the value of that variable even

6533
04:00:13,920 --> 04:00:16,680
though I don't want it to ever change

6534
04:00:15,640 --> 04:00:18,198
and maybe it's because I'm a bad

6535
04:00:16,680 --> 04:00:19,560
programmer I copy pasted wrong I'm

6536
04:00:18,199 --> 04:00:22,640
working with someone who doesn't know

6537
04:00:19,560 --> 04:00:25,359
what n represents I can defend myself

6538
04:00:22,640 --> 04:00:27,880
and my code against human error like

6539
04:00:25,359 --> 04:00:29,239
that by going up here to line five and

6540
04:00:27,880 --> 04:00:31,358
instead of just declaring a simple

6541
04:00:29,239 --> 04:00:34,080
variable like we did in scratch I can

6542
04:00:31,359 --> 04:00:36,279
further Harden my code so to speak by

6543
04:00:34,080 --> 04:00:38,760
declaring it to be a constant using the

6544
04:00:36,279 --> 04:00:41,120
keyword const now this is just a feature

6545
04:00:38,760 --> 04:00:43,239
of c and some other languages to protect

6546
04:00:41,120 --> 04:00:46,600
you against Yourself by proactively

6547
04:00:43,239 --> 04:00:48,359
saying N is a constant specifically the

6548
04:00:46,600 --> 04:00:50,920
number five or previously the number

6549
04:00:48,359 --> 04:00:52,560
three you cannot accidentally write code

6550
04:00:50,920 --> 04:00:54,880
elsewhere that changes it the computer

6551
04:00:52,560 --> 04:00:56,560
will throw an error and catch that error

6552
04:00:54,880 --> 04:00:59,039
so it's just a way of programming a

6553
04:00:56,560 --> 04:01:00,720
little more defensively um some

6554
04:00:59,040 --> 04:01:02,640
languages have this some languages don't

6555
04:01:00,720 --> 04:01:04,920
but in general it's a good practice it

6556
04:01:02,640 --> 04:01:07,239
makes your code better designed because

6557
04:01:04,920 --> 04:01:09,520
it just is less vulnerable to Mistakes

6558
04:01:07,239 --> 04:01:11,319
by you colleagues or anyone else using

6559
04:01:09,520 --> 04:01:13,520
the code so let me change this back to

6560
04:01:11,319 --> 04:01:16,000
three just to be our default but now I'm

6561
04:01:13,520 --> 04:01:19,120
using n in both places and if I do make

6562
04:01:16,000 --> 04:01:20,439
mario. Mario we're back to where we

6563
04:01:19,120 --> 04:01:22,720
originally started but the code's a

6564
04:01:20,439 --> 04:01:24,880
little more better design and let me

6565
04:01:22,720 --> 04:01:26,720
note this too all this time I've been

6566
04:01:24,880 --> 04:01:28,479
mentioning that uh there's correctness

6567
04:01:26,720 --> 04:01:30,599
is important design is important there

6568
04:01:28,479 --> 04:01:33,119
was also this matter of style I've been

6569
04:01:30,600 --> 04:01:34,279
very deliberately writing pretty code if

6570
04:01:33,120 --> 04:01:35,760
you will not just the syntax

6571
04:01:34,279 --> 04:01:38,239
highlighting which is automatic but

6572
04:01:35,760 --> 04:01:40,479
notice that I keep indenting everything

6573
04:01:38,239 --> 04:01:43,279
nicely anytime I have curly braces like

6574
04:01:40,479 --> 04:01:45,399
on lines 4 and 14 everything is indented

6575
04:01:43,279 --> 04:01:48,800
one level when I have additional curly

6576
04:01:45,399 --> 04:01:51,840
braces on line 7 and 13 everything is

6577
04:01:48,800 --> 04:01:53,920
nicely indented uh as well technically

6578
04:01:51,840 --> 04:01:56,199
speaking the computer does not care

6579
04:01:53,920 --> 04:01:58,399
about that kind of white space so to

6580
04:01:56,199 --> 04:02:00,600
speak and you could really make a mess

6581
04:01:58,399 --> 04:02:02,479
of things like this because you have a

6582
04:02:00,600 --> 04:02:04,199
strange sense of style or just because

6583
04:02:02,479 --> 04:02:07,519
you're being a little sloppy but this

6584
04:02:04,199 --> 04:02:09,279
code is actually still correct if I

6585
04:02:07,520 --> 04:02:13,680
recompile it let me open up my terminal

6586
04:02:09,279 --> 04:02:15,840
window make uh Mario no errors Mario it

6587
04:02:13,680 --> 04:02:18,359
works perfectly fine but you can imagine

6588
04:02:15,840 --> 04:02:20,479
just how annoying this now is to read

6589
04:02:18,359 --> 04:02:22,239
like certainly for a TA U but certainly

6590
04:02:20,479 --> 04:02:23,438
for you the next day certainly for a

6591
04:02:22,239 --> 04:02:25,680
colleague who has to read your code this

6592
04:02:23,439 --> 04:02:27,720
is just bad style like it still works

6593
04:02:25,680 --> 04:02:29,800
and it's welld designed in that like

6594
04:02:27,720 --> 04:02:31,560
you're uh writing code defensively

6595
04:02:29,800 --> 04:02:34,080
you're using a constant but my God the

6596
04:02:31,560 --> 04:02:35,640
style is atrocious now you'll often find

6597
04:02:34,080 --> 04:02:37,479
that there's tools that can help you

6598
04:02:35,640 --> 04:02:39,640
format your code for you in a manner

6599
04:02:37,479 --> 04:02:41,599
consistent with a courses or a company's

6600
04:02:39,640 --> 04:02:43,239
uh style but this is the kind of muscle

6601
04:02:41,600 --> 04:02:45,800
memory you'll want to develop over time

6602
04:02:43,239 --> 04:02:47,760
to take vs code suggestions as it's

6603
04:02:45,800 --> 04:02:49,358
outputting lines of code for you because

6604
04:02:47,760 --> 04:02:52,000
it's trying to format your code in a

6605
04:02:49,359 --> 04:02:53,840
readable way and oh my God if and when

6606
04:02:52,000 --> 04:02:55,960
you do have bugs in your code and things

6607
04:02:53,840 --> 04:02:57,239
aren't even indented properly there's no

6608
04:02:55,960 --> 04:02:59,000
way you the human are going to be able

6609
04:02:57,239 --> 04:03:00,840
to wrap your mind around what's

6610
04:02:59,000 --> 04:03:02,760
happening and where like you're just

6611
04:03:00,840 --> 04:03:04,800
making the problem harder for yourself

6612
04:03:02,760 --> 04:03:08,159
so do get into this habit too of

6613
04:03:04,800 --> 04:03:09,880
manifesting good style as well all right

6614
04:03:08,159 --> 04:03:12,199
well let me propose that we don't only

6615
04:03:09,880 --> 04:03:15,239
want a 3X3 grid we want this to be a

6616
04:03:12,199 --> 04:03:17,560
little more Dynamic so suppose we moved

6617
04:03:15,239 --> 04:03:20,080
away from a constant to just using an

6618
04:03:17,560 --> 04:03:22,198
integer called n and let's ask the user

6619
04:03:20,080 --> 04:03:24,319
for the size of this grid as by

6620
04:03:22,199 --> 04:03:27,040
prompting them with get int as we've

6621
04:03:24,319 --> 04:03:28,840
done before and I'll store it in N here

6622
04:03:27,040 --> 04:03:32,199
and then I can go ahead and more

6623
04:03:28,840 --> 04:03:35,680
dynamically run make Mario to compile it

6624
04:03:32,199 --> 04:03:38,880
whoops oh I screwed up

6625
04:03:35,680 --> 04:03:41,960
accidentally what is it in suggesting I

6626
04:03:38,880 --> 04:03:41,960
do albeit

6627
04:03:42,479 --> 04:03:47,000
cryptically yeah I forgot to include the

6628
04:03:44,880 --> 04:03:49,560
cs50 header file up top and that's why

6629
04:03:47,000 --> 04:03:51,760
it doesn't know that get int is in fact

6630
04:03:49,560 --> 04:03:53,479
valid so that's an easy fix U I'm just

6631
04:03:51,760 --> 04:03:55,359
going to go up here and include

6632
04:03:53,479 --> 04:03:57,960
cs50.h now I'm going to clear my

6633
04:03:55,359 --> 04:04:00,479
terminal and rerun make Mario now we're

6634
04:03:57,960 --> 04:04:02,198
good Mario and now notice I'm prompted

6635
04:04:00,479 --> 04:04:04,840
for size so if I type in three it's the

6636
04:04:02,199 --> 04:04:06,600
same as before if I type in 10 it's even

6637
04:04:04,840 --> 04:04:08,840
bigger but it happens all now

6638
04:04:06,600 --> 04:04:10,439
automatically but there are some things

6639
04:04:08,840 --> 04:04:13,000
that we're not detecting for instance

6640
04:04:10,439 --> 04:04:14,600
suppose I type in cat well that's

6641
04:04:13,000 --> 04:04:15,640
handled by the get it function as I

6642
04:04:14,600 --> 04:04:16,960
claimed earlier that's one of the

6643
04:04:15,640 --> 04:04:19,720
features of using a library you don't

6644
04:04:16,960 --> 04:04:21,599
have to deal with erroneous input but we

6645
04:04:19,720 --> 04:04:23,358
only designed a function called get int

6646
04:04:21,600 --> 04:04:25,600
to get you an integer we don't know if

6647
04:04:23,359 --> 04:04:27,680
you want it to be positive negative zero

6648
04:04:25,600 --> 04:04:29,359
or some combination thereof and it's

6649
04:04:27,680 --> 04:04:31,399
kind of weird to allow the user to type

6650
04:04:29,359 --> 04:04:34,760
in like negative one for the size of the

6651
04:04:31,399 --> 04:04:36,319
Grid or you know ne3 for the size of the

6652
04:04:34,760 --> 04:04:38,239
grid and indeed your code does nothing

6653
04:04:36,319 --> 04:04:39,720
so at least it's not crashing but that's

6654
04:04:38,239 --> 04:04:41,560
kind of stupid right like it'd be nice

6655
04:04:39,720 --> 04:04:44,479
to force the user if they want a grid to

6656
04:04:41,560 --> 04:04:47,039
give us a positive value so how could we

6657
04:04:44,479 --> 04:04:49,840
do this well I could go up here and I

6658
04:04:47,040 --> 04:04:52,520
could say something like if n is less

6659
04:04:49,840 --> 04:04:54,960
than one so if it's zero or negative

6660
04:04:52,520 --> 04:04:57,920
which I don't want what could I do well

6661
04:04:54,960 --> 04:05:00,640
I could say well prompt the user again

6662
04:04:57,920 --> 04:05:02,960
for the size and now notice I'm not

6663
04:05:00,640 --> 04:05:04,278
declaring and again because once it

6664
04:05:02,960 --> 04:05:06,839
exists you don't have to mention the

6665
04:05:04,279 --> 04:05:09,000
data type again we said that earlier but

6666
04:05:06,840 --> 04:05:11,040
this is kind of stupid why because now

6667
04:05:09,000 --> 04:05:13,399
when You' given the user a second chance

6668
04:05:11,040 --> 04:05:16,600
okay now maybe I'll do all right if this

6669
04:05:13,399 --> 04:05:19,599
version of n is less than one well let's

6670
04:05:16,600 --> 04:05:20,840
just go and prompt the user a third time

6671
04:05:19,600 --> 04:05:22,399
I mean you can kind of see where this is

6672
04:05:20,840 --> 04:05:24,479
stupidly going like this can't be the

6673
04:05:22,399 --> 04:05:26,080
right solution to keep typing

6674
04:05:24,479 --> 04:05:27,599
recursively the same thing again and

6675
04:05:26,080 --> 04:05:28,760
again like where would it stop you'd

6676
04:05:27,600 --> 04:05:30,560
have to give them a finite number of

6677
04:05:28,760 --> 04:05:33,040
chances or just you know make a mess of

6678
04:05:30,560 --> 04:05:35,239
your code so what would be intuitively a

6679
04:05:33,040 --> 04:05:37,479
better solution

6680
04:05:35,239 --> 04:05:39,760
here yeah so some kind of loop we've

6681
04:05:37,479 --> 04:05:41,840
seen a while loop we've seen a four Loop

6682
04:05:39,760 --> 04:05:44,159
so maybe one of those so let me try this

6683
04:05:41,840 --> 04:05:45,840
let me delete this messiness and just go

6684
04:05:44,159 --> 04:05:49,720
back to the first question and let me do

6685
04:05:45,840 --> 04:05:51,800
this so while n is less than one so

6686
04:05:49,720 --> 04:05:53,679
while the number is not what we want

6687
04:05:51,800 --> 04:05:57,358
let's just prompt the user in a loop

6688
04:05:53,680 --> 04:06:00,680
this time for the size again now here

6689
04:05:57,359 --> 04:06:02,800
too this is better because it's only two

6690
04:06:00,680 --> 04:06:05,239
requests for information but clearly

6691
04:06:02,800 --> 04:06:07,479
line six and N are pretty much identical

6692
04:06:05,239 --> 04:06:10,039
other than the int and if I went in and

6693
04:06:07,479 --> 04:06:11,920
changed the size you know uh if I add

6694
04:06:10,040 --> 04:06:13,040
this if I change the wording here change

6695
04:06:11,920 --> 04:06:14,439
it to a different language like I have

6696
04:06:13,040 --> 04:06:17,680
to change it in two places that's bad

6697
04:06:14,439 --> 04:06:19,479
copy paste bad so what might be better

6698
04:06:17,680 --> 04:06:22,000
well it turns out there's another

6699
04:06:19,479 --> 04:06:24,000
Paradigm in C that you can use that gets

6700
04:06:22,000 --> 04:06:25,880
around this problem this duplication of

6701
04:06:24,000 --> 04:06:28,640
code it would be much nicer if I just

6702
04:06:25,880 --> 04:06:31,159
write this code once and I can do that

6703
04:06:28,640 --> 04:06:33,840
using a third type of loop called a do

6704
04:06:31,159 --> 04:06:35,600
while loop so it turns out in C you can

6705
04:06:33,840 --> 04:06:37,800
do this if you want to get the value of

6706
04:06:35,600 --> 04:06:39,520
a variable like n first just decree

6707
04:06:37,800 --> 04:06:42,198
create the variable without an initial

6708
04:06:39,520 --> 04:06:43,680
value so int n semicolon means it we

6709
04:06:42,199 --> 04:06:45,199
don't know what value it has yes but

6710
04:06:43,680 --> 04:06:47,560
that's okay we're going to add a value

6711
04:06:45,199 --> 04:06:50,199
to it eventually then I'm going to say

6712
04:06:47,560 --> 04:06:52,800
this do literally I'm going to open my

6713
04:06:50,199 --> 04:06:55,920
curly braces and what do I want to do I

6714
04:06:52,800 --> 04:06:59,358
want to assign to n the return value of

6715
04:06:55,920 --> 04:07:01,159
get in prompting the user for size well

6716
04:06:59,359 --> 04:07:05,279
when do you want to do that I want to do

6717
04:07:01,159 --> 04:07:08,199
that while n is less than one and this

6718
04:07:05,279 --> 04:07:11,159
code now achieves the exact same goal

6719
04:07:08,199 --> 04:07:13,640
but by never repeating myself why well

6720
04:07:11,159 --> 04:07:16,319
notice on these lines of code now I'm

6721
04:07:13,640 --> 04:07:18,198
literally saying on line six give me a

6722
04:07:16,319 --> 04:07:19,399
variable called n of type integer it

6723
04:07:18,199 --> 04:07:21,920
doesn't have a value initially but

6724
04:07:19,399 --> 04:07:23,319
that's fine you can do that line seven

6725
04:07:21,920 --> 04:07:25,640
says do the following what do you want

6726
04:07:23,319 --> 04:07:27,519
to do get int prompting the user with

6727
04:07:25,640 --> 04:07:30,960
the word size and just store that value

6728
04:07:27,520 --> 04:07:33,359
in N but because code runs top to bottom

6729
04:07:30,960 --> 04:07:35,759
left to right now it's reasonable on

6730
04:07:33,359 --> 04:07:38,080
line 11 to ask that question okay is the

6731
04:07:35,760 --> 04:07:40,760
current value of n which it definitely

6732
04:07:38,080 --> 04:07:42,399
got on line a less than one and if the

6733
04:07:40,760 --> 04:07:45,159
user didn't cooperate they typed in zero

6734
04:07:42,399 --> 04:07:47,640
or Nega 1 or3 what's going to happen

6735
04:07:45,159 --> 04:07:50,600
it's going to go back up here and repeat

6736
04:07:47,640 --> 04:07:53,439
repeat repeat everything in the do while

6737
04:07:50,600 --> 04:07:55,080
loop so a do while loop in C which is

6738
04:07:53,439 --> 04:07:56,399
not something some other languages have

6739
04:07:55,080 --> 04:07:58,439
like python if you know it does not have

6740
04:07:56,399 --> 04:08:00,760
a do while loop this is perhaps the

6741
04:07:58,439 --> 04:08:02,159
cleanest way to achieve this even though

6742
04:08:00,760 --> 04:08:03,920
it's a little weird that you have to

6743
04:08:02,159 --> 04:08:06,560
declare your variable create your

6744
04:08:03,920 --> 04:08:08,800
variable up top and then check it down

6745
04:08:06,560 --> 04:08:11,080
below but other wise it's similar to a

6746
04:08:08,800 --> 04:08:13,198
while loop it just flips the order in

6747
04:08:11,080 --> 04:08:16,279
which you're asking the question any

6748
04:08:13,199 --> 04:08:17,840
questions on this construct and Doh in

6749
04:08:16,279 --> 04:08:19,560
general is super useful when you want to

6750
04:08:17,840 --> 04:08:23,159
get input from the user and make sure it

6751
04:08:19,560 --> 04:08:24,960
meets certain requirements all right so

6752
04:08:23,159 --> 04:08:27,239
now that we have this building block

6753
04:08:24,960 --> 04:08:28,960
after that interlude how can I go about

6754
04:08:27,239 --> 04:08:30,600
cleaning up this code and then let's

6755
04:08:28,960 --> 04:08:33,438
conclude by taking a look at things that

6756
04:08:30,600 --> 04:08:35,840
our code can't do or can't do very well

6757
04:08:33,439 --> 04:08:38,359
or correctly let me propose that in a

6758
04:08:35,840 --> 04:08:40,279
final version of Mario let me just add

6759
04:08:38,359 --> 04:08:43,399
what are called now some comments so it

6760
04:08:40,279 --> 04:08:45,159
turns out in code in C you can Define

6761
04:08:43,399 --> 04:08:46,680
what are called comments which are just

6762
04:08:45,159 --> 04:08:48,039
notes to self some of you discovered

6763
04:08:46,680 --> 04:08:49,439
these in scratch there's little yellow

6764
04:08:48,040 --> 04:08:52,279
sticky notes you can use to add

6765
04:08:49,439 --> 04:08:53,800
citations or explanations in C there's a

6766
04:08:52,279 --> 04:08:55,640
couple of ways to write comments and in

6767
04:08:53,800 --> 04:08:58,159
general comments are notes for yourself

6768
04:08:55,640 --> 04:09:00,399
for your ta for your colleague as to

6769
04:08:58,159 --> 04:09:01,840
what your code is doing and why or how

6770
04:09:00,399 --> 04:09:03,680
it's a little explanatory note in

6771
04:09:01,840 --> 04:09:06,680
English or whatever your human language

6772
04:09:03,680 --> 04:09:10,640
might be so for instance what I might do

6773
04:09:06,680 --> 04:09:13,040
here in my implementation of this

6774
04:09:10,640 --> 04:09:14,880
version of Mario I might first ask

6775
04:09:13,040 --> 04:09:17,040
myself a question like I I might first

6776
04:09:14,880 --> 04:09:19,560
make a note to S like this on a new line

6777
04:09:17,040 --> 04:09:22,479
above this first block of code uh get

6778
04:09:19,560 --> 04:09:25,560
size of Grid it's just an explanatory

6779
04:09:22,479 --> 04:09:27,720
remark in any tur English that generally

6780
04:09:25,560 --> 04:09:30,278
explains the next six or so lines the

6781
04:09:27,720 --> 04:09:31,599
next chunk or block of code if you will

6782
04:09:30,279 --> 04:09:33,680
it would be a little excessive to

6783
04:09:31,600 --> 04:09:34,800
comment every single line at some point

6784
04:09:33,680 --> 04:09:36,720
the programmer should know what

6785
04:09:34,800 --> 04:09:38,118
individual lines of code do but it's

6786
04:09:36,720 --> 04:09:41,080
nice to be able to kind kind of glance

6787
04:09:38,119 --> 04:09:43,479
at this comment on line six that starts

6788
04:09:41,080 --> 04:09:45,159
with two slashes and it gets gray out

6789
04:09:43,479 --> 04:09:47,319
because of syntax highlighting it's not

6790
04:09:45,159 --> 04:09:48,760
logic it's just a note to self it

6791
04:09:47,319 --> 04:09:50,198
generally gives me a little cheat sheet

6792
04:09:48,760 --> 04:09:52,520
as to what the following lines of code

6793
04:09:50,199 --> 04:09:54,520
should be doing and or why and then down

6794
04:09:52,520 --> 04:09:56,520
here well there's a second block of code

6795
04:09:54,520 --> 04:10:00,840
that's a bunch of lines but together

6796
04:09:56,520 --> 04:10:02,800
this just what prints uh grid of bricks

6797
04:10:00,840 --> 04:10:04,560
and so it's another comment to myself

6798
04:10:02,800 --> 04:10:06,000
that just makes it a little more

6799
04:10:04,560 --> 04:10:07,720
understandable what these 20 some odd

6800
04:10:06,000 --> 04:10:10,840
lines of code are doing by adding some

6801
04:10:07,720 --> 04:10:12,920
English explanations thereof but now

6802
04:10:10,840 --> 04:10:15,960
that I have these you know wouldn't it

6803
04:10:12,920 --> 04:10:17,720
be nice if I could kind of abstract

6804
04:10:15,960 --> 04:10:19,479
these pieces of functionality away this

6805
04:10:17,720 --> 04:10:22,039
getting of the size and this printing of

6806
04:10:19,479 --> 04:10:23,840
the Grid in other words suppose that you

6807
04:10:22,040 --> 04:10:25,319
didn't know where to begin with this

6808
04:10:23,840 --> 04:10:27,119
problem and the problem at hand were

6809
04:10:25,319 --> 04:10:29,760
literally Implement a program that

6810
04:10:27,119 --> 04:10:31,880
prints a grid of bricks of some variable

6811
04:10:29,760 --> 04:10:34,239
size three or four or five or whatever

6812
04:10:31,880 --> 04:10:36,479
the human types in if you have really no

6813
04:10:34,239 --> 04:10:38,680
idea where to start comments are

6814
04:10:36,479 --> 04:10:41,278
actually a good way of getting started

6815
04:10:38,680 --> 04:10:42,880
because comments can be a approximation

6816
04:10:41,279 --> 04:10:44,880
of what we called last week pseudo code

6817
04:10:42,880 --> 04:10:46,679
pseudo code is tur English that kind of

6818
04:10:44,880 --> 04:10:48,839
gets your point across like for the uh

6819
04:10:46,680 --> 04:10:50,800
phone book searching like last time so

6820
04:10:48,840 --> 04:10:53,920
if you didn't really know where to begin

6821
04:10:50,800 --> 04:10:57,118
you could do something like this I could

6822
04:10:53,920 --> 04:10:59,840
for instance just say get size of grid

6823
04:10:57,119 --> 04:11:01,640
as my first step and then print grid of

6824
04:10:59,840 --> 04:11:03,680
bricks as my second step and that's it

6825
04:11:01,640 --> 04:11:05,880
for my program thus far this is now

6826
04:11:03,680 --> 04:11:07,880
implemented in pseudo code I have some

6827
04:11:05,880 --> 04:11:09,759
massive placeholders there like I still

6828
04:11:07,880 --> 04:11:11,880
have work to be done but at least I have

6829
04:11:09,760 --> 04:11:14,920
a highle solution to the problem in

6830
04:11:11,880 --> 04:11:16,960
comments and now I can even go this far

6831
04:11:14,920 --> 04:11:18,880
I could say well let's suppose that

6832
04:11:16,960 --> 04:11:21,800
there's just a function already that

6833
04:11:18,880 --> 04:11:24,000
exists called get size I could do

6834
04:11:21,800 --> 04:11:26,640
something like this I could do Inn

6835
04:11:24,000 --> 04:11:28,040
equals get size and now I just have to

6836
04:11:26,640 --> 04:11:29,800
assume for the moment that some

6837
04:11:28,040 --> 04:11:30,880
abstraction called get size exists it

6838
04:11:29,800 --> 04:11:33,319
doesn't this does not come with the

6839
04:11:30,880 --> 04:11:36,319
cs-50 library but I could invent it I

6840
04:11:33,319 --> 04:11:38,159
bet how else might I proceed well let's

6841
04:11:36,319 --> 04:11:40,560
just assume for the moment that there's

6842
04:11:38,159 --> 04:11:43,840
also a function called print grid that

6843
04:11:40,560 --> 04:11:45,840
just prints that a grid of that size n

6844
04:11:43,840 --> 04:11:47,119
so here too is an abstraction these

6845
04:11:45,840 --> 04:11:49,560
puzzle pieces don't exist these

6846
04:11:47,119 --> 04:11:52,080
functions don't yet exist but in C just

6847
04:11:49,560 --> 04:11:54,600
like in scratch I can create my own

6848
04:11:52,080 --> 04:11:56,520
functions how do I do that well let me

6849
04:11:54,600 --> 04:11:58,080
go down later in the file and by

6850
04:11:56,520 --> 04:11:59,880
convention you generally want to leave

6851
04:11:58,080 --> 04:12:01,199
main at the top of your code why because

6852
04:11:59,880 --> 04:12:02,839
it's the main function and it's just

6853
04:12:01,199 --> 04:12:05,119
where the human eye is going to look to

6854
04:12:02,840 --> 04:12:07,119
see what some file of code does and let

6855
04:12:05,119 --> 04:12:10,080
me do this I want to create a function

6856
04:12:07,119 --> 04:12:12,000
of my own called get size whose purpose

6857
04:12:10,080 --> 04:12:14,399
in life is to get the size that the user

6858
04:12:12,000 --> 04:12:16,399
wants I want this function to return an

6859
04:12:14,399 --> 04:12:19,080
integer and the Syntax for doing that is

6860
04:12:16,399 --> 04:12:21,720
this write similar to a variable the

6861
04:12:19,080 --> 04:12:23,159
data type that this function returns I

6862
04:12:21,720 --> 04:12:25,319
don't need this function to take any

6863
04:12:23,159 --> 04:12:26,920
inputs and so I'm going to use a new

6864
04:12:25,319 --> 04:12:28,600
keyword that we've actually been using

6865
04:12:26,920 --> 04:12:30,680
thus far more on it another time just

6866
04:12:28,600 --> 04:12:32,399
called void which just means this get

6867
04:12:30,680 --> 04:12:35,040
size function does not take any inputs

6868
04:12:32,399 --> 04:12:36,519
it does have an output it outputs an INT

6869
04:12:35,040 --> 04:12:38,560
and this is just a weird order in which

6870
04:12:36,520 --> 04:12:40,000
you write it you write the output format

6871
04:12:38,560 --> 04:12:42,880
the name of the function and then the

6872
04:12:40,000 --> 04:12:44,640
inputs if any inside of parentheses and

6873
04:12:42,880 --> 04:12:46,319
now I can Implement get size but I've

6874
04:12:44,640 --> 04:12:48,000
already implemented get size or at least

6875
04:12:46,319 --> 04:12:49,960
now at this point in the story I at

6876
04:12:48,000 --> 04:12:51,640
least know concretely what to do and I

6877
04:12:49,960 --> 04:12:53,599
could figure out eventually with some

6878
04:12:51,640 --> 04:12:55,358
trial and error perhaps all right if I

6879
04:12:53,600 --> 04:12:57,840
declare a variable and I do the

6880
04:12:55,359 --> 04:13:00,880
following n equals get in prompting the

6881
04:12:57,840 --> 04:13:04,080
user for size and I keep doing that

6882
04:13:00,880 --> 04:13:06,358
while n is less than one once that block

6883
04:13:04,080 --> 04:13:09,640
of code is done here is a new keyword in

6884
04:13:06,359 --> 04:13:11,560
C where you can return that value n so I

6885
04:13:09,640 --> 04:13:14,560
keep referring to these values that some

6886
04:13:11,560 --> 04:13:16,600
functions return as return values in C

6887
04:13:14,560 --> 04:13:19,399
there's literally a keyword called

6888
04:13:16,600 --> 04:13:22,080
return that will hand back to any

6889
04:13:19,399 --> 04:13:25,080
function that uses that function the

6890
04:13:22,080 --> 04:13:28,439
value in question so in a nutshell

6891
04:13:25,080 --> 04:13:30,880
between lines 15 and 21 now here is some

6892
04:13:28,439 --> 04:13:33,159
code identical to our solution earlier

6893
04:13:30,880 --> 04:13:35,319
that gets a value n from the user that

6894
04:13:33,159 --> 04:13:38,000
is positive it's one or two or higher

6895
04:13:35,319 --> 04:13:39,800
it's not zero or it's not less than one

6896
04:13:38,000 --> 04:13:43,479
and as soon as we've got that value we

6897
04:13:39,800 --> 04:13:45,118
hand it back as a return value notice

6898
04:13:43,479 --> 04:13:47,399
how I'm using this function on line

6899
04:13:45,119 --> 04:13:49,399
7even just like with get int just like

6900
04:13:47,399 --> 04:13:51,358
with get string I'm calling the function

6901
04:13:49,399 --> 04:13:52,560
nothing in the parenthesis in this case

6902
04:13:51,359 --> 04:13:54,520
but then I'm using the assignment

6903
04:13:52,560 --> 04:13:58,278
operator to copy whatever its return

6904
04:13:54,520 --> 04:14:00,359
value is into my variable n and so now I

6905
04:13:58,279 --> 04:14:03,080
have a function that didn't used to

6906
04:14:00,359 --> 04:14:06,199
exist called get size that gets me a

6907
04:14:03,080 --> 04:14:08,560
positive integer no matter what and now

6908
04:14:06,199 --> 04:14:10,720
for the grid how do I do this how do I

6909
04:14:08,560 --> 04:14:12,359
invent a function called print grid that

6910
04:14:10,720 --> 04:14:14,800
takes a single argument a number and

6911
04:14:12,359 --> 04:14:17,000
prints a grid of that size well let's go

6912
04:14:14,800 --> 04:14:19,319
down here I'm going to write the name of

6913
04:14:17,000 --> 04:14:21,119
this function print grid this function

6914
04:14:19,319 --> 04:14:22,760
just needs to print it has a side effect

6915
04:14:21,119 --> 04:14:25,239
as we keep saying so I'm just going to

6916
04:14:22,760 --> 04:14:27,439
say it has no return value it's just

6917
04:14:25,239 --> 04:14:29,560
void it doesn't have an output per se

6918
04:14:27,439 --> 04:14:31,800
it's just an aesthetic side effect but

6919
04:14:29,560 --> 04:14:34,519
it does take an an argument an argument

6920
04:14:31,800 --> 04:14:36,800
is an input and the Syntax for this in C

6921
04:14:34,520 --> 04:14:37,600
is to name the type of the input it

6922
04:14:36,800 --> 04:14:39,358
takes

6923
04:14:37,600 --> 04:14:41,159
and the name of the variable and I could

6924
04:14:39,359 --> 04:14:43,520
call this anything I want I'll call it

6925
04:14:41,159 --> 04:14:44,960
size I could call it n and it's okay to

6926
04:14:43,520 --> 04:14:46,680
use the same variable in different

6927
04:14:44,960 --> 04:14:49,159
functions but I'll call it size just to

6928
04:14:46,680 --> 04:14:51,119
be distinct and then in this function

6929
04:14:49,159 --> 04:14:54,080
I'm just going to copy from memory the

6930
04:14:51,119 --> 04:14:58,640
same code as before for in I get zero I

6931
04:14:54,080 --> 04:15:03,159
less than size instead of three I ++

6932
04:14:58,640 --> 04:15:06,760
inside of this four uh int J gets zero J

6933
04:15:03,159 --> 04:15:09,399
is less than size j++ and inside of that

6934
04:15:06,760 --> 04:15:13,080
print print out with print f a single

6935
04:15:09,399 --> 04:15:16,039
hash print out after that Loop a single

6936
04:15:13,080 --> 04:15:18,319
new line and that's it now I did this

6937
04:15:16,040 --> 04:15:20,520
fast admittedly but it's the same code

6938
04:15:18,319 --> 04:15:22,399
that I wrote earlier but now just like I

6939
04:15:20,520 --> 04:15:23,960
did with scratch let me just arbitrarily

6940
04:15:22,399 --> 04:15:26,479
hit enter a bunch of times to like move

6941
04:15:23,960 --> 04:15:28,399
the code out of sight out of mind now I

6942
04:15:26,479 --> 04:15:30,399
have abstractions I have puzzle pieces

6943
04:15:28,399 --> 04:15:32,560
that now exist called get size and print

6944
04:15:30,399 --> 04:15:35,479
grid Syntax for which takes some getting

6945
04:15:32,560 --> 04:15:38,359
used to but they now just exist except I

6946
04:15:35,479 --> 04:15:41,560
do need to do one thing because C is a

6947
04:15:38,359 --> 04:15:44,159
little naive if I try to do make Mario

6948
04:15:41,560 --> 04:15:46,198
now and hit enter implicit Declaration

6949
04:15:44,159 --> 04:15:48,279
of function get size is invalid and

6950
04:15:46,199 --> 04:15:50,560
we've seen that before when I hadn't

6951
04:15:48,279 --> 04:15:53,439
included a file right when I hadn't

6952
04:15:50,560 --> 04:15:54,640
included cs50 Library get in didn't work

6953
04:15:53,439 --> 04:15:56,040
but that's not the issue here because

6954
04:15:54,640 --> 04:15:58,599
this is not from a library I just

6955
04:15:56,040 --> 04:16:00,520
invented this C kind of takes you

6956
04:15:58,600 --> 04:16:02,399
literally and if you define these

6957
04:16:00,520 --> 04:16:06,040
functions at the bottom of your file

6958
04:16:02,399 --> 04:16:08,039
they don't exist on line seven or 10 so

6959
04:16:06,040 --> 04:16:09,479
I could do this I could all right fine

6960
04:16:08,040 --> 04:16:12,080
well let me just kind of highlight all

6961
04:16:09,479 --> 04:16:13,840
of this cut with to my clipboard and

6962
04:16:12,080 --> 04:16:15,199
paste it up here this would solve the

6963
04:16:13,840 --> 04:16:17,159
problem I could just move all of those

6964
04:16:15,199 --> 04:16:18,439
functions at the top of my file that's

6965
04:16:17,159 --> 04:16:19,840
kind of annoying because now main is

6966
04:16:18,439 --> 04:16:21,080
like the bottom of the file you're not

6967
04:16:19,840 --> 04:16:23,319
it's going to take longer to find it

6968
04:16:21,080 --> 04:16:24,840
it's just that's not a clean solution so

6969
04:16:23,319 --> 04:16:27,840
let me put it back where it was at the

6970
04:16:24,840 --> 04:16:30,199
bottom and let me do this this is the

6971
04:16:27,840 --> 04:16:31,880
only time in cs50 and really in C

6972
04:16:30,199 --> 04:16:34,560
programming where copy paste is

6973
04:16:31,880 --> 04:16:37,039
reasonable if you copy and paste the

6974
04:16:34,560 --> 04:16:39,800
first line of code from each function

6975
04:16:37,040 --> 04:16:42,800
and then end it with a semicolon you can

6976
04:16:39,800 --> 04:16:44,880
tease the compiler by giving it just

6977
04:16:42,800 --> 04:16:46,358
enough of a hint at the top of the file

6978
04:16:44,880 --> 04:16:48,679
that okay these functions don't exist

6979
04:16:46,359 --> 04:16:52,119
till down later but here's a hint that

6980
04:16:48,680 --> 04:16:54,600
they will exist this is how you can uh

6981
04:16:52,119 --> 04:16:56,520
convince the compiler to trust you so

6982
04:16:54,600 --> 04:16:59,600
those other functions can still be lower

6983
04:16:56,520 --> 04:17:02,920
in the file below main but now when I do

6984
04:16:59,600 --> 04:17:05,080
make Mario oh damn it oh I said print

6985
04:17:02,920 --> 04:17:07,680
instead of print F that's my

6986
04:17:05,080 --> 04:17:09,880
bad print f

6987
04:17:07,680 --> 04:17:13,479
so if I do make

6988
04:17:09,880 --> 04:17:15,039
Mario Mario now I can type in three and

6989
04:17:13,479 --> 04:17:16,960
we're back in business now this was a

6990
04:17:15,040 --> 04:17:19,560
very heavy-handed way and long way to

6991
04:17:16,960 --> 04:17:21,118
get to a much more complicated solution

6992
04:17:19,560 --> 04:17:23,239
but this solution in some sense is

6993
04:17:21,119 --> 04:17:24,960
better designed why because now

6994
04:17:23,239 --> 04:17:27,198
especially without the comments I mean

6995
04:17:24,960 --> 04:17:29,159
look how short my code is my main

6996
04:17:27,199 --> 04:17:30,960
function is literally two lines of code

6997
04:17:29,159 --> 04:17:33,118
why well I kind of factored out the

6998
04:17:30,960 --> 04:17:34,479
juicy stuff into its own functions and

6999
04:17:33,119 --> 04:17:36,279
now especially if I'm working with

7000
04:17:34,479 --> 04:17:38,159
colleagues or others you could imagine

7001
04:17:36,279 --> 04:17:39,760
splitting up up large programs into

7002
04:17:38,159 --> 04:17:41,640
smaller parts having different people

7003
04:17:39,760 --> 04:17:43,680
Implement different parts so long as you

7004
04:17:41,640 --> 04:17:47,039
all agree in advance on what those

7005
04:17:43,680 --> 04:17:48,439
inputs and those outputs actually are

7006
04:17:47,040 --> 04:17:51,319
all right so let's now consider what

7007
04:17:48,439 --> 04:17:52,640
computers can do well and not so well C

7008
04:17:51,319 --> 04:17:54,359
indeed supports a whole bunch of

7009
04:17:52,640 --> 04:17:55,960
operators mathematically via which we

7010
04:17:54,359 --> 04:17:57,520
can do addition and subtraction

7011
04:17:55,960 --> 04:17:59,118
multiplication division and even

7012
04:17:57,520 --> 04:18:01,239
calculate the remainder when you divide

7013
04:17:59,119 --> 04:18:02,800
one number by another in fact why don't

7014
04:18:01,239 --> 04:18:04,960
we go ahead and use these in a very

7015
04:18:02,800 --> 04:18:06,920
simple program and make our very own

7016
04:18:04,960 --> 04:18:09,000
calculator so let me go over here here

7017
04:18:06,920 --> 04:18:12,279
to vs code let me go ahead and create a

7018
04:18:09,000 --> 04:18:13,720
new file called calculator. C and in

7019
04:18:12,279 --> 04:18:16,080
this file let's go ahead and first

7020
04:18:13,720 --> 04:18:17,000
include a couple of now familiar header

7021
04:18:16,080 --> 04:18:20,800
files

7022
04:18:17,000 --> 04:18:23,080
cs50.h as well as standard i.h let's go

7023
04:18:20,800 --> 04:18:25,560
ahead then and declare main with int

7024
04:18:23,080 --> 04:18:26,880
main void and then inside of main let's

7025
04:18:25,560 --> 04:18:29,479
do something relatively simple let's

7026
04:18:26,880 --> 04:18:31,679
declare an INT and call it X and set it

7027
04:18:29,479 --> 04:18:33,880
equal to whatever the return value is of

7028
04:18:31,680 --> 04:18:36,199
get int prompting the user for a value

7029
04:18:33,880 --> 04:18:38,720
for x let's then give ourselves a second

7030
04:18:36,199 --> 04:18:40,760
variable we'll call it say y set that

7031
04:18:38,720 --> 04:18:42,880
equal to the return value of another

7032
04:18:40,760 --> 04:18:45,199
call to get int prompting the user this

7033
04:18:42,880 --> 04:18:47,118
time for that value Y and then let's

7034
04:18:45,199 --> 04:18:50,040
very simply go ahead at the very end and

7035
04:18:47,119 --> 04:18:52,199
just print out say the sum of X Plus y a

7036
04:18:50,040 --> 04:18:54,720
super simple calculator so I'll use

7037
04:18:52,199 --> 04:18:57,560
print F quote unquote percent I for

7038
04:18:54,720 --> 04:18:59,519
integer back sln to give me the new line

7039
04:18:57,560 --> 04:19:01,720
then I'm going to go ahead and do x + y

7040
04:18:59,520 --> 04:19:03,960
to indeed print out the sum let me go

7041
04:19:01,720 --> 04:19:06,720
down to my terminal window now let me do

7042
04:19:03,960 --> 04:19:08,839
make calculator in order to compile the

7043
04:19:06,720 --> 04:19:11,239
C no error messages so that's good let

7044
04:19:08,840 --> 04:19:14,520
me do/ calulator and let's do something

7045
04:19:11,239 --> 04:19:17,920
like 2 + 2 which of course should equal

7046
04:19:14,520 --> 04:19:19,479
4 and it does but it turns out that

7047
04:19:17,920 --> 04:19:21,399
sometimes there are going to be

7048
04:19:19,479 --> 04:19:23,080
limitations that we bump up against and

7049
04:19:21,399 --> 04:19:24,760
let me get a little more ambitious here

7050
04:19:23,080 --> 04:19:26,600
let me clear my terminal window and let

7051
04:19:24,760 --> 04:19:29,800
me go ahead and rerun calculator again

7052
04:19:26,600 --> 04:19:29,800
and this time let's type in

7053
04:19:30,159 --> 04:19:35,118
O2 billion for x and let's type in the

7054
04:19:33,080 --> 04:19:36,600
same for y and of course now the answer

7055
04:19:35,119 --> 04:19:40,560
of 2 billion plus 2 billion should have

7056
04:19:36,600 --> 04:19:42,560
of course be 4 billion and yet it's not

7057
04:19:40,560 --> 04:19:44,439
so curiously we see of all things a

7058
04:19:42,560 --> 04:19:46,640
negative number here which suggests that

7059
04:19:44,439 --> 04:19:49,359
somehow the plus operator doesn't quite

7060
04:19:46,640 --> 04:19:51,479
work as well as we might like now why

7061
04:19:49,359 --> 04:19:52,960
might this actually be well it turns out

7062
04:19:51,479 --> 04:19:55,118
that inside of your computer is of

7063
04:19:52,960 --> 04:19:56,519
course memory or Ram random access

7064
04:19:55,119 --> 04:19:57,880
memory and depending on the size of your

7065
04:19:56,520 --> 04:19:59,479
computer and the type of computer it

7066
04:19:57,880 --> 04:20:01,159
might very well look a little something

7067
04:19:59,479 --> 04:20:02,760
like this a little circuit board with

7068
04:20:01,159 --> 04:20:04,840
these black little modules on it that

7069
04:20:02,760 --> 04:20:07,000
actually contain all of the btes of your

7070
04:20:04,840 --> 04:20:09,479
computer's memory unfortunately you and

7071
04:20:07,000 --> 04:20:11,600
I only have a finite amount of this

7072
04:20:09,479 --> 04:20:13,239
memory inside of our computers which

7073
04:20:11,600 --> 04:20:14,760
means no matter how high we want to

7074
04:20:13,239 --> 04:20:16,880
count there's ultimately going to be a

7075
04:20:14,760 --> 04:20:18,960
limitation on high how we can count

7076
04:20:16,880 --> 04:20:20,720
because we only have a finite amount of

7077
04:20:18,960 --> 04:20:22,839
memory we don't have an infinite number

7078
04:20:20,720 --> 04:20:25,519
of zeros and ones to play with we have

7079
04:20:22,840 --> 04:20:26,960
to actually be bounded ultimately so

7080
04:20:25,520 --> 04:20:28,600
what's the implication of this well it

7081
04:20:26,960 --> 04:20:31,839
turns out that computers typically use

7082
04:20:28,600 --> 04:20:33,640
as many as 32 bits zeros or ones to

7083
04:20:31,840 --> 04:20:36,040
represent something like an integer or

7084
04:20:33,640 --> 04:20:38,039
in C an INT so for instance the smallest

7085
04:20:36,040 --> 04:20:40,640
number we could represent using 32 ins

7086
04:20:38,040 --> 04:20:44,159
of course using 32 bits of course would

7087
04:20:40,640 --> 04:20:45,880
be zero 32 zeros like this here and the

7088
04:20:44,159 --> 04:20:48,560
biggest number we could represent is by

7089
04:20:45,880 --> 04:20:50,599
changing all of those zeros to ones

7090
04:20:48,560 --> 04:20:53,159
which in this case will ideally give us

7091
04:20:50,600 --> 04:20:56,000
a number that equals roughly 4 billion

7092
04:20:53,159 --> 04:21:00,640
in total it's actually 4 billion 294 mil

7093
04:20:56,000 --> 04:21:02,760
967 295 maximally if you set all 32 of

7094
04:21:00,640 --> 04:21:05,720
those bits to ones and then do out the

7095
04:21:02,760 --> 04:21:07,720
actual math the catch though is that we

7096
04:21:05,720 --> 04:21:09,358
humans and Compu in general also

7097
04:21:07,720 --> 04:21:11,640
sometimes want to and need to be able to

7098
04:21:09,359 --> 04:21:13,560
represent negative numbers so if you

7099
04:21:11,640 --> 04:21:15,760
want to represent negative numbers as

7100
04:21:13,560 --> 04:21:17,479
well as positive numbers in zero you

7101
04:21:15,760 --> 04:21:19,319
can't really just start counting at zero

7102
04:21:17,479 --> 04:21:20,960
and go all the way up to roughly four

7103
04:21:19,319 --> 04:21:23,239
billion you got to kind of split the

7104
04:21:20,960 --> 04:21:25,198
difference and maybe allocate half of

7105
04:21:23,239 --> 04:21:26,720
those patterns of zeros and ones to

7106
04:21:25,199 --> 04:21:29,439
negative numbers and the other half

7107
04:21:26,720 --> 04:21:31,239
roughly to positive numbers so in fact

7108
04:21:29,439 --> 04:21:33,800
in practice when you're using even as

7109
04:21:31,239 --> 04:21:35,118
many as 32 bits the highest most

7110
04:21:33,800 --> 04:21:37,319
computers could count certainly in a

7111
04:21:35,119 --> 04:21:40,640
program like this in C using an INT

7112
04:21:37,319 --> 04:21:42,960
would be roughly 2 billion that is 2 b47

7113
04:21:40,640 --> 04:21:42,960
m

7114
04:22:05,359 --> 04:22:10,119
483,000 flow where you want to use more

7115
04:22:08,279 --> 04:22:12,159
bits than you have available and as a

7116
04:22:10,119 --> 04:22:14,159
result you sort of overflow the

7117
04:22:12,159 --> 04:22:15,680
available space what does this mean in

7118
04:22:14,159 --> 04:22:17,600
fact in real terms well let's suppose

7119
04:22:15,680 --> 04:22:19,560
that you only have three bits but I'm

7120
04:22:17,600 --> 04:22:22,439
going to gray out a fourth bit just to

7121
04:22:19,560 --> 04:22:24,239
convey where we'd like to uh put an

7122
04:22:22,439 --> 04:22:26,960
additional bit ultimately if this of

7123
04:22:24,239 --> 04:22:32,960
course is zero per week zero discussion

7124
04:22:26,960 --> 04:22:35,399
this is 1 2 3 4 5 6 7 now ideally in

7125
04:22:32,960 --> 04:22:37,960
binary if you want to add one more to

7126
04:22:35,399 --> 04:22:39,880
this value seven you're going to have to

7127
04:22:37,960 --> 04:22:43,159
carry the one mathematically and that

7128
04:22:39,880 --> 04:22:44,679
would ideally give you 1 0 0 0 but if

7129
04:22:43,159 --> 04:22:47,159
you don't have four bits and your

7130
04:22:44,680 --> 04:22:50,000
computer's only sophisticated enough to

7131
04:22:47,159 --> 04:22:51,479
have three bits not even 32 but three

7132
04:22:50,000 --> 04:22:54,800
the implication is that you're

7133
04:22:51,479 --> 04:22:58,760
effectively representing not one0 0 but

7134
04:22:54,800 --> 04:23:01,278
rather 0 z0 there's just no room to

7135
04:22:58,760 --> 04:23:03,199
store that fourth bit that I've gray out

7136
04:23:01,279 --> 04:23:05,520
here which is to say that your integer

7137
04:23:03,199 --> 04:23:08,199
might overflow and as soon as you get to

7138
04:23:05,520 --> 04:23:10,319
seven the next number once you add one

7139
04:23:08,199 --> 04:23:12,520
is actually going to be zero or worse as

7140
04:23:10,319 --> 04:23:14,840
we've seen here in my code a negative

7141
04:23:12,520 --> 04:23:16,800
value instead so what could we do to

7142
04:23:14,840 --> 04:23:18,720
perhaps address this kind of concern

7143
04:23:16,800 --> 04:23:20,840
well C does not have just integers or

7144
04:23:18,720 --> 04:23:22,599
ins it also has Longs which as the name

7145
04:23:20,840 --> 04:23:24,640
suggest or just longer integers which

7146
04:23:22,600 --> 04:23:26,640
means they have more bits available to

7147
04:23:24,640 --> 04:23:28,319
them so let me go back into my code here

7148
04:23:26,640 --> 04:23:30,159
I'll clear the terminal window and let

7149
04:23:28,319 --> 04:23:33,800
me go ahead and change my integers to

7150
04:23:30,159 --> 04:23:36,840
literally long here long here I'm going

7151
04:23:33,800 --> 04:23:39,399
to have to change my function in

7152
04:23:36,840 --> 04:23:40,880
uh cs50's library to be not get in but

7153
04:23:39,399 --> 04:23:42,439
get long and that's indeed another

7154
04:23:40,880 --> 04:23:44,000
function we provide in the library let

7155
04:23:42,439 --> 04:23:45,720
me change this get in to get long as

7156
04:23:44,000 --> 04:23:47,439
well I'll keep my variable names the

7157
04:23:45,720 --> 04:23:49,800
same but I do need to make one other

7158
04:23:47,439 --> 04:23:51,920
change it turns out that print F also

7159
04:23:49,800 --> 04:23:53,720
support supports other format codes so

7160
04:23:51,920 --> 04:23:55,840
not just percent I for integers or

7161
04:23:53,720 --> 04:23:59,159
percent s for Strings but also for

7162
04:23:55,840 --> 04:24:01,880
instance percent Li for a long integer

7163
04:23:59,159 --> 04:24:03,760
as well as percent f for floating Point

7164
04:24:01,880 --> 04:24:05,319
values with decimals so with that said

7165
04:24:03,760 --> 04:24:08,520
let's go ahead and change my print F

7166
04:24:05,319 --> 04:24:10,800
line to be not perc I but percent Li I

7167
04:24:08,520 --> 04:24:13,439
now let me go ahead and do make

7168
04:24:10,800 --> 04:24:16,920
calculator again enter no apparent

7169
04:24:13,439 --> 04:24:19,199
errors now do/ calulator and 2 + 2 still

7170
04:24:16,920 --> 04:24:22,000
equals 4 as before but now if I do

7171
04:24:19,199 --> 04:24:25,159
calculator again and let's do

7172
04:24:22,000 --> 04:24:28,920
two billion again as well as 2 billion

7173
04:24:25,159 --> 04:24:30,399
for y previously we overflowed the size

7174
04:24:28,920 --> 04:24:32,119
of an integer and got some weird

7175
04:24:30,399 --> 04:24:34,080
negative number because the pattern was

7176
04:24:32,119 --> 04:24:35,960
misinterpreted if you will as a negative

7177
04:24:34,080 --> 04:24:38,279
number instead but along instead of

7178
04:24:35,960 --> 04:24:41,000
using using 32 bits conventionally uses

7179
04:24:38,279 --> 04:24:43,199
64 bits which means we have more than

7180
04:24:41,000 --> 04:24:45,319
enough spare bits to go when we add 2

7181
04:24:43,199 --> 04:24:47,239
billion plus 2 billion and now in fact

7182
04:24:45,319 --> 04:24:50,080
we get the correct answer of four

7183
04:24:47,239 --> 04:24:53,359
billion which does fit inside of the

7184
04:24:50,080 --> 04:24:55,319
size of a long now along can count up

7185
04:24:53,359 --> 04:24:59,640
quite high and in fact it can count as

7186
04:24:55,319 --> 04:25:01,600
high as this nine quintilian and so that

7187
04:24:59,640 --> 04:25:03,720
will give us quite a bit more Runway but

7188
04:25:01,600 --> 04:25:05,760
of course it too is ultimately going to

7189
04:25:03,720 --> 04:25:07,198
be finite so if you have numbers that

7190
04:25:05,760 --> 04:25:09,880
need to go bigger than that you might

7191
04:25:07,199 --> 04:25:11,040
still very well have a problem now

7192
04:25:09,880 --> 04:25:12,880
there's another problem that we might

7193
04:25:11,040 --> 04:25:14,479
run into as well and we can see it in

7194
04:25:12,880 --> 04:25:16,839
the context of even this simple

7195
04:25:14,479 --> 04:25:19,159
calculator computers also suffer from

7196
04:25:16,840 --> 04:25:20,479
potentially what's called truncation

7197
04:25:19,159 --> 04:25:22,439
where especially when you're doing math

7198
04:25:20,479 --> 04:25:24,319
involving floating Point values that is

7199
04:25:22,439 --> 04:25:27,119
numbers with decimals you might

7200
04:25:24,319 --> 04:25:29,319
accidentally unknowingly truncate the

7201
04:25:27,119 --> 04:25:31,040
value that is lose everything after the

7202
04:25:29,319 --> 04:25:33,039
decimal point so in fact let me go back

7203
04:25:31,040 --> 04:25:35,119
to vs code here I'll clear my terminal

7204
04:25:33,040 --> 04:25:37,560
window and let's still use Longs but

7205
04:25:35,119 --> 04:25:39,920
let's go ahead and use division instead

7206
04:25:37,560 --> 04:25:42,080
of addition here so let me change this

7207
04:25:39,920 --> 04:25:44,080
plus to a divide operator let me go

7208
04:25:42,080 --> 04:25:46,359
ahead and recompile the code down here

7209
04:25:44,080 --> 04:25:48,720
with make calculator let me go ahead and

7210
04:25:46,359 --> 04:25:53,199
run/ calculator and let me go ahead and

7211
04:25:48,720 --> 04:25:55,198
do something like 14x and 3 for y and

7212
04:25:53,199 --> 04:25:58,760
we'll see that well wait a minute 1

7213
04:25:55,199 --> 04:26:00,439
divided 3 I learned should be 13 but in

7214
04:25:58,760 --> 04:26:03,840
a floating point value that should be

7215
04:26:00,439 --> 04:26:05,600
point0 it should be

7216
04:26:03,840 --> 04:26:07,239
0.33333 you know maybe with a little

7217
04:26:05,600 --> 04:26:08,640
line over in grade school but really an

7218
04:26:07,239 --> 04:26:11,080
infinite number of Threes And yet we

7219
04:26:08,640 --> 04:26:13,118
seem to have lost even one of those

7220
04:26:11,080 --> 04:26:15,960
threes after the decimal point because

7221
04:26:13,119 --> 04:26:19,319
the answer is coming back here as just

7222
04:26:15,960 --> 04:26:21,960
zero so why might that be well if I know

7223
04:26:19,319 --> 04:26:23,680
that two integers when divided one by

7224
04:26:21,960 --> 04:26:25,960
the other is supposed to give me a

7225
04:26:23,680 --> 04:26:28,279
fraction a floating point value with a

7226
04:26:25,960 --> 04:26:30,319
decimal point I can't continue to use

7227
04:26:28,279 --> 04:26:32,439
integers or even in this case Longs

7228
04:26:30,319 --> 04:26:34,118
which do not have support for decimal

7229
04:26:32,439 --> 04:26:36,399
points so let me go ahead and change

7230
04:26:34,119 --> 04:26:39,040
this format code here from percent Li I

7231
04:26:36,399 --> 04:26:41,159
to percent F which is again going to

7232
04:26:39,040 --> 04:26:43,399
represent a floating point value instead

7233
04:26:41,159 --> 04:26:47,199
of a long integer or even an integer and

7234
04:26:43,399 --> 04:26:50,680
let me go ahead further and Define maybe

7235
04:26:47,199 --> 04:26:53,560
a third variable Z as a float itself so

7236
04:26:50,680 --> 04:26:56,080
I'll give myself a variable Z equals x /

7237
04:26:53,560 --> 04:26:57,720
Y and now rather than print X ided Y

7238
04:26:56,080 --> 04:26:59,119
let's just go ahead and print Z so now

7239
04:26:57,720 --> 04:27:01,278
I'm operating in a world of floating

7240
04:26:59,119 --> 04:27:04,080
Point values because I know proactively

7241
04:27:01,279 --> 04:27:06,119
that an long or an INT divided by

7242
04:27:04,080 --> 04:27:08,279
another such value if it's meant to have

7243
04:27:06,119 --> 04:27:10,319
a fraction needs to be stored in a

7244
04:27:08,279 --> 04:27:12,279
floating point value something with a

7245
04:27:10,319 --> 04:27:14,519
decimal point well let me go down to my

7246
04:27:12,279 --> 04:27:17,680
terminal window here and rerun make of

7247
04:27:14,520 --> 04:27:22,159
calculator seems to work okay/ calulator

7248
04:27:17,680 --> 04:27:24,239
and let's do 1 / 3 again and still here

7249
04:27:22,159 --> 04:27:25,880
we see all zeros well so we do at least

7250
04:27:24,239 --> 04:27:27,439
see a decimal point so we've made some

7251
04:27:25,880 --> 04:27:29,679
progress thanks to the percent F in the

7252
04:27:27,439 --> 04:27:33,920
float but it seems that we've already

7253
04:27:29,680 --> 04:27:35,319
truncated the value 1 / 3 so how do we

7254
04:27:33,920 --> 04:27:36,920
actually get around this issue well if

7255
04:27:35,319 --> 04:27:38,159
you the program know that you're dealing

7256
04:27:36,920 --> 04:27:39,960
in a world that's going to give you

7257
04:27:38,159 --> 04:27:42,680
floating Point values with decimal

7258
04:27:39,960 --> 04:27:44,560
points you might very well need to use

7259
04:27:42,680 --> 04:27:47,439
what's called a feature known as typ

7260
04:27:44,560 --> 04:27:49,159
casting that is convert one data type to

7261
04:27:47,439 --> 04:27:51,359
another by explicitly telling the

7262
04:27:49,159 --> 04:27:52,880
compiler that you want to do so now how

7263
04:27:51,359 --> 04:27:55,560
do I do this well let's go back to my

7264
04:27:52,880 --> 04:28:00,278
code here and if the issue fundamentally

7265
04:27:55,560 --> 04:28:02,439
is that c is still treating X and Y as

7266
04:28:00,279 --> 04:28:04,640
integers or technically Longs with no

7267
04:28:02,439 --> 04:28:06,600
decimal point and dividing one by the

7268
04:28:04,640 --> 04:28:09,080
other therefore has no room so to speak

7269
04:28:06,600 --> 04:28:11,800
for any numbers after a decimal point

7270
04:28:09,080 --> 04:28:13,840
why don't I proactively do this let me

7271
04:28:11,800 --> 04:28:15,960
using a slightly new syntax with

7272
04:28:13,840 --> 04:28:19,720
parenthesis specify that I want to

7273
04:28:15,960 --> 04:28:22,479
convert X proactively from a long to a

7274
04:28:19,720 --> 04:28:25,760
float let me specify proactively that I

7275
04:28:22,479 --> 04:28:28,118
want to convert y from a long to a float

7276
04:28:25,760 --> 04:28:30,680
as well and now let me go ahead and

7277
04:28:28,119 --> 04:28:32,880
trust that in Z should be the result of

7278
04:28:30,680 --> 04:28:35,920
dividing not a long by a long or an INT

7279
04:28:32,880 --> 04:28:38,198
by an INT but rather a float by a float

7280
04:28:35,920 --> 04:28:41,239
Let Me Clear My terminal window run make

7281
04:28:38,199 --> 04:28:45,760
calculator again seems to work okay/

7282
04:28:41,239 --> 04:28:48,359
calulator and now 1 3 and hopefully now

7283
04:28:45,760 --> 04:28:49,960
we actually see that my code has

7284
04:28:48,359 --> 04:28:53,279
outputed

7285
04:28:49,960 --> 04:28:55,039
0.333 333 and I think if we kept showing

7286
04:28:53,279 --> 04:28:56,800
more numbers after the decimal point

7287
04:28:55,040 --> 04:28:59,439
we'd theoretically see as many of those

7288
04:28:56,800 --> 04:29:01,880
threes as we want but there is still one

7289
04:28:59,439 --> 04:29:03,359
more catch and especially when we're

7290
04:29:01,880 --> 04:29:05,880
manipulating numbers in this way in a

7291
04:29:03,359 --> 04:29:07,479
computer using a finite amount of memory

7292
04:29:05,880 --> 04:29:09,839
another challenge we might run up

7293
04:29:07,479 --> 04:29:12,278
against besides integer overflow besides

7294
04:29:09,840 --> 04:29:14,920
truncation is this known as floating

7295
04:29:12,279 --> 04:29:17,040
point in Precision just as we can't

7296
04:29:14,920 --> 04:29:19,199
represent as big of an integer as we

7297
04:29:17,040 --> 04:29:20,760
want using int or long alone because

7298
04:29:19,199 --> 04:29:22,840
there is going to be an upper bound

7299
04:29:20,760 --> 04:29:26,000
they're similarly going to be a boundary

7300
04:29:22,840 --> 04:29:28,080
on just how precise our numbers can be

7301
04:29:26,000 --> 04:29:30,080
and indeed let's go back to vs code here

7302
04:29:28,080 --> 04:29:31,479
I'll clear my terminal window yet again

7303
04:29:30,080 --> 04:29:33,600
and this time let me use some slightly

7304
04:29:31,479 --> 04:29:35,039
unley syntax to specify that I don't

7305
04:29:33,600 --> 04:29:36,600
want to see the default number of

7306
04:29:35,040 --> 04:29:38,920
numbers after the the decimal point

7307
04:29:36,600 --> 04:29:42,040
which percent F gives us automatically

7308
04:29:38,920 --> 04:29:44,119
let's go ahead and show me 20 decimal

7309
04:29:42,040 --> 04:29:46,279
point numbers after the decimal point

7310
04:29:44,119 --> 04:29:50,080
and the weird Syntax for this is to do

7311
04:29:46,279 --> 04:29:52,159
not percent F but percent period to zero

7312
04:29:50,080 --> 04:29:54,239
to indicate to see that I want to see 20

7313
04:29:52,159 --> 04:29:56,118
digits not the default after now the

7314
04:29:54,239 --> 04:29:59,080
decimal point let me rerun make

7315
04:29:56,119 --> 04:30:02,520
calculator let me do dot calculat again

7316
04:29:59,080 --> 04:30:04,640
and let's do one let's do three and now

7317
04:30:02,520 --> 04:30:06,520
this is even weirder right from grade

7318
04:30:04,640 --> 04:30:08,439
school you presumably learned that 1

7319
04:30:06,520 --> 04:30:10,159
divided 3 is of course 1/3 but that

7320
04:30:08,439 --> 04:30:13,000
should be

7321
04:30:10,159 --> 04:30:15,239
0.33333 infinitely many times or on

7322
04:30:13,000 --> 04:30:17,119
paper with a little line over it but the

7323
04:30:15,239 --> 04:30:18,960
computer is just doing some weird

7324
04:30:17,119 --> 04:30:23,279
approximation here it's a whole bunch of

7325
04:30:18,960 --> 04:30:25,479
Threes And then 43 267 44 079

7326
04:30:23,279 --> 04:30:27,159
590 well what's really happening under

7327
04:30:25,479 --> 04:30:29,479
the hood well again is this issue of

7328
04:30:27,159 --> 04:30:31,800
floating point in Precision if you only

7329
04:30:29,479 --> 04:30:33,840
have a finite number of bits and in turn

7330
04:30:31,800 --> 04:30:36,239
a finite amount of memory the computer

7331
04:30:33,840 --> 04:30:38,960
can really only be so precise

7332
04:30:36,239 --> 04:30:41,118
intuitively alter Converse or

7333
04:30:38,960 --> 04:30:43,358
equivalently the computer has decided on

7334
04:30:41,119 --> 04:30:45,359
some way of representing floating Point

7335
04:30:43,359 --> 04:30:47,399
values but the catch is per grade school

7336
04:30:45,359 --> 04:30:49,439
math there's an infinite number of

7337
04:30:47,399 --> 04:30:51,358
numbers out there and an infinite number

7338
04:30:49,439 --> 04:30:53,040
of floating Point values because you can

7339
04:30:51,359 --> 04:30:55,520
keep adding more and more digits if you

7340
04:30:53,040 --> 04:30:57,119
want so the computer given the way it's

7341
04:30:55,520 --> 04:30:59,279
implementing these floating Point values

7342
04:30:57,119 --> 04:31:01,920
is essentially giving us the closest

7343
04:30:59,279 --> 04:31:04,560
approximation that it can now how can we

7344
04:31:01,920 --> 04:31:06,199
go about improving the situation well

7345
04:31:04,560 --> 04:31:08,159
there is one alternative instead of

7346
04:31:06,199 --> 04:31:09,920
using float I can use something called a

7347
04:31:08,159 --> 04:31:11,720
double which as the name suggests uses

7348
04:31:09,920 --> 04:31:14,720
twice as many bits as a float so instead

7349
04:31:11,720 --> 04:31:16,118
of 32 typically it will use 64 and

7350
04:31:14,720 --> 04:31:17,880
that's just like the difference between

7351
04:31:16,119 --> 04:31:19,840
a long and an INT which gave us more

7352
04:31:17,880 --> 04:31:22,039
bits but in this case this will be used

7353
04:31:19,840 --> 04:31:24,880
for more Precision let's go ahead and

7354
04:31:22,040 --> 04:31:26,920
Cast X to a double let's cast y to a

7355
04:31:24,880 --> 04:31:30,839
double and now let's go ahead and using

7356
04:31:26,920 --> 04:31:32,720
the same format code percent 2f is still

7357
04:31:30,840 --> 04:31:35,640
okay for doubles let me do make

7358
04:31:32,720 --> 04:31:39,000
calculator let me do do slash calculator

7359
04:31:35,640 --> 04:31:40,560
and now let me do 1 / 3 and we still

7360
04:31:39,000 --> 04:31:42,040
have some of that in precision and we'd

7361
04:31:40,560 --> 04:31:44,640
see even more of it if we looked at more

7362
04:31:42,040 --> 04:31:46,920
than just 20 digits but now we have more

7363
04:31:44,640 --> 04:31:49,399
threes after the decimal point so it's

7364
04:31:46,920 --> 04:31:52,439
at least more more more precise but it's

7365
04:31:49,399 --> 04:31:54,640
not perfect but it it's at least more

7366
04:31:52,439 --> 04:31:56,159
precise so these kinds of issues then

7367
04:31:54,640 --> 04:31:57,399
are going to be necessary to keep in

7368
04:31:56,159 --> 04:31:59,319
mind anytime you do something

7369
04:31:57,399 --> 04:32:01,080
numerically scientifically at least with

7370
04:31:59,319 --> 04:32:02,960
a language like C where you're going to

7371
04:32:01,080 --> 04:32:05,080
bump up against these real world

7372
04:32:02,960 --> 04:32:06,839
limitations of hardware and intern

7373
04:32:05,080 --> 04:32:08,800
language now later in the semester we'll

7374
04:32:06,840 --> 04:32:09,840
transition to a language called Python

7375
04:32:08,800 --> 04:32:11,720
and that's actually going to solve at

7376
04:32:09,840 --> 04:32:13,520
least one of these problems for us but

7377
04:32:11,720 --> 04:32:15,479
just automatically giving us more bits

7378
04:32:13,520 --> 04:32:17,239
so to speak as we need them at least for

7379
04:32:15,479 --> 04:32:19,720
integers but even the issue of floating

7380
04:32:17,239 --> 04:32:21,800
point in Precision is going to remain

7381
04:32:19,720 --> 04:32:23,960
now just how real world are these issues

7382
04:32:21,800 --> 04:32:25,800
well back in the year 1999 we got a

7383
04:32:23,960 --> 04:32:28,039
taste of this when the world realized in

7384
04:32:25,800 --> 04:32:30,198
the Years leading up to that date that

7385
04:32:28,040 --> 04:32:33,159
it might not have been the best idea to

7386
04:32:30,199 --> 04:32:35,600
implement computers and software therein

7387
04:32:33,159 --> 04:32:38,199
by storing years using just two digits

7388
04:32:35,600 --> 04:32:40,520
like instead of storing 1999 to

7389
04:32:38,199 --> 04:32:43,040
represent the year 1999 a lot of

7390
04:32:40,520 --> 04:32:44,640
computers for reasons of space and cost

7391
04:32:43,040 --> 04:32:46,800
were in the habit of kind of cutting a

7392
04:32:44,640 --> 04:32:49,358
corner and just using two digits to keep

7393
04:32:46,800 --> 04:32:51,920
track of the year the problem with that

7394
04:32:49,359 --> 04:32:55,520
is that if systems were not updated by

7395
04:32:51,920 --> 04:32:57,800
the year 1999 to support the year 2000

7396
04:32:55,520 --> 04:32:59,880
2001 and so forth is that just like

7397
04:32:57,800 --> 04:33:02,039
before with integer overflow some

7398
04:32:59,880 --> 04:33:04,840
computers might add one to the year in

7399
04:33:02,040 --> 04:33:06,680
their memory 99 it should be the year

7400
04:33:04,840 --> 04:33:08,958
2000 but if they're only using two

7401
04:33:06,680 --> 04:33:11,039
digits to represent years they might

7402
04:33:08,958 --> 04:33:14,000
mistake the year as some systems may

7403
04:33:11,039 --> 04:33:16,561
very well have for the year 1900 instead

7404
04:33:14,000 --> 04:33:18,680
taking literally a big step backwards if

7405
04:33:16,561 --> 04:33:20,359
you will now you'd like to think that

7406
04:33:18,680 --> 04:33:21,920
kind of issue is behind us especially as

7407
04:33:20,359 --> 04:33:24,080
we understand all the more about the

7408
04:33:21,919 --> 04:33:25,480
limitations of code and Computing but

7409
04:33:24,080 --> 04:33:27,561
we're actually going to run up against

7410
04:33:25,480 --> 04:33:30,599
this very same type of issue again in

7411
04:33:27,561 --> 04:33:31,520
just a few years on January 19th in the

7412
04:33:30,599 --> 04:33:34,639
year

7413
04:33:31,520 --> 04:33:36,600
2038 we will have run out of bits in

7414
04:33:34,639 --> 04:33:39,118
most computers right now to keep track

7415
04:33:36,599 --> 04:33:42,480
of time it turns out years ago humans

7416
04:33:39,118 --> 04:33:44,718
decided to use a 32-bit integer to keep

7417
04:33:42,480 --> 04:33:46,480
track of how many seconds had elapsed

7418
04:33:44,719 --> 04:33:48,920
over time they chose a somewhat

7419
04:33:46,480 --> 04:33:51,520
arbitrary date in the past January 1st

7420
04:33:48,919 --> 04:33:53,919
1970 and they just started counting

7421
04:33:51,520 --> 04:33:55,920
seconds from there on out and so if a

7422
04:33:53,919 --> 04:33:57,799
computer stores some number of seconds

7423
04:33:55,919 --> 04:33:59,399
that tells the computer how many seconds

7424
04:33:57,799 --> 04:34:02,599
have passed since that particular date

7425
04:33:59,400 --> 04:34:04,439
January 1st 1970 unfortunately using a

7426
04:34:02,599 --> 04:34:07,278
32-bit integer as we've seen you can

7427
04:34:04,438 --> 04:34:10,438
only count so high at which point you

7428
04:34:07,278 --> 04:34:12,359
overflow the size of that variable and

7429
04:34:10,438 --> 04:34:14,358
so potentially if we don't get ahead of

7430
04:34:12,359 --> 04:34:17,958
this as humans as a society as computer

7431
04:34:14,359 --> 04:34:21,639
scientist on the date January 19th

7432
04:34:17,958 --> 04:34:23,480
2038 that bit might flip over there by

7433
04:34:21,639 --> 04:34:25,919
overflowing the size of those integers

7434
04:34:23,480 --> 04:34:28,079
bringing us back computationally to

7435
04:34:25,919 --> 04:34:31,038
December 13th

7436
04:34:28,080 --> 04:34:32,561
1901 so this is to say now with all of

7437
04:34:31,039 --> 04:34:34,561
this computational ability and code

7438
04:34:32,561 --> 04:34:36,400
comes a responsibility to actually write

7439
04:34:34,561 --> 04:34:38,160
correct code next week we'll peel back

7440
04:34:36,400 --> 04:34:40,359
some of these layers but for now this

7441
04:34:38,160 --> 04:34:42,561
was week one and best of luck on problem

7442
04:34:40,359 --> 04:34:42,561
set

7443
04:34:44,110 --> 04:34:52,240
[Music]

7444
04:34:58,210 --> 04:35:03,700
[Music]

7445
04:35:04,199 --> 04:35:07,199
one

7446
04:35:22,820 --> 04:35:41,458
[Music]

7447
04:35:45,980 --> 04:35:49,040
[Music]

7448
04:35:55,310 --> 04:35:58,400
[Music]

7449
04:36:05,250 --> 04:36:18,610
[Music]

7450
04:36:32,639 --> 04:36:37,639
all right this is cs50 and this is this

7451
04:36:35,160 --> 04:36:40,000
is week two wherein we're going to take

7452
04:36:37,639 --> 04:36:41,599
a look at a lower level at how things

7453
04:36:40,000 --> 04:36:43,561
work and indeed among the goals of the

7454
04:36:41,599 --> 04:36:44,878
course isn't this bottom up

7455
04:36:43,561 --> 04:36:46,600
understanding so that in a couple of

7456
04:36:44,879 --> 04:36:48,279
weeks time even a few years time when

7457
04:36:46,599 --> 04:36:49,718
you encounter some new technology you'll

7458
04:36:48,278 --> 04:36:51,718
be able to think back hopefully on some

7459
04:36:49,719 --> 04:36:53,119
of this week's and this courses basic

7460
04:36:51,719 --> 04:36:54,760
building blocks and Primitives and

7461
04:36:53,118 --> 04:36:56,878
really just deduce how tomorrow's

7462
04:36:54,759 --> 04:36:58,358
Technologies work but along the way it's

7463
04:36:56,879 --> 04:37:00,080
going to seem it's going to be a little

7464
04:36:58,359 --> 04:37:02,480
hard perhaps to see the forest for the

7465
04:37:00,080 --> 04:37:04,119
tree so to speak and so the goal at the

7466
04:37:02,480 --> 04:37:05,438
end of the day still is going to be

7467
04:37:04,118 --> 04:37:07,038
problem solving and so we thought we'd

7468
04:37:05,438 --> 04:37:09,320
begin today with a look at some of the

7469
04:37:07,039 --> 04:37:11,400
problems we'll talk about or solve this

7470
04:37:09,320 --> 04:37:12,840
coming week uh and for that we have some

7471
04:37:11,400 --> 04:37:14,400
Brave volunteers who have already come

7472
04:37:12,840 --> 04:37:17,359
up if we could turn on some dramatic

7473
04:37:14,400 --> 04:37:20,719
lighting and meet today's

7474
04:37:17,359 --> 04:37:22,439
volunteers so on my left here we have hi

7475
04:37:20,719 --> 04:37:24,199
my name is Alex I'm a first year at the

7476
04:37:22,438 --> 04:37:28,118
college and I'm from Chapo North

7477
04:37:24,199 --> 04:37:30,639
Carolina Welcome to Alex and to Alex's

7478
04:37:28,118 --> 04:37:32,278
right um I'm Sarah I'm from Toronto

7479
04:37:30,639 --> 04:37:34,359
Canada and I'm also a first year student

7480
04:37:32,278 --> 04:37:36,878
at the college wonderful well welcome to

7481
04:37:34,359 --> 04:37:38,320
both Al and Sarah so one of the problems

7482
04:37:36,879 --> 04:37:40,561
you'll perhaps solve this week for

7483
04:37:38,320 --> 04:37:42,680
problem set two is to analyze the

7484
04:37:40,561 --> 04:37:44,240
reading level of a body of text whether

7485
04:37:42,680 --> 04:37:45,879
someone reads at a first grade level

7486
04:37:44,240 --> 04:37:48,719
second grade level third grade level all

7487
04:37:45,879 --> 04:37:51,000
the way up to 12 or 13 or Beyond but

7488
04:37:48,719 --> 04:37:52,520
you've perhaps never quite thought about

7489
04:37:51,000 --> 04:37:54,799
certainly in terms of code like how you

7490
04:37:52,520 --> 04:37:56,561
would analyze some text some book and

7491
04:37:54,799 --> 04:37:58,039
figure out what reading level is it at

7492
04:37:56,561 --> 04:37:59,561
and yet surely our teachers growing up

7493
04:37:58,039 --> 04:38:01,958
kind of knew or had an intuitive sense

7494
04:37:59,561 --> 04:38:03,160
of this so let's consider some sample

7495
04:38:01,958 --> 04:38:05,919
text for instance Alex what have you

7496
04:38:03,160 --> 04:38:12,520
been reading lately um

7497
04:38:05,919 --> 04:38:15,679
One Fish Two Fish Red F Fish Blue Fish

7498
04:38:12,520 --> 04:38:17,600
wonderful so given that what grade level

7499
04:38:15,680 --> 04:38:20,520
would you say Alex is currently reading

7500
04:38:17,599 --> 04:38:23,718
at feel free to just shout it

7501
04:38:20,520 --> 04:38:26,600
out first first so indeed you'll see

7502
04:38:23,719 --> 04:38:28,680
this week if you run your code on Alex's

7503
04:38:26,599 --> 04:38:30,718
text it actually turns out he reads

7504
04:38:28,680 --> 04:38:32,760
below a first grade reading level but

7505
04:38:30,719 --> 04:38:35,520
but why might that be what might your

7506
04:38:32,759 --> 04:38:37,358
intuition be for why we've

7507
04:38:35,520 --> 04:38:40,160
uh why we've accused Alex of reading at

7508
04:38:37,359 --> 04:38:43,039
this level feel free to shout

7509
04:38:40,160 --> 04:38:44,719
out yeah so very few syllables short

7510
04:38:43,039 --> 04:38:47,039
words short sentences and so there's

7511
04:38:44,719 --> 04:38:48,639
some puristic perhaps we can infer from

7512
04:38:47,039 --> 04:38:50,520
that short text that that probably means

7513
04:38:48,639 --> 04:38:52,239
that it's best for younger children now

7514
04:38:50,520 --> 04:38:55,240
Sarah by contrast what have you been

7515
04:38:52,240 --> 04:38:58,359
reading Mr and Miss dersley of number

7516
04:38:55,240 --> 04:39:00,119
four privet Drive were proud to say that

7517
04:38:58,359 --> 04:39:02,000
they were perfectly normal thank you

7518
04:39:00,118 --> 04:39:03,878
very much they were the last people

7519
04:39:02,000 --> 04:39:06,080
you'd expect to be involved in anything

7520
04:39:03,879 --> 04:39:08,600
strange or mysterious ious because they

7521
04:39:06,080 --> 04:39:10,160
just didn't hold with much nonsense all

7522
04:39:08,599 --> 04:39:11,560
right now irrespective of what grade you

7523
04:39:10,160 --> 04:39:13,199
were in when you might have read that

7524
04:39:11,561 --> 04:39:14,119
text what grade level does Sarah seem to

7525
04:39:13,199 --> 04:39:18,080
be reading

7526
04:39:14,118 --> 04:39:19,799
at so eighth grade second grade okay so

7527
04:39:18,080 --> 04:39:21,920
hearing a bit of everything so that at

7528
04:39:19,799 --> 04:39:23,560
least according to code would actually

7529
04:39:21,919 --> 04:39:26,239
be seventh grade and what might the

7530
04:39:23,561 --> 04:39:27,439
intuition there be why is that a higher

7531
04:39:26,240 --> 04:39:31,320
grade level even though we might

7532
04:39:27,438 --> 04:39:33,438
disagree exactly which grade it is comp

7533
04:39:31,320 --> 04:39:35,079
yeah so complicated sentences longer

7534
04:39:33,438 --> 04:39:36,718
sentences so indeed a lot more more

7535
04:39:35,080 --> 04:39:38,240
words were being spoken by Sarah because

7536
04:39:36,719 --> 04:39:40,280
there was so much more there on the page

7537
04:39:38,240 --> 04:39:42,200
so we'll translate these ideas this

7538
04:39:40,280 --> 04:39:44,440
coming week and problem set two if you

7539
04:39:42,200 --> 04:39:45,958
tackle this one to code so that you can

7540
04:39:44,440 --> 04:39:47,680
ultimately infer things of these

7541
04:39:45,958 --> 04:39:49,320
quantitatively but to do so we're going

7542
04:39:47,680 --> 04:39:50,600
to have to understand text so let's

7543
04:39:49,320 --> 04:39:53,400
first thank our volunteers and then

7544
04:39:50,600 --> 04:39:56,717
we'll dive in to that lower

7545
04:39:53,400 --> 04:39:56,718
level stress

7546
04:39:58,798 --> 04:40:04,798
balls sure you can keep those yeah all

7547
04:40:02,840 --> 04:40:06,400
right so besides that let's consider one

7548
04:40:04,798 --> 04:40:08,680
another body of text perhaps that you

7549
04:40:06,400 --> 04:40:10,280
might see this week which is namely a

7550
04:40:08,680 --> 04:40:11,680
little something like this what I have

7551
04:40:10,280 --> 04:40:13,920
here on the screen is what we'll start

7552
04:40:11,680 --> 04:40:15,638
calling today Cipher text it's the

7553
04:40:13,920 --> 04:40:17,600
result of encrypting some piece of

7554
04:40:15,638 --> 04:40:19,079
information and encryption or more

7555
04:40:17,600 --> 04:40:21,120
generally the Art and Science of

7556
04:40:19,080 --> 04:40:22,798
cryptography is all around us it's what

7557
04:40:21,120 --> 04:40:24,320
you're using on the web on your phones

7558
04:40:22,798 --> 04:40:26,878
with your Banks and anything that tries

7559
04:40:24,320 --> 04:40:28,160
to keep data secure is using encryption

7560
04:40:26,878 --> 04:40:30,400
but there's going to be different levels

7561
04:40:28,160 --> 04:40:31,798
of encryption strong encryption weak

7562
04:40:30,400 --> 04:40:34,878
encryption and what you see here on the

7563
04:40:31,798 --> 04:40:36,878
screen isn't all that strong but we'll

7564
04:40:34,878 --> 04:40:39,200
see later today how we might decrypt

7565
04:40:36,878 --> 04:40:41,480
this and actually reveal what the plain

7566
04:40:39,200 --> 04:40:43,600
text is that corresponds to that Cipher

7567
04:40:41,480 --> 04:40:45,520
text but in order to do so we have to

7568
04:40:43,600 --> 04:40:47,039
start taking off some training wheels so

7569
04:40:45,520 --> 04:40:49,040
to speak and believe it or not even

7570
04:40:47,040 --> 04:40:50,878
though your time with C this past week

7571
04:40:49,040 --> 04:40:53,000
for the first time probably might have

7572
04:40:50,878 --> 04:40:55,240
been rather in the weeds and much more

7573
04:40:53,000 --> 04:40:56,560
complicated seemingly than C it turns

7574
04:40:55,240 --> 04:40:58,240
out that along the way we have been

7575
04:40:56,560 --> 04:41:00,120
providing and will continue to provide

7576
04:40:58,240 --> 04:41:02,520
certain training wheels for instance the

7577
04:41:00,120 --> 04:41:05,399
cs50 library is one of them and even

7578
04:41:02,520 --> 04:41:07,320
some of the explanations give up topics

7579
04:41:05,400 --> 04:41:09,000
for now in these early weeks will be

7580
04:41:07,320 --> 04:41:10,638
somewhat simplified abstracted away if

7581
04:41:09,000 --> 04:41:12,360
you will but the goal ultimately is for

7582
04:41:10,638 --> 04:41:14,680
you to understand each and every one of

7583
04:41:12,360 --> 04:41:17,040
those details so that after cs50 you

7584
04:41:14,680 --> 04:41:18,600
really can stand on your own and

7585
04:41:17,040 --> 04:41:21,638
understand and wrap your mind around any

7586
04:41:18,600 --> 04:41:24,000
future Technologies as well so let's

7587
04:41:21,638 --> 04:41:25,480
consider first the very first program

7588
04:41:24,000 --> 04:41:27,798
with which we began last week which was

7589
04:41:25,480 --> 04:41:29,160
this one so hello world and C at the end

7590
04:41:27,798 --> 04:41:30,680
of the day it was really the print a

7591
04:41:29,160 --> 04:41:32,520
function that was doing the interesting

7592
04:41:30,680 --> 04:41:35,120
part of the work but there was a lot of

7593
04:41:32,520 --> 04:41:37,320
technical stuff above and below it the

7594
04:41:35,120 --> 04:41:39,920
the curly braces the parentheses words

7595
04:41:37,320 --> 04:41:42,000
like void and include and then of course

7596
04:41:39,920 --> 04:41:43,760
the angled brackets and more but at the

7597
04:41:42,000 --> 04:41:47,040
end of the day we needed to convert that

7598
04:41:43,760 --> 04:41:48,679
source code in C to machine code the

7599
04:41:47,040 --> 04:41:51,080
zeros and ones in binary that the

7600
04:41:48,680 --> 04:41:53,600
computer understood and to do that of

7601
04:41:51,080 --> 04:41:55,600
course we ran we compiled the code we

7602
04:41:53,600 --> 04:41:57,600
ran make and then we were able to

7603
04:41:55,600 --> 04:41:59,359
actually run that code there so let me

7604
04:41:57,600 --> 04:42:02,280
actually go over here to VSS code and

7605
04:41:59,360 --> 04:42:04,280
really quickly recreate that hello.c

7606
04:42:02,280 --> 04:42:08,520
pretty much by transcribing the same so

7607
04:42:04,280 --> 04:42:12,920
I have here uh include standard

7608
04:42:08,520 --> 04:42:15,120
i.h uh int main void and then in here I

7609
04:42:12,920 --> 04:42:17,760
had quite simply hello comma world with

7610
04:42:15,120 --> 04:42:20,000
my back slend quotes and more now last

7611
04:42:17,760 --> 04:42:22,120
time to compile this I indeed ran make

7612
04:42:20,000 --> 04:42:23,520
hello followed by enter hopefully you

7613
04:42:22,120 --> 04:42:26,079
see no errors and that's a good thing

7614
04:42:23,520 --> 04:42:28,240
and if you do do/ hello you see in fact

7615
04:42:26,080 --> 04:42:31,240
the results of that program but it turns

7616
04:42:28,240 --> 04:42:33,360
out that make is not actually a compiler

7617
04:42:31,240 --> 04:42:35,920
as I alluded to last week it's a program

7618
04:42:33,360 --> 04:42:37,520
that clearly makes your program but it

7619
04:42:35,920 --> 04:42:39,120
itself just automates the process of

7620
04:42:37,520 --> 04:42:41,120
using an actual compiler and there's

7621
04:42:39,120 --> 04:42:43,000
lots of different compilers out there

7622
04:42:41,120 --> 04:42:44,600
and the one that it's actually using

7623
04:42:43,000 --> 04:42:47,520
underneath the hood is a little

7624
04:42:44,600 --> 04:42:49,480
something called clang for C language

7625
04:42:47,520 --> 04:42:51,320
and clang is a pretty popular compiler

7626
04:42:49,480 --> 04:42:53,920
nowadays there's another one that's been

7627
04:42:51,320 --> 04:42:56,079
around for ages called GCC but these are

7628
04:42:53,920 --> 04:42:57,280
just specific names for types of

7629
04:42:56,080 --> 04:42:58,718
compilers that different people

7630
04:42:57,280 --> 04:43:01,280
different companies different groups

7631
04:42:58,718 --> 04:43:04,760
have actually created but if you use in

7632
04:43:01,280 --> 04:43:06,039
week one a compiler yourself manually

7633
04:43:04,760 --> 04:43:07,559
you have to know you have to understand

7634
04:43:06,040 --> 04:43:09,600
a little more about what's going on

7635
04:43:07,560 --> 04:43:11,280
because it's even more cryptic than with

7636
04:43:09,600 --> 04:43:13,120
just make a loan so in fact let me go

7637
04:43:11,280 --> 04:43:14,638
back to my terminal window here let me

7638
04:43:13,120 --> 04:43:18,559
go ahead and clear the screen a little

7639
04:43:14,638 --> 04:43:20,760
bit and just run really the raw compiler

7640
04:43:18,560 --> 04:43:22,638
command so what make is automating for

7641
04:43:20,760 --> 04:43:26,320
me let me actually do this manually for

7642
04:43:22,638 --> 04:43:29,718
just a moment so if I want to compile uh

7643
04:43:26,320 --> 04:43:35,120
hello.c into an executable program I can

7644
04:43:29,718 --> 04:43:38,400
run I can do this uh clang space hello

7645
04:43:35,120 --> 04:43:39,878
C and then enter and now there's no

7646
04:43:38,400 --> 04:43:42,320
output which is a good thing in this

7647
04:43:39,878 --> 04:43:46,120
case no errors but notice this if I go

7648
04:43:42,320 --> 04:43:49,000
ahead and type LS it turns out there's a

7649
04:43:46,120 --> 04:43:50,958
uh a file that's been created suddenly

7650
04:43:49,000 --> 04:43:53,360
in my current folder weirdly called

7651
04:43:50,958 --> 04:43:55,000
a.out that stands for assembler output

7652
04:43:53,360 --> 04:43:57,520
and long story short that's actually the

7653
04:43:55,000 --> 04:43:59,440
default name of a program that's created

7654
04:43:57,520 --> 04:44:01,638
when you just run C by itself now that's

7655
04:43:59,440 --> 04:44:03,359
a pretty uh bad name for a program

7656
04:44:01,638 --> 04:44:06,480
because it doesn't describe what it said

7657
04:44:03,360 --> 04:44:09,840
does so better would be here to perhaps

7658
04:44:06,480 --> 04:44:12,120
do well instead of a.out which yes still

7659
04:44:09,840 --> 04:44:14,440
prints hello. world but isn't really a a

7660
04:44:12,120 --> 04:44:16,000
clearly named program it'd be nice to

7661
04:44:14,440 --> 04:44:17,440
name this hello so what could I do I

7662
04:44:16,000 --> 04:44:19,920
could do like we learned last week well

7663
04:44:17,440 --> 04:44:22,440
I could rename a.out to Hello by using

7664
04:44:19,920 --> 04:44:25,000
linux's MV command so I'm going to move

7665
04:44:22,440 --> 04:44:27,039
a. out to become hello but that too

7666
04:44:25,000 --> 04:44:29,638
seems kind of tedious now I have three

7667
04:44:27,040 --> 04:44:31,440
steps like write my code compile my code

7668
04:44:29,638 --> 04:44:33,520
and then rename it before I can even run

7669
04:44:31,440 --> 04:44:35,399
it like we can do better than that and

7670
04:44:33,520 --> 04:44:37,480
so it turns out that certain commands

7671
04:44:35,400 --> 04:44:39,440
like clang support what we're going to

7672
04:44:37,480 --> 04:44:42,360
start today calling commandline

7673
04:44:39,440 --> 04:44:44,359
arguments a commandline argument unlike

7674
04:44:42,360 --> 04:44:46,878
an argument to a function is just an

7675
04:44:44,360 --> 04:44:49,638
additional word or key phrase that you

7676
04:44:46,878 --> 04:44:51,600
type after a command at your prompt in

7677
04:44:49,638 --> 04:44:53,280
your terminal window that just modifies

7678
04:44:51,600 --> 04:44:55,399
the behavior of that command it

7679
04:44:53,280 --> 04:44:56,680
configures it a little more specifically

7680
04:44:55,400 --> 04:44:58,760
so what you're seeing here on the screen

7681
04:44:56,680 --> 04:45:00,958
is a summary of a better command with

7682
04:44:58,760 --> 04:45:04,958
which to run clang so that now I can

7683
04:45:00,958 --> 04:45:06,638
specify the output of this command this-

7684
04:45:04,958 --> 04:45:07,920
o so what do I mean by that well let me

7685
04:45:06,638 --> 04:45:11,480
go ahead and clear my terminal window

7686
04:45:07,920 --> 04:45:15,440
again and more explicitly type clang d o

7687
04:45:11,480 --> 04:45:16,798
hello hello. C and then enter nothing

7688
04:45:15,440 --> 04:45:18,520
again appears to happen but that's a

7689
04:45:16,798 --> 04:45:21,079
good thing when you see no errors and

7690
04:45:18,520 --> 04:45:24,160
now the program I just created is indeed

7691
04:45:21,080 --> 04:45:27,040
called hello so it achieves really the

7692
04:45:24,160 --> 04:45:28,840
same exact effect as make did but what I

7693
04:45:27,040 --> 04:45:30,400
don't have to do with make is type and

7694
04:45:28,840 --> 04:45:32,000
remember something as long as this

7695
04:45:30,400 --> 04:45:34,638
command and this too is a bit of a white

7696
04:45:32,000 --> 04:45:37,840
lie it turns out we have preconfigured

7697
04:45:34,638 --> 04:45:40,280
vs code in the cloud for you to also use

7698
04:45:37,840 --> 04:45:42,000
some other features of clang that would

7699
04:45:40,280 --> 04:45:44,160
be even more tedious for you to write

7700
04:45:42,000 --> 04:45:47,200
yourselves and so really this is why we

7701
04:45:44,160 --> 04:45:49,760
distill this as ultimately just running

7702
04:45:47,200 --> 04:45:51,680
make so let me pause here to see first

7703
04:45:49,760 --> 04:45:53,798
if there's any questions on what I've

7704
04:45:51,680 --> 04:45:56,240
done by taking my very first program in

7705
04:45:53,798 --> 04:45:57,840
C and just now compiling it first with

7706
04:45:56,240 --> 04:46:00,440
make but then starting over and now

7707
04:45:57,840 --> 04:46:02,718
manually compiling it with clang with

7708
04:46:00,440 --> 04:46:06,359
what we'll call command line arguments -

7709
04:46:02,718 --> 04:46:08,200
o space hello and then the name of the

7710
04:46:06,360 --> 04:46:11,680
file

7711
04:46:08,200 --> 04:46:14,120
yeah yeah so a.out is a historical name

7712
04:46:11,680 --> 04:46:16,360
it refers to assembler output more on

7713
04:46:14,120 --> 04:46:18,079
that soon and it's just the default file

7714
04:46:16,360 --> 04:46:20,840
name that you get automatically if you

7715
04:46:18,080 --> 04:46:22,560
just run the compiler on any file so

7716
04:46:20,840 --> 04:46:24,320
that you have just a standard name for

7717
04:46:22,560 --> 04:46:26,120
it but it's not a very well-named

7718
04:46:24,320 --> 04:46:27,958
program instead of running Microsoft

7719
04:46:26,120 --> 04:46:30,320
Word on your Mac or PC it would like be

7720
04:46:27,958 --> 04:46:31,798
like double clicking on a.out so instead

7721
04:46:30,320 --> 04:46:34,200
with these command line arguments you

7722
04:46:31,798 --> 04:46:37,557
can customize the output of clang and

7723
04:46:34,200 --> 04:46:39,160
call it hello or anything you want other

7724
04:46:37,558 --> 04:46:42,040
questions on what I've done here with

7725
04:46:39,160 --> 04:46:44,440
clang itself the

7726
04:46:42,040 --> 04:46:47,440
compiler

7727
04:46:44,440 --> 04:46:49,239
yeah so- o and you would only know this

7728
04:46:47,440 --> 04:46:53,280
from reading the manual taking a class

7729
04:46:49,240 --> 04:46:56,280
means output so- o means change clangs

7730
04:46:53,280 --> 04:46:58,760
output to be a file called hello instead

7731
04:46:56,280 --> 04:47:00,958
of the default which is a.out and this

7732
04:46:58,760 --> 04:47:02,480
too is again a detail you would have to

7733
04:47:00,958 --> 04:47:03,958
uh look it up on a web page read the

7734
04:47:02,480 --> 04:47:05,760
manual hear someone like me tell you

7735
04:47:03,958 --> 04:47:07,000
about it and in fact there's even more

7736
04:47:05,760 --> 04:47:09,840
than these options but we'll just

7737
04:47:07,000 --> 04:47:12,040
scratch the surface here all right so if

7738
04:47:09,840 --> 04:47:13,600
we now know this what more is actually

7739
04:47:12,040 --> 04:47:16,080
happening underneath the hood well let's

7740
04:47:13,600 --> 04:47:18,798
take a a closer look at not just this

7741
04:47:16,080 --> 04:47:21,120
version of my code but my slightly more

7742
04:47:18,798 --> 04:47:22,760
complicated version last week which

7743
04:47:21,120 --> 04:47:25,239
looked a little something like this

7744
04:47:22,760 --> 04:47:26,760
wherein I added in some Dynamic input

7745
04:47:25,240 --> 04:47:29,160
from the user so I could say not Hello

7746
04:47:26,760 --> 04:47:30,958
World to everyone but hello David or

7747
04:47:29,160 --> 04:47:33,200
hello to whoever actually runs this

7748
04:47:30,958 --> 04:47:35,877
program so in fact let me go ahead and

7749
04:47:33,200 --> 04:47:37,760
change my code here in vs code just to

7750
04:47:35,878 --> 04:47:40,000
match that same code from last week so

7751
04:47:37,760 --> 04:47:41,920
no new code yet I'm just going to in a

7752
04:47:40,000 --> 04:47:44,840
moment compile it in a slightly

7753
04:47:41,920 --> 04:47:47,958
different way so I did last week string

7754
04:47:44,840 --> 04:47:50,320
uh I think answer equals get string

7755
04:47:47,958 --> 04:47:53,000
quote unquote what's your name just like

7756
04:47:50,320 --> 04:47:55,920
in scratch and then down here instead of

7757
04:47:53,000 --> 04:47:58,160
doing world I initially wrote answer but

7758
04:47:55,920 --> 04:48:00,557
that didn't go well what did I

7759
04:47:58,160 --> 04:48:04,840
ultimately do instead to print out hello

7760
04:48:00,558 --> 04:48:07,520
David or hello so and so yeah sorry a

7761
04:48:04,840 --> 04:48:09,718
little louder yeah so percent s the

7762
04:48:07,520 --> 04:48:11,480
so-called format code that printf just

7763
04:48:09,718 --> 04:48:13,718
knows how to deal with and I had to add

7764
04:48:11,480 --> 04:48:14,920
one other thing someone else besides

7765
04:48:13,718 --> 04:48:17,040
percent F

7766
04:48:14,920 --> 04:48:19,359
yeah the name of the variable that I

7767
04:48:17,040 --> 04:48:21,480
want to plug into that placeholder

7768
04:48:19,360 --> 04:48:23,040
percent s and in this case it's answer

7769
04:48:21,480 --> 04:48:24,480
now let me make one refinement only

7770
04:48:23,040 --> 04:48:25,798
because now we're in week two and we're

7771
04:48:24,480 --> 04:48:27,798
going to start writing more lines of

7772
04:48:25,798 --> 04:48:30,239
code even though scratch called the

7773
04:48:27,798 --> 04:48:32,399
return value of the ask puzzle piece

7774
04:48:30,240 --> 04:48:33,760
answer always and see we have full

7775
04:48:32,400 --> 04:48:35,878
control over what our variables are

7776
04:48:33,760 --> 04:48:37,958
called and now it's probably good not to

7777
04:48:35,878 --> 04:48:40,000
just generically always call my variable

7778
04:48:37,958 --> 04:48:41,717
answer if I'm using get string let's

7779
04:48:40,000 --> 04:48:43,798
call it what it is so this is now just a

7780
04:48:41,718 --> 04:48:46,400
matter of style if you will let me

7781
04:48:43,798 --> 04:48:48,520
change the variable to be name just so

7782
04:48:46,400 --> 04:48:51,520
that it's a little clear to me to you to

7783
04:48:48,520 --> 04:48:53,120
a TF or ta exactly what that variable

7784
04:48:51,520 --> 04:48:55,600
represents instead of more generically

7785
04:48:53,120 --> 04:48:57,520
answer all right so that said let me go

7786
04:48:55,600 --> 04:48:59,717
down to my terminal window and last week

7787
04:48:57,520 --> 04:49:02,080
again I ran make to compile this exact

7788
04:48:59,718 --> 04:49:05,480
same program now though let me go ahead

7789
04:49:02,080 --> 04:49:08,160
and just use clang so clang d o I'll

7790
04:49:05,480 --> 04:49:10,798
still call this version hello space

7791
04:49:08,160 --> 04:49:12,320
hello.c so exact same command as before

7792
04:49:10,798 --> 04:49:14,638
the only thing that's different is I've

7793
04:49:12,320 --> 04:49:17,558
added a couple of more lines of code to

7794
04:49:14,638 --> 04:49:19,958
get the user's input let me hit enter

7795
04:49:17,558 --> 04:49:22,160
and now darn it our first error so

7796
04:49:19,958 --> 04:49:23,557
output from clang and make is not a good

7797
04:49:22,160 --> 04:49:26,079
thing and here we're seeing something

7798
04:49:23,558 --> 04:49:29,480
particularly cryptic uh so something in

7799
04:49:26,080 --> 04:49:32,000
function main undefined reference to get

7800
04:49:29,480 --> 04:49:33,718
string and then Linker command failed

7801
04:49:32,000 --> 04:49:35,520
with exit code one so there's actually a

7802
04:49:33,718 --> 04:49:38,200
lot of jargon in there that will tease

7803
04:49:35,520 --> 04:49:39,558
apart today but my hint is that clearly

7804
04:49:38,200 --> 04:49:40,718
my problem's in Maine although that's

7805
04:49:39,558 --> 04:49:42,878
not surprising because there's nothing

7806
04:49:40,718 --> 04:49:45,120
else going on here get string is an

7807
04:49:42,878 --> 04:49:48,240
issue and the uh issue is that it's an

7808
04:49:45,120 --> 04:49:51,320
undefined reference and yet notice I was

7809
04:49:48,240 --> 04:49:52,958
pretty good I added the cs50 header file

7810
04:49:51,320 --> 04:49:55,040
and I said last week that that's enough

7811
04:49:52,958 --> 04:49:57,520
to teach the compiler that functions

7812
04:49:55,040 --> 04:50:00,320
exist but the problem is that even

7813
04:49:57,520 --> 04:50:02,920
though this does in fact teach clang

7814
04:50:00,320 --> 04:50:05,280
that get string exists it is not

7815
04:50:02,920 --> 04:50:07,399
sufficient information for clang to go

7816
04:50:05,280 --> 04:50:09,280
find on the hard drive of the computer

7817
04:50:07,400 --> 04:50:12,160
the zeros and ones that actually

7818
04:50:09,280 --> 04:50:14,120
Implement get string itself so in other

7819
04:50:12,160 --> 04:50:15,958
words this include line per last week is

7820
04:50:14,120 --> 04:50:18,239
a little bit of a hint it's a teaser to

7821
04:50:15,958 --> 04:50:19,920
CLA that you're about to see and use

7822
04:50:18,240 --> 04:50:23,240
this function somewhere but if you

7823
04:50:19,920 --> 04:50:26,320
actually want to use the zeros and ones

7824
04:50:23,240 --> 04:50:28,200
that cs50 wrote some time ago and bake

7825
04:50:26,320 --> 04:50:29,840
those into your program so your program

7826
04:50:28,200 --> 04:50:32,320
actually knows how to get input from the

7827
04:50:29,840 --> 04:50:34,638
user well then I'm going to have to go

7828
04:50:32,320 --> 04:50:36,320
ahead and run a slightly different

7829
04:50:34,638 --> 04:50:37,638
command so let me do this let me clear

7830
04:50:36,320 --> 04:50:40,079
my terminal window just to get rid of

7831
04:50:37,638 --> 04:50:43,399
that distraction and let me propose now

7832
04:50:40,080 --> 04:50:47,240
that we run this command instead almost

7833
04:50:43,400 --> 04:50:50,080
the same as before clang - o space hello

7834
04:50:47,240 --> 04:50:52,480
then hello. C but with one additional

7835
04:50:50,080 --> 04:50:56,160
command line argument at the end and

7836
04:50:52,480 --> 04:50:59,399
this is a-h L not a number one so- L

7837
04:50:56,160 --> 04:51:01,840
cs50 with no space in between those two

7838
04:50:59,400 --> 04:51:03,400
now the L is going to result in all of

7839
04:51:01,840 --> 04:51:06,360
those zeros and ones that actually were

7840
04:51:03,400 --> 04:51:08,840
written by cs50 being linked into your

7841
04:51:06,360 --> 04:51:10,798
code your few lines of code or mine here

7842
04:51:08,840 --> 04:51:13,280
but that's the second step that the

7843
04:51:10,798 --> 04:51:16,557
compiler requires in order to know how

7844
04:51:13,280 --> 04:51:19,320
to actually execute and rather compile

7845
04:51:16,558 --> 04:51:21,280
your code and cs50's and cs50 is not the

7846
04:51:19,320 --> 04:51:23,440
only one that does this if you use any

7847
04:51:21,280 --> 04:51:26,399
third-party library in C that doesn't

7848
04:51:23,440 --> 04:51:28,520
come with the language you would do- L

7849
04:51:26,400 --> 04:51:30,000
such and such where whoever however

7850
04:51:28,520 --> 04:51:31,400
they've named their own library but you

7851
04:51:30,000 --> 04:51:34,240
don't have to do it for built-in things

7852
04:51:31,400 --> 04:51:35,480
like uh like we've been using thus far

7853
04:51:34,240 --> 04:51:37,718
all right so let me go ahead and try

7854
04:51:35,480 --> 04:51:41,520
this I'll go back to vs code here and

7855
04:51:37,718 --> 04:51:44,120
let me go ahead now and run clang - o

7856
04:51:41,520 --> 04:51:46,840
hello then hello. C and now instead of

7857
04:51:44,120 --> 04:51:49,600
just hitting enter - L cs50 with no

7858
04:51:46,840 --> 04:51:51,600
space between the L and the cs50 enter

7859
04:51:49,600 --> 04:51:54,480
now nothing bad happens and now I can

7860
04:51:51,600 --> 04:51:57,717
do/ hello what's your name I'll type in

7861
04:51:54,480 --> 04:51:59,079
David enter and now we see hello David

7862
04:51:57,718 --> 04:52:01,240
now honestly this is where we're really

7863
04:51:59,080 --> 04:52:04,080
getting into the weeds and now this is

7864
04:52:01,240 --> 04:52:05,480
taking this is really just adding new to

7865
04:52:04,080 --> 04:52:07,878
the process of compiling and running

7866
04:52:05,480 --> 04:52:09,920
your code and so the reality is even

7867
04:52:07,878 --> 04:52:11,520
though this is indeed what is happening

7868
04:52:09,920 --> 04:52:13,600
this is why we used last week and we're

7869
04:52:11,520 --> 04:52:15,760
going to continue using this week onward

7870
04:52:13,600 --> 04:52:18,160
make because it just automates that

7871
04:52:15,760 --> 04:52:19,280
whole process for you but it's ideal to

7872
04:52:18,160 --> 04:52:20,760
understand what's going wrong because

7873
04:52:19,280 --> 04:52:22,280
any of the error messages you saw for

7874
04:52:20,760 --> 04:52:24,120
problem set one any of the error

7875
04:52:22,280 --> 04:52:26,000
messages you see for the next few weeks

7876
04:52:24,120 --> 04:52:28,480
probably aren't coming from make they're

7877
04:52:26,000 --> 04:52:30,160
coming from clang underneath the hood

7878
04:52:28,480 --> 04:52:31,718
because make is just automating the

7879
04:52:30,160 --> 04:52:33,120
process but with make you literally just

7880
04:52:31,718 --> 04:52:34,840
write make and then the name of the

7881
04:52:33,120 --> 04:52:37,557
program you don't have to worry about

7882
04:52:34,840 --> 04:52:41,480
any of those command line arguments

7883
04:52:37,558 --> 04:52:43,638
questions then on compiling with- l cs50

7884
04:52:41,480 --> 04:52:46,320
or anything else

7885
04:52:43,638 --> 04:52:49,120
yeah sorry what is the benefit

7886
04:52:46,320 --> 04:52:51,680
of what is the benefit of using clang

7887
04:52:49,120 --> 04:52:53,600
manually none really in fact all main is

7888
04:52:51,680 --> 04:52:55,798
doing is just sa make is doing is saving

7889
04:52:53,600 --> 04:52:57,120
us some keystrokes um if you prefer

7890
04:52:55,798 --> 04:52:58,520
though and you just like to be more in

7891
04:52:57,120 --> 04:53:00,399
control you can totally run clang

7892
04:52:58,520 --> 04:53:05,558
manually if you remember the various

7893
04:53:00,400 --> 04:53:05,558
command line arguments yeah

7894
04:53:06,600 --> 04:53:11,680
exp exactly why did I have to explain

7895
04:53:09,320 --> 04:53:13,680
that is provide a hint to cs50 with the

7896
04:53:11,680 --> 04:53:16,160
cs50.h henter file but I didn't have to

7897
04:53:13,680 --> 04:53:19,200
do that with standard i.h just because

7898
04:53:16,160 --> 04:53:21,280
standard i.h comes with C just like a

7899
04:53:19,200 --> 04:53:23,600
few other libraries come with C that

7900
04:53:21,280 --> 04:53:25,280
we'll start seeing today um cs50 though

7901
04:53:23,600 --> 04:53:27,359
is not built into C everywhere and so

7902
04:53:25,280 --> 04:53:29,878
you do have to explicitly add that one

7903
04:53:27,360 --> 04:53:29,878
there

7904
04:53:30,760 --> 04:53:36,958
yeah a command line argument is a a word

7905
04:53:34,120 --> 04:53:40,360
or phrase that you type at the command

7906
04:53:36,958 --> 04:53:42,480
line AKA your terminal in order to

7907
04:53:40,360 --> 04:53:44,320
influence the behavior of a

7908
04:53:42,480 --> 04:53:45,760
program for whatever you're doing yeah

7909
04:53:44,320 --> 04:53:47,638
it changes the defaults right in our

7910
04:53:45,760 --> 04:53:49,600
guey World graphical user interface you

7911
04:53:47,638 --> 04:53:51,000
and I would probably click some boxes we

7912
04:53:49,600 --> 04:53:52,760
would select some menu options to

7913
04:53:51,000 --> 04:53:54,878
configure a program to behave in the

7914
04:53:52,760 --> 04:53:56,679
same way at a command line interface you

7915
04:53:54,878 --> 04:53:58,638
have to just say everything all at once

7916
04:53:56,680 --> 04:54:01,638
and that's why we have command line

7917
04:53:58,638 --> 04:54:01,638
arguments

7918
04:54:02,320 --> 04:54:08,280
yeah no make is not just for cs50 it's

7919
04:54:05,400 --> 04:54:10,760
used globally in any project really

7920
04:54:08,280 --> 04:54:12,680
nowadays using C C++ even other

7921
04:54:10,760 --> 04:54:14,359
languages as well in fact most every

7922
04:54:12,680 --> 04:54:16,798
command you see in this class unless it

7923
04:54:14,360 --> 04:54:19,558
has 5 zero at the end of it is globally

7924
04:54:16,798 --> 04:54:21,160
used only those suffix with 50 are

7925
04:54:19,558 --> 04:54:22,798
indeed course specific and even those

7926
04:54:21,160 --> 04:54:24,638
will gradually take training wheels off

7927
04:54:22,798 --> 04:54:27,520
of so that you know exactly what those

7928
04:54:24,638 --> 04:54:29,120
commands are doing as well all right so

7929
04:54:27,520 --> 04:54:30,400
what is it that we've just done

7930
04:54:29,120 --> 04:54:32,120
everything we've just done of course I

7931
04:54:30,400 --> 04:54:33,920
keep calling compiling but let's just go

7932
04:54:32,120 --> 04:54:35,760
down one Rabbit Hole so that you

7933
04:54:33,920 --> 04:54:37,320
understand that when you compile code

7934
04:54:35,760 --> 04:54:39,557
there's actually a whole bunch of steps

7935
04:54:37,320 --> 04:54:41,600
happening and this is going to enable uh

7936
04:54:39,558 --> 04:54:44,160
a lot of features like companies can

7937
04:54:41,600 --> 04:54:46,760
write code and then convert it to run it

7938
04:54:44,160 --> 04:54:48,240
on Macs and PCs alike or phones or the

7939
04:54:46,760 --> 04:54:50,199
like so it's not just a matter of

7940
04:54:48,240 --> 04:54:52,680
converting source code to machine code

7941
04:54:50,200 --> 04:54:54,958
there's actually four steps involved in

7942
04:54:52,680 --> 04:54:56,718
what you and I as of last week know as

7943
04:54:54,958 --> 04:54:59,000
compiling and these aren't terms that

7944
04:54:56,718 --> 04:55:00,360
you'll have to keep in mind constantly

7945
04:54:59,000 --> 04:55:02,160
because again we're going to abstract a

7946
04:55:00,360 --> 04:55:03,958
lot of this away but just so we've gone

7947
04:55:02,160 --> 04:55:05,958
down the rabbit hole once let's consider

7948
04:55:03,958 --> 04:55:07,958
each of these four steps that have been

7949
04:55:05,958 --> 04:55:09,760
happening for you for a week

7950
04:55:07,958 --> 04:55:11,680
automatically uh the first of which is

7951
04:55:09,760 --> 04:55:13,079
called pre-processing so what is this

7952
04:55:11,680 --> 04:55:15,440
mean well let's consider that same

7953
04:55:13,080 --> 04:55:17,798
program as before notice that a two of

7954
04:55:15,440 --> 04:55:20,120
the lines of code start with a hash mark

7955
04:55:17,798 --> 04:55:22,399
that is a special symbol in C and it's a

7956
04:55:20,120 --> 04:55:24,079
so-called pre-processor directive you

7957
04:55:22,400 --> 04:55:25,280
don't need to memorize terms like that

7958
04:55:24,080 --> 04:55:26,680
but it just means that it's a little

7959
04:55:25,280 --> 04:55:28,717
different from every other line and

7960
04:55:26,680 --> 04:55:30,878
anything with a hash symbol here should

7961
04:55:28,718 --> 04:55:33,000
be pre-processed that is analyzed

7962
04:55:30,878 --> 04:55:35,160
initially before anything else happens

7963
04:55:33,000 --> 04:55:37,400
so let's consider these two lines up top

7964
04:55:35,160 --> 04:55:39,600
what exactly is happening well it turns

7965
04:55:37,400 --> 04:55:41,718
out with these two lines you have two

7966
04:55:39,600 --> 04:55:44,717
header files of course cs50.h and

7967
04:55:41,718 --> 04:55:47,240
standard. i.h where are those files

7968
04:55:44,718 --> 04:55:49,600
because they've never been in VSS code

7969
04:55:47,240 --> 04:55:51,958
for you seemingly if you type LS if you

7970
04:55:49,600 --> 04:55:54,480
open up the file explorer in the GUI you

7971
04:55:51,958 --> 04:55:57,480
have never seen probably cs50.h or

7972
04:55:54,480 --> 04:56:00,160
standard i.h they just work but that's

7973
04:55:57,480 --> 04:56:01,958
because there's a folder somewhere on

7974
04:56:00,160 --> 04:56:03,920
the uh the hard drive that you're using

7975
04:56:01,958 --> 04:56:06,359
on your Mac or PC or somewhere in the

7976
04:56:03,920 --> 04:56:09,239
cloud as in our case and inside of this

7977
04:56:06,360 --> 04:56:11,320
folder traditionally called sluser SL

7978
04:56:09,240 --> 04:56:12,920
include and user is deliberately

7979
04:56:11,320 --> 04:56:14,239
misspelled it's just slightly more

7980
04:56:12,920 --> 04:56:16,638
succinct although it's a little weird

7981
04:56:14,240 --> 04:56:19,000
why we drop that one letter but user SL

7982
04:56:16,638 --> 04:56:21,878
include is just a folder on the server

7983
04:56:19,000 --> 04:56:24,200
that contains cs50.h standard i.h and a

7984
04:56:21,878 --> 04:56:26,480
bunch of other things as well so in fact

7985
04:56:24,200 --> 04:56:28,600
if you type in uh VSS code in your

7986
04:56:26,480 --> 04:56:31,000
terminal window uh when you're using

7987
04:56:28,600 --> 04:56:33,638
Code spaces in the cloud and type LS

7988
04:56:31,000 --> 04:56:35,320
space SL user include you can can see

7989
04:56:33,638 --> 04:56:36,760
all of the files in that folder but

7990
04:56:35,320 --> 04:56:38,520
we've pre-installed all of that stuff

7991
04:56:36,760 --> 04:56:40,440
for you so let's consider what's

7992
04:56:38,520 --> 04:56:42,878
actually in those files here where if I

7993
04:56:40,440 --> 04:56:46,000
highlight these two lines up top that

7994
04:56:42,878 --> 04:56:47,558
start with hash include well I kind of

7995
04:56:46,000 --> 04:56:50,360
hinted last week that what's in that

7996
04:56:47,558 --> 04:56:53,200
first file is a hint as to what

7997
04:56:50,360 --> 04:56:55,638
functions cs50 wrote for you so you can

7998
04:56:53,200 --> 04:56:58,080
kind of think of these include lines as

7999
04:56:55,638 --> 04:57:00,120
being temporary placeholders for what's

8000
04:56:58,080 --> 04:57:02,120
going to become like a global find and

8001
04:57:00,120 --> 04:57:04,200
replace that is the first thing clang is

8002
04:57:02,120 --> 04:57:05,440
going to do it's pre-process this file

8003
04:57:04,200 --> 04:57:08,040
it's going to look for any line that

8004
04:57:05,440 --> 04:57:10,120
starts with hash include and if it sees

8005
04:57:08,040 --> 04:57:13,200
that it's going to essentially go into

8006
04:57:10,120 --> 04:57:15,160
that file like cs50.h and then just copy

8007
04:57:13,200 --> 04:57:16,920
and paste the contents of that file

8008
04:57:15,160 --> 04:57:18,160
magically there for you you don't see it

8009
04:57:16,920 --> 04:57:20,440
visually on the screen but it's

8010
04:57:18,160 --> 04:57:22,558
happening behind the scenes and so

8011
04:57:20,440 --> 04:57:25,359
really what's happening with this first

8012
04:57:22,558 --> 04:57:29,200
line is that somewhere in

8013
04:57:25,360 --> 04:57:31,440
cs50.h is the Declaration of get string

8014
04:57:29,200 --> 04:57:33,280
like we talked last week and it probably

8015
04:57:31,440 --> 04:57:34,760
looks a little something like this and

8016
04:57:33,280 --> 04:57:37,000
we didn't spend much time on this yet

8017
04:57:34,760 --> 04:57:40,320
this past week but we will in time more

8018
04:57:37,000 --> 04:57:42,840
notice that this is how the a function

8019
04:57:40,320 --> 04:57:44,718
is declared that is it is decreed to

8020
04:57:42,840 --> 04:57:46,840
exist the name of the function of course

8021
04:57:44,718 --> 04:57:48,958
is get string inside of the parenthesis

8022
04:57:46,840 --> 04:57:51,400
are its arguments in this case there's

8023
04:57:48,958 --> 04:57:53,120
one argument to get string I claim today

8024
04:57:51,400 --> 04:57:54,798
but you've known this implicitly and

8025
04:57:53,120 --> 04:57:56,878
it's a prompt it's the prompt that the

8026
04:57:54,798 --> 04:57:58,320
human sees when you use get string what

8027
04:57:56,878 --> 04:58:00,798
is that prompt well it's a string of

8028
04:57:58,320 --> 04:58:02,840
text like quote unquote what's your name

8029
04:58:00,798 --> 04:58:04,399
or anything else that I asked last week

8030
04:58:02,840 --> 04:58:06,680
mean meanwhile get string as we know

8031
04:58:04,400 --> 04:58:08,760
from last week has a return value it

8032
04:58:06,680 --> 04:58:10,680
returns something to you and that too is

8033
04:58:08,760 --> 04:58:12,519
a string so again this is also called a

8034
04:58:10,680 --> 04:58:14,160
functions prototype it's the thing

8035
04:58:12,520 --> 04:58:16,080
toward the end of last week that I just

8036
04:58:14,160 --> 04:58:18,280
copied and pasted from the bottom of my

8037
04:58:16,080 --> 04:58:20,798
file to the top just so that it was like

8038
04:58:18,280 --> 04:58:23,039
this teaser for clang as to what would

8039
04:58:20,798 --> 04:58:26,638
exist later so you can think then of

8040
04:58:23,040 --> 04:58:28,320
these include lines as just kind of uh

8041
04:58:26,638 --> 04:58:29,958
combining all of those function

8042
04:58:28,320 --> 04:58:32,440
declarations in some separate file

8043
04:58:29,958 --> 04:58:34,120
called cs50.h so that you yourself don't

8044
04:58:32,440 --> 04:58:35,840
have to type them every time you use the

8045
04:58:34,120 --> 04:58:38,320
library or worse so that you yourself

8046
04:58:35,840 --> 04:58:39,840
don't have to copy and paste those lines

8047
04:58:38,320 --> 04:58:42,958
this is what clang is doing for you in

8048
04:58:39,840 --> 04:58:45,240
its first step of pre-processing second

8049
04:58:42,958 --> 04:58:48,120
and last in this example what happens

8050
04:58:45,240 --> 04:58:49,878
when clang pre-processes this second

8051
04:58:48,120 --> 04:58:51,480
include line well the only other

8052
04:58:49,878 --> 04:58:54,080
function we care about in this story is

8053
04:58:51,480 --> 04:58:56,958
printf of course which comes with C so

8054
04:58:54,080 --> 04:59:00,200
essentially you can think of printf's

8055
04:58:56,958 --> 04:59:02,557
prototype or Declaration as just being

8056
04:59:00,200 --> 04:59:04,840
this print f is the name of the function

8057
04:59:02,558 --> 04:59:07,760
it takes a string that you want to

8058
04:59:04,840 --> 04:59:10,080
format like hello comma world or hello

8059
04:59:07,760 --> 04:59:11,877
comma percent s and then with dot dot

8060
04:59:10,080 --> 04:59:13,638
dot this actually has technical meaning

8061
04:59:11,878 --> 04:59:16,360
it means of course that you can plug in

8062
04:59:13,638 --> 04:59:17,680
zero variables one variable two or 10 so

8063
04:59:16,360 --> 04:59:19,400
dot dot dot means some number of

8064
04:59:17,680 --> 04:59:21,400
variables now we haven't talked about

8065
04:59:19,400 --> 04:59:23,760
this yet and we won't really in general

8066
04:59:21,400 --> 04:59:26,000
print F actually returns a value a

8067
04:59:23,760 --> 04:59:27,717
number that is an integer but more on

8068
04:59:26,000 --> 04:59:30,160
that perhaps another time it's generally

8069
04:59:27,718 --> 04:59:31,878
not something the programmer tends to

8070
04:59:30,160 --> 04:59:33,440
look at but that's all we mean by

8071
04:59:31,878 --> 04:59:34,840
pre-processing so that the the end of

8072
04:59:33,440 --> 04:59:38,039
this process even though there's more

8073
04:59:34,840 --> 04:59:39,400
lines of code in cs50.h and standard i.h

8074
04:59:38,040 --> 04:59:42,480
what's really just happening is that

8075
04:59:39,400 --> 04:59:44,200
clang in pre-processing the file copies

8076
04:59:42,480 --> 04:59:46,239
and pastes the contents of those files

8077
04:59:44,200 --> 04:59:49,160
into your code so that now your code

8078
04:59:46,240 --> 04:59:51,958
knows about everything get string printf

8079
04:59:49,160 --> 04:59:54,240
and anything else any questions then on

8080
04:59:51,958 --> 04:59:57,239
that first step

8081
04:59:54,240 --> 04:59:57,240
pre-processing

8082
05:00:01,958 --> 05:00:04,958
yes

8083
05:00:09,480 --> 05:00:13,520
good question when you include a file

8084
05:00:11,400 --> 05:00:15,000
does it only include what you need or

8085
05:00:13,520 --> 05:00:16,718
Does it include everything think of it

8086
05:00:15,000 --> 05:00:18,480
as including everything so if it's a big

8087
05:00:16,718 --> 05:00:20,638
file that's a lot of code at the very

8088
05:00:18,480 --> 05:00:22,040
top and that's why if you think back to

8089
05:00:20,638 --> 05:00:23,760
all of the zeros and ones I showed a

8090
05:00:22,040 --> 05:00:25,760
little bit ago as well as last week

8091
05:00:23,760 --> 05:00:27,359
there's a lot of zeros and ones that end

8092
05:00:25,760 --> 05:00:29,440
up on the screen as a result of just

8093
05:00:27,360 --> 05:00:31,120
writing hello world a lot of those zeros

8094
05:00:29,440 --> 05:00:32,958
and ones are perhaps coming from code

8095
05:00:31,120 --> 05:00:34,958
that you didn't actually necessarily

8096
05:00:32,958 --> 05:00:37,680
need but some of it is perhaps there but

8097
05:00:34,958 --> 05:00:40,600
there are ways to optimize that as well

8098
05:00:37,680 --> 05:00:42,718
all right so step two of compiling is

8099
05:00:40,600 --> 05:00:44,280
confusingly called compiling it's just

8100
05:00:42,718 --> 05:00:46,638
this is the term that most everyone uses

8101
05:00:44,280 --> 05:00:49,199
to describe the whole process instead of

8102
05:00:46,638 --> 05:00:51,520
just this one step but once a program

8103
05:00:49,200 --> 05:00:54,320
has been pre-processed uh behind the

8104
05:00:51,520 --> 05:00:55,760
scenes by the compiler for you it looks

8105
05:00:54,320 --> 05:00:57,440
now a little something like this and

8106
05:00:55,760 --> 05:00:59,280
I've put dot dot dots just to imply that

8107
05:00:57,440 --> 05:01:00,520
yes to your question there's more stuff

8108
05:00:59,280 --> 05:01:02,280
above it there's more stuff below it

8109
05:01:00,520 --> 05:01:05,040
it's just not interesting right now for

8110
05:01:02,280 --> 05:01:07,000
us so now we have just C code there's no

8111
05:01:05,040 --> 05:01:08,840
more pre-processor directives at this

8112
05:01:07,000 --> 05:01:10,798
point all of the hash symbols and those

8113
05:01:08,840 --> 05:01:13,000
lines of code have been pre-processed

8114
05:01:10,798 --> 05:01:14,360
and convert it to something else and so

8115
05:01:13,000 --> 05:01:17,320
now and this is where things get a

8116
05:01:14,360 --> 05:01:20,440
little spooky looking uh here now is

8117
05:01:17,320 --> 05:01:23,360
what happens when clang or any compiler

8118
05:01:20,440 --> 05:01:27,120
literally compiles code like this it

8119
05:01:23,360 --> 05:01:29,480
converts it from this in C to this in

8120
05:01:27,120 --> 05:01:31,399
assembly code so this is among the

8121
05:01:29,480 --> 05:01:33,239
scarier languages I myself don't really

8122
05:01:31,400 --> 05:01:34,920
have fond memories this is not language

8123
05:01:33,240 --> 05:01:36,680
that many people program in if you take

8124
05:01:34,920 --> 05:01:38,958
a subsequent class in computer science

8125
05:01:36,680 --> 05:01:40,280
in systems uh a higher level class you

8126
05:01:38,958 --> 05:01:42,399
might actually learn this or some

8127
05:01:40,280 --> 05:01:43,798
variant there of but there's at least a

8128
05:01:42,400 --> 05:01:46,040
few people out there that need to know

8129
05:01:43,798 --> 05:01:48,798
this stuff because this is closer to

8130
05:01:46,040 --> 05:01:51,160
what the computers themselves nowadays

8131
05:01:48,798 --> 05:01:53,638
understand like the Intel CPUs or the

8132
05:01:51,160 --> 05:01:55,680
AMD CPUs the brains of today's computers

8133
05:01:53,638 --> 05:01:58,200
and phones understand stuff that looks

8134
05:01:55,680 --> 05:02:00,958
more like this and less like C now it's

8135
05:01:58,200 --> 05:02:02,878
completely uh esoteric but let me just

8136
05:02:00,958 --> 05:02:04,877
highlight a few phrases there's some

8137
05:02:02,878 --> 05:02:06,958
stuff that's a little familiar there is

8138
05:02:04,878 --> 05:02:08,840
mention of Maine at the top there in

8139
05:02:06,958 --> 05:02:10,359
yellow there is mention of get string

8140
05:02:08,840 --> 05:02:13,320
toward the bottom there is mention of

8141
05:02:10,360 --> 05:02:14,958
prf down below so this is just another

8142
05:02:13,320 --> 05:02:17,160
programming language called Assembly

8143
05:02:14,958 --> 05:02:20,280
Language that decades ago humans myself

8144
05:02:17,160 --> 05:02:22,079
included in school did write code in and

8145
05:02:20,280 --> 05:02:24,079
absolutely some people still write this

8146
05:02:22,080 --> 05:02:27,680
code especially since you can write very

8147
05:02:24,080 --> 05:02:30,400
very efficient code but it's a lot more

8148
05:02:27,680 --> 05:02:32,558
uh Arcane it's a lot more uh lot less

8149
05:02:30,400 --> 05:02:34,440
user friendly so you'll see in Yello now

8150
05:02:32,558 --> 05:02:36,600
the these are the so-called instructions

8151
05:02:34,440 --> 05:02:39,079
that a computer's brain or CPU

8152
05:02:36,600 --> 05:02:42,199
understands pushing values around moving

8153
05:02:39,080 --> 05:02:44,600
them subtracting values uh calling

8154
05:02:42,200 --> 05:02:46,718
functions and move move move so really

8155
05:02:44,600 --> 05:02:49,039
the low-level operations that computers

8156
05:02:46,718 --> 05:02:51,080
understand tend to be arithmetic

8157
05:02:49,040 --> 05:02:54,080
operations subtraction addition and the

8158
05:02:51,080 --> 05:02:55,718
like moving things in and out of memory

8159
05:02:54,080 --> 05:02:57,400
it's just a lot more tedious for folks

8160
05:02:55,718 --> 05:02:59,798
like us to write code like this this is

8161
05:02:57,400 --> 05:03:02,120
why you and I tend to write stuff like

8162
05:02:59,798 --> 05:03:03,557
this and ideally still people like you

8163
05:03:02,120 --> 05:03:05,440
and I tend to drag and drop puzzle

8164
05:03:03,558 --> 05:03:07,718
pieces that sort of abstract all of that

8165
05:03:05,440 --> 05:03:09,920
away further but for now this is again

8166
05:03:07,718 --> 05:03:12,760
called Assembly Language it is what

8167
05:03:09,920 --> 05:03:15,480
happens when the compiler literally

8168
05:03:12,760 --> 05:03:17,440
compiles your code but of course this

8169
05:03:15,480 --> 05:03:20,718
still not zeros and ones so we got two

8170
05:03:17,440 --> 05:03:23,920
steps to go so when a compiler proceeds

8171
05:03:20,718 --> 05:03:25,760
to step three this is where things get

8172
05:03:23,920 --> 05:03:28,600
converted to machine code and when a

8173
05:03:25,760 --> 05:03:30,717
compiler assembles your code for you it

8174
05:03:28,600 --> 05:03:34,160
converts what we just saw on the screen

8175
05:03:30,718 --> 05:03:36,240
here to actual zeros and ones the

8176
05:03:34,160 --> 05:03:38,920
so-called machine code that your phone

8177
05:03:36,240 --> 05:03:41,000
or your computer understands but it's

8178
05:03:38,920 --> 05:03:43,199
worth noting that these are not

8179
05:03:41,000 --> 05:03:46,400
necessarily all of the zeros and ones of

8180
05:03:43,200 --> 05:03:48,680
your program yes they re uh they are the

8181
05:03:46,400 --> 05:03:51,360
zeros and ones that correspond to your

8182
05:03:48,680 --> 05:03:54,920
hello program or printf and get string

8183
05:03:51,360 --> 05:03:57,920
and the like but notice that here we

8184
05:03:54,920 --> 05:04:00,120
need one final step in those zeros and

8185
05:03:57,920 --> 05:04:02,079
ones are only your lines of code but

8186
05:04:00,120 --> 05:04:03,638
what about cs50's lines of code that we

8187
05:04:02,080 --> 05:04:05,040
wrote to Implement get string what about

8188
05:04:03,638 --> 05:04:07,039
the lines of code that humans wrote

8189
05:04:05,040 --> 05:04:08,920
decades ago to implement printf those

8190
05:04:07,040 --> 05:04:11,160
are somewhere on this hard drive like on

8191
05:04:08,920 --> 05:04:13,280
my Mac my PC or somewhere in the cloud

8192
05:04:11,160 --> 05:04:17,320
but we need to combine all of those

8193
05:04:13,280 --> 05:04:20,840
zeros and ones together and Link My code

8194
05:04:17,320 --> 05:04:23,280
with cs50's code with uh standard io's

8195
05:04:20,840 --> 05:04:26,120
code all together and so what happens in

8196
05:04:23,280 --> 05:04:28,320
the last step ultimately is that if we

8197
05:04:26,120 --> 05:04:30,280
have my code here in yellow and then the

8198
05:04:28,320 --> 05:04:32,638
code that cs50 wrote and the code that

8199
05:04:30,280 --> 05:04:35,000
the authors of C itself wrote what

8200
05:04:32,638 --> 05:04:37,399
really is happening is that somewhere we

8201
05:04:35,000 --> 05:04:39,878
have not only hello.c which obviously I

8202
05:04:37,400 --> 05:04:42,000
wrote and wrote with us live here

8203
05:04:39,878 --> 05:04:45,160
there's also let's assume somewhere on

8204
05:04:42,000 --> 05:04:47,360
the computer a cs50.c file that

8205
05:04:45,160 --> 05:04:49,120
coincidentally I and cs50 staff wrote

8206
05:04:47,360 --> 05:04:50,798
years ago and also somewhere on the

8207
05:04:49,120 --> 05:04:52,840
computer there's another file Let Me

8208
05:04:50,798 --> 05:04:54,958
oversimplify by just calling it standard

8209
05:04:52,840 --> 05:04:56,920
io. C in practice it's probably

8210
05:04:54,958 --> 05:04:59,480
specifically called print F.C but

8211
05:04:56,920 --> 05:05:02,039
there's somewhere these two other files

8212
05:04:59,480 --> 05:05:04,558
and so this last step called linking

8213
05:05:02,040 --> 05:05:06,878
takes my zeros and ones from the code I

8214
05:05:04,558 --> 05:05:09,360
just wrote namely this code on the

8215
05:05:06,878 --> 05:05:11,240
screen here it then grabs the zeros and

8216
05:05:09,360 --> 05:05:12,920
ones that cs50 wrote and it grabs the

8217
05:05:11,240 --> 05:05:14,958
zeros and ones that the authors of C

8218
05:05:12,920 --> 05:05:19,638
wrote In order to implement the standard

8219
05:05:14,958 --> 05:05:21,600
IO library and lastly voila links them

8220
05:05:19,638 --> 05:05:23,920
all together and this is the same blob

8221
05:05:21,600 --> 05:05:26,519
of zeros and ones that we saw earlier

8222
05:05:23,920 --> 05:05:28,920
it's just now the result of

8223
05:05:26,520 --> 05:05:31,400
pre-processing your code compiling your

8224
05:05:28,920 --> 05:05:33,320
code assembling your code linking your

8225
05:05:31,400 --> 05:05:35,200
code and my God it's at this point like

8226
05:05:33,320 --> 05:05:37,760
if there were any fun in programming for

8227
05:05:35,200 --> 05:05:39,638
you yet we've just taken it all away we

8228
05:05:37,760 --> 05:05:41,798
just call this whole process compiling

8229
05:05:39,638 --> 05:05:44,079
why because now that we know those steps

8230
05:05:41,798 --> 05:05:45,840
exist and smart people solve that

8231
05:05:44,080 --> 05:05:47,760
problem for us you and I can kind of

8232
05:05:45,840 --> 05:05:49,558
operate at this level of abstraction and

8233
05:05:47,760 --> 05:05:52,798
just assume that compiling converts

8234
05:05:49,558 --> 05:05:54,320
source code to machine code questions

8235
05:05:52,798 --> 05:05:58,360
though on any of these

8236
05:05:54,320 --> 05:05:58,360
intermediate steps

8237
05:06:01,400 --> 05:06:04,400
yeah

8238
05:06:10,120 --> 05:06:13,480
a good question so where are all of

8239
05:06:11,958 --> 05:06:15,320
these zeros in one store because you and

8240
05:06:13,480 --> 05:06:17,480
I we've been using a browser at code.

8241
05:06:15,320 --> 05:06:19,239
cs50. of course is this web-based user

8242
05:06:17,480 --> 05:06:20,638
interface but again recall from last

8243
05:06:19,240 --> 05:06:24,120
week even though you're using a web

8244
05:06:20,638 --> 05:06:25,638
browser to access VSS code that

8245
05:06:24,120 --> 05:06:27,958
web-based version of vs code is

8246
05:06:25,638 --> 05:06:30,239
connected to an actual server somewhere

8247
05:06:27,958 --> 05:06:32,760
in the cloud and on that server you have

8248
05:06:30,240 --> 05:06:34,600
your own account and your own file and

8249
05:06:32,760 --> 05:06:36,079
really your own hard drive virtually in

8250
05:06:34,600 --> 05:06:38,557
the cloud think of it a little like

8251
05:06:36,080 --> 05:06:40,080
Dropbox or box or Google drive or one

8252
05:06:38,558 --> 05:06:41,600
drive or something like that so you have

8253
05:06:40,080 --> 05:06:43,718
a hard drive somewhere out there that

8254
05:06:41,600 --> 05:06:46,680
we've provisioned for you and it's on

8255
05:06:43,718 --> 05:06:49,040
that hard drive that we have uh your

8256
05:06:46,680 --> 05:06:52,200
code that you just wrote or I just wrote

8257
05:06:49,040 --> 05:06:53,920
cs50.c standard I.C and all of the other

8258
05:06:52,200 --> 05:06:55,920
code that implements the math functions

8259
05:06:53,920 --> 05:06:58,480
and everything else that c

8260
05:06:55,920 --> 05:07:01,320
supports good question

8261
05:06:58,480 --> 05:07:04,320
yeah

8262
05:07:01,320 --> 05:07:04,320
c

8263
05:07:12,320 --> 05:07:17,239
good question that uh hash includes

8264
05:07:14,638 --> 05:07:19,239
cs50.h line at the top of my code if I

8265
05:07:17,240 --> 05:07:22,760
just replace that with the contents of

8266
05:07:19,240 --> 05:07:24,360
cs50.c would that work short answer yes

8267
05:07:22,760 --> 05:07:26,160
that would work you could copy all of

8268
05:07:24,360 --> 05:07:28,200
the code there however there's some

8269
05:07:26,160 --> 05:07:29,798
order of operations that might come into

8270
05:07:28,200 --> 05:07:31,480
play and so it's probably not quite as

8271
05:07:29,798 --> 05:07:33,920
simple as copy paste but conceptually

8272
05:07:31,480 --> 05:07:35,440
yes that's what what's happening now

8273
05:07:33,920 --> 05:07:38,557
with that said in

8274
05:07:35,440 --> 05:07:41,239
cs50.h are only the prototypes of the

8275
05:07:38,558 --> 05:07:43,400
functions the hints as to how the

8276
05:07:41,240 --> 05:07:44,520
functions look what their return type is

8277
05:07:43,400 --> 05:07:47,840
what their name is and what their

8278
05:07:44,520 --> 05:07:49,920
arguments are it's in the C file that

8279
05:07:47,840 --> 05:07:51,360
actual code tends to be written and this

8280
05:07:49,920 --> 05:07:53,920
is a little confusing now because you

8281
05:07:51,360 --> 05:07:55,120
and I have only written code in C files

8282
05:07:53,920 --> 05:07:57,280
but in the next few weeks you'll

8283
05:07:55,120 --> 05:07:59,360
actually start writing some of your own

8284
05:07:57,280 --> 05:08:01,600
files as well just like cs50 just like

8285
05:07:59,360 --> 05:08:03,480
standard iio but in essence that line of

8286
05:08:01,600 --> 05:08:05,680
code just makes it easier to use and

8287
05:08:03,480 --> 05:08:08,878
reuse code that's already been written

8288
05:08:05,680 --> 05:08:08,878
and that's the whole point of a

8289
05:08:09,520 --> 05:08:13,120
library I say that little

8290
05:08:13,718 --> 05:08:19,200
louder yes does linking happen when you

8291
05:08:16,000 --> 05:08:22,240
compile your code yes when you run make

8292
05:08:19,200 --> 05:08:24,440
as we have been doing the past week now

8293
05:08:22,240 --> 05:08:26,360
all four of these steps are happening

8294
05:08:24,440 --> 05:08:28,680
pre-processing converts the hash include

8295
05:08:26,360 --> 05:08:30,680
lines to something else compiling

8296
05:08:28,680 --> 05:08:32,760
technically converts it to assembly code

8297
05:08:30,680 --> 05:08:35,240
which the Mac the PC the server more

8298
05:08:32,760 --> 05:08:37,760
closely understands assembly converts

8299
05:08:35,240 --> 05:08:40,000
that language to Binary machine code

8300
05:08:37,760 --> 05:08:42,000
that this computer actually understands

8301
05:08:40,000 --> 05:08:43,600
and then linking combines everything

8302
05:08:42,000 --> 05:08:46,520
together and in fact if you think back a

8303
05:08:43,600 --> 05:08:49,440
few minutes ago to when I did this- L

8304
05:08:46,520 --> 05:08:51,558
cs50 the reason I had to add that and

8305
05:08:49,440 --> 05:08:54,280
the reason my code did not compile at

8306
05:08:51,558 --> 05:08:57,718
first was because I forgot to tell clang

8307
05:08:54,280 --> 05:08:59,760
to link in cs50's zeros and ones per

8308
05:08:57,718 --> 05:09:02,360
that last step I don't need to do- L

8309
05:08:59,760 --> 05:09:03,638
standard IO because it comes with c so

8310
05:09:02,360 --> 05:09:05,400
that would just be tedious for everyone

8311
05:09:03,638 --> 05:09:07,760
in the world but cs50 does not come with

8312
05:09:05,400 --> 05:09:09,558
C so we link that in and to be clear too

8313
05:09:07,760 --> 05:09:10,877
we won't always use cs50's Library

8314
05:09:09,558 --> 05:09:12,360
that'll be yet another pair of training

8315
05:09:10,878 --> 05:09:14,280
wheels we take off in the coming weeks

8316
05:09:12,360 --> 05:09:17,000
but for now it makes a few things

8317
05:09:14,280 --> 05:09:17,000
simpler

8318
05:09:28,080 --> 05:09:32,120
yeah short answer yes so what do the

8319
05:09:30,638 --> 05:09:33,920
zeros and ones the machine code

8320
05:09:32,120 --> 05:09:36,079
translate to yes there is a one toone

8321
05:09:33,920 --> 05:09:38,600
relationship between the machine code

8322
05:09:36,080 --> 05:09:40,200
and the assembly code assembly code it's

8323
05:09:38,600 --> 05:09:42,160
not really English but at least it's

8324
05:09:40,200 --> 05:09:43,878
symbols I recognize it's not zeros and

8325
05:09:42,160 --> 05:09:45,920
ones machine code of course is just

8326
05:09:43,878 --> 05:09:49,360
zeros and ones so back in the day before

8327
05:09:45,920 --> 05:09:51,717
c existed people were programming only

8328
05:09:49,360 --> 05:09:53,920
in assembly code before assembly code

8329
05:09:51,718 --> 05:09:55,440
existed people were coding in zeros and

8330
05:09:53,920 --> 05:09:57,320
ones and you can imagine just how

8331
05:09:55,440 --> 05:09:59,199
painful that was and so each of these

8332
05:09:57,320 --> 05:10:00,600
languages makes life for us sort of

8333
05:09:59,200 --> 05:10:02,760
easier and easier in a few weeks we'll

8334
05:10:00,600 --> 05:10:06,000
transition to python which will in turn

8335
05:10:02,760 --> 05:10:08,679
make C even uh simpler or coding in

8336
05:10:06,000 --> 05:10:13,638
general simpler to do to all right so

8337
05:10:08,680 --> 05:10:15,200
with that said what now can we uh what

8338
05:10:13,638 --> 05:10:17,440
could go wrong with this well it turns

8339
05:10:15,200 --> 05:10:19,320
out that besides compiling technically

8340
05:10:17,440 --> 05:10:21,280
speaking there's decompiling and we've

8341
05:10:19,320 --> 05:10:23,718
not done this and we won't do this but

8342
05:10:21,280 --> 05:10:26,360
it's worth considering for just a moment

8343
05:10:23,718 --> 05:10:28,440
uh if you were to not compile your code

8344
05:10:26,360 --> 05:10:30,240
but decompile it as the word suggests

8345
05:10:28,440 --> 05:10:33,320
this just means reversing the process

8346
05:10:30,240 --> 05:10:36,718
converting it ideally from machine code

8347
05:10:33,320 --> 05:10:39,079
zeros and ones maybe back to C now this

8348
05:10:36,718 --> 05:10:40,760
would be cool perhaps if all you have is

8349
05:10:39,080 --> 05:10:43,160
a program you can convert it and see the

8350
05:10:40,760 --> 05:10:45,480
actual source code what might a downside

8351
05:10:43,160 --> 05:10:49,480
be if if anyone on the Internet is able

8352
05:10:45,480 --> 05:10:52,480
to decompile code on their machine

8353
05:10:49,480 --> 05:10:55,718
yeah okay so it's easier to find bugs in

8354
05:10:52,480 --> 05:10:58,440
the code that oh to exploit so it might

8355
05:10:55,718 --> 05:10:59,958
be easier to uh hack into the software

8356
05:10:58,440 --> 05:11:01,520
by finding mistakes you and I made

8357
05:10:59,958 --> 05:11:03,160
because literally they're staring at you

8358
05:11:01,520 --> 05:11:06,160
in code worries the zeros and ones make

8359
05:11:03,160 --> 05:11:10,280
it way less obvious other downsides of

8360
05:11:06,160 --> 05:11:10,280
what I call decompiling

8361
05:11:12,958 --> 05:11:17,760
yeah

8362
05:11:15,080 --> 05:11:19,600
yeah yeah if your code your work is your

8363
05:11:17,760 --> 05:11:21,120
intellectual property copyrighted or

8364
05:11:19,600 --> 05:11:22,480
otherwise you know that's kind of

8365
05:11:21,120 --> 05:11:23,878
obnoxious that someone can just like run

8366
05:11:22,480 --> 05:11:25,760
a command and boom they can see the

8367
05:11:23,878 --> 05:11:27,760
original code that you wrote now it

8368
05:11:25,760 --> 05:11:29,958
turns out it's not quite as simple as

8369
05:11:27,760 --> 05:11:32,120
that and so even though yes you could

8370
05:11:29,958 --> 05:11:34,120
take a program like hello or even

8371
05:11:32,120 --> 05:11:37,160
Microsoft Word and convert it from zeros

8372
05:11:34,120 --> 05:11:40,120
and ones back to some form of source

8373
05:11:37,160 --> 05:11:41,000
code be it in C or Java or python or

8374
05:11:40,120 --> 05:11:42,958
something else whatever it was

8375
05:11:41,000 --> 05:11:45,400
originally written in odds are it's

8376
05:11:42,958 --> 05:11:47,399
going to be an utter mess to look look

8377
05:11:45,400 --> 05:11:49,920
at why because things like variable

8378
05:11:47,400 --> 05:11:51,680
names are not retained in the zeros and

8379
05:11:49,920 --> 05:11:54,079
ones typically function names might not

8380
05:11:51,680 --> 05:11:56,160
be retained in the zeros and ones the

8381
05:11:54,080 --> 05:11:57,878
code is the logic is but the computer

8382
05:11:56,160 --> 05:11:59,760
doesn't care what pretty variables you

8383
05:11:57,878 --> 05:12:01,400
chose and how nicely named your uh

8384
05:11:59,760 --> 05:12:03,600
functions were it just needs to know

8385
05:12:01,400 --> 05:12:04,920
them as Z in ones moreover if you think

8386
05:12:03,600 --> 05:12:07,638
about last week we introduced things

8387
05:12:04,920 --> 05:12:09,399
like loops and c and besides four Loops

8388
05:12:07,638 --> 05:12:11,878
there's what other kind of loop for

8389
05:12:09,400 --> 05:12:13,520
instance so a while loop and even though

8390
05:12:11,878 --> 05:12:15,120
they look different and you have to

8391
05:12:13,520 --> 05:12:17,400
write different code they achieve

8392
05:12:15,120 --> 05:12:19,958
exactly the same functionality which is

8393
05:12:17,400 --> 05:12:21,958
to say when you compile a for Loop or

8394
05:12:19,958 --> 05:12:24,638
you compile a while loop if they

8395
05:12:21,958 --> 05:12:26,760
logically do the same thing they might

8396
05:12:24,638 --> 05:12:28,399
end up looking identical as zeros and

8397
05:12:26,760 --> 05:12:30,000
ones and so therefore it's not

8398
05:12:28,400 --> 05:12:31,958
necessarily predictable that you'll get

8399
05:12:30,000 --> 05:12:34,600
back the original code why cuz because

8400
05:12:31,958 --> 05:12:36,199
the zeros and ones might not know so to

8401
05:12:34,600 --> 05:12:37,958
speak whether it was a for Loop or a

8402
05:12:36,200 --> 05:12:39,920
while loop so maybe decompiling will

8403
05:12:37,958 --> 05:12:41,840
show you one or the other and honestly

8404
05:12:39,920 --> 05:12:43,717
decompiling while possible and it's one

8405
05:12:41,840 --> 05:12:45,958
way of reverse engineering someone's

8406
05:12:43,718 --> 05:12:47,798
product odds are if you're good enough

8407
05:12:45,958 --> 05:12:49,160
to start reading code that's been

8408
05:12:47,798 --> 05:12:50,920
decompiled and reading through the

8409
05:12:49,160 --> 05:12:52,680
messiness of it odds are you have the

8410
05:12:50,920 --> 05:12:54,958
talent probably to just write that same

8411
05:12:52,680 --> 05:12:56,760
program from scratch yourself now that's

8412
05:12:54,958 --> 05:12:59,399
an overstatement perhaps but it's not

8413
05:12:56,760 --> 05:13:01,199
quite as easy or threatening um as you

8414
05:12:59,400 --> 05:13:04,558
might first think so in general once

8415
05:13:01,200 --> 05:13:06,958
codee is piled it's pretty challenging

8416
05:13:04,558 --> 05:13:08,920
timec consuming costly to reverse

8417
05:13:06,958 --> 05:13:10,680
engineer it um much like it would be in

8418
05:13:08,920 --> 05:13:12,160
the real world right like all of us have

8419
05:13:10,680 --> 05:13:13,440
some kind of phone probably nowadays in

8420
05:13:12,160 --> 05:13:15,600
our pocket there's nothing stopping you

8421
05:13:13,440 --> 05:13:17,557
from opening it up somehow poking around

8422
05:13:15,600 --> 05:13:19,320
recreating what's there that's a huge

8423
05:13:17,558 --> 05:13:20,760
amount of effort most likely and at that

8424
05:13:19,320 --> 05:13:22,400
point maybe you should just invent the

8425
05:13:20,760 --> 05:13:24,840
phone instead of trying to reverse

8426
05:13:22,400 --> 05:13:28,080
engineer it so same kind of idea in the

8427
05:13:24,840 --> 05:13:30,760
physical world any questions then on

8428
05:13:28,080 --> 05:13:32,920
compiling or even decompiling in these

8429
05:13:30,760 --> 05:13:34,958
forms

8430
05:13:32,920 --> 05:13:37,160
all right so odds are at this point not

8431
05:13:34,958 --> 05:13:39,557
only I but you have made mistakes and

8432
05:13:37,160 --> 05:13:42,120
you've written buggy code a bug in a

8433
05:13:39,558 --> 05:13:43,878
code is just a mistake a logical error

8434
05:13:42,120 --> 05:13:46,557
or otherwise where the code just does

8435
05:13:43,878 --> 05:13:48,920
not behave correctly as you intend and

8436
05:13:46,558 --> 05:13:50,840
up until now odds are your debugging

8437
05:13:48,920 --> 05:13:53,120
techniques have been to maybe look back

8438
05:13:50,840 --> 05:13:55,360
at what I did in class maybe ask a

8439
05:13:53,120 --> 05:13:56,840
question online or in person but

8440
05:13:55,360 --> 05:13:59,040
ultimately it'd be nice if you had some

8441
05:13:56,840 --> 05:14:00,878
tools of your own with which to debug

8442
05:13:59,040 --> 05:14:02,958
code and this honestly is a lifelong

8443
05:14:00,878 --> 05:14:04,160
skill you're going to emerge from cs50

8444
05:14:02,958 --> 05:14:05,199
and even 20 years from now you're not

8445
05:14:04,160 --> 05:14:07,760
going to be writing if you're writing

8446
05:14:05,200 --> 05:14:09,798
code at all correct code all of the time

8447
05:14:07,760 --> 05:14:11,717
like all of us on the staff continue to

8448
05:14:09,798 --> 05:14:13,958
write bugs hopefully they get a little

8449
05:14:11,718 --> 05:14:15,760
more sophisticated and not sort of like

8450
05:14:13,958 --> 05:14:17,877
oops I missed a semicolon but even those

8451
05:14:15,760 --> 05:14:19,920
kinds of mistakes we make too but

8452
05:14:17,878 --> 05:14:21,600
there's tools out there and techniques

8453
05:14:19,920 --> 05:14:24,039
that can make your life easier when it

8454
05:14:21,600 --> 05:14:25,557
comes to solving those problems now the

8455
05:14:24,040 --> 05:14:28,200
term bug has actually been around for

8456
05:14:25,558 --> 05:14:31,798
decades but a fun story to tell is that

8457
05:14:28,200 --> 05:14:33,680
the first documented actual bug was

8458
05:14:31,798 --> 05:14:36,520
actually somehow connected to Harvard in

8459
05:14:33,680 --> 05:14:40,160
fact this is the log book relating to

8460
05:14:36,520 --> 05:14:41,520
the Harvard Mark 2 computer from 1947

8461
05:14:40,160 --> 05:14:44,320
whereby if you read the notes here and

8462
05:14:41,520 --> 05:14:46,520
if I zoom in this was an actual moth

8463
05:14:44,320 --> 05:14:48,480
discovered inside of this big Mainframe

8464
05:14:46,520 --> 05:14:50,040
computer that was causing some kind of

8465
05:14:48,480 --> 05:14:51,320
problems and the engineers at the time

8466
05:14:50,040 --> 05:14:53,400
actually thought it was funny that wow

8467
05:14:51,320 --> 05:14:55,160
physical bug actually explains the issue

8468
05:14:53,400 --> 05:14:57,000
and it's been forever uh taped to the

8469
05:14:55,160 --> 05:14:59,718
sheet of paper which I believe now is on

8470
05:14:57,000 --> 05:15:02,360
display in the Smithsonian uh with that

8471
05:14:59,718 --> 05:15:05,120
said this is just represented two of a

8472
05:15:02,360 --> 05:15:07,000
logical bug and that story is actually

8473
05:15:05,120 --> 05:15:08,480
uh that story was often retold by a

8474
05:15:07,000 --> 05:15:11,200
famous mathematician then computer

8475
05:15:08,480 --> 05:15:12,638
scientist really uh Dr Grace Hopper who

8476
05:15:11,200 --> 05:15:15,558
actually worked not only on the Harvard

8477
05:15:12,638 --> 05:15:18,239
Mark 2 computer but its predecessor the

8478
05:15:15,558 --> 05:15:20,120
Harvard Mark 1 and if you ever spent

8479
05:15:18,240 --> 05:15:21,520
time yet in the engineering building

8480
05:15:20,120 --> 05:15:24,320
across the river here you can actually

8481
05:15:21,520 --> 05:15:25,920
see much of this computer which is along

8482
05:15:24,320 --> 05:15:27,400
the wall when you first walk into the

8483
05:15:25,920 --> 05:15:28,839
science and engineering complex and

8484
05:15:27,400 --> 05:15:30,878
indeed as you've probably heard growing

8485
05:15:28,840 --> 05:15:33,240
up this is a Mainframe computer like

8486
05:15:30,878 --> 05:15:35,718
this is what Macs and PCs so to speak

8487
05:15:33,240 --> 05:15:37,040
looked like back in the day with very

8488
05:15:35,718 --> 05:15:38,600
physical things that essentially

8489
05:15:37,040 --> 05:15:40,200
implemented the zeros and ones that you

8490
05:15:38,600 --> 05:15:42,519
and I take for granted now being

8491
05:15:40,200 --> 05:15:43,760
miniaturized in our laptops and phones

8492
05:15:42,520 --> 05:15:45,600
so there's a piece of history there if

8493
05:15:43,760 --> 05:15:47,717
you visit campus that side of Campus

8494
05:15:45,600 --> 05:15:49,519
sometime do take a look but let's

8495
05:15:47,718 --> 05:15:51,718
consider then how we solve not of course

8496
05:15:49,520 --> 05:15:53,160
physical bugs but logical bugs and let's

8497
05:15:51,718 --> 05:15:55,160
consider something like this from last

8498
05:15:53,160 --> 05:15:58,120
week whereby we were trying very simply

8499
05:15:55,160 --> 05:16:00,878
to print like this uh column of three

8500
05:15:58,120 --> 05:16:03,760
bricks using hashtags of sorts so let me

8501
05:16:00,878 --> 05:16:05,240
go over here in just a moment to VSS

8502
05:16:03,760 --> 05:16:07,120
code and I'm going to go ahead and open

8503
05:16:05,240 --> 05:16:08,440
a program I wrote in advance and I'm

8504
05:16:07,120 --> 05:16:10,200
bringing it to class because there's a

8505
05:16:08,440 --> 05:16:12,680
bug in it and I'd like to figure out how

8506
05:16:10,200 --> 05:16:15,480
to solve this bug so let me open up uh

8507
05:16:12,680 --> 05:16:17,120
buggy z.c which is version zero of my

8508
05:16:15,480 --> 05:16:19,200
code and let's just take a quick peek at

8509
05:16:17,120 --> 05:16:21,798
what's here it's pretty short it

8510
05:16:19,200 --> 05:16:24,040
includes only standard i.h it uses

8511
05:16:21,798 --> 05:16:26,360
printf it uses a for Loop and the goal

8512
05:16:24,040 --> 05:16:28,558
quite simply is to print out that column

8513
05:16:26,360 --> 05:16:30,240
of three bricks now it's short enough

8514
05:16:28,558 --> 05:16:31,840
that some of you if you're getting comfy

8515
05:16:30,240 --> 05:16:34,400
already with see you might already see

8516
05:16:31,840 --> 05:16:36,440
The Logical bug it's not a syntax error

8517
05:16:34,400 --> 05:16:38,360
like it will compile and run but there's

8518
05:16:36,440 --> 05:16:41,239
a bug there and suppose that I'm very

8519
05:16:38,360 --> 05:16:44,040
new to see I'm very uncomfortable with C

8520
05:16:41,240 --> 05:16:45,840
it's 2 a.m. and I just can't see the bug

8521
05:16:44,040 --> 05:16:48,160
what are my recourses here for actually

8522
05:16:45,840 --> 05:16:49,878
finding a mistake like this well first

8523
05:16:48,160 --> 05:16:52,320
let's look at the symptom let me go down

8524
05:16:49,878 --> 05:16:54,440
to my terminal window I'm going to use

8525
05:16:52,320 --> 05:16:56,440
make buggy zero because again the file

8526
05:16:54,440 --> 05:16:58,000
is called buggy zero. C I'm not going to

8527
05:16:56,440 --> 05:16:59,717
use clang in fact I'm never really going

8528
05:16:58,000 --> 05:17:00,958
to use clang manually here and out I'm

8529
05:16:59,718 --> 05:17:03,600
just going to use make because it makes

8530
05:17:00,958 --> 05:17:05,480
our lives easier it does compile no

8531
05:17:03,600 --> 05:17:07,638
errors so it's not syntax it's not

8532
05:17:05,480 --> 05:17:11,440
something silly like a missing semicolon

8533
05:17:07,638 --> 05:17:14,638
but when I runbuggy Z I of course see 1

8534
05:17:11,440 --> 05:17:17,320
2 3 4 and this of course does not match

8535
05:17:14,638 --> 05:17:19,840
the zero the one two three bricks that I

8536
05:17:17,320 --> 05:17:22,200
actually intended for that column and

8537
05:17:19,840 --> 05:17:24,160
yet I'm starting counting at zero as I

8538
05:17:22,200 --> 05:17:26,638
usually do I've got three I'm going up

8539
05:17:24,160 --> 05:17:28,079
to three so where is my logical error if

8540
05:17:26,638 --> 05:17:30,239
it hasn't obviously jumped out at you

8541
05:17:28,080 --> 05:17:32,480
already well how can I solve this well

8542
05:17:30,240 --> 05:17:34,080
first and foremost perhaps the best

8543
05:17:32,480 --> 05:17:36,280
technique for solving bugs at least

8544
05:17:34,080 --> 05:17:38,480
early on is just use printf like thus

8545
05:17:36,280 --> 05:17:40,520
far we've used printf to say hello and

8546
05:17:38,480 --> 05:17:42,399
other things on the screen but print def

8547
05:17:40,520 --> 05:17:43,680
is just a function for printing anything

8548
05:17:42,400 --> 05:17:46,000
and there's no reason you can't

8549
05:17:43,680 --> 05:17:47,920
temporarily use print def to like print

8550
05:17:46,000 --> 05:17:49,798
out the contents of variables what's

8551
05:17:47,920 --> 05:17:51,199
going on inside of your program just to

8552
05:17:49,798 --> 05:17:52,440
figure out where your mistake is and

8553
05:17:51,200 --> 05:17:53,600
then you can delete that line of code

8554
05:17:52,440 --> 05:17:56,120
later it doesn't have to stay there

8555
05:17:53,600 --> 05:17:58,638
forever so let me do this instead of

8556
05:17:56,120 --> 05:18:02,480
just printing out in vs code the hash

8557
05:17:58,638 --> 05:18:05,840
symbol let me do a little safety check

8558
05:18:02,480 --> 05:18:09,079
here and print out the value of I so let

8559
05:18:05,840 --> 05:18:11,760
me go ahead and say something like I is

8560
05:18:09,080 --> 05:18:13,240
now I want to say I is this but of

8561
05:18:11,760 --> 05:18:15,280
course this is not how I print out the

8562
05:18:13,240 --> 05:18:17,480
value of I if I want to print out the

8563
05:18:15,280 --> 05:18:20,680
value of I what should I put

8564
05:18:17,480 --> 05:18:22,480
here so percent I for integer instead of

8565
05:18:20,680 --> 05:18:24,160
percent s for string so they're still

8566
05:18:22,480 --> 05:18:25,798
placeholders but we use percent s for

8567
05:18:24,160 --> 05:18:27,718
integers and now if I want to print out

8568
05:18:25,798 --> 05:18:29,958
I I just need the comma as the second

8569
05:18:27,718 --> 05:18:32,320
argument and then I all right let me go

8570
05:18:29,958 --> 05:18:34,359
ahead and back to vs uh to my terminal

8571
05:18:32,320 --> 05:18:36,558
window let me recompile the program

8572
05:18:34,360 --> 05:18:40,240
because I've changed it that still works

8573
05:18:36,558 --> 05:18:42,638
fine do/ bugy Z and now let me increase

8574
05:18:40,240 --> 05:18:44,600
the size of my terminal window here you

8575
05:18:42,638 --> 05:18:46,557
just see some diagnostic information if

8576
05:18:44,600 --> 05:18:47,920
you will like this is not the goal this

8577
05:18:46,558 --> 05:18:50,080
is not what you should be submitting for

8578
05:18:47,920 --> 05:18:52,039
this homework problem we're at one uh

8579
05:18:50,080 --> 05:18:54,360
but it is helping us diagnostically know

8580
05:18:52,040 --> 05:18:56,440
that okay when I is zero here's a hash

8581
05:18:54,360 --> 05:18:58,520
when I is one here's a hash when I is

8582
05:18:56,440 --> 05:19:00,440
two here's a hash when I is three here's

8583
05:18:58,520 --> 05:19:02,920
a hash well wait a minute that's one two

8584
05:19:00,440 --> 05:19:04,958
three four so clearly I'm printing it

8585
05:19:02,920 --> 05:19:06,679
one too many times so let me look back

8586
05:19:04,958 --> 05:19:10,000
at the code here by shrinking my

8587
05:19:06,680 --> 05:19:13,240
terminal window and let me just ask the

8588
05:19:10,000 --> 05:19:16,080
group where is in fact the mistake or

8589
05:19:13,240 --> 05:19:18,400
what equivalently would be the solution

8590
05:19:16,080 --> 05:19:18,400
yeah in the

8591
05:19:19,000 --> 05:19:23,878
middle yeah instead of less than or

8592
05:19:21,160 --> 05:19:25,160
equal to use just less than so you got

8593
05:19:23,878 --> 05:19:26,958
to kind of pick a lane here like if

8594
05:19:25,160 --> 05:19:29,440
you're going to start counting from zero

8595
05:19:26,958 --> 05:19:31,359
you generally use less than and go up to

8596
05:19:29,440 --> 05:19:32,920
but not through the value or if you

8597
05:19:31,360 --> 05:19:34,878
prefer like in the human world counting

8598
05:19:32,920 --> 05:19:36,600
from one on up you can use great less

8599
05:19:34,878 --> 05:19:38,040
than or equal to but you have to be

8600
05:19:36,600 --> 05:19:39,958
consistent and in general as a

8601
05:19:38,040 --> 05:19:41,320
programmer just always start counting

8602
05:19:39,958 --> 05:19:43,320
from zero if you're doing something

8603
05:19:41,320 --> 05:19:45,680
canonical like this but the solution is

8604
05:19:43,320 --> 05:19:47,120
indeed just to change this by changing

8605
05:19:45,680 --> 05:19:50,200
the greater less than or equal to to

8606
05:19:47,120 --> 05:19:52,840
less than if I re compile this program

8607
05:19:50,200 --> 05:19:55,200
with make buggy zero and then do buggy

8608
05:19:52,840 --> 05:19:57,600
zero again and let me increase the size

8609
05:19:55,200 --> 05:20:00,280
of my terminal window now you see okay

8610
05:19:57,600 --> 05:20:02,717
almost the same output but indeed I

8611
05:20:00,280 --> 05:20:05,160
starts at zero goes up two but not

8612
05:20:02,718 --> 05:20:07,760
through three all right so printf in

8613
05:20:05,160 --> 05:20:09,638
short should be can be your first uh

8614
05:20:07,760 --> 05:20:11,440
diagnostic tool instead of just staring

8615
05:20:09,638 --> 05:20:13,798
at the screen or raising your hand I

8616
05:20:11,440 --> 05:20:15,680
mean use printf to see literally what's

8617
05:20:13,798 --> 05:20:17,440
going on inside of your program by just

8618
05:20:15,680 --> 05:20:19,000
printing out things of interest and then

8619
05:20:17,440 --> 05:20:21,039
once you've solved the problem you can

8620
05:20:19,000 --> 05:20:22,840
go back into your code AS I'll do here

8621
05:20:21,040 --> 05:20:24,878
by shrinking my terminal window I'll

8622
05:20:22,840 --> 05:20:26,558
delete the print F line and now I'm

8623
05:20:24,878 --> 05:20:28,280
ready to share this program with the

8624
05:20:26,558 --> 05:20:30,400
world or submit it as homework or the

8625
05:20:28,280 --> 05:20:34,239
like it's just meant there to be

8626
05:20:30,400 --> 05:20:36,840
temporary any questions on printf as a

8627
05:20:34,240 --> 05:20:36,840
debugging

8628
05:20:37,080 --> 05:20:41,958
tool no all right well that only gets us

8629
05:20:40,200 --> 05:20:43,520
so far and honestly as your programs

8630
05:20:41,958 --> 05:20:44,958
grow and grow and grow it's going to

8631
05:20:43,520 --> 05:20:47,200
actually get really annoying to start

8632
05:20:44,958 --> 05:20:48,877
going in and adding printfs then

8633
05:20:47,200 --> 05:20:50,638
removing them and figuring out if you've

8634
05:20:48,878 --> 05:20:52,520
got multiple printfs well which one

8635
05:20:50,638 --> 05:20:54,958
printed what like it just gets messy

8636
05:20:52,520 --> 05:20:57,040
eventually to rely on printf alone so

8637
05:20:54,958 --> 05:20:59,000
being a computer scientist computer

8638
05:20:57,040 --> 05:21:01,840
scientists have written software to make

8639
05:20:59,000 --> 05:21:04,200
it easier to debug code that software is

8640
05:21:01,840 --> 05:21:05,400
what we would generally call a debugger

8641
05:21:04,200 --> 05:21:06,958
which would be the second tool of the

8642
05:21:05,400 --> 05:21:09,558
trade that you can use to actually solve

8643
05:21:06,958 --> 05:21:11,760
problems in your code now in the world

8644
05:21:09,558 --> 05:21:13,878
of VSS code there's actually a debugger

8645
05:21:11,760 --> 05:21:15,638
built in so the graphical user interface

8646
05:21:13,878 --> 05:21:17,440
you're about to see in VSS code isn't

8647
05:21:15,638 --> 05:21:19,958
specific to cs50 it actually comes with

8648
05:21:17,440 --> 05:21:21,877
vs code and it supports C and C++ and

8649
05:21:19,958 --> 05:21:23,958
Java and Python and lots of other

8650
05:21:21,878 --> 05:21:26,798
languages too but it's admittedly a

8651
05:21:23,958 --> 05:21:28,480
little complicated to just start using

8652
05:21:26,798 --> 05:21:30,120
the debugger you have to like create a

8653
05:21:28,480 --> 05:21:31,840
configuration file and do like some

8654
05:21:30,120 --> 05:21:33,958
annoying steps that just get in the way

8655
05:21:31,840 --> 05:21:35,878
of solving real problems so we have

8656
05:21:33,958 --> 05:21:37,557
automated the process for you of just

8657
05:21:35,878 --> 05:21:39,080
starting the debugger and thereafter

8658
05:21:37,558 --> 05:21:40,680
it's sort of Industry standard how you

8659
05:21:39,080 --> 05:21:42,558
use it but we save you the headache of

8660
05:21:40,680 --> 05:21:45,120
having to create those configuration

8661
05:21:42,558 --> 05:21:46,760
files so suppose I want to do this

8662
05:21:45,120 --> 05:21:49,440
suppose I want to try to debug this

8663
05:21:46,760 --> 05:21:52,039
program step by step using special

8664
05:21:49,440 --> 05:21:54,920
software well how can I do that well let

8665
05:21:52,040 --> 05:21:57,040
me propose that if I revert this back to

8666
05:21:54,920 --> 05:21:59,958
the original version where I was less

8667
05:21:57,040 --> 05:22:01,798
than or equal to three I'm pretty sure

8668
05:21:59,958 --> 05:22:03,039
that I was printing to hashes so I'm

8669
05:22:01,798 --> 05:22:05,160
going to do this and you might have done

8670
05:22:03,040 --> 05:22:07,680
this accidentally or never at all but

8671
05:22:05,160 --> 05:22:09,480
notice if you hover over the gutter so

8672
05:22:07,680 --> 05:22:11,280
to speak in vs code the part of it all

8673
05:22:09,480 --> 05:22:14,320
the way to the left of the editor you

8674
05:22:11,280 --> 05:22:16,440
see this sort of grayed out uh Red Dot

8675
05:22:14,320 --> 05:22:18,120
if you click there it becomes a brighter

8676
05:22:16,440 --> 05:22:20,039
Red Dot and this represents what we're

8677
05:22:18,120 --> 05:22:21,600
going to call a break point and this is

8678
05:22:20,040 --> 05:22:23,480
just a visual indicator that you've put

8679
05:22:21,600 --> 05:22:25,680
like a stop sign equivalent there and

8680
05:22:23,480 --> 05:22:28,160
you're telling the debugger in a moment

8681
05:22:25,680 --> 05:22:30,360
stop running my code there why because I

8682
05:22:28,160 --> 05:22:32,360
prefer to step through my code at sort

8683
05:22:30,360 --> 05:22:34,520
of a human speed and not as computer

8684
05:22:32,360 --> 05:22:36,680
speed where it runs all at once so I've

8685
05:22:34,520 --> 05:22:38,360
set my breakpoint which is step one and

8686
05:22:36,680 --> 05:22:40,760
then step two is quite simply this

8687
05:22:38,360 --> 05:22:43,798
instead of running the program itself

8688
05:22:40,760 --> 05:22:47,798
run a command called debug 50 and then

8689
05:22:43,798 --> 05:22:50,039
do/ bugy Z and now this will start your

8690
05:22:47,798 --> 05:22:51,600
program but inside of the debugger which

8691
05:22:50,040 --> 05:22:53,840
is a special program that smart people

8692
05:22:51,600 --> 05:22:56,638
wrote that will Empower you to now step

8693
05:22:53,840 --> 05:22:59,160
through your code line by line at again

8694
05:22:56,638 --> 05:23:01,200
at your own Comfort Pace I'm going to

8695
05:22:59,160 --> 05:23:03,680
hit enter some stuff's going to happen

8696
05:23:01,200 --> 05:23:05,360
on the screen whoops uh notice this is a

8697
05:23:03,680 --> 05:23:07,040
common mistake that I made accidentally

8698
05:23:05,360 --> 05:23:08,400
here looks like I've changed my code I

8699
05:23:07,040 --> 05:23:10,200
did because I went in and changed the

8700
05:23:08,400 --> 05:23:13,638
less than or equal to sign so let me go

8701
05:23:10,200 --> 05:23:17,840
ahead and rerun make buggy zero enter

8702
05:23:13,638 --> 05:23:19,160
good now let me rerun debug 50 enter and

8703
05:23:17,840 --> 05:23:20,718
now some stuff just happened on the

8704
05:23:19,160 --> 05:23:23,480
screen and it takes a moment to get

8705
05:23:20,718 --> 05:23:25,920
started but once it's started you'll see

8706
05:23:23,480 --> 05:23:27,718
this you'll still see your code but

8707
05:23:25,920 --> 05:23:29,480
you'll see this yellow highlight which

8708
05:23:27,718 --> 05:23:30,520
you've probably not seen before and

8709
05:23:29,480 --> 05:23:32,160
notice that it's specifically

8710
05:23:30,520 --> 05:23:34,718
highlighted in the same line that I set

8711
05:23:32,160 --> 05:23:36,958
a breakpoint on why that just means the

8712
05:23:34,718 --> 05:23:39,718
program has EXE the debugger has

8713
05:23:36,958 --> 05:23:42,958
executed all of these lines except for

8714
05:23:39,718 --> 05:23:44,958
line seven it has broken at not in a bad

8715
05:23:42,958 --> 05:23:46,920
way but it has paused execution on line

8716
05:23:44,958 --> 05:23:49,120
seven so it hasn't yet printed any

8717
05:23:46,920 --> 05:23:51,039
hashes and you can see that no hashes in

8718
05:23:49,120 --> 05:23:53,320
the terminal window yet it's paused

8719
05:23:51,040 --> 05:23:56,160
execution but what's interesting with

8720
05:23:53,320 --> 05:23:58,120
the debugger is the stuff over here on

8721
05:23:56,160 --> 05:24:00,280
the left hand side in the debugger here

8722
05:23:58,120 --> 05:24:02,200
you'll see under variables all of your

8723
05:24:00,280 --> 05:24:03,958
so-called local variables and we haven't

8724
05:24:02,200 --> 05:24:05,760
really made a distinction between local

8725
05:24:03,958 --> 05:24:07,320
and something called Global but for now

8726
05:24:05,760 --> 05:24:09,600
local variables just means all of the

8727
05:24:07,320 --> 05:24:12,320
variables that exist in your function so

8728
05:24:09,600 --> 05:24:14,798
I currently has a value of zero okay and

8729
05:24:12,320 --> 05:24:17,320
that makes sense so now how do I step

8730
05:24:14,798 --> 05:24:19,120
through my code and see what it's doing

8731
05:24:17,320 --> 05:24:21,040
well at the top of the screen here

8732
05:24:19,120 --> 05:24:22,480
you'll see some playback icons kind of

8733
05:24:21,040 --> 05:24:25,600
like a video player but they have

8734
05:24:22,480 --> 05:24:27,360
special meaning this first one will just

8735
05:24:25,600 --> 05:24:28,958
play the rest of your program all the

8736
05:24:27,360 --> 05:24:30,280
way to the end so you only click that if

8737
05:24:28,958 --> 05:24:32,120
you sort of solved a problem and you

8738
05:24:30,280 --> 05:24:34,520
just want to run run it to completion

8739
05:24:32,120 --> 05:24:37,000
like before but the next three or next

8740
05:24:34,520 --> 05:24:39,040
two really are really the juiciest the

8741
05:24:37,000 --> 05:24:40,558
second one here if you hover over it

8742
05:24:39,040 --> 05:24:43,638
eventually you'll see that it's called

8743
05:24:40,558 --> 05:24:45,680
step over step over means that the

8744
05:24:43,638 --> 05:24:47,320
debugger will run this currently

8745
05:24:45,680 --> 05:24:48,840
highlighted line of code but it's not

8746
05:24:47,320 --> 05:24:50,638
going to dive into it so if it's a

8747
05:24:48,840 --> 05:24:52,400
function like print F it's not going to

8748
05:24:50,638 --> 05:24:53,798
start stepping through print F line by

8749
05:24:52,400 --> 05:24:55,760
line why because I can pretty much

8750
05:24:53,798 --> 05:24:58,160
assume print F written decades ago is

8751
05:24:55,760 --> 05:25:00,160
correct problems probably with me but

8752
05:24:58,160 --> 05:25:02,878
this next line if I did really want to

8753
05:25:00,160 --> 05:25:04,798
step in into the printf code to figure

8754
05:25:02,878 --> 05:25:06,680
out how it works or find some problem in

8755
05:25:04,798 --> 05:25:08,280
it all these years later you can step

8756
05:25:06,680 --> 05:25:09,798
into printf and then the screen would

8757
05:25:08,280 --> 05:25:11,920
change and you'd see each of the lines

8758
05:25:09,798 --> 05:25:13,239
for print F line by line at least if you

8759
05:25:11,920 --> 05:25:14,839
have the source code for print F

8760
05:25:13,240 --> 05:25:17,280
installed all right I'm going to use the

8761
05:25:14,840 --> 05:25:20,040
first one step over and watch as the

8762
05:25:17,280 --> 05:25:21,878
yellow highlight moves and watch as in

8763
05:25:20,040 --> 05:25:25,320
the terminal window there's a hash

8764
05:25:21,878 --> 05:25:27,200
symbol here we go there's one hash now

8765
05:25:25,320 --> 05:25:29,480
notice line five is highlighted that

8766
05:25:27,200 --> 05:25:31,520
means it has paused on line five line

8767
05:25:29,480 --> 05:25:34,040
five has not yet been exec executed so

8768
05:25:31,520 --> 05:25:36,280
what does that mean the value of I per

8769
05:25:34,040 --> 05:25:38,400
the top left hand corner is still zero

8770
05:25:36,280 --> 05:25:40,958
but as soon as I click step over again

8771
05:25:38,400 --> 05:25:43,480
Watch What Happens at the top left where

8772
05:25:40,958 --> 05:25:46,480
I is a variable on the

8773
05:25:43,480 --> 05:25:48,958
screen now I and it flashed briefly has

8774
05:25:46,480 --> 05:25:50,878
a value of one and now if I step over

8775
05:25:48,958 --> 05:25:53,480
again watch the terminal window there's

8776
05:25:50,878 --> 05:25:55,240
my second hash now let me click step

8777
05:25:53,480 --> 05:25:58,399
over on the for Loop watch the variable

8778
05:25:55,240 --> 05:26:00,840
at top left now one goes to two now let

8779
05:25:58,400 --> 05:26:02,440
me click it again third hash and Here's

8780
05:26:00,840 --> 05:26:04,480
Where The Logical error is perhaps

8781
05:26:02,440 --> 05:26:06,840
revealed let me go ahead and step over

8782
05:26:04,480 --> 05:26:09,160
the loop now I is three wait a minute

8783
05:26:06,840 --> 05:26:10,680
I'm still going to print out a hash

8784
05:26:09,160 --> 05:26:12,000
there it is there's the fourth hash and

8785
05:26:10,680 --> 05:26:13,958
at this point hopefully the light bulb

8786
05:26:12,000 --> 05:26:16,240
proverbially has gone off I realize oh I

8787
05:26:13,958 --> 05:26:18,877
screwed up I can either stop the program

8788
05:26:16,240 --> 05:26:20,718
Al together with the red square or I can

8789
05:26:18,878 --> 05:26:22,798
just let it run all the way to the end

8790
05:26:20,718 --> 05:26:24,120
which just terminates everything at this

8791
05:26:22,798 --> 05:26:25,840
point I just want to get back into my

8792
05:26:24,120 --> 05:26:27,760
code and start fixing things and you can

8793
05:26:25,840 --> 05:26:29,680
close for instance as I will here the

8794
05:26:27,760 --> 05:26:32,359
file explorer just to hide the panel

8795
05:26:29,680 --> 05:26:34,360
that open so that's debug 50 but it's

8796
05:26:32,360 --> 05:26:36,000
not a cs50 thing that just starts the

8797
05:26:34,360 --> 05:26:37,958
debugger for you which is something

8798
05:26:36,000 --> 05:26:42,600
you'd find in most any programming

8799
05:26:37,958 --> 05:26:46,079
environment nowadays questions on

8800
05:26:42,600 --> 05:26:46,079
debugging questions

8801
05:26:46,718 --> 05:26:51,718
yeah good question where does it tell

8802
05:26:48,840 --> 05:26:53,638
you where it went wrong so sadly it does

8803
05:26:51,718 --> 05:26:56,280
not tell you any of that the onus is

8804
05:26:53,638 --> 05:26:57,920
still on you the human to use this tool

8805
05:26:56,280 --> 05:27:00,680
productively to walk through your code

8806
05:26:57,920 --> 05:27:02,079
at a a saner pace but your brain is is

8807
05:27:00,680 --> 05:27:03,558
the one that still needs to solve it and

8808
05:27:02,080 --> 05:27:05,160
I don't doubt down the line with

8809
05:27:03,558 --> 05:27:06,760
artificial intelligence and more

8810
05:27:05,160 --> 05:27:08,280
programs like this will get all the more

8811
05:27:06,760 --> 05:27:09,440
helpful and start answering questions

8812
05:27:08,280 --> 05:27:11,199
like that for us and there are other

8813
05:27:09,440 --> 05:27:12,798
tools we'll introduce you this semester

8814
05:27:11,200 --> 05:27:14,760
that are even more powerful than this

8815
05:27:12,798 --> 05:27:17,000
but for now it's just a tool really to

8816
05:27:14,760 --> 05:27:18,920
slow things down and not have to change

8817
05:27:17,000 --> 05:27:20,718
your code the fact that I had that panel

8818
05:27:18,920 --> 05:27:23,079
on the left that just showed me eyes

8819
05:27:20,718 --> 05:27:24,520
changing value is just an alternative to

8820
05:27:23,080 --> 05:27:29,520
print F and I can step through it a

8821
05:27:24,520 --> 05:27:32,680
little more slowly other questions on

8822
05:27:29,520 --> 05:27:35,120
debugging now let me show you one final

8823
05:27:32,680 --> 05:27:37,120
example with this debugger here and this

8824
05:27:35,120 --> 05:27:41,280
one too I wrote in advance let me close

8825
05:27:37,120 --> 05:27:42,920
buggy z.c and let me open up buggy1.c my

8826
05:27:41,280 --> 05:27:44,199
second version thereof let me close my

8827
05:27:42,920 --> 05:27:46,120
terminal window for a second and give

8828
05:27:44,200 --> 05:27:48,600
you a quick tour of this program which

8829
05:27:46,120 --> 05:27:50,160
similarly has a mistake now at the top

8830
05:27:48,600 --> 05:27:53,320
of this program some familiar includes

8831
05:27:50,160 --> 05:27:54,680
cs50.h and standard i.h this is not

8832
05:27:53,320 --> 05:27:56,558
something we've seen before it's

8833
05:27:54,680 --> 05:27:59,160
specific to this example a function

8834
05:27:56,558 --> 05:28:01,040
called get Negative int takes no

8835
05:27:59,160 --> 05:28:02,760
arguments and it returns an integer what

8836
05:28:01,040 --> 05:28:05,680
does it do it literally gets a negative

8837
05:28:02,760 --> 05:28:07,359
integer ideally from the user fun fact

8838
05:28:05,680 --> 05:28:09,280
though it doesn't correctly that's the

8839
05:28:07,360 --> 05:28:11,760
bug get Negative int is broken at the

8840
05:28:09,280 --> 05:28:13,600
moment so what does Maine do well main

8841
05:28:11,760 --> 05:28:15,920
just calls this function passing in

8842
05:28:13,600 --> 05:28:18,557
nothing in parenthesis no inputs and it

8843
05:28:15,920 --> 05:28:20,160
stores the return value in I and then it

8844
05:28:18,558 --> 05:28:22,558
just prints out I on the screen so

8845
05:28:20,160 --> 05:28:23,878
honestly just by eyeballing this you

8846
05:28:22,558 --> 05:28:25,760
know I feel comfortable enough with

8847
05:28:23,878 --> 05:28:27,360
programming and see I think main is

8848
05:28:25,760 --> 05:28:28,920
correct let me just stipulate main is

8849
05:28:27,360 --> 05:28:30,520
correct but there is going to be a bug

8850
05:28:28,920 --> 05:28:33,760
down here now what's the bug down here

8851
05:28:30,520 --> 05:28:36,320
here well let me look at get Negative in

8852
05:28:33,760 --> 05:28:39,000
implementation notice this first line 12

8853
05:28:36,320 --> 05:28:41,079
is identical to the Prototype up here

8854
05:28:39,000 --> 05:28:43,958
the Prototype is sort of stupidly

8855
05:28:41,080 --> 05:28:45,680
required up here because C reads things

8856
05:28:43,958 --> 05:28:47,920
top to bottom left to right the compiler

8857
05:28:45,680 --> 05:28:50,120
technically does so if you reference get

8858
05:28:47,920 --> 05:28:52,519
Negative in here but you don't implement

8859
05:28:50,120 --> 05:28:54,480
it until down here and you haven't told

8860
05:28:52,520 --> 05:28:56,798
C in advance that it will exist again

8861
05:28:54,480 --> 05:28:58,920
you get the error we saw last week all

8862
05:28:56,798 --> 05:29:00,920
right so how does get Negative int work

8863
05:28:58,920 --> 05:29:03,399
we declare a variable called n

8864
05:29:00,920 --> 05:29:04,958
we've got a do while loop that does what

8865
05:29:03,400 --> 05:29:07,440
it uses get int which comes with the

8866
05:29:04,958 --> 05:29:08,877
cs50 library per last week it prompts

8867
05:29:07,440 --> 05:29:12,239
the user for negative integer quote

8868
05:29:08,878 --> 05:29:16,480
unquote and stores the value in n i then

8869
05:29:12,240 --> 05:29:18,040
do all of this while n is less than zero

8870
05:29:16,480 --> 05:29:19,280
right remember we used a do while loop

8871
05:29:18,040 --> 05:29:21,878
last week to make sure the human

8872
05:29:19,280 --> 05:29:23,717
cooperates and doesn't give us the wrong

8873
05:29:21,878 --> 05:29:26,360
type of value be it positive or negative

8874
05:29:23,718 --> 05:29:27,840
or something else and then we return n

8875
05:29:26,360 --> 05:29:29,920
and there's some subtleties anyone

8876
05:29:27,840 --> 05:29:33,680
recall or have an intuition for why I've

8877
05:29:29,920 --> 05:29:38,920
declared clared in on line 14 instead of

8878
05:29:33,680 --> 05:29:38,920
on line 17 this is a c specific

8879
05:29:42,680 --> 05:29:46,638
thing exactly there's this notion of

8880
05:29:44,920 --> 05:29:49,359
scope in see and we'll continue to see

8881
05:29:46,638 --> 05:29:51,878
this over time whereby a variable only

8882
05:29:49,360 --> 05:29:53,798
exists inside of the most recent curly

8883
05:29:51,878 --> 05:29:56,480
braces that you've opened so if I've

8884
05:29:53,798 --> 05:29:59,079
declared and here on line 14 I can use

8885
05:29:56,480 --> 05:30:00,320
it anywhere between lines 13 and 21

8886
05:29:59,080 --> 05:30:02,480
because those are the nearest curly

8887
05:30:00,320 --> 05:30:05,798
Braes if by contrast as you note if I

8888
05:30:02,480 --> 05:30:07,958
instead said this int n equals get int

8889
05:30:05,798 --> 05:30:10,557
and so forth and didn't have the current

8890
05:30:07,958 --> 05:30:13,320
line 14 well n would exist inside of

8891
05:30:10,558 --> 05:30:15,360
these curly braces but not here which is

8892
05:30:13,320 --> 05:30:17,320
too late and definitely not here so you

8893
05:30:15,360 --> 05:30:19,920
just have to declare it first and then

8894
05:30:17,320 --> 05:30:21,760
use and reuse it as such now let me just

8895
05:30:19,920 --> 05:30:23,320
show you how I can debug this but let me

8896
05:30:21,760 --> 05:30:26,039
show you the symptoms first let me open

8897
05:30:23,320 --> 05:30:28,480
my terminal window let me run make buggy

8898
05:30:26,040 --> 05:30:31,680
one compiles okay so it's not something

8899
05:30:28,480 --> 05:30:33,558
silly like a semicolon dots SL buggy one

8900
05:30:31,680 --> 05:30:35,718
and I'm asked for a negative integer all

8901
05:30:33,558 --> 05:30:38,558
right let me give it negative one

8902
05:30:35,718 --> 05:30:40,320
enter well the main function supposed to

8903
05:30:38,558 --> 05:30:41,840
print out what I typed but it clearly

8904
05:30:40,320 --> 05:30:45,239
didn't it's prompting me again all right

8905
05:30:41,840 --> 05:30:48,840
so maybe it'll like -2 no maybe

8906
05:30:45,240 --> 05:30:50,280
-3 50 okay so it's definitely broken

8907
05:30:48,840 --> 05:30:52,120
right it kind of seems logically to be

8908
05:30:50,280 --> 05:30:53,600
doing the opposite now you can perhaps

8909
05:30:52,120 --> 05:30:55,760
see why this is happening already these

8910
05:30:53,600 --> 05:30:58,280
are deliberately simple programs by uh

8911
05:30:55,760 --> 05:31:00,399
for demonstration sake but let's do this

8912
05:30:58,280 --> 05:31:02,160
let me go ahead and set a break point in

8913
05:31:00,400 --> 05:31:04,280
main even though I'm pretty sure main is

8914
05:31:02,160 --> 05:31:05,920
correct but it just helps me start my

8915
05:31:04,280 --> 05:31:08,280
thought process start with Main and then

8916
05:31:05,920 --> 05:31:09,717
take it from there let me run now uh

8917
05:31:08,280 --> 05:31:13,680
debug

8918
05:31:09,718 --> 05:31:15,520
50 bugy one enter and let's see with

8919
05:31:13,680 --> 05:31:16,920
that breakpoint now the the goey is

8920
05:31:15,520 --> 05:31:18,718
going to reconfigure itself it's going

8921
05:31:16,920 --> 05:31:20,679
to pause on line eight because that's

8922
05:31:18,718 --> 05:31:22,200
the first interesting line inside of

8923
05:31:20,680 --> 05:31:24,000
Maine so I could have just put the

8924
05:31:22,200 --> 05:31:26,160
breakpoint on line eight too it's smart

8925
05:31:24,000 --> 05:31:27,558
enough to know that if I set it on six

8926
05:31:26,160 --> 05:31:29,718
eh you really mean line eight because

8927
05:31:27,558 --> 05:31:31,920
that's the first actual line of code and

8928
05:31:29,718 --> 05:31:35,040
watch when now what happens if I step

8929
05:31:31,920 --> 05:31:37,000
over this line notice that I which at

8930
05:31:35,040 --> 05:31:39,840
the moment seems to have a default value

8931
05:31:37,000 --> 05:31:43,120
of zero more on that another time but if

8932
05:31:39,840 --> 05:31:44,878
I click step over like before I'm

8933
05:31:43,120 --> 05:31:48,239
prompted for a negative integer let me

8934
05:31:44,878 --> 05:31:51,878
type negative 1 enter and now

8935
05:31:48,240 --> 05:31:56,160
notice there's no additional yellow

8936
05:31:51,878 --> 05:31:56,160
highlight why where am I currently stuck

8937
05:31:57,080 --> 05:32:01,160
logically yeah just logically I must be

8938
05:31:59,360 --> 05:32:02,760
in that D while Loop and even if you

8939
05:32:01,160 --> 05:32:04,400
don't understand it like that's the only

8940
05:32:02,760 --> 05:32:06,120
explanation if you keep getting prompted

8941
05:32:04,400 --> 05:32:07,958
surely there's a loop going on there's

8942
05:32:06,120 --> 05:32:10,120
only one Loop in my code so there's

8943
05:32:07,958 --> 05:32:11,717
probably a problem there so okay I can't

8944
05:32:10,120 --> 05:32:13,440
just set a breakpoint in Main and then

8945
05:32:11,718 --> 05:32:16,480
wait for this to work so let me just uh

8946
05:32:13,440 --> 05:32:18,958
let me stop this with the red square and

8947
05:32:16,480 --> 05:32:20,958
let me think all right instead of I can

8948
05:32:18,958 --> 05:32:22,717
still set my break point in main but let

8949
05:32:20,958 --> 05:32:25,280
me rerun the debugger instead and this

8950
05:32:22,718 --> 05:32:28,240
time not step over that line of code let

8951
05:32:25,280 --> 05:32:30,120
me step into that line of code so Watch

8952
05:32:28,240 --> 05:32:32,160
What Happens now instead of clicking the

8953
05:32:30,120 --> 05:32:35,000
second icon here let me click the third

8954
05:32:32,160 --> 05:32:36,718
whose name is indeed step into and watch

8955
05:32:35,000 --> 05:32:40,878
as the yellow highlight does not move to

8956
05:32:36,718 --> 05:32:43,200
line n it dives into line8 the function

8957
05:32:40,878 --> 05:32:46,440
on line eight thereby bringing me whoosh

8958
05:32:43,200 --> 05:32:48,680
down to line 17 it's kind of going down

8959
05:32:46,440 --> 05:32:51,680
into that next function now it didn't

8960
05:32:48,680 --> 05:32:52,798
bother pausing on line 12 or 13 or 14

8961
05:32:51,680 --> 05:32:54,320
because there's nothing intellectually

8962
05:32:52,798 --> 05:32:55,920
interesting there happening yet the

8963
05:32:54,320 --> 05:32:59,160
juicy part really starts it would seem

8964
05:32:55,920 --> 05:33:02,280
in line 17 so now notice n is my

8965
05:32:59,160 --> 05:33:04,558
variable at the top left if I click I

8966
05:33:02,280 --> 05:33:06,840
don't want to click step into now

8967
05:33:04,558 --> 05:33:09,638
though what what would go wrong if I

8968
05:33:06,840 --> 05:33:11,480
click on step into or what would it do

8969
05:33:09,638 --> 05:33:13,840
that I don't think I want to

8970
05:33:11,480 --> 05:33:16,600
do

8971
05:33:13,840 --> 05:33:18,080
yeah yeah it would step into get int but

8972
05:33:16,600 --> 05:33:19,798
I'd like to think that the staff's

8973
05:33:18,080 --> 05:33:21,400
version of get in is correct and that's

8974
05:33:19,798 --> 05:33:24,320
not our problem today so I want to step

8975
05:33:21,400 --> 05:33:26,760
over it and watch now at top left that

8976
05:33:24,320 --> 05:33:28,520
nothing happens yet to the value of n

8977
05:33:26,760 --> 05:33:30,877
until I go to the terminal window now

8978
05:33:28,520 --> 05:33:33,320
and type in something like Nega 1 now

8979
05:33:30,878 --> 05:33:36,160
notice it jumps to line 19 which is the

8980
05:33:33,320 --> 05:33:38,558
next interesting line top left n indeed

8981
05:33:36,160 --> 05:33:41,120
is1 and here's where I can now pause as

8982
05:33:38,558 --> 05:33:43,600
a human and think all right so while n

8983
05:33:41,120 --> 05:33:45,680
is less than zero all right n per the

8984
05:33:43,600 --> 05:33:47,680
top left corner is negative 1 so all

8985
05:33:45,680 --> 05:33:48,920
right while negative 1 is less than zero

8986
05:33:47,680 --> 05:33:50,798
well obviously that's true

8987
05:33:48,920 --> 05:33:52,958
mathematically so what's going to happen

8988
05:33:50,798 --> 05:33:56,878
it's a do while loop so when I click on

8989
05:33:52,958 --> 05:33:58,399
step over again it's going to go to this

8990
05:33:56,878 --> 05:34:01,320
line cuz it's at the end of the inside

8991
05:33:58,400 --> 05:34:03,000
of that Loop and now here it's looping

8992
05:34:01,320 --> 05:34:05,558
through again and again all right let me

8993
05:34:03,000 --> 05:34:07,480
do this once more I'm going to step over

8994
05:34:05,558 --> 05:34:09,000
all right I'm going to type in -2 and

8995
05:34:07,480 --> 05:34:10,680
it's the exact same thing now is my

8996
05:34:09,000 --> 05:34:13,320
chance on the yellow line okay wait a

8997
05:34:10,680 --> 05:34:16,240
minute -2 is obviously less than zero

8998
05:34:13,320 --> 05:34:17,840
let me try this one more time click it

8999
05:34:16,240 --> 05:34:23,160
once here and now all right let me give

9000
05:34:17,840 --> 05:34:26,480
it 50 and now okay while 50 is less than

9001
05:34:23,160 --> 05:34:28,079
zero that's not true so the loop is over

9002
05:34:26,480 --> 05:34:29,958
because it's not going to do it while 50

9003
05:34:28,080 --> 05:34:32,280
is less than zero that's not true so now

9004
05:34:29,958 --> 05:34:34,520
watch when I click step over once more

9005
05:34:32,280 --> 05:34:36,120
it then finishes the loop even though

9006
05:34:34,520 --> 05:34:38,680
there's nothing more to do it's now

9007
05:34:36,120 --> 05:34:41,440
about to return n it jumps back up to

9008
05:34:38,680 --> 05:34:43,000
main where I left off on line nine it

9009
05:34:41,440 --> 05:34:44,877
now prints in my terminal window the

9010
05:34:43,000 --> 05:34:46,878
number 50 and hopefully at this point to

9011
05:34:44,878 --> 05:34:49,160
your question earlier my human brain has

9012
05:34:46,878 --> 05:34:51,480
realized oh I'm an idiot like I flipped

9013
05:34:49,160 --> 05:34:53,520
my my sign there so I probably let me

9014
05:34:51,480 --> 05:34:55,200
stop this I probably want to do

9015
05:34:53,520 --> 05:34:57,840
something like this if the goal is to

9016
05:34:55,200 --> 05:35:02,200
get a negative integer I probably want

9017
05:34:57,840 --> 05:35:05,280
to say well n is for instance greater

9018
05:35:02,200 --> 05:35:07,400
than or equal to zero would work so

9019
05:35:05,280 --> 05:35:09,480
while n is greater than or equal to zero

9020
05:35:07,400 --> 05:35:11,080
keep doing this and that's the logic I

9021
05:35:09,480 --> 05:35:12,760
wanted to express so the debugger just

9022
05:35:11,080 --> 05:35:14,440
saves me from staring at the screen

9023
05:35:12,760 --> 05:35:16,120
raising a hand sort of asking someone

9024
05:35:14,440 --> 05:35:18,600
else at least in this case it allows me

9025
05:35:16,120 --> 05:35:20,798
to go through it at a healthier Pace

9026
05:35:18,600 --> 05:35:22,920
questions now on debug 50 which should

9027
05:35:20,798 --> 05:35:26,480
be your new friend even if it's not your

9028
05:35:22,920 --> 05:35:26,480
first instinct after

9029
05:35:26,600 --> 05:35:31,480
printf any questions on debug 50 no all

9030
05:35:29,680 --> 05:35:33,840
right all right well there's one last

9031
05:35:31,480 --> 05:35:35,399
Technique we can equip you with here um

9032
05:35:33,840 --> 05:35:38,240
and that is in addition to printf and a

9033
05:35:35,400 --> 05:35:40,638
debugger no joke um a rubber duck is

9034
05:35:38,240 --> 05:35:42,558
actually a reasonably recommended uh

9035
05:35:40,638 --> 05:35:44,239
solution to finding bugs in your code to

9036
05:35:42,558 --> 05:35:46,120
your question earlier the duck two is

9037
05:35:44,240 --> 05:35:47,718
not going to solve the problem for you

9038
05:35:46,120 --> 05:35:49,718
but if you've wondered why this little

9039
05:35:47,718 --> 05:35:51,400
guy has been here for so long um there's

9040
05:35:49,718 --> 05:35:53,520
this technique has its own Wikipedia

9041
05:35:51,400 --> 05:35:56,240
article of called rubber duck debugging

9042
05:35:53,520 --> 05:35:57,840
the idea of which is that if you're home

9043
05:35:56,240 --> 05:35:59,840
in your dorm room wrestling with some

9044
05:35:57,840 --> 05:36:01,798
bug in your code printf didn't quite

9045
05:35:59,840 --> 05:36:03,480
reveal the source to you debugger isn't

9046
05:36:01,798 --> 05:36:06,000
really helping honestly maybe it would

9047
05:36:03,480 --> 05:36:07,798
help to just sound out what problem

9048
05:36:06,000 --> 05:36:10,040
you're having similar to going to office

9049
05:36:07,798 --> 05:36:11,360
hours talking to a a TA or a professor

9050
05:36:10,040 --> 05:36:13,240
just walking through your problems

9051
05:36:11,360 --> 05:36:14,958
because in sort of talking to the duck

9052
05:36:13,240 --> 05:36:19,080
about you know the fact that you're

9053
05:36:14,958 --> 05:36:21,239
doing this while uh n is less than zero

9054
05:36:19,080 --> 05:36:23,360
and then if it is I wait a minute I'm an

9055
05:36:21,240 --> 05:36:25,400
idiot not just for talking to the rubber

9056
05:36:23,360 --> 05:36:27,840
duck you realize hopefully in expressing

9057
05:36:25,400 --> 05:36:29,958
yourself literally verbally you probably

9058
05:36:27,840 --> 05:36:31,920
will hear with non-zero probability like

9059
05:36:29,958 --> 05:36:33,638
some illogic in your statement and just

9060
05:36:31,920 --> 05:36:37,039
by sounding things out you'll realize

9061
05:36:33,638 --> 05:36:38,557
like oh that's my problem and so frankly

9062
05:36:37,040 --> 05:36:40,440
if you have roommates you can also use a

9063
05:36:38,558 --> 05:36:42,000
roommate for this but the rubber duck is

9064
05:36:40,440 --> 05:36:43,840
just sort of a go-to when your roommates

9065
05:36:42,000 --> 05:36:45,760
have no interest in your you know C

9066
05:36:43,840 --> 05:36:48,680
problem set talking something through

9067
05:36:45,760 --> 05:36:50,798
that um as follow as such and this is an

9068
05:36:48,680 --> 05:36:52,160
invaluable technique I admittedly tend

9069
05:36:50,798 --> 05:36:53,760
not to do it so much with a rubber duck

9070
05:36:52,160 --> 05:36:55,718
but ideally with colleagues human

9071
05:36:53,760 --> 05:36:58,199
colleagues but just talking through

9072
05:36:55,718 --> 05:37:00,878
things often will help you just realize

9073
05:36:58,200 --> 05:37:03,320
oh I said something logical now I can go

9074
05:37:00,878 --> 05:37:05,120
back to the code so don't solve problems

9075
05:37:03,320 --> 05:37:06,638
by staring at your screen endlessly for

9076
05:37:05,120 --> 05:37:08,638
minutes for hours at that point it's

9077
05:37:06,638 --> 05:37:10,120
time for a break time to walk away time

9078
05:37:08,638 --> 05:37:12,760
to talk to the duck if you've already

9079
05:37:10,120 --> 05:37:14,520
exhausted some of those other tools um

9080
05:37:12,760 --> 05:37:16,600
as an aside on your way out today at the

9081
05:37:14,520 --> 05:37:19,798
end of class we have H clearly plenty of

9082
05:37:16,600 --> 05:37:21,399
rubber ducks uh for you um and uh it's

9083
05:37:19,798 --> 05:37:23,440
become a thing over the years at least

9084
05:37:21,400 --> 05:37:25,600
among some uh to bring the duck with

9085
05:37:23,440 --> 05:37:28,239
them when they travel and send us photos

9086
05:37:25,600 --> 05:37:31,958
here for instance is uh cs50's rubber

9087
05:37:28,240 --> 05:37:34,120
duck debugger AKA ddb for duck debugger

9088
05:37:31,958 --> 05:37:36,680
which is a pun on a geekier program

9089
05:37:34,120 --> 05:37:38,557
called GDB the ganu debugger which is an

9090
05:37:36,680 --> 05:37:41,280
actual piece of software for debugging

9091
05:37:38,558 --> 05:37:44,920
this is cs50's debugger uh in the hills

9092
05:37:41,280 --> 05:37:47,920
of Puerto Rico uh also here on the sea

9093
05:37:44,920 --> 05:37:49,600
uh he made its way to San Francisco here

9094
05:37:47,920 --> 05:37:52,000
uh also down by Fisherman's dwarf by the

9095
05:37:49,600 --> 05:37:53,638
sea lions if familiar uh here at

9096
05:37:52,000 --> 05:37:55,440
Stanford where there's a William Gates

9097
05:37:53,638 --> 05:37:58,718
computer science building for computer

9098
05:37:55,440 --> 05:38:01,680
science uh down the road in SF at Google

9099
05:37:58,718 --> 05:38:04,000
uh and this is the Tre fountain in Rome

9100
05:38:01,680 --> 05:38:05,360
and lastly uh the Coliseum so we'll be

9101
05:38:04,000 --> 05:38:08,240
curious to see in the coming years where

9102
05:38:05,360 --> 05:38:10,080
your duck two travels so that then was

9103
05:38:08,240 --> 05:38:11,840
quite a bit why don't we go ahead here

9104
05:38:10,080 --> 05:38:13,558
and take a short five minute break no

9105
05:38:11,840 --> 05:38:17,360
snacks yet you're welcome to get up or

9106
05:38:13,558 --> 05:38:20,558
sit down we'll return in about five all

9107
05:38:17,360 --> 05:38:23,120
right so we are back and if the goal

9108
05:38:20,558 --> 05:38:24,760
ultimately today is to have a better

9109
05:38:23,120 --> 05:38:26,878
understanding of things like strings so

9110
05:38:24,760 --> 05:38:28,717
that we can solve problems with text

9111
05:38:26,878 --> 05:38:30,760
let's consider some simpler types of

9112
05:38:28,718 --> 05:38:32,320
data first how we might represent those

9113
05:38:30,760 --> 05:38:34,239
and then see if that doesn't lead us to

9114
05:38:32,320 --> 05:38:36,320
a discovery as to like how strings in

9115
05:38:34,240 --> 05:38:38,680
just today's modern software is using

9116
05:38:36,320 --> 05:38:41,840
things like that so when we talked on

9117
05:38:38,680 --> 05:38:43,840
week zero about representation of data

9118
05:38:41,840 --> 05:38:46,920
we had different ways of doing it in

9119
05:38:43,840 --> 05:38:48,718
terms of binary and decimal and uh unary

9120
05:38:46,920 --> 05:38:50,798
even when we started talking about the

9121
05:38:48,718 --> 05:38:54,120
same last week in code we started

9122
05:38:50,798 --> 05:38:56,600
talking about uh data types instead and

9123
05:38:54,120 --> 05:38:58,399
these data types were a way of telling

9124
05:38:56,600 --> 05:39:00,638
the computer like do you want an integer

9125
05:38:58,400 --> 05:39:03,040
do you want a character do you want a

9126
05:39:00,638 --> 05:39:05,320
floating point value like a real number

9127
05:39:03,040 --> 05:39:07,478
or even a string as we've seen but it

9128
05:39:05,320 --> 05:39:10,200
turns out that computers of course only

9129
05:39:07,478 --> 05:39:12,520
have finite amounts of resources your

9130
05:39:10,200 --> 05:39:14,360
computer only has a fixed amount of

9131
05:39:12,520 --> 05:39:16,718
memory or RAM and that actually has very

9132
05:39:14,360 --> 05:39:18,160
real world implications so for instance

9133
05:39:16,718 --> 05:39:21,000
here are some of the data types we've

9134
05:39:18,160 --> 05:39:24,120
seen thus far and it turns out that each

9135
05:39:21,000 --> 05:39:26,798
of these in C has a specific number of

9136
05:39:24,120 --> 05:39:28,878
bits allocated to it now admittedly this

9137
05:39:26,798 --> 05:39:30,717
can vary by System it's not so much the

9138
05:39:28,878 --> 05:39:32,080
case nowaday days but for many years for

9139
05:39:30,718 --> 05:39:34,000
decades computers were getting better

9140
05:39:32,080 --> 05:39:35,760
and better the earliest computers might

9141
05:39:34,000 --> 05:39:37,798
have used fewer bits for some of these

9142
05:39:35,760 --> 05:39:39,160
data types more modern computers might

9143
05:39:37,798 --> 05:39:40,440
use more bits so the numbers you're

9144
05:39:39,160 --> 05:39:42,520
about to see are pretty much where we

9145
05:39:40,440 --> 05:39:46,280
are present day so when it comes to

9146
05:39:42,520 --> 05:39:48,478
these data types A bu which is true or

9147
05:39:46,280 --> 05:39:50,557
false somewhat curiously uses a whole

9148
05:39:48,478 --> 05:39:52,360
bite even though that's way Overkill

9149
05:39:50,558 --> 05:39:54,400
because for a bull true or false you of

9150
05:39:52,360 --> 05:39:56,360
course only need one bit but it turns

9151
05:39:54,400 --> 05:39:59,080
out even though it's wasteful to use

9152
05:39:56,360 --> 05:40:00,600
eight bits or one bite just to represent

9153
05:39:59,080 --> 05:40:02,760
true or false it's just easier for

9154
05:40:00,600 --> 05:40:04,920
computers so a bull tends to be one bite

9155
05:40:02,760 --> 05:40:07,679
an INT which we've been using a lot uses

9156
05:40:04,920 --> 05:40:09,600
four bytes typically or 32 bits and if I

9157
05:40:07,680 --> 05:40:12,400
do some quick math from week zero with

9158
05:40:09,600 --> 05:40:14,478
32 bits you have four billion possible

9159
05:40:12,400 --> 05:40:16,200
values roughly but if you want to

9160
05:40:14,478 --> 05:40:18,239
represent positive and negative that

9161
05:40:16,200 --> 05:40:20,440
means you can represent roughly -2

9162
05:40:18,240 --> 05:40:21,958
billion all the way up to positive2

9163
05:40:20,440 --> 05:40:25,000
billion so that's the range typically

9164
05:40:21,958 --> 05:40:26,638
within if that's to few numbers for you

9165
05:40:25,000 --> 05:40:29,718
turns out there's things called Longs

9166
05:40:26,638 --> 05:40:32,320
and longs use 64 bits which allow you to

9167
05:40:29,718 --> 05:40:34,160
have like a quintilian number of

9168
05:40:32,320 --> 05:40:36,400
possibilities which is a lot certainly a

9169
05:40:34,160 --> 05:40:38,680
lot more than 4 billion so sometimes you

9170
05:40:36,400 --> 05:40:40,920
might use a long but even that's finite

9171
05:40:38,680 --> 05:40:42,798
and so uh as we discussed at the end of

9172
05:40:40,920 --> 05:40:44,557
last week bad things can happen if you

9173
05:40:42,798 --> 05:40:46,600
make certain assumptions as the data

9174
05:40:44,558 --> 05:40:48,360
because of things like Inger overflow or

9175
05:40:46,600 --> 05:40:50,120
the like where things wrap around then

9176
05:40:48,360 --> 05:40:51,360
there's a float which is a real number

9177
05:40:50,120 --> 05:40:54,680
something with a decimal point by

9178
05:40:51,360 --> 05:40:56,760
convention it's four bytes or 32 bits

9179
05:40:54,680 --> 05:40:57,958
which gives you in short only a specific

9180
05:40:56,760 --> 05:41:00,280
amount of precision it doesn't

9181
05:40:57,958 --> 05:41:01,680
necessarily dictate how many numbers to

9182
05:41:00,280 --> 05:41:04,557
the left or to the right in the

9183
05:41:01,680 --> 05:41:07,000
aggregate ultimately you have though uh

9184
05:41:04,558 --> 05:41:08,920
three uh 4 billion possible permutations

9185
05:41:07,000 --> 05:41:10,840
still if you need more Precision for

9186
05:41:08,920 --> 05:41:13,280
scientific for medical for financial

9187
05:41:10,840 --> 05:41:16,360
applications you might use eight bytes

9188
05:41:13,280 --> 05:41:18,280
AKA a double which just gives you more

9189
05:41:16,360 --> 05:41:20,558
digits of precision they eventually get

9190
05:41:18,280 --> 05:41:22,199
imprecise per the example we looked at

9191
05:41:20,558 --> 05:41:24,718
last week but it at least gets you

9192
05:41:22,200 --> 05:41:27,160
further down the line as an aside in

9193
05:41:24,718 --> 05:41:29,240
really really important applications in

9194
05:41:27,160 --> 05:41:30,878
finance and medicine and Military

9195
05:41:29,240 --> 05:41:33,080
operations and the like where you really

9196
05:41:30,878 --> 05:41:35,718
can't have rounding errors long story

9197
05:41:33,080 --> 05:41:38,520
short humans have developed libraries in

9198
05:41:35,718 --> 05:41:40,280
C and other languages that use more even

9199
05:41:38,520 --> 05:41:41,958
than 8 bytes so there are solutions to

9200
05:41:40,280 --> 05:41:44,160
these problems but they're always finite

9201
05:41:41,958 --> 05:41:46,160
you have to pick uh an upper bound then

9202
05:41:44,160 --> 05:41:48,478
there's Char which we saw briefly last

9203
05:41:46,160 --> 05:41:50,718
week when I asked the user for y or n

9204
05:41:48,478 --> 05:41:51,958
for yes or no and then there's string

9205
05:41:50,718 --> 05:41:54,320
which I'm going to propose as a question

9206
05:41:51,958 --> 05:41:57,359
mark because a string totally depends

9207
05:41:54,320 --> 05:42:00,160
like high h i exclamation point would

9208
05:41:57,360 --> 05:42:02,600
seem to be three bytes d a ID would seem

9209
05:42:00,160 --> 05:42:04,638
to be five so strings clearly are

9210
05:42:02,600 --> 05:42:06,478
variable based on what you or the human

9211
05:42:04,638 --> 05:42:09,200
type in so we'll see what this means

9212
05:42:06,478 --> 05:42:11,040
though in just a bit this though is the

9213
05:42:09,200 --> 05:42:13,000
thing inside of your Mac your PC your

9214
05:42:11,040 --> 05:42:15,200
phone might not look exactly like this

9215
05:42:13,000 --> 05:42:16,920
but this is a a memory module for a

9216
05:42:15,200 --> 05:42:18,360
modern computer and let's go ahead and

9217
05:42:16,920 --> 05:42:20,079
use this really as just representative

9218
05:42:18,360 --> 05:42:21,958
of the finite amount of memory that any

9219
05:42:20,080 --> 05:42:24,478
computer indeed has let's zoom in on one

9220
05:42:21,958 --> 05:42:27,280
of these little black chips on the uh uh

9221
05:42:24,478 --> 05:42:29,440
circuit board here zoom in and let me

9222
05:42:27,280 --> 05:42:31,600
propose that this rectangle really

9223
05:42:29,440 --> 05:42:33,760
represents some number of bytes like

9224
05:42:31,600 --> 05:42:35,717
tucked inside of this little black uh

9225
05:42:33,760 --> 05:42:37,600
circuit on the board is maybe I don't

9226
05:42:35,718 --> 05:42:39,200
know a gigabyte a billion bytes maybe

9227
05:42:37,600 --> 05:42:40,638
it's a 100 btes some number of bytes it

9228
05:42:39,200 --> 05:42:42,718
totally depends on the computer and how

9229
05:42:40,638 --> 05:42:45,600
much you paid for the Stick of memory

9230
05:42:42,718 --> 05:42:48,280
but if there's a finite number of bytes

9231
05:42:45,600 --> 05:42:50,160
physically implemented somehow digitally

9232
05:42:48,280 --> 05:42:51,638
inside of this Hardware well then it

9233
05:42:50,160 --> 05:42:53,440
stands to reason that we could number

9234
05:42:51,638 --> 05:42:56,399
those bytes we can just arbitrarily

9235
05:42:53,440 --> 05:42:58,638
decide that the top left corner is bite

9236
05:42:56,400 --> 05:43:00,360
number one or really bite number zero

9237
05:42:58,638 --> 05:43:02,360
the one next to it is number one then

9238
05:43:00,360 --> 05:43:04,120
number two number three dot dot dot

9239
05:43:02,360 --> 05:43:06,400
number two billion or whatever it is

9240
05:43:04,120 --> 05:43:09,079
however big this this memory is so if

9241
05:43:06,400 --> 05:43:11,520
you are use a variable in a c program

9242
05:43:09,080 --> 05:43:13,200
that's only one bite like a Char it

9243
05:43:11,520 --> 05:43:15,080
might literally be stored in that top

9244
05:43:13,200 --> 05:43:17,040
left hand corner of the memory like in

9245
05:43:15,080 --> 05:43:19,360
practice you don't care where physically

9246
05:43:17,040 --> 05:43:21,440
it is but really the artist rendition

9247
05:43:19,360 --> 05:43:23,360
would be this a Char might use one of

9248
05:43:21,440 --> 05:43:25,320
those single btes somewhere in the

9249
05:43:23,360 --> 05:43:27,200
computer's memory if you use an INT

9250
05:43:25,320 --> 05:43:29,600
which is four bytes it would give you

9251
05:43:27,200 --> 05:43:32,000
four bytes contiguous that is left to

9252
05:43:29,600 --> 05:43:33,280
right top to bottom but all 32 bits

9253
05:43:32,000 --> 05:43:34,798
would be next to each other so the

9254
05:43:33,280 --> 05:43:36,478
computer knows that those indeed all

9255
05:43:34,798 --> 05:43:38,600
belong to the same int if you need a

9256
05:43:36,478 --> 05:43:40,600
long or a double for that matter then

9257
05:43:38,600 --> 05:43:42,717
you might use a full eight bytes in this

9258
05:43:40,600 --> 05:43:44,638
case and you just keep using and using

9259
05:43:42,718 --> 05:43:46,200
this memory kind of like a a canvas you

9260
05:43:44,638 --> 05:43:48,280
know almost in Photoshop or a

9261
05:43:46,200 --> 05:43:49,878
spreadsheet where you can just move uh

9262
05:43:48,280 --> 05:43:51,079
pixels or you can move data around

9263
05:43:49,878 --> 05:43:53,638
that's really what your computer's

9264
05:43:51,080 --> 05:43:57,040
memory is a canvas for storing uh

9265
05:43:53,638 --> 05:43:58,200
information in units of bytes or 8 Bits

9266
05:43:57,040 --> 05:43:59,840
now we don't need to keep looking at

9267
05:43:58,200 --> 05:44:01,760
these circuit boards can abstract it

9268
05:43:59,840 --> 05:44:03,280
away as we often do and let's go ahead

9269
05:44:01,760 --> 05:44:05,519
and zoom in on this grid just to

9270
05:44:03,280 --> 05:44:07,680
consider some very specific variables so

9271
05:44:05,520 --> 05:44:09,840
let me zoom in and now I see fewer but

9272
05:44:07,680 --> 05:44:11,878
larger uh boxes on the screen Each of

9273
05:44:09,840 --> 05:44:13,958
which again represents a bite and now

9274
05:44:11,878 --> 05:44:16,878
let me propose that we play with some

9275
05:44:13,958 --> 05:44:19,320
actual code so here in C albeit without

9276
05:44:16,878 --> 05:44:21,360
a full program or three ins score one

9277
05:44:19,320 --> 05:44:24,958
score two score three I have

9278
05:44:21,360 --> 05:44:27,320
coincidentally given myself two uh uh

9279
05:44:24,958 --> 05:44:28,958
two scores at around 72 and 73 and then

9280
05:44:27,320 --> 05:44:30,798
a pretty low score at 33 of course

9281
05:44:28,958 --> 05:44:32,320
course last week or two weeks ago this

9282
05:44:30,798 --> 05:44:33,920
would have been high but now we're

9283
05:44:32,320 --> 05:44:36,360
dealing with actual integers so these

9284
05:44:33,920 --> 05:44:38,399
are three so so scores on my quizzes or

9285
05:44:36,360 --> 05:44:40,080
tests or the like so let me go to vs

9286
05:44:38,400 --> 05:44:42,840
code here and let's make a program

9287
05:44:40,080 --> 05:44:44,958
called scores. C so I'm going to write

9288
05:44:42,840 --> 05:44:46,798
code scores. C that's going to give me

9289
05:44:44,958 --> 05:44:49,239
my new file and let me go ahead and

9290
05:44:46,798 --> 05:44:53,120
Implement something like this include

9291
05:44:49,240 --> 05:44:55,638
standard i.h int main void and then

9292
05:44:53,120 --> 05:44:59,958
inside of here let me do int score one

9293
05:44:55,638 --> 05:45:03,399
will be 72 uh int score two be 73 and

9294
05:44:59,958 --> 05:45:04,920
int score three will be 33 and then let

9295
05:45:03,400 --> 05:45:06,680
me just do something like write a

9296
05:45:04,920 --> 05:45:08,199
program to average my three test scores

9297
05:45:06,680 --> 05:45:12,160
together something like that so let me

9298
05:45:08,200 --> 05:45:14,120
do print F quote unquote my average is

9299
05:45:12,160 --> 05:45:17,320
and I'm going to go ahead and do say

9300
05:45:14,120 --> 05:45:19,039
percent I back sln and now let me plug

9301
05:45:17,320 --> 05:45:20,558
in the results and this is kind of grade

9302
05:45:19,040 --> 05:45:22,760
school math now how do I compute the

9303
05:45:20,558 --> 05:45:26,520
average of three values well just like

9304
05:45:22,760 --> 05:45:29,120
in on paper I can do score one plus

9305
05:45:26,520 --> 05:45:30,558
score two plus score three in

9306
05:45:29,120 --> 05:45:32,840
parentheses because of order of

9307
05:45:30,558 --> 05:45:34,878
operations divided by three since

9308
05:45:32,840 --> 05:45:36,280
there's three total scores all right so

9309
05:45:34,878 --> 05:45:38,040
I think this checks out and indeed you

9310
05:45:36,280 --> 05:45:40,717
can use parentheses and operators like

9311
05:45:38,040 --> 05:45:43,360
plus and your code like this in C let me

9312
05:45:40,718 --> 05:45:45,000
go ahead now and do make scores no

9313
05:45:43,360 --> 05:45:46,920
syntax error so that's good nothing

9314
05:45:45,000 --> 05:45:48,680
missing there and now let me do dot

9315
05:45:46,920 --> 05:45:50,399
scores and see what my test average is

9316
05:45:48,680 --> 05:45:53,040
all right you know it's not great but I

9317
05:45:50,400 --> 05:45:57,718
I I think I still passed and indeed my

9318
05:45:53,040 --> 05:45:59,400
average here is is 59 is it precisely 59

9319
05:45:57,718 --> 05:46:01,160
though well let's see let's let's

9320
05:45:59,400 --> 05:46:02,638
actually instead of using an INT how

9321
05:46:01,160 --> 05:46:05,200
about we go ahead and use something like

9322
05:46:02,638 --> 05:46:07,079
a floating point value here and let me

9323
05:46:05,200 --> 05:46:09,840
go ahead and do this so let me recompile

9324
05:46:07,080 --> 05:46:11,240
my code make scores huh all right I've

9325
05:46:09,840 --> 05:46:13,280
got an issue let me zoom in on my

9326
05:46:11,240 --> 05:46:15,718
terminal window we've not seen this one

9327
05:46:13,280 --> 05:46:19,199
necessarily before but error on line

9328
05:46:15,718 --> 05:46:21,080
nine format specifies type double which

9329
05:46:19,200 --> 05:46:23,120
is a lot of precision but the argument

9330
05:46:21,080 --> 05:46:24,120
has Type in so what does this mean well

9331
05:46:23,120 --> 05:46:26,079
it's showing me with these green

9332
05:46:24,120 --> 05:46:28,878
squigglies that something's bad between

9333
05:46:26,080 --> 05:46:31,400
the percent F and this thing over here

9334
05:46:28,878 --> 05:46:33,360
well on the left I'm implying a float or

9335
05:46:31,400 --> 05:46:34,760
a double for that matter on the right

9336
05:46:33,360 --> 05:46:37,240
though what data type are score one

9337
05:46:34,760 --> 05:46:39,399
score two score three all right so

9338
05:46:37,240 --> 05:46:40,958
they're ins so Cent does not like this

9339
05:46:39,400 --> 05:46:43,040
the compiler just doesn't like that I'm

9340
05:46:40,958 --> 05:46:44,840
using ins on the right but I want floats

9341
05:46:43,040 --> 05:46:47,080
on the left so there's going to be

9342
05:46:44,840 --> 05:46:48,840
different ways of solving this one way

9343
05:46:47,080 --> 05:46:51,120
would be to just ignore the problem like

9344
05:46:48,840 --> 05:46:55,120
I originally did and just go back to

9345
05:46:51,120 --> 05:46:57,280
percent I or as an aside percent D is

9346
05:46:55,120 --> 05:46:59,680
often an alternative to percent I for a

9347
05:46:57,280 --> 05:47:01,638
decimal number but we use perc I cuz it

9348
05:46:59,680 --> 05:47:03,478
sounds like int so percent I is fine

9349
05:47:01,638 --> 05:47:05,280
here too but I don't want to just avoid

9350
05:47:03,478 --> 05:47:07,120
the problem I want to actually display a

9351
05:47:05,280 --> 05:47:08,717
floating point value so how can I fix

9352
05:47:07,120 --> 05:47:11,160
this well it turns out I can solve this

9353
05:47:08,718 --> 05:47:12,798
in a few different ways the simplest is

9354
05:47:11,160 --> 05:47:14,878
just to make sure that at least one

9355
05:47:12,798 --> 05:47:16,798
number on the right is a floating point

9356
05:47:14,878 --> 05:47:20,320
value like

9357
05:47:16,798 --> 05:47:22,478
3.0 instead of just three now I think

9358
05:47:20,320 --> 05:47:25,958
clang will be happier let me do make

9359
05:47:22,478 --> 05:47:28,040
scores enter and indeed it's okay why as

9360
05:47:25,958 --> 05:47:30,039
soon as you have at least one more

9361
05:47:28,040 --> 05:47:31,958
precise data data type on the right it

9362
05:47:30,040 --> 05:47:33,478
just treats everything at that point as

9363
05:47:31,958 --> 05:47:36,840
floating point value so that the math

9364
05:47:33,478 --> 05:47:38,958
works out so/ scores enter and now there

9365
05:47:36,840 --> 05:47:40,400
we go right you know uh some of us might

9366
05:47:38,958 --> 05:47:43,680
really want that third of a point our

9367
05:47:40,400 --> 05:47:45,360
average was not 59 it's 59 and a third

9368
05:47:43,680 --> 05:47:47,680
as in this case here all right so we've

9369
05:47:45,360 --> 05:47:49,878
solved that there as an aside though

9370
05:47:47,680 --> 05:47:51,638
there's one other technique to uh to

9371
05:47:49,878 --> 05:47:53,878
show here if you didn't want to change

9372
05:47:51,638 --> 05:47:55,638
it to 3.0 because that's a little weird

9373
05:47:53,878 --> 05:47:57,558
because I there were literally three

9374
05:47:55,638 --> 05:47:59,557
scores it's not like that needs to have

9375
05:47:57,558 --> 05:48:03,920
a decimal point you could also

9376
05:47:59,558 --> 05:48:06,160
explicitly convert the three to a float

9377
05:48:03,920 --> 05:48:08,557
by saying in parentheses float this is

9378
05:48:06,160 --> 05:48:10,760
what's called type casting and this will

9379
05:48:08,558 --> 05:48:12,558
just convert the thing right after it to

9380
05:48:10,760 --> 05:48:15,359
that data type if it's possible so if I

9381
05:48:12,558 --> 05:48:17,718
do this again make scores no errors now

9382
05:48:15,360 --> 05:48:19,600
do/ scores and I get in fact the same

9383
05:48:17,718 --> 05:48:21,400
result there's a bit of a rounding issue

9384
05:48:19,600 --> 05:48:24,000
here but we know the rounding relates to

9385
05:48:21,400 --> 05:48:26,240
the imprecision from last week for now

9386
05:48:24,000 --> 05:48:28,760
let me just be happy with my 59.3

9387
05:48:26,240 --> 05:48:32,200
something I'll take that for now but

9388
05:48:28,760 --> 05:48:34,958
this is you know is close to um a good

9389
05:48:32,200 --> 05:48:37,240
enough correct answer for me now but how

9390
05:48:34,958 --> 05:48:38,557
do I think about now what's going on

9391
05:48:37,240 --> 05:48:40,000
inside of the computer's memory well

9392
05:48:38,558 --> 05:48:42,958
let's consider here's that same grid of

9393
05:48:40,000 --> 05:48:44,798
memory each box represents a bite where

9394
05:48:42,958 --> 05:48:47,280
are score one score two and score three

9395
05:48:44,798 --> 05:48:48,840
in my memory well score one let me just

9396
05:48:47,280 --> 05:48:51,958
propose is at the top left but it's

9397
05:48:48,840 --> 05:48:54,558
taking up four boxes for four bytes

9398
05:48:51,958 --> 05:48:55,920
score two probably ends up right next to

9399
05:48:54,558 --> 05:48:57,080
it in memory though this isn't always

9400
05:48:55,920 --> 05:48:59,798
going to be the case but I've chosen

9401
05:48:57,080 --> 05:49:02,240
simple examples 73 is next to it also

9402
05:48:59,798 --> 05:49:04,557
taking up four bytes and then lastly 33

9403
05:49:02,240 --> 05:49:07,280
is in score three uh down there

9404
05:49:04,558 --> 05:49:08,798
underneath now if we don't if we really

9405
05:49:07,280 --> 05:49:10,399
look at the computer's memory look at it

9406
05:49:08,798 --> 05:49:13,878
with some kind of microscope or the like

9407
05:49:10,400 --> 05:49:17,478
there's actually 32 bits 32 bits 32 bits

9408
05:49:13,878 --> 05:49:19,360
in each of those four uh groups of four

9409
05:49:17,478 --> 05:49:20,878
bytes representing those values but

9410
05:49:19,360 --> 05:49:22,320
again for today's purposes onwards we

9411
05:49:20,878 --> 05:49:23,878
don't really need to think again and

9412
05:49:22,320 --> 05:49:26,079
again in binary it's just indeed these

9413
05:49:23,878 --> 05:49:28,120
decimal numbers being stored there but I

9414
05:49:26,080 --> 05:49:29,760
claim now this isn't the best design

9415
05:49:28,120 --> 05:49:32,120
even if if you have never programmed

9416
05:49:29,760 --> 05:49:34,557
before cs50 what you're looking at here

9417
05:49:32,120 --> 05:49:36,478
on the screen as an excerpt in what

9418
05:49:34,558 --> 05:49:37,798
sense is this perhaps bad design even

9419
05:49:36,478 --> 05:49:39,000
though it's a correct way of storing

9420
05:49:37,798 --> 05:49:42,878
three test

9421
05:49:39,000 --> 05:49:42,878
scores what's kind of bad here

9422
05:49:45,280 --> 05:49:50,557
yeah yeah always do exactly what you did

9423
05:49:48,000 --> 05:49:52,878
extrapolate to four scores five scores

9424
05:49:50,558 --> 05:49:54,000
50 scores this can't be that welld

9425
05:49:52,878 --> 05:49:55,878
designed because now you're going to

9426
05:49:54,000 --> 05:49:57,600
have four lines of code five lines of

9427
05:49:55,878 --> 05:49:59,680
code 50 lines of code that are almost

9428
05:49:57,600 --> 05:50:01,478
identical except for this like arbitrary

9429
05:49:59,680 --> 05:50:03,760
number that we're updating at the end of

9430
05:50:01,478 --> 05:50:05,840
the variable so indeed there's probably

9431
05:50:03,760 --> 05:50:08,039
going to be a better way even though at

9432
05:50:05,840 --> 05:50:10,320
least in C we haven't yet seen that

9433
05:50:08,040 --> 05:50:12,400
technique but the solution today onward

9434
05:50:10,320 --> 05:50:15,840
is going to be something called an array

9435
05:50:12,400 --> 05:50:18,200
an array is a uh way of storing your

9436
05:50:15,840 --> 05:50:20,638
data back to back to back in the

9437
05:50:18,200 --> 05:50:24,000
computer's memory in such a way that you

9438
05:50:20,638 --> 05:50:26,360
can access each individual member easily

9439
05:50:24,000 --> 05:50:28,798
put another way with an array you can

9440
05:50:26,360 --> 05:50:31,320
instead do something like this instead

9441
05:50:28,798 --> 05:50:33,840
of saying int score one int score 2 in

9442
05:50:31,320 --> 05:50:36,718
score three giving each a value you can

9443
05:50:33,840 --> 05:50:39,120
first tell the computer please give me a

9444
05:50:36,718 --> 05:50:41,280
variable called scores plural that you

9445
05:50:39,120 --> 05:50:44,039
can call it anything you want of size

9446
05:50:41,280 --> 05:50:45,958
three Each of which will be an integer

9447
05:50:44,040 --> 05:50:49,240
that is to say this is how you declare

9448
05:50:45,958 --> 05:50:51,840
an array in C that will have enough room

9449
05:50:49,240 --> 05:50:53,680
to store three integers put another way

9450
05:50:51,840 --> 05:50:57,958
this is the technical way of telling the

9451
05:50:53,680 --> 05:50:58,920
computer please give me uh 12 bytes in

9452
05:50:57,958 --> 05:51:01,798
total

9453
05:50:58,920 --> 05:51:03,120
3 * 4 each for an inch so give me 12

9454
05:51:01,798 --> 05:51:05,160
bytes in total and what the computer

9455
05:51:03,120 --> 05:51:07,039
will do is guarantee that they're back

9456
05:51:05,160 --> 05:51:09,240
to back to back in the computer's memory

9457
05:51:07,040 --> 05:51:10,760
and that'll be useful in just a moment

9458
05:51:09,240 --> 05:51:12,400
so let me go ahead and do something

9459
05:51:10,760 --> 05:51:14,717
useful with this let me store three

9460
05:51:12,400 --> 05:51:17,718
actual scores here's how I could now

9461
05:51:14,718 --> 05:51:20,520
store those same numeric scores in this

9462
05:51:17,718 --> 05:51:23,000
array syntax is a little different but

9463
05:51:20,520 --> 05:51:24,840
there's one variable called scores but

9464
05:51:23,000 --> 05:51:26,958
if you want to go to its first location

9465
05:51:24,840 --> 05:51:29,080
starting today you use square brackets

9466
05:51:26,958 --> 05:51:32,359
and go to location zero first which

9467
05:51:29,080 --> 05:51:34,160
because things in C are zero indexed uh

9468
05:51:32,360 --> 05:51:36,718
so to speak you start counting at zero

9469
05:51:34,160 --> 05:51:38,638
the first int is at bracket zero second

9470
05:51:36,718 --> 05:51:40,798
int is at bracket 1 third int is at

9471
05:51:38,638 --> 05:51:42,718
bracket two so it's not 1 two three it's

9472
05:51:40,798 --> 05:51:44,717
literally 0 one2 and this is not

9473
05:51:42,718 --> 05:51:48,600
something you have control over you must

9474
05:51:44,718 --> 05:51:50,680
start at zero so these lines now create

9475
05:51:48,600 --> 05:51:53,680
an array of size three and then insert

9476
05:51:50,680 --> 05:51:55,840
one two three values into that array but

9477
05:51:53,680 --> 05:51:57,760
the upside now is that you only have one

9478
05:51:55,840 --> 05:52:00,680
name of the variable to remember it's

9479
05:51:57,760 --> 05:52:03,120
just called scores yes you need to go

9480
05:52:00,680 --> 05:52:05,520
into the array to get individual values

9481
05:52:03,120 --> 05:52:07,280
you need to index into it using those

9482
05:52:05,520 --> 05:52:08,958
square brackets but at least you don't

9483
05:52:07,280 --> 05:52:11,557
have this hackish approach of declaring

9484
05:52:08,958 --> 05:52:13,958
a separate variable for each and every

9485
05:52:11,558 --> 05:52:16,760
one of these values so let me go back to

9486
05:52:13,958 --> 05:52:18,717
scores do c here and let me propose that

9487
05:52:16,760 --> 05:52:20,600
I do this let me just kind of use that

9488
05:52:18,718 --> 05:52:22,520
same idea to do the following let me get

9489
05:52:20,600 --> 05:52:25,079
rid of these three separate integers let

9490
05:52:22,520 --> 05:52:28,638
me give myself an INT scores array of

9491
05:52:25,080 --> 05:52:32,160
size three and then scores bracket Z

9492
05:52:28,638 --> 05:52:35,920
will as before be 72 scores bracket 1

9493
05:52:32,160 --> 05:52:38,120
will be 73 and scores bracket 2 will be

9494
05:52:35,920 --> 05:52:40,440
33 and let me get rid of the Little Dot

9495
05:52:38,120 --> 05:52:44,120
there all right so now if I go ahead and

9496
05:52:40,440 --> 05:52:49,039
run this again with make uh scores

9497
05:52:44,120 --> 05:52:51,440
enter huh what did I do wrong here I

9498
05:52:49,040 --> 05:52:55,000
think I got a little too ahead of myself

9499
05:52:51,440 --> 05:52:58,717
let me increase my terminal

9500
05:52:55,000 --> 05:53:01,600
window let's focus on line 10 here first

9501
05:52:58,718 --> 05:53:06,120
error use of Undeclared identifier score

9502
05:53:01,600 --> 05:53:06,120
one what did I do here that was dumb

9503
05:53:06,440 --> 05:53:10,798
yeah right so I didn't declare score one

9504
05:53:09,200 --> 05:53:12,878
I've got old code right so I just kind

9505
05:53:10,798 --> 05:53:14,320
of honestly got ahead of myself here not

9506
05:53:12,878 --> 05:53:15,958
even intentionally so let me go ahead

9507
05:53:14,320 --> 05:53:17,718
and Shrink my terminal window again I

9508
05:53:15,958 --> 05:53:20,000
need to finish my thought here so let me

9509
05:53:17,718 --> 05:53:23,240
clear my terminal and let me change this

9510
05:53:20,000 --> 05:53:25,680
now to be scores brackets zero plus

9511
05:53:23,240 --> 05:53:27,040
scores bracket 1 plus scores bracket two

9512
05:53:25,680 --> 05:53:29,160
so it's a little more verbose because

9513
05:53:27,040 --> 05:53:31,520
I've got these these um square brackets

9514
05:53:29,160 --> 05:53:34,200
so to speak but I think now my code is

9515
05:53:31,520 --> 05:53:37,160
consistent so let me make scores now now

9516
05:53:34,200 --> 05:53:39,000
compiles do/ scores gives me indeed the

9517
05:53:37,160 --> 05:53:41,040
same rough average with those same

9518
05:53:39,000 --> 05:53:44,240
values all right so let me go ahead and

9519
05:53:41,040 --> 05:53:45,600
maybe um tidy enhance this a little bit

9520
05:53:44,240 --> 05:53:47,718
it's a little silly to have to write a

9521
05:53:45,600 --> 05:53:50,600
special program just to check your

9522
05:53:47,718 --> 05:53:52,840
average of three test scores like 72 73

9523
05:53:50,600 --> 05:53:55,239
33 why don't I actually make the program

9524
05:53:52,840 --> 05:53:57,718
Dynamic and ask the human for that

9525
05:53:55,240 --> 05:53:59,840
average uh for those scores so instead

9526
05:53:57,718 --> 05:54:03,600
let me do do this how about we get rid

9527
05:53:59,840 --> 05:54:06,240
of the 72 and change this to get int and

9528
05:54:03,600 --> 05:54:08,840
I'll just prompt the user for a score

9529
05:54:06,240 --> 05:54:11,478
let me get rid of the 33 and change 73

9530
05:54:08,840 --> 05:54:13,558
and get this to be get int score quote

9531
05:54:11,478 --> 05:54:15,718
unquote and then lastly get rid of the

9532
05:54:13,558 --> 05:54:18,958
33 and replace it with get int quote

9533
05:54:15,718 --> 05:54:22,760
unquote score get int is a cs50 thing

9534
05:54:18,958 --> 05:54:24,680
for now so I need to include cs50.h as

9535
05:54:22,760 --> 05:54:26,557
always but I think now it's sort of a

9536
05:54:24,680 --> 05:54:28,200
better program because now I can compile

9537
05:54:26,558 --> 05:54:30,440
it once I can even share it with my

9538
05:54:28,200 --> 05:54:32,400
friends and now any of us can average

9539
05:54:30,440 --> 05:54:34,399
three scores on some classes test they

9540
05:54:32,400 --> 05:54:36,760
don't need to know the code or rewrite

9541
05:54:34,400 --> 05:54:40,440
the code just to T type in their scores

9542
05:54:36,760 --> 05:54:44,039
so make scores worked scores now I can

9543
05:54:40,440 --> 05:54:46,638
type anything I want maybe it's a 72 73

9544
05:54:44,040 --> 05:54:49,840
33 still get the same answer or maybe

9545
05:54:46,638 --> 05:54:52,680
I'm having a better semester 100 100

9546
05:54:49,840 --> 05:54:54,520
maybe 99 and now we get still a pretty

9547
05:54:52,680 --> 05:54:55,840
high score there but now it's Dynamic

9548
05:54:54,520 --> 05:54:57,400
now you don't need the source code you

9549
05:54:55,840 --> 05:54:59,638
don't need to recompile the program it's

9550
05:54:57,400 --> 05:55:02,080
just going to work work again and again

9551
05:54:59,638 --> 05:55:04,239
but this too let me propose that this

9552
05:55:02,080 --> 05:55:06,400
code is correct if I want to get three

9553
05:55:04,240 --> 05:55:09,320
scores from the user but these

9554
05:55:06,400 --> 05:55:12,200
highlighted lines now 6 through n are

9555
05:55:09,320 --> 05:55:14,239
they welld designed would you

9556
05:55:12,200 --> 05:55:16,680
say

9557
05:55:14,240 --> 05:55:19,240
yeah yeah right this is we can use a

9558
05:55:16,680 --> 05:55:20,840
loop is the spoiler here why I mean my

9559
05:55:19,240 --> 05:55:21,878
God it's like the same code again and

9560
05:55:20,840 --> 05:55:23,680
again and again the only thing that's

9561
05:55:21,878 --> 05:55:26,080
changing is the number and you it should

9562
05:55:23,680 --> 05:55:27,798
have kind of had some code smell again

9563
05:55:26,080 --> 05:55:29,080
because if I keep typing the same thing

9564
05:55:27,798 --> 05:55:31,280
again again and again like that's

9565
05:55:29,080 --> 05:55:33,840
clearly an opportunity to better design

9566
05:55:31,280 --> 05:55:36,920
something so let me do this let me go

9567
05:55:33,840 --> 05:55:39,280
ahead and still create my ver my array

9568
05:55:36,920 --> 05:55:43,519
of size three and but let me use our old

9569
05:55:39,280 --> 05:55:47,399
friend the for Loop for in I equals z i

9570
05:55:43,520 --> 05:55:50,240
Less Than 3 I ++ and then in here let me

9571
05:55:47,400 --> 05:55:51,798
do scores bracket we haven't seen this

9572
05:55:50,240 --> 05:55:55,920
before but any

9573
05:55:51,798 --> 05:55:59,039
intuition scores bracket I because that

9574
05:55:55,920 --> 05:56:01,600
will use whatever I is be it Z or one or

9575
05:55:59,040 --> 05:56:04,040
two in iteration and then I can get an

9576
05:56:01,600 --> 05:56:06,798
INT asking the user for score without

9577
05:56:04,040 --> 05:56:08,440
having to repeat myself again and again

9578
05:56:06,798 --> 05:56:13,478
so hopefully if I didn't make any typos

9579
05:56:08,440 --> 05:56:14,798
make scores all good do/ score 72 73 33

9580
05:56:13,478 --> 05:56:16,600
and we're back in business but the code

9581
05:56:14,798 --> 05:56:19,638
is arguably now better designed because

9582
05:56:16,600 --> 05:56:21,519
now I haven't actually uh I haven't

9583
05:56:19,638 --> 05:56:23,680
actually hardcoded the scores and I

9584
05:56:21,520 --> 05:56:26,120
haven't actually copied and pasted any

9585
05:56:23,680 --> 05:56:27,558
of that code well if we consider now

9586
05:56:26,120 --> 05:56:29,120
what's going on inside of the computer's

9587
05:56:27,558 --> 05:56:31,360
memory it's pretty much the same in

9588
05:56:29,120 --> 05:56:33,557
terms of the values but instead of the

9589
05:56:31,360 --> 05:56:36,240
variables being literally score one

9590
05:56:33,558 --> 05:56:39,160
score two score three there's just one

9591
05:56:36,240 --> 05:56:42,320
variable it's an array called scores but

9592
05:56:39,160 --> 05:56:44,440
you can index into its three locations

9593
05:56:42,320 --> 05:56:46,280
by using scores bracket Z to get the

9594
05:56:44,440 --> 05:56:48,280
first scores bracket one to get the

9595
05:56:46,280 --> 05:56:50,840
second scores bracket two to get the

9596
05:56:48,280 --> 05:56:53,520
third but this is key the memory is

9597
05:56:50,840 --> 05:56:55,718
contiguous it's only the screen is only

9598
05:56:53,520 --> 05:56:57,920
so large so it wraps around but

9599
05:56:55,718 --> 05:57:00,080
physically digitally the memory is

9600
05:56:57,920 --> 05:57:02,039
contiguous top to bottom left to right

9601
05:57:00,080 --> 05:57:04,878
and that's important why because the

9602
05:57:02,040 --> 05:57:07,760
brackets indicate 0 1 2 that each of

9603
05:57:04,878 --> 05:57:09,920
these integers is just one integer away

9604
05:57:07,760 --> 05:57:12,000
from the next it can't be randomly down

9605
05:57:09,920 --> 05:57:14,958
here all of a sudden it's got to be back

9606
05:57:12,000 --> 05:57:18,558
to back to back all right now equipped

9607
05:57:14,958 --> 05:57:21,440
with that Paradigm what more could we

9608
05:57:18,558 --> 05:57:24,120
actually do here well it turns out it's

9609
05:57:21,440 --> 05:57:26,877
worth knowing that it's possible in code

9610
05:57:24,120 --> 05:57:28,280
to even pass arrays around as arguments

9611
05:57:26,878 --> 05:57:30,280
and let me just whip this program up

9612
05:57:28,280 --> 05:57:32,520
somewhat quickly just so you've seen it

9613
05:57:30,280 --> 05:57:35,520
before long but let me go ahead and do

9614
05:57:32,520 --> 05:57:38,000
this let me propose that I create a

9615
05:57:35,520 --> 05:57:39,638
function that does this averaging for me

9616
05:57:38,000 --> 05:57:43,360
so I'm going to create a function called

9617
05:57:39,638 --> 05:57:46,718
average that returns a float uh and the

9618
05:57:43,360 --> 05:57:48,680
arguments this thing is going to take uh

9619
05:57:46,718 --> 05:57:50,478
let's see it's going to be the array so

9620
05:57:48,680 --> 05:57:51,760
it turns out if you want to take in an

9621
05:57:50,478 --> 05:57:55,360
array of numbers you can call it

9622
05:57:51,760 --> 05:57:58,280
anything you want this is how you tell C

9623
05:57:55,360 --> 05:58:00,400
that a function takes not an integer but

9624
05:57:58,280 --> 05:58:01,798
in Array of integers and you don't have

9625
05:58:00,400 --> 05:58:03,160
to call it array I'm doing that just for

9626
05:58:01,798 --> 05:58:04,878
the sake of discussion it can be called

9627
05:58:03,160 --> 05:58:06,600
X it can be numbers it can be anything

9628
05:58:04,878 --> 05:58:09,160
else I'm just calling an array to be

9629
05:58:06,600 --> 05:58:11,638
super explicit as to what it is there

9630
05:58:09,160 --> 05:58:12,920
now how do I change my code down here

9631
05:58:11,638 --> 05:58:15,600
what I think I'm going to do for the

9632
05:58:12,920 --> 05:58:17,877
moment is just this I'm going to get rid

9633
05:58:15,600 --> 05:58:19,478
of this code here where I manually

9634
05:58:17,878 --> 05:58:21,760
computed the average and let me just

9635
05:58:19,478 --> 05:58:25,079
call the average function here by

9636
05:58:21,760 --> 05:58:26,920
passing in the whole array of scores so

9637
05:58:25,080 --> 05:58:28,320
this is just an example of abstraction

9638
05:58:26,920 --> 05:58:30,000
like now I have a fun function called

9639
05:58:28,320 --> 05:58:31,840
average I don't care I don't have to

9640
05:58:30,000 --> 05:58:33,718
remember how it works once I implement

9641
05:58:31,840 --> 05:58:35,798
it it just kind of tightens up my main

9642
05:58:33,718 --> 05:58:38,040
code a little bit but I do still have to

9643
05:58:35,798 --> 05:58:39,798
implement this so later in my file let

9644
05:58:38,040 --> 05:58:41,320
me repeat myself before the only time

9645
05:58:39,798 --> 05:58:43,199
it's okay and see to repeat yourself

9646
05:58:41,320 --> 05:58:46,920
again and again by typing out again

9647
05:58:43,200 --> 05:58:49,000
average and then int array Open Bracket

9648
05:58:46,920 --> 05:58:50,839
but now not a semicolon now I have to

9649
05:58:49,000 --> 05:58:54,558
implement this thing and I can implement

9650
05:58:50,840 --> 05:58:58,080
this in a bunch of different ways uh but

9651
05:58:54,558 --> 05:59:01,760
I don't know huh in advance I can't just

9652
05:58:58,080 --> 05:59:06,638
do this I can't just do array bracket 0

9653
05:59:01,760 --> 05:59:09,399
plus array bracket 1 plus array bracket

9654
05:59:06,638 --> 05:59:13,079
2 unless unless this program is only

9655
05:59:09,400 --> 05:59:15,200
ever going to work on three numbers so

9656
05:59:13,080 --> 05:59:17,160
huh let me let me go ahead and do this

9657
05:59:15,200 --> 05:59:20,360
let me first propose that there's a poor

9658
05:59:17,160 --> 05:59:23,360
design here in my main function what

9659
05:59:20,360 --> 05:59:23,360
value have I repeated

9660
05:59:23,958 --> 05:59:28,840
twice among the highlighted lines what

9661
05:59:26,080 --> 05:59:30,080
jumps out at use twice L of the array

9662
05:59:28,840 --> 05:59:32,200
yeah the length of the array is just

9663
05:59:30,080 --> 05:59:33,840
three now it's not a huge deal that I

9664
05:59:32,200 --> 05:59:35,920
type the number three on line eight on

9665
05:59:33,840 --> 05:59:37,400
line nine but this is exactly the kind

9666
05:59:35,920 --> 05:59:38,920
of like shortcut that's going to get you

9667
05:59:37,400 --> 05:59:40,120
in trouble eventually why because

9668
05:59:38,920 --> 05:59:41,760
eventually you or someone else is going

9669
05:59:40,120 --> 05:59:43,239
to go in make the array bigger or

9670
05:59:41,760 --> 05:59:45,320
smaller and you're not going to realize

9671
05:59:43,240 --> 05:59:47,160
that magically that same number is in

9672
05:59:45,320 --> 05:59:48,718
two places and indeed this is what a

9673
05:59:47,160 --> 05:59:50,240
programmer would often call a magic

9674
05:59:48,718 --> 05:59:52,320
number a magic number is one that just

9675
05:59:50,240 --> 05:59:54,240
kind of appears magically and you're on

9676
05:59:52,320 --> 05:59:55,520
the honor System to change it here if

9677
05:59:54,240 --> 05:59:57,120
you change it here and then you change

9678
05:59:55,520 --> 05:59:58,600
it over here like that's not going to

9679
05:59:57,120 --> 06:00:00,320
end well if it the onus is on the

9680
05:59:58,600 --> 06:00:02,239
programmer to remember where they

9681
06:00:00,320 --> 06:00:05,120
hardcoded that is rote out three

9682
06:00:02,240 --> 06:00:06,400
explicitly so anytime you reuse a value

9683
06:00:05,120 --> 06:00:08,680
like this you know what we should

9684
06:00:06,400 --> 06:00:11,000
probably do what we did last week which

9685
06:00:08,680 --> 06:00:12,878
was to declare a variable uh perhaps at

9686
06:00:11,000 --> 06:00:15,440
the very top of my program so it's super

9687
06:00:12,878 --> 06:00:17,440
obvious what it is called maybe n and

9688
06:00:15,440 --> 06:00:19,000
set that equal to three better yet what

9689
06:00:17,440 --> 06:00:20,798
did I do last week to make sure that I

9690
06:00:19,000 --> 06:00:23,840
Can't Screw Up and accidentally change

9691
06:00:20,798 --> 06:00:26,199
that value yeah constant and the keyword

9692
06:00:23,840 --> 06:00:28,320
there was just const for short and now I

9693
06:00:26,200 --> 06:00:30,680
have a global variable Global in the

9694
06:00:28,320 --> 06:00:33,200
sense that I can access it anywhere that

9695
06:00:30,680 --> 06:00:35,558
is called n it's an INT and it's always

9696
06:00:33,200 --> 06:00:37,718
going to be three and now I can improve

9697
06:00:35,558 --> 06:00:40,798
my main function a little bit by just

9698
06:00:37,718 --> 06:00:42,360
changing the threes to n so now if I if

9699
06:00:40,798 --> 06:00:44,079
a colleague realize oh wait a minute

9700
06:00:42,360 --> 06:00:45,798
there's four tests this year you change

9701
06:00:44,080 --> 06:00:50,000
n to four recompile the code and it just

9702
06:00:45,798 --> 06:00:51,638
works everywhere else except in my

9703
06:00:50,000 --> 06:00:54,200
average function let me change it back

9704
06:00:51,638 --> 06:00:58,160
to three just for consistency this is

9705
06:00:54,200 --> 06:01:00,160
not going to fly now to just uh sum up

9706
06:00:58,160 --> 06:01:04,600
things like this for instance and then

9707
06:01:00,160 --> 06:01:06,920
return this divided three why will this

9708
06:01:04,600 --> 06:01:10,160
not work

9709
06:01:06,920 --> 06:01:13,160
now as I've defined

9710
06:01:10,160 --> 06:01:13,160
it

9711
06:01:17,040 --> 06:01:21,798
yeah okay I might be in returning an

9712
06:01:19,878 --> 06:01:23,718
integer value when I intend to return a

9713
06:01:21,798 --> 06:01:25,638
float per this but I think I'm okay CU I

9714
06:01:23,718 --> 06:01:27,440
Ed that little trick where I made sure

9715
06:01:25,638 --> 06:01:29,718
that at least one of the numbers in my

9716
06:01:27,440 --> 06:01:31,440
my arithmetic expression is in fact a

9717
06:01:29,718 --> 06:01:33,958
floating point value and just by adding

9718
06:01:31,440 --> 06:01:35,958
the point zero make sure that everything

9719
06:01:33,958 --> 06:01:38,079
gets treated as a float so I think

9720
06:01:35,958 --> 06:01:41,520
that's

9721
06:01:38,080 --> 06:01:41,520
okay sorry a little

9722
06:01:43,360 --> 06:01:47,600
ladder exactly so left hand's not

9723
06:01:45,920 --> 06:01:50,320
talking to the right hand here and that

9724
06:01:47,600 --> 06:01:51,638
my current implementation of average is

9725
06:01:50,320 --> 06:01:53,798
still assuming that there's only going

9726
06:01:51,638 --> 06:01:55,680
to be three tests or whatever but wait a

9727
06:01:53,798 --> 06:01:59,520
minute I just went through the trouble

9728
06:01:55,680 --> 06:02:01,478
of modifying this to be n generically

9729
06:01:59,520 --> 06:02:03,400
and if I change this to four I'm not

9730
06:02:01,478 --> 06:02:04,840
going to be happy perhaps with my

9731
06:02:03,400 --> 06:02:06,760
average because now I'm going to ignore

9732
06:02:04,840 --> 06:02:08,760
one of my test scores Al together so let

9733
06:02:06,760 --> 06:02:12,000
me change this back to three and

9734
06:02:08,760 --> 06:02:13,519
unfortunately if it's a variable now n

9735
06:02:12,000 --> 06:02:16,520
and therefore I have literally a

9736
06:02:13,520 --> 06:02:19,760
variable number of scores how do I take

9737
06:02:16,520 --> 06:02:22,320
the average of a variable number of

9738
06:02:19,760 --> 06:02:24,600
things I mean what's my building block

9739
06:02:22,320 --> 06:02:24,600
there

9740
06:02:26,360 --> 06:02:29,360
yeah

9741
06:02:30,440 --> 06:02:34,120
yeah why don't I use a loop that goes

9742
06:02:32,160 --> 06:02:35,520
through the array and adds things up as

9743
06:02:34,120 --> 06:02:36,680
you go I mean kind of like grade school

9744
06:02:35,520 --> 06:02:38,478
as you take the average on your

9745
06:02:36,680 --> 06:02:39,878
calculator or paper pencil you just keep

9746
06:02:38,478 --> 06:02:41,600
adding the numbers together and then you

9747
06:02:39,878 --> 06:02:43,600
divide at the End by the total number of

9748
06:02:41,600 --> 06:02:45,840
things so how can I do this well let me

9749
06:02:43,600 --> 06:02:48,557
change my implementation of average to

9750
06:02:45,840 --> 06:02:50,760
First declare a a variable called sum or

9751
06:02:48,558 --> 06:02:52,160
whatever set it equal to zero so this is

9752
06:02:50,760 --> 06:02:53,760
like me on my piece of paper getting

9753
06:02:52,160 --> 06:02:55,240
ready to count or my calculator of

9754
06:02:53,760 --> 06:02:57,958
course when you turn it on typically

9755
06:02:55,240 --> 06:03:02,240
defaults to zero and now let me do four

9756
06:02:57,958 --> 06:03:05,798
in I equals z i is less than a VAR I no

9757
06:03:02,240 --> 06:03:09,200
I didn't do that n i is less than n

9758
06:03:05,798 --> 06:03:13,320
i++ and now in here let me go ahead and

9759
06:03:09,200 --> 06:03:16,798
add to the current sum uh whatever is in

9760
06:03:13,320 --> 06:03:19,600
the arrays location I and then down here

9761
06:03:16,798 --> 06:03:25,280
I think I can just return sum divided by

9762
06:03:19,600 --> 06:03:27,478
3 nope not 3.0 n perhaps here and

9763
06:03:25,280 --> 06:03:29,039
actually I think I'm going to get let's

9764
06:03:27,478 --> 06:03:30,520
make sure it's a float let's use the the

9765
06:03:29,040 --> 06:03:32,558
type casting trick just to make sure I

9766
06:03:30,520 --> 06:03:34,638
don't accidentally Short change someone

9767
06:03:32,558 --> 06:03:36,360
and uh throw away everything after the

9768
06:03:34,638 --> 06:03:37,920
decimal point so it just escalated

9769
06:03:36,360 --> 06:03:39,478
quickly right like average just got a

9770
06:03:37,920 --> 06:03:41,239
lot more involved it's just not just a

9771
06:03:39,478 --> 06:03:43,760
single one line of code but now it's

9772
06:03:41,240 --> 06:03:46,958
Dynamic I initialize a variable called

9773
06:03:43,760 --> 06:03:49,440
sum to zero in this loop I go through

9774
06:03:46,958 --> 06:03:51,840
and just keep adding to sum which is

9775
06:03:49,440 --> 06:03:54,199
initially zero whatever is in Array

9776
06:03:51,840 --> 06:03:56,638
bracket I or specifically array bracket

9777
06:03:54,200 --> 06:03:58,878
zero array bracket one array bracket two

9778
06:03:56,638 --> 06:04:00,878
that gives me a total sum that I return

9779
06:03:58,878 --> 06:04:02,798
divided by the total number of things

9780
06:04:00,878 --> 06:04:04,840
now this I can tighten slightly recall

9781
06:04:02,798 --> 06:04:06,600
that this is syntactic sugar for just

9782
06:04:04,840 --> 06:04:08,718
adding things I can't use plus plus

9783
06:04:06,600 --> 06:04:11,600
because that only literally adds one but

9784
06:04:08,718 --> 06:04:14,400
I can use here plus

9785
06:04:11,600 --> 06:04:16,680
equals questions on this implementation

9786
06:04:14,400 --> 06:04:18,638
here really the only takeaway or the

9787
06:04:16,680 --> 06:04:21,360
most important takeaway is that this is

9788
06:04:18,638 --> 06:04:24,120
the Syntax for how you tell a function

9789
06:04:21,360 --> 06:04:26,320
that to it expects a whole array not a

9790
06:04:24,120 --> 06:04:27,878
single variable like an INT or the like

9791
06:04:26,320 --> 06:04:30,558
you literally use square brackets but

9792
06:04:27,878 --> 06:04:33,558
you don't specify the length inside

9793
06:04:30,558 --> 06:04:33,558
there

9794
06:04:35,638 --> 06:04:39,840
yeah what about the variable at the

9795
06:04:41,600 --> 06:04:46,280
top good question what do I have it

9796
06:04:43,680 --> 06:04:49,520
defined as at the top this variable n it

9797
06:04:46,280 --> 06:04:52,600
must be an integer if you're going to uh

9798
06:04:49,520 --> 06:04:55,798
use it inside of in arrays square

9799
06:04:52,600 --> 06:04:58,519
brackets here so this line 10 notice no

9800
06:04:55,798 --> 06:05:00,958
longer says three it says n and so

9801
06:04:58,520 --> 06:05:03,080
whatever n is three or four or something

9802
06:05:00,958 --> 06:05:04,798
else that's how many integers I will get

9803
06:05:03,080 --> 06:05:06,878
in that array and it must be by

9804
06:05:04,798 --> 06:05:08,478
definition of an array an integer that

9805
06:05:06,878 --> 06:05:10,360
goes in those square brackets and here's

9806
06:05:08,478 --> 06:05:12,478
a common source of confusion when you

9807
06:05:10,360 --> 06:05:14,000
create the array that is declare it you

9808
06:05:12,478 --> 06:05:15,478
use square brackets like this where you

9809
06:05:14,000 --> 06:05:18,320
put the total number of elements you

9810
06:05:15,478 --> 06:05:20,558
want when you subsequently use the array

9811
06:05:18,320 --> 06:05:22,520
like I'm doing here you don't mention

9812
06:05:20,558 --> 06:05:24,520
int again just like you don't mention in

9813
06:05:22,520 --> 06:05:26,718
again and again once a variable exists

9814
06:05:24,520 --> 06:05:30,000
you use the square bracket still but you

9815
06:05:26,718 --> 06:05:32,840
don't use n you use zero or one or two

9816
06:05:30,000 --> 06:05:34,200
or generically here I so when C was

9817
06:05:32,840 --> 06:05:36,320
designed they sometimes use the same

9818
06:05:34,200 --> 06:05:39,040
Syntax for two different ideas or

9819
06:05:36,320 --> 06:05:39,040
contexts

9820
06:05:42,120 --> 06:05:47,079
yeah good question do I have to include

9821
06:05:44,638 --> 06:05:50,160
line six short answer yes because of the

9822
06:05:47,080 --> 06:05:51,680
reason we ran into last week C or clang

9823
06:05:50,160 --> 06:05:54,718
really reads your code top to bottom

9824
06:05:51,680 --> 06:05:57,320
left to right and so if the compiler

9825
06:05:54,718 --> 06:05:59,920
sees some mention of this function

9826
06:05:57,320 --> 06:06:01,798
average on line 16 but you haven't told

9827
06:05:59,920 --> 06:06:03,798
the compiler that average exists you're

9828
06:06:01,798 --> 06:06:05,320
going to get an error on the screen so

9829
06:06:03,798 --> 06:06:07,680
the conventional way to do that is you

9830
06:06:05,320 --> 06:06:09,280
just copy paste the one first line of

9831
06:06:07,680 --> 06:06:13,558
code from the function it's so-called

9832
06:06:09,280 --> 06:06:13,557
prototype or Declaration

9833
06:06:14,638 --> 06:06:19,000
yeah really good question uh in a

9834
06:06:17,000 --> 06:06:20,320
perfect segue is there a library you can

9835
06:06:19,000 --> 06:06:22,760
use if you don't know the size of the

9836
06:06:20,320 --> 06:06:26,600
array no and so if any of you have

9837
06:06:22,760 --> 06:06:28,199
programmed in uh in uh Java or python or

9838
06:06:26,600 --> 06:06:31,120
other Lang languages you can actually

9839
06:06:28,200 --> 06:06:33,040
just ask the array like how big is it in

9840
06:06:31,120 --> 06:06:34,878
C you and I the programmers have to

9841
06:06:33,040 --> 06:06:35,878
remember it and so short answer no

9842
06:06:34,878 --> 06:06:38,080
there's no function that will just

9843
06:06:35,878 --> 06:06:40,400
automatically do this for us and in fact

9844
06:06:38,080 --> 06:06:43,000
let me make a more subtle claim that

9845
06:06:40,400 --> 06:06:44,638
it's fine to use Global variables like

9846
06:06:43,000 --> 06:06:46,760
this if they're really for configuration

9847
06:06:44,638 --> 06:06:48,239
options why it's just convenient to put

9848
06:06:46,760 --> 06:06:50,359
them at the very top of the file because

9849
06:06:48,240 --> 06:06:51,718
everyone you your colleagues your Tas

9850
06:06:50,360 --> 06:06:54,000
are going to see them at the top of the

9851
06:06:51,718 --> 06:06:55,878
code but you really shouldn't be using

9852
06:06:54,000 --> 06:06:57,638
them everywhere throughout your code

9853
06:06:55,878 --> 06:06:59,638
it'd be better if the average function

9854
06:06:57,638 --> 06:07:02,200
itself we're independent of that special

9855
06:06:59,638 --> 06:07:03,958
variable so by that I mean this you know

9856
06:07:02,200 --> 06:07:07,798
what I should really do if I really want

9857
06:07:03,958 --> 06:07:10,440
to be welld designed I should pass in

9858
06:07:07,798 --> 06:07:12,638
the length of the array to the average

9859
06:07:10,440 --> 06:07:14,760
function I should give the average

9860
06:07:12,638 --> 06:07:16,638
function a second argument I'll call it

9861
06:07:14,760 --> 06:07:18,877
length for instance but I could call it

9862
06:07:16,638 --> 06:07:21,160
anything I want and so rather than

9863
06:07:18,878 --> 06:07:22,958
putting n all the way down here at the

9864
06:07:21,160 --> 06:07:25,840
bottom of my file let me just

9865
06:07:22,958 --> 06:07:27,239
dynamically say length instead and this

9866
06:07:25,840 --> 06:07:29,360
is a subtlety and no need need to get

9867
06:07:27,240 --> 06:07:31,478
too tripped up over this but this now is

9868
06:07:29,360 --> 06:07:33,878
just an example of how the same function

9869
06:07:31,478 --> 06:07:38,360
can take not one but two arguments but

9870
06:07:33,878 --> 06:07:40,160
indeed in C you must remember yourself

9871
06:07:38,360 --> 06:07:42,718
what the length of an array is you can't

9872
06:07:40,160 --> 06:07:43,958
just ask the array via some syntax like

9873
06:07:42,718 --> 06:07:48,638
you can those of you who've programmed

9874
06:07:43,958 --> 06:07:48,638
before in Java or python

9875
06:07:54,440 --> 06:07:58,638
yeah good question would it be better to

9876
06:07:57,200 --> 06:08:01,120
write a function that computes the size

9877
06:07:58,638 --> 06:08:03,239
short answer can't do that in C as soon

9878
06:08:01,120 --> 06:08:06,120
as you pass an array into a function in

9879
06:08:03,240 --> 06:08:07,958
C you cannot figure out its size if it's

9880
06:08:06,120 --> 06:08:10,360
a generic array like that of integers

9881
06:08:07,958 --> 06:08:12,359
there are special cases that uh you can

9882
06:08:10,360 --> 06:08:13,840
do that but in general no it's just not

9883
06:08:12,360 --> 06:08:15,400
possible in see and if that's some

9884
06:08:13,840 --> 06:08:17,200
frustration honestly this is why more

9885
06:08:15,400 --> 06:08:19,040
modern languages add that feature why

9886
06:08:17,200 --> 06:08:20,600
because it was really annoying um as I'm

9887
06:08:19,040 --> 06:08:22,120
alluding here to not having that

9888
06:08:20,600 --> 06:08:23,717
information now just to make sure I

9889
06:08:22,120 --> 06:08:25,798
didn't screw up anywhere let me compile

9890
06:08:23,718 --> 06:08:27,440
this final version of

9891
06:08:25,798 --> 06:08:32,557
scores

9892
06:08:27,440 --> 06:08:34,320
suspense all good/ scores 72 73 33 and

9893
06:08:32,558 --> 06:08:35,760
we're still back in business so this

9894
06:08:34,320 --> 06:08:36,840
version is more complicated and as

9895
06:08:35,760 --> 06:08:38,519
always we'll have this version on the

9896
06:08:36,840 --> 06:08:40,638
course's website for reference but the

9897
06:08:38,520 --> 06:08:42,600
point really is that arrays not only can

9898
06:08:40,638 --> 06:08:45,399
be used as containers to store multiple

9899
06:08:42,600 --> 06:08:48,320
values three or more in this case um you

9900
06:08:45,400 --> 06:08:52,040
can also even pass them around as

9901
06:08:48,320 --> 06:08:53,798
arguments as such all right now besides

9902
06:08:52,040 --> 06:08:55,360
that let's let's simplify for just a

9903
06:08:53,798 --> 06:08:57,360
moment and consider now the world of

9904
06:08:55,360 --> 06:08:59,240
chars if we've just got single bites

9905
06:08:57,360 --> 06:09:00,958
where uh where does this lead us and how

9906
06:08:59,240 --> 06:09:02,680
does this get us ultimately to strings

9907
06:09:00,958 --> 06:09:04,877
to solve problems like readability and

9908
06:09:02,680 --> 06:09:06,520
cryptography and the like well here for

9909
06:09:04,878 --> 06:09:09,000
instance are three lines of code out of

9910
06:09:06,520 --> 06:09:10,160
context that simply store three chars

9911
06:09:09,000 --> 06:09:12,320
and you can already see where this is

9912
06:09:10,160 --> 06:09:14,600
going having three variables called C1

9913
06:09:12,320 --> 06:09:16,400
C2 C3 is clearly going to end up being

9914
06:09:14,600 --> 06:09:18,079
bad design because of all the silly

9915
06:09:16,400 --> 06:09:19,760
redundancy here but notice I'm using

9916
06:09:18,080 --> 06:09:21,840
single quotes like last week because

9917
06:09:19,760 --> 06:09:24,000
these are single chars what does this

9918
06:09:21,840 --> 06:09:25,240
look like in the computer's memory well

9919
06:09:24,000 --> 06:09:29,000
it looks a little something like this if

9920
06:09:25,240 --> 06:09:30,878
we clear out the old memory C1 C2 C3

9921
06:09:29,000 --> 06:09:32,478
probably will end up here maybe not

9922
06:09:30,878 --> 06:09:35,958
literally in the top leftand Corner this

9923
06:09:32,478 --> 06:09:38,878
is just an artist rendition but C1 C2 C3

9924
06:09:35,958 --> 06:09:40,520
will probably end up like that now

9925
06:09:38,878 --> 06:09:44,760
what's really there it's really those

9926
06:09:40,520 --> 06:09:46,878
same three numbers 72 73 33 but how many

9927
06:09:44,760 --> 06:09:50,239
bits does a bite

9928
06:09:46,878 --> 06:09:52,760
have just eight so if we were to look at

9929
06:09:50,240 --> 06:09:54,798
the binary representation of these

9930
06:09:52,760 --> 06:09:56,798
characters it would only be eight bits

9931
06:09:54,798 --> 06:09:59,478
each that's enough to store small

9932
06:09:56,798 --> 06:10:01,878
numbers like 72 73 33 we're not dealing

9933
06:09:59,478 --> 06:10:03,239
with Unicode and emoji and the like but

9934
06:10:01,878 --> 06:10:05,040
the point is the same you don't have to

9935
06:10:03,240 --> 06:10:06,478
use four bytes to store these numbers

9936
06:10:05,040 --> 06:10:08,160
you can use a different data type like

9937
06:10:06,478 --> 06:10:10,399
chars and underneath the hood it's

9938
06:10:08,160 --> 06:10:13,638
indeed going to use just single bytes

9939
06:10:10,400 --> 06:10:15,520
for each but this is sort of like a this

9940
06:10:13,638 --> 06:10:17,079
isn't really how we Implement strings

9941
06:10:15,520 --> 06:10:19,280
right when you wanted to say hi last

9942
06:10:17,080 --> 06:10:20,798
week or this we use double quotes and we

9943
06:10:19,280 --> 06:10:23,000
wrote all of the things together and

9944
06:10:20,798 --> 06:10:24,520
used one variable not three right when I

9945
06:10:23,000 --> 06:10:27,520
typed in David I didn't have a variable

9946
06:10:24,520 --> 06:10:30,840
for d a v i d i had one variable called

9947
06:10:27,520 --> 06:10:32,160
name that stored the whole thing so in C

9948
06:10:30,840 --> 06:10:34,760
we keep talking about these things

9949
06:10:32,160 --> 06:10:36,320
called strings we'll see eventually that

9950
06:10:34,760 --> 06:10:38,600
strings are not necessarily what they

9951
06:10:36,320 --> 06:10:40,079
seem to be but for now the key thing

9952
06:10:38,600 --> 06:10:42,120
about strings is that they're variable

9953
06:10:40,080 --> 06:10:44,120
length uh so to speak right they might

9954
06:10:42,120 --> 06:10:46,760
be three characters high or five

9955
06:10:44,120 --> 06:10:49,520
characters David or anything uh smaller

9956
06:10:46,760 --> 06:10:51,519
or larger so how do we go about

9957
06:10:49,520 --> 06:10:53,240
implementing strings if all we have at

9958
06:10:51,520 --> 06:10:55,600
the end of the day is my memory well

9959
06:10:53,240 --> 06:10:57,958
here is an example of just creating uh

9960
06:10:55,600 --> 06:10:59,680
declaring and defining a string called s

9961
06:10:57,958 --> 06:11:02,079
s because it's just a simple string and

9962
06:10:59,680 --> 06:11:03,558
quote unquote high in double quotes what

9963
06:11:02,080 --> 06:11:05,558
does this look like in the computer's

9964
06:11:03,558 --> 06:11:07,040
memory well let's clear it again and

9965
06:11:05,558 --> 06:11:09,320
here now because it's technically stored

9966
06:11:07,040 --> 06:11:11,878
in one variable s here is how I might

9967
06:11:09,320 --> 06:11:14,320
draw it as an artist it's three bytes in

9968
06:11:11,878 --> 06:11:18,638
total H exclamation point but there's no

9969
06:11:14,320 --> 06:11:23,360
C1 C2 C3 it's just the whole thing is uh

9970
06:11:18,638 --> 06:11:25,600
s but it turns out that a string fun

9971
06:11:23,360 --> 06:11:29,680
fact is really just what underneath the

9972
06:11:25,600 --> 06:11:32,039
hood kind of leading up to this what is

9973
06:11:29,680 --> 06:11:35,040
a string if this is how it's laid out in

9974
06:11:32,040 --> 06:11:36,320
memory literally it's just an array of

9975
06:11:35,040 --> 06:11:38,520
characters and we didn't have to know

9976
06:11:36,320 --> 06:11:39,718
about arrays last week to use strings

9977
06:11:38,520 --> 06:11:42,040
this is where again the training wheels

9978
06:11:39,718 --> 06:11:44,280
are starting to come off but a string is

9979
06:11:42,040 --> 06:11:46,240
just an array of characters Hi

9980
06:11:44,280 --> 06:11:50,160
exclamation point for instance so

9981
06:11:46,240 --> 06:11:53,200
technically an array a string called s

9982
06:11:50,160 --> 06:11:54,718
is really a variable called s that

9983
06:11:53,200 --> 06:11:56,718
allows you to get at the first character

9984
06:11:54,718 --> 06:11:58,638
with s bracket zero if you want s

9985
06:11:56,718 --> 06:12:00,718
bracket 1 s bracket2 you can literally

9986
06:11:58,638 --> 06:12:03,120
get individual characters just by

9987
06:12:00,718 --> 06:12:05,920
treating S as though it's an array which

9988
06:12:03,120 --> 06:12:09,320
it really is underneath the hood in this

9989
06:12:05,920 --> 06:12:12,199
case but there's a catch how do you know

9990
06:12:09,320 --> 06:12:15,000
where strings end in the past when I

9991
06:12:12,200 --> 06:12:16,920
drew some integers on the screen I know

9992
06:12:15,000 --> 06:12:19,240
I claim they always take up four bytes

9993
06:12:16,920 --> 06:12:21,798
if I had drawn a long it always takes up

9994
06:12:19,240 --> 06:12:23,920
eight bytes if I drawn a a character it

9995
06:12:21,798 --> 06:12:27,199
always takes up one bite but how many

9996
06:12:23,920 --> 06:12:28,600
bites does a string take up yeah I mean

9997
06:12:27,200 --> 06:12:30,680
that's kind of the right answer in this

9998
06:12:28,600 --> 06:12:33,840
case three it would seem but if it's

9999
06:12:30,680 --> 06:12:36,120
David that's a good five characters but

10000
06:12:33,840 --> 06:12:37,958
where do we put the number three where

10001
06:12:36,120 --> 06:12:40,039
do you put the number five right this is

10002
06:12:37,958 --> 06:12:42,199
literally all that's into your computer

10003
06:12:40,040 --> 06:12:45,120
this is all our building blocks in front

10004
06:12:42,200 --> 06:12:47,000
of us so how can we where does the three

10005
06:12:45,120 --> 06:12:48,760
go where does the five go well it turns

10006
06:12:47,000 --> 06:12:50,160
out you can solve this in a couple of

10007
06:12:48,760 --> 06:12:52,440
different ways but the way humans

10008
06:12:50,160 --> 06:12:55,360
decided to implement strings years ago

10009
06:12:52,440 --> 06:12:57,798
is indeed an array but they added one

10010
06:12:55,360 --> 06:13:00,360
extra bite at the end of every such

10011
06:12:57,798 --> 06:13:03,239
string array just to make clear with a

10012
06:13:00,360 --> 06:13:05,718
so-called Sentinel value that the string

10013
06:13:03,240 --> 06:13:07,718
ends here why so that if you have two

10014
06:13:05,718 --> 06:13:10,558
strings in the computer's memory like hi

10015
06:13:07,718 --> 06:13:12,120
and by you know where the barrier is

10016
06:13:10,558 --> 06:13:14,360
between like the exclamation point of

10017
06:13:12,120 --> 06:13:16,638
one and the letter B in the next right

10018
06:13:14,360 --> 06:13:19,200
you need some kind of delimiter and so

10019
06:13:16,638 --> 06:13:21,920
what really is underneath the hood is

10020
06:13:19,200 --> 06:13:24,558
this when you store a string in memory

10021
06:13:21,920 --> 06:13:26,399
when you type in a string as the user if

10022
06:13:24,558 --> 06:13:30,120
you type in three characters it's it's

10023
06:13:26,400 --> 06:13:31,920
going to use 3 + 1 = 4 bytes in total if

10024
06:13:30,120 --> 06:13:35,557
you type in David it's going to use 5 +

10025
06:13:31,920 --> 06:13:38,760
1al 6 bytes in total why because C

10026
06:13:35,558 --> 06:13:40,760
automatically adds this special zero at

10027
06:13:38,760 --> 06:13:42,600
the end of the string I've drawn it with

10028
06:13:40,760 --> 06:13:45,519
back SL Zer because this is how you

10029
06:13:42,600 --> 06:13:47,280
represent zero as a Char as a character

10030
06:13:45,520 --> 06:13:49,558
but this is literally just zero as we'll

10031
06:13:47,280 --> 06:13:52,840
soon see so anytime there's a string in

10032
06:13:49,558 --> 06:13:54,878
memory it always takes up one more bite

10033
06:13:52,840 --> 06:13:57,000
than you yourself as the programmer or

10034
06:13:54,878 --> 06:13:58,718
human typed in in fact if we convert

10035
06:13:57,000 --> 06:14:00,520
this again just for discussion sake to

10036
06:13:58,718 --> 06:14:01,680
those integers what's literally stored

10037
06:14:00,520 --> 06:14:06,080
in the computer's memory is going to be

10038
06:14:01,680 --> 06:14:08,000
72 73 33 and now a zero and the computer

10039
06:14:06,080 --> 06:14:09,558
because of c and how it was invented

10040
06:14:08,000 --> 06:14:12,080
it's just smart enough to know that when

10041
06:14:09,558 --> 06:14:14,600
you print out a string it prints out

10042
06:14:12,080 --> 06:14:16,120
every character until it sees a zero and

10043
06:14:14,600 --> 06:14:18,320
then it just stops printing in

10044
06:14:16,120 --> 06:14:21,039
particular printf knows how this works

10045
06:14:18,320 --> 06:14:22,920
and this is why print F knows when to

10046
06:14:21,040 --> 06:14:24,600
stop printing decimal numbers are not

10047
06:14:22,920 --> 06:14:26,280
that enlightening we'll generally write

10048
06:14:24,600 --> 06:14:29,120
the characters like this and again back

10049
06:14:26,280 --> 06:14:30,840
back sl0 is just special symbology like

10050
06:14:29,120 --> 06:14:33,120
it's what the programmer types to make

10051
06:14:30,840 --> 06:14:35,440
clear that you're not saying hi zero

10052
06:14:33,120 --> 06:14:40,200
you're saying hi and then it's a special

10053
06:14:35,440 --> 06:14:41,638
zero specifically it is eight zero bits

10054
06:14:40,200 --> 06:14:44,120
that indicate that it's the end of the

10055
06:14:41,638 --> 06:14:46,680
string technically that back sl0 if you

10056
06:14:44,120 --> 06:14:48,958
want to be fancy it's called null

10057
06:14:46,680 --> 06:14:50,360
NL and it turns out you've seen this

10058
06:14:48,958 --> 06:14:52,160
before that we didn't call it out here's

10059
06:14:50,360 --> 06:14:55,120
that same asky chart from the past

10060
06:14:52,160 --> 06:14:59,760
couple of weeks if I highlight this what

10061
06:14:55,120 --> 06:15:01,360
is decimal number zero mapping to n

10062
06:14:59,760 --> 06:15:03,877
which is just programmer speak for the

10063
06:15:01,360 --> 06:15:06,798
special null character all zero bits

10064
06:15:03,878 --> 06:15:09,000
that means the string ends here this all

10065
06:15:06,798 --> 06:15:11,717
happens automatically for you you do not

10066
06:15:09,000 --> 06:15:12,440
need to create these null characters or

10067
06:15:11,718 --> 06:15:15,000
these

10068
06:15:12,440 --> 06:15:18,920
zeros any questions

10069
06:15:15,000 --> 06:15:22,558
then on this implementation thus

10070
06:15:18,920 --> 06:15:24,679
far any questions here no well let me do

10071
06:15:22,558 --> 06:15:26,878
this let me go back to vs code in a

10072
06:15:24,680 --> 06:15:28,080
second and let's actually corroborate

10073
06:15:26,878 --> 06:15:30,840
this with some code let me go ahead and

10074
06:15:28,080 --> 06:15:32,760
create a small program called high. C

10075
06:15:30,840 --> 06:15:36,400
and how about we do this let me include

10076
06:15:32,760 --> 06:15:38,717
standard i.h let me include uh let me

10077
06:15:36,400 --> 06:15:40,400
type out int main void as always and now

10078
06:15:38,718 --> 06:15:43,680
let me do something simple and kind of

10079
06:15:40,400 --> 06:15:46,680
bad but Char C1 equals quote unquote H

10080
06:15:43,680 --> 06:15:49,040
in single quotes Char C2 equals quote

10081
06:15:46,680 --> 06:15:51,680
unquote I in single quotes and lastly

10082
06:15:49,040 --> 06:15:53,718
Char C3 equals exclamation point in

10083
06:15:51,680 --> 06:15:55,958
single quotes and now let me just print

10084
06:15:53,718 --> 06:15:57,600
this out I can't use percent s cuz that

10085
06:15:55,958 --> 06:15:59,680
is not a string that's literally three

10086
06:15:57,600 --> 06:16:02,280
chars cuz that's the design decision I

10087
06:15:59,680 --> 06:16:04,520
made but I could do this percent C

10088
06:16:02,280 --> 06:16:07,320
percent C percent C which we haven't

10089
06:16:04,520 --> 06:16:10,120
seen before but percent s is string

10090
06:16:07,320 --> 06:16:13,160
percent I is int percent C is indeed uh

10091
06:16:10,120 --> 06:16:16,478
Char so let me put a back sln at the end

10092
06:16:13,160 --> 06:16:19,280
for cleanliness and now do C1 C2 C3 so

10093
06:16:16,478 --> 06:16:21,718
this is like a Char based version of

10094
06:16:19,280 --> 06:16:24,120
printing string so let me make high and

10095
06:16:21,718 --> 06:16:26,240
then let me do/ high and it looks like I

10096
06:16:24,120 --> 06:16:28,000
use print f with percent s but I did

10097
06:16:26,240 --> 06:16:30,200
things very manually by printing out

10098
06:16:28,000 --> 06:16:31,920
each individual character what's cool

10099
06:16:30,200 --> 06:16:33,760
now though is that once you know that

10100
06:16:31,920 --> 06:16:35,920
characters are just numbers and strings

10101
06:16:33,760 --> 06:16:37,920
are just characters you can kind of poke

10102
06:16:35,920 --> 06:16:41,958
around let me change all three

10103
06:16:37,920 --> 06:16:44,280
placeholders to percent i instead and

10104
06:16:41,958 --> 06:16:46,160
this is totally fine too let me rerun

10105
06:16:44,280 --> 06:16:50,399
this make

10106
06:16:46,160 --> 06:16:51,718
High um actually let me make one change

10107
06:16:50,400 --> 06:16:54,120
just so we can see this let me add

10108
06:16:51,718 --> 06:16:58,360
spaces just for Aesthetics sake let me

10109
06:16:54,120 --> 06:16:59,718
do make high do SL High enter and voila

10110
06:16:58,360 --> 06:17:01,718
like now you can actually see the

10111
06:16:59,718 --> 06:17:03,760
numbers that I claimed back in week zero

10112
06:17:01,718 --> 06:17:05,360
were in fact happening underneath the

10113
06:17:03,760 --> 06:17:06,760
hood well this is not how you would make

10114
06:17:05,360 --> 06:17:09,040
strings it'd be incredibly tedious to

10115
06:17:06,760 --> 06:17:10,717
have three variables for threel Words

10116
06:17:09,040 --> 06:17:12,320
five variables for five letter words

10117
06:17:10,718 --> 06:17:14,798
we've been using of course strings since

10118
06:17:12,320 --> 06:17:17,680
last week so let's do that instead uh

10119
06:17:14,798 --> 06:17:21,557
string uh s equals quote unquote double

10120
06:17:17,680 --> 06:17:23,280
quotes high for this no because of these

10121
06:17:21,558 --> 06:17:25,320
training wheels I need to include the

10122
06:17:23,280 --> 06:17:27,280
cs50 library but we'll come back to that

10123
06:17:25,320 --> 06:17:29,680
in the coming week but for now I'm going

10124
06:17:27,280 --> 06:17:32,120
to go ahead and create a string s called

10125
06:17:29,680 --> 06:17:34,760
quote unquote high and now I'm going to

10126
06:17:32,120 --> 06:17:37,718
change this to be my familiar percent s

10127
06:17:34,760 --> 06:17:39,920
and now just print out s itself this of

10128
06:17:37,718 --> 06:17:41,920
course is the same thing as last week

10129
06:17:39,920 --> 06:17:44,760
high gives me the exact same thing but

10130
06:17:41,920 --> 06:17:47,320
now we're dealing of course with strings

10131
06:17:44,760 --> 06:17:49,280
but how can we see a little beyond that

10132
06:17:47,320 --> 06:17:51,718
well how about this let's poke around

10133
06:17:49,280 --> 06:17:54,280
further with today's Primitives even

10134
06:17:51,718 --> 06:17:56,400
though s is a string I could technically

10135
06:17:54,280 --> 06:17:59,199
print out its first character with

10136
06:17:56,400 --> 06:18:00,520
percent C by doing s bracket z i could

10137
06:17:59,200 --> 06:18:02,200
technically print out its second

10138
06:18:00,520 --> 06:18:04,240
character with percent C by doing s

10139
06:18:02,200 --> 06:18:06,360
bracket one I could print out its third

10140
06:18:04,240 --> 06:18:08,400
character with percent C and printing

10141
06:18:06,360 --> 06:18:10,280
out s bracket 2 so again this just

10142
06:18:08,400 --> 06:18:12,080
derives logically from my understanding

10143
06:18:10,280 --> 06:18:16,520
now of that strings or arrays as you

10144
06:18:12,080 --> 06:18:18,600
note let me do make let me do make high

10145
06:18:16,520 --> 06:18:20,718
SL high and no visual change but I'm

10146
06:18:18,600 --> 06:18:22,638
just kind of now tinkering around and in

10147
06:18:20,718 --> 06:18:25,600
fact if you're really curious let me do

10148
06:18:22,638 --> 06:18:28,600
this let me change these back to I back

10149
06:18:25,600 --> 06:18:30,920
to I I oops back to I and let me add a

10150
06:18:28,600 --> 06:18:34,600
fourth one because if I'm really curious

10151
06:18:30,920 --> 06:18:36,638
now let's see it what's S braet 3 this