20303
12:47:28,640 --> 12:47:32,560
memory but I think this is going to get

20304
12:47:30,596 --> 12:47:34,000
me in trouble pointer equals list just

20305
12:47:32,560 --> 12:47:36,159
gives me a temporary pointer that points

20306
12:47:34,000 --> 12:47:38,200
at the three and then eventually the two

20307
12:47:36,160 --> 12:47:40,116
and then the one how well while pointer

20308
12:47:38,200 --> 12:47:41,916
not equal null I'm freeing the pointer

20309
12:47:40,116 --> 12:47:45,116
so this is like saying to Malo free that

20310
12:47:41,916 --> 12:47:46,956
node free that node free that node but

20311
12:47:45,116 --> 12:47:48,320
what's the problem with what I've just

20312
12:47:46,956 --> 12:47:52,500
done

20313
12:47:48,320 --> 12:47:54,596
here this code is technically Bugg

20314
12:47:52,500 --> 12:47:57,756
[Music]

20315
12:47:54,596 --> 12:48:00,520
yeah exactly after you call free on

20316
12:47:57,756 --> 12:48:03,360
pointer You Are by social contract with

20317
12:48:00,520 --> 12:48:05,276
c not allowed to touch pointer anymore

20318
12:48:03,360 --> 12:48:06,276
it is invalid now it's still going to be

20319
12:48:05,276 --> 12:48:08,560
a number it's still going to be a

20320
12:48:06,276 --> 12:48:11,115
pattern of bits but it's invalid and

20321
12:48:08,560 --> 12:48:13,799
you'll very often get a segmentation

20322
12:48:11,116 --> 12:48:15,640
fault if you tempt fate in that way so I

20323
12:48:13,800 --> 12:48:17,756
can't free the pointer and then use it

20324
12:48:15,640 --> 12:48:19,360
literally the next line the solution

20325
12:48:17,756 --> 12:48:21,480
here kind of like our swapping of the

20326
12:48:19,360 --> 12:48:23,000
liquids last time was to maybe just have

20327
12:48:21,480 --> 12:48:25,320
a temporary variable so I can do a

20328
12:48:23,000 --> 12:48:26,680
Switcheroo and so a common way to solve

20329
12:48:25,320 --> 12:48:28,200
this problem to get the order of

20330
12:48:26,680 --> 12:48:29,800
operations right would be to do

20331
12:48:28,200 --> 12:48:33,159
something like this give yourself a

20332
12:48:29,800 --> 12:48:36,116
temporary pointer like node star next

20333
12:48:33,160 --> 12:48:39,680
set it equal to the place you want to go

20334
12:48:36,116 --> 12:48:42,240
next so one step ahead now you can free

20335
12:48:39,680 --> 12:48:44,436
pointer and then you can update pointer

20336
12:48:42,240 --> 12:48:46,520
to be that next value so essentially you

20337
12:48:44,436 --> 12:48:48,800
need need like two hands now you create

20338
12:48:46,520 --> 12:48:51,560
on line 41 another pointer that if this

20339
12:48:48,800 --> 12:48:53,320
is pointing at the first Noe the three

20340
12:48:51,560 --> 12:48:55,799
your new pointer is pointing at the two

20341
12:48:53,320 --> 12:48:58,560
temporarily so now you can tell malok

20342
12:48:55,800 --> 12:49:00,436
via free release this memory but I

20343
12:48:58,560 --> 12:49:03,720
haven't forgotten where I want to go

20344
12:49:00,436 --> 12:49:06,240
next and so I can now continue on so a

20345
12:49:03,720 --> 12:49:08,276
common Paradigm for just iterating over

20346
12:49:06,240 --> 12:49:10,680
these nodes and then freeing them a

20347
12:49:08,276 --> 12:49:12,276
couple of observations strictly speaking

20348
12:49:10,680 --> 12:49:14,840
I could have Consolidated this I don't

20349
12:49:12,276 --> 12:49:16,640
need two Loops to print the nodes and

20350
12:49:14,840 --> 12:49:18,115
then free the nodes I could do that all

20351
12:49:16,640 --> 12:49:19,956
at once but let's assume that there's

20352
12:49:18,116 --> 12:49:21,116
other stuff of interest in my program

20353
12:49:19,956 --> 12:49:22,840
and I don't want to just immediately

20354
12:49:21,116 --> 12:49:25,200
free it there's one other bug that I

20355
12:49:22,840 --> 12:49:27,399
should probably address here there is

20356
12:49:25,200 --> 12:49:29,799
still a potential memory leak up here

20357
12:49:27,400 --> 12:49:32,240
and this one is super subtle the valind

20358
12:49:29,800 --> 12:49:35,240
would help you find it notice that in

20359
12:49:32,240 --> 12:49:36,916
this Loop here when I'm calling malok

20360
12:49:35,240 --> 12:49:39,640
this line of code is fine if the first

20361
12:49:36,916 --> 12:49:41,000
line of malok fails and returns null

20362
12:49:39,640 --> 12:49:43,560
because I immediately return and I'm

20363
12:49:41,000 --> 12:49:45,480
done but what if the second call but not

20364
12:49:43,560 --> 12:49:47,956
the first or the third call but not the

20365
12:49:45,480 --> 12:49:50,276
first or second fail this line of code

20366
12:49:47,956 --> 12:49:52,479
has me returning immediately you really

20367
12:49:50,276 --> 12:49:54,320
need to to do some garbage collection so

20368
12:49:52,480 --> 12:49:56,720
to speak whereby you really need to go

20369
12:49:54,320 --> 12:49:58,596
in and free any nodes that you did

20370
12:49:56,720 --> 12:49:59,640
allocate successfully earlier honestly

20371
12:49:58,596 --> 12:50:01,799
that's going to be a pin in the neck we

20372
12:49:59,640 --> 12:50:03,320
won't do that here but probably what I'd

20373
12:50:01,800 --> 12:50:05,480
want to do is write a function called

20374
12:50:03,320 --> 12:50:07,436
free list or something like that and

20375
12:50:05,480 --> 12:50:09,956
call that function to free any nodes I

20376
12:50:07,436 --> 12:50:11,840
had previously created so it's not quite

20377
12:50:09,956 --> 12:50:17,000
at the finish line but the building

20378
12:50:11,840 --> 12:50:19,799
blocks are indeed here questions on this

20379
12:50:17,000 --> 12:50:21,680
code and I think it's safe for me to

20380
12:50:19,800 --> 12:50:23,200
promise that it won't escalate further

20381
12:50:21,680 --> 12:50:26,060
from

20382
12:50:23,200 --> 12:50:27,200
that questions on

20383
12:50:26,060 --> 12:50:29,880
[Music]

20384
12:50:27,200 --> 12:50:31,596
this no well let me show you one

20385
12:50:29,880 --> 12:50:33,040
alternative that you might prefer and

20386
12:50:31,596 --> 12:50:34,956
I'm pretty sure this isn't an escalation

20387
12:50:33,040 --> 12:50:36,880
it's just an alternative formulation

20388
12:50:34,956 --> 12:50:38,916
another way you can iterate over nodes

20389
12:50:36,880 --> 12:50:40,840
in a list could be this instead of a

20390
12:50:38,916 --> 12:50:42,520
while loop for instance let me actually

20391
12:50:40,840 --> 12:50:44,320
show you one other piece of syntax here

20392
12:50:42,520 --> 12:50:46,435
you could technically use a for Loop you

20393
12:50:44,320 --> 12:50:48,400
could give yourself a node pointer here

20394
12:50:46,436 --> 12:50:50,400
that initialized is initialized to the

20395
12:50:48,400 --> 12:50:52,080
list you can then check in your for Loop

20396
12:50:50,400 --> 12:50:54,680
that it's not equal to null and then you

20397
12:50:52,080 --> 12:50:56,680
can do your update as usual like this

20398
12:50:54,680 --> 12:50:58,720
either of these are equivalent even

20399
12:50:56,680 --> 12:51:00,680
though this one I suspect looks scarier

20400
12:50:58,720 --> 12:51:02,800
it's doing the exact same thing in one

20401
12:51:00,680 --> 12:51:04,756
line instead of two but there's no

20402
12:51:02,800 --> 12:51:06,756
reason we can't use four Loops instead

20403
12:51:04,756 --> 12:51:07,840
of while Loops to achieve the same idea

20404
12:51:06,756 --> 12:51:09,520
but I'll leave these two as

20405
12:51:07,840 --> 12:51:11,399
demonstrations of one approach or the

20406
12:51:09,520 --> 12:51:13,479
other but that's just like in week one

20407
12:51:11,400 --> 12:51:15,880
four Loops while Loops whatever looks

20408
12:51:13,480 --> 12:51:18,080
simpler to you even though admittedly

20409
12:51:15,880 --> 12:51:20,880
neither of these probably looks super

20410
12:51:18,080 --> 12:51:23,400
clean all right so let's take the back

20411
12:51:20,880 --> 12:51:25,360
to things more conceptual here up until

20412
12:51:23,400 --> 12:51:28,116
now we've been inserting elements into

20413
12:51:25,360 --> 12:51:30,080
this link list by prepending them let's

20414
12:51:28,116 --> 12:51:31,640
consider what the running time then is

20415
12:51:30,080 --> 12:51:34,200
of these operations so if I've got a

20416
12:51:31,640 --> 12:51:35,916
link list of size three or size N More

20417
12:51:34,200 --> 12:51:37,520
generally time has passed and I've added

20418
12:51:35,916 --> 12:51:38,916
a lot of things to it what's going to be

20419
12:51:37,520 --> 12:51:41,880
the running time for instance of

20420
12:51:38,916 --> 12:51:43,719
searching a linked list for some value

20421
12:51:41,880 --> 12:51:45,320
and I'll tell you already it's not login

20422
12:51:43,720 --> 12:51:49,040
because again binary search is off the

20423
12:51:45,320 --> 12:51:50,520
table as per before break so what might

20424
12:51:49,040 --> 12:51:54,080
the running time be of searching a

20425
12:51:50,520 --> 12:51:55,640
linked list for some value like two or

20426
12:51:54,080 --> 12:51:59,916
three or 1 or

20427
12:51:55,640 --> 12:52:03,040
50 what might the running time

20428
12:51:59,916 --> 12:52:05,276
be o of I heard it over here o of n and

20429
12:52:03,040 --> 12:52:07,596
y who was that oh in the middle here why

20430
12:52:05,276 --> 12:52:07,596
o of

20431
12:52:07,910 --> 12:52:11,956
[Music]

20432
12:52:10,080 --> 12:52:13,520
n exactly you're going to have to go

20433
12:52:11,956 --> 12:52:15,116
through every item in the list starting

20434
12:52:13,520 --> 12:52:16,399
from the left from the beginning which

20435
12:52:15,116 --> 12:52:18,240
is how we've been drawing things and

20436
12:52:16,400 --> 12:52:19,560
connecting the dots and in the worst

20437
12:52:18,240 --> 12:52:21,159
case the element might very well be at

20438
12:52:19,560 --> 12:52:24,479
the very end so it's going to be Big O

20439
12:52:21,160 --> 12:52:26,436
of n what about insertion how many steps

20440
12:52:24,480 --> 12:52:28,680
in terms of Big O notation has it been

20441
12:52:26,436 --> 12:52:32,840
taking me to insert elements into the

20442
12:52:28,680 --> 12:52:32,840
link list using this prepended

20443
12:52:32,956 --> 12:52:38,040
design yeah so it's technically constant

20444
12:52:35,596 --> 12:52:39,680
time Big O of one and again one is just

20445
12:52:38,040 --> 12:52:41,436
representative of any constant it could

20446
12:52:39,680 --> 12:52:43,756
technically be two steps or three steps

20447
12:52:41,436 --> 12:52:47,520
or even 10 steps or 100 steps but if

20448
12:52:43,756 --> 12:52:49,680
it's always finite and fixed then indeed

20449
12:52:47,520 --> 12:52:51,435
you can say it's in Big O of one now why

20450
12:52:49,680 --> 12:52:53,480
is that well over again no matter how

20451
12:52:51,436 --> 12:52:55,360
long this list gets so long as there's

20452
12:52:53,480 --> 12:52:57,640
memory available for me I can just kind

20453
12:52:55,360 --> 12:52:59,000
of uh create a little splice at the

20454
12:52:57,640 --> 12:53:01,159
beginning of the list to put in the new

20455
12:52:59,000 --> 12:53:02,956
node update the original list and I'm on

20456
12:53:01,160 --> 12:53:04,240
my way and it keeps getting longer even

20457
12:53:02,956 --> 12:53:06,956
though it might not be spread out in

20458
12:53:04,240 --> 12:53:09,596
memory so big O of one is possible with

20459
12:53:06,956 --> 12:53:12,000
these link lists if I indeed Preen

20460
12:53:09,596 --> 12:53:13,640
things of course if I Preen things

20461
12:53:12,000 --> 12:53:14,596
everything's going to get out of order

20462
12:53:13,640 --> 12:53:16,436
potentially and we're going to have

20463
12:53:14,596 --> 12:53:17,756
maybe the stack property instead of a q

20464
12:53:16,436 --> 12:53:20,080
property so we might want to do things

20465
12:53:17,756 --> 12:53:20,956
slightly differently so instead of doing

20466
12:53:20,080 --> 12:53:23,400
this

20467
12:53:20,956 --> 12:53:25,880
whereby we kept prepending prepending

20468
12:53:23,400 --> 12:53:28,040
prepending suppose we append to the end

20469
12:53:25,880 --> 12:53:29,680
of the list instead so if we now insert

20470
12:53:28,040 --> 12:53:31,680
the one the two and the three as we

20471
12:53:29,680 --> 12:53:33,680
might want to for a q to maintain that

20472
12:53:31,680 --> 12:53:36,400
fairness property we might start with an

20473
12:53:33,680 --> 12:53:39,480
empty list we might add the one we might

20474
12:53:36,400 --> 12:53:41,000
append the two append the three and so

20475
12:53:39,480 --> 12:53:42,756
it just is sort of laid out differently

20476
12:53:41,000 --> 12:53:44,360
in memory and again if I can come to you

20477
12:53:42,756 --> 12:53:46,680
in the middle what's the running time of

20478
12:53:44,360 --> 12:53:49,116
search again when the link list uses

20479
12:53:46,680 --> 12:53:51,480
this append

20480
12:53:49,116 --> 12:53:52,720
implementation yeah still Big O of n

20481
12:53:51,480 --> 12:53:54,320
because in the worst case you're going

20482
12:53:52,720 --> 12:53:56,240
to have to go through the whole list

20483
12:53:54,320 --> 12:53:58,080
just to find it and notice it doesn't

20484
12:53:56,240 --> 12:54:00,000
matter if you have an intuition now that

20485
12:53:58,080 --> 12:54:02,400
the bigger numbers might very well be at

20486
12:54:00,000 --> 12:54:03,880
the end you have no way to jump to the

20487
12:54:02,400 --> 12:54:05,720
end you have no way to jump to the

20488
12:54:03,880 --> 12:54:07,956
middle or do anything resembling binary

20489
12:54:05,720 --> 12:54:10,680
search every search has to start from

20490
12:54:07,956 --> 12:54:12,276
the left and follow the arrows again and

20491
12:54:10,680 --> 12:54:13,720
again all right so I don't think we've

20492
12:54:12,276 --> 12:54:16,840
done any better there and in fact what

20493
12:54:13,720 --> 12:54:18,596
is insertions running time now in Big O

20494
12:54:16,840 --> 12:54:20,880
when we're appending to the list in this

20495
12:54:18,596 --> 12:54:23,560
way as we might to implement a Q instead

20496
12:54:20,880 --> 12:54:25,916
of a stack what's the running time of

20497
12:54:23,560 --> 12:54:28,360
inserting a new

20498
12:54:25,916 --> 12:54:31,520
value Big O

20499
12:54:28,360 --> 12:54:34,880
of so not Big O of one in this case but

20500
12:54:31,520 --> 12:54:37,240
Big O of n because if I'm appending by

20501
12:54:34,880 --> 12:54:38,956
definition I have to start here and

20502
12:54:37,240 --> 12:54:40,436
Traverse the whole thing looking for the

20503
12:54:38,956 --> 12:54:41,916
end now this is a bit of an

20504
12:54:40,436 --> 12:54:43,880
overstatement right you could obviously

20505
12:54:41,916 --> 12:54:46,360
optimize this slightly by maybe adding

20506
12:54:43,880 --> 12:54:48,755
another variable that always points to

20507
12:54:46,360 --> 12:54:50,276
the last element sort of a cheat sheet a

20508
12:54:48,756 --> 12:54:52,080
shortcut that gets you all the way to to

20509
12:54:50,276 --> 12:54:53,320
the end that's totally fine it's not

20510
12:54:52,080 --> 12:54:55,240
doesn't really fit the traditional

20511
12:54:53,320 --> 12:54:56,956
definition of a singly linked list but

20512
12:54:55,240 --> 12:54:58,596
there's absolutely smart engineering

20513
12:54:56,956 --> 12:55:00,596
solutions to these kinds of problems but

20514
12:54:58,596 --> 12:55:02,880
as designed it would indeed be Big O of

20515
12:55:00,596 --> 12:55:04,399
end to insert to if you've got to go all

20516
12:55:02,880 --> 12:55:06,640
the way to the end and you're not using

20517
12:55:04,400 --> 12:55:08,360
a little extra memory to get yourself

20518
12:55:06,640 --> 12:55:11,040
there quickly well what if we want to

20519
12:55:08,360 --> 12:55:12,800
take things one last step and not just a

20520
12:55:11,040 --> 12:55:15,080
pen blindly because even though I

20521
12:55:12,800 --> 12:55:17,040
inserted one two three if I inserted

20522
12:55:15,080 --> 12:55:18,596
them in random order they would end up

20523
12:55:17,040 --> 12:55:21,240
in random order what if you want to

20524
12:55:18,596 --> 12:55:22,916
maintain a sorted list from smallest to

20525
12:55:21,240 --> 12:55:24,756
largest well then you might want to

20526
12:55:22,916 --> 12:55:27,916
insert numbers like this starting from

20527
12:55:24,756 --> 12:55:30,160
an empty list we might have a two then

20528
12:55:27,916 --> 12:55:32,000
we might try inserting a one but we want

20529
12:55:30,160 --> 12:55:34,276
to keep it sorted so now we're going to

20530
12:55:32,000 --> 12:55:36,480
prepend in our code but then you might

20531
12:55:34,276 --> 12:55:38,479
want to insert a four so you would

20532
12:55:36,480 --> 12:55:39,916
append the four because you're probably

20533
12:55:38,480 --> 12:55:42,080
going to look for the right spot to

20534
12:55:39,916 --> 12:55:43,596
insert it then we're going to insert a

20535
12:55:42,080 --> 12:55:45,200
three and this one's getting a little

20536
12:55:43,596 --> 12:55:47,560
annoying because now you have to like

20537
12:55:45,200 --> 12:55:50,399
iterate over the list look for the right

20538
12:55:47,560 --> 12:55:52,320
spot and then do a little smarter of a

20539
12:55:50,400 --> 12:55:54,436
splice but it's possible but you don't

20540
12:55:52,320 --> 12:55:56,596
want to Orphan the four for instance and

20541
12:55:54,436 --> 12:55:58,800
then ultimately we get back to this

20542
12:55:56,596 --> 12:56:00,720
question what would the performance be

20543
12:55:58,800 --> 12:56:04,680
of your linked list if you're trying to

20544
12:56:00,720 --> 12:56:06,200
maintain sorted order well search I

20545
12:56:04,680 --> 12:56:09,320
think is going to be Big O of n for the

20546
12:56:06,200 --> 12:56:13,079
same reasons as before what about

20547
12:56:09,320 --> 12:56:16,520
insertion big go of what for inserting

20548
12:56:13,080 --> 12:56:18,800
into a sorted linked

20549
12:56:16,520 --> 12:56:21,479
list yeah in the worst

20550
12:56:18,800 --> 12:56:23,360
case yeah it's still Big O ofen so it's

20551
12:56:21,480 --> 12:56:25,240
no worse than but it's not really any

20552
12:56:23,360 --> 12:56:27,160
better than a pending but we gain the

20553
12:56:25,240 --> 12:56:28,916
additional property of maintaining a

20554
12:56:27,160 --> 12:56:30,560
sorted list which might very well be

20555
12:56:28,916 --> 12:56:32,200
useful if you're sorting your contacts

20556
12:56:30,560 --> 12:56:33,799
in your phone or something like that

20557
12:56:32,200 --> 12:56:35,755
where it just maintain makes sense to

20558
12:56:33,800 --> 12:56:37,480
maintain sorted order now in the code

20559
12:56:35,756 --> 12:56:39,756
for online today if you take a look at

20560
12:56:37,480 --> 12:56:43,160
some of the final versions of code like

20561
12:56:39,756 --> 12:56:44,840
list 6. C and list 5.c as we'll post on

20562
12:56:43,160 --> 12:56:46,520
the website you can actually see code

20563
12:56:44,840 --> 12:56:48,320
that will solve all three of these

20564
12:56:46,520 --> 12:56:50,320
problems the Preen version that we wrote

20565
12:56:48,320 --> 12:56:52,560
live the appen version which we talk

20566
12:56:50,320 --> 12:56:54,756
through as well as this sorted order one

20567
12:56:52,560 --> 12:56:56,079
but I think I'll avoid showing it live

20568
12:56:54,756 --> 12:56:57,640
just because I do think that starts to

20569
12:56:56,080 --> 12:56:59,000
escalate quickly but I think we have

20570
12:56:57,640 --> 12:57:01,116
enough of a building block if we're

20571
12:56:59,000 --> 12:57:03,116
comfortable with prepending to at least

20572
12:57:01,116 --> 12:57:04,400
solve some real world problems with

20573
12:57:03,116 --> 12:57:07,520
these link

20574
12:57:04,400 --> 12:57:10,956
lists questions then on link list which

20575
12:57:07,520 --> 12:57:14,640
we'll now leave behind on their own but

20576
12:57:10,956 --> 12:57:16,880
now use this technique to solve fancier

20577
12:57:14,640 --> 12:57:21,000
problems but much less

20578
12:57:16,880 --> 12:57:24,000
code questions on linked list all right

20579
12:57:21,000 --> 12:57:25,720
so to C recap we've kind of taken a s

20580
12:57:24,000 --> 12:57:27,480
side step with link list like we have

20581
12:57:25,720 --> 12:57:30,200
this dynamism now where we can grow and

20582
12:57:27,480 --> 12:57:31,436
Shrink our chunks of memory without over

20583
12:57:30,200 --> 12:57:33,240
allocating or accidentally

20584
12:57:31,436 --> 12:57:35,240
underallocation as in the world of an

20585
12:57:33,240 --> 12:57:37,240
array we don't have to worry about

20586
12:57:35,240 --> 12:57:38,799
copying values endlessly because once

20587
12:57:37,240 --> 12:57:40,360
you allocate the node it can just stay

20588
12:57:38,800 --> 12:57:42,480
wherever it is in memory and you can

20589
12:57:40,360 --> 12:57:44,520
just maintain uh you can just Stitch it

20590
12:57:42,480 --> 12:57:46,436
together somehow but unfortunately we've

20591
12:57:44,520 --> 12:57:48,079
sacrificed what we started the class

20592
12:57:46,436 --> 12:57:50,040
with in week zero which was like binary

20593
12:57:48,080 --> 12:57:52,680
search divide and conquer which was like

20594
12:57:50,040 --> 12:57:54,400
gave us that log and running time which

20595
12:57:52,680 --> 12:57:56,320
was really compelling if you think back

20596
12:57:54,400 --> 12:57:58,680
to the demonstrations and the the

20597
12:57:56,320 --> 12:58:02,040
visuals can we get the best of both

20598
12:57:58,680 --> 12:58:04,200
worlds can we get the sort of uh speed

20599
12:58:02,040 --> 12:58:06,000
of binary search something logarithmic

20600
12:58:04,200 --> 12:58:08,320
but the dynamism of something like a

20601
12:58:06,000 --> 12:58:10,360
link list well we can actually I think

20602
12:58:08,320 --> 12:58:12,800
if we start to think not in a single

20603
12:58:10,360 --> 12:58:15,000
Dimension just the x-axis if you will

20604
12:58:12,800 --> 12:58:17,200
but two Dimensions such that our data

20605
12:58:15,000 --> 12:58:19,320
structures can maybe now have width and

20606
12:58:17,200 --> 12:58:21,320
height if you will and so a tree is

20607
12:58:19,320 --> 12:58:23,080
perhaps the right term here much like a

20608
12:58:21,320 --> 12:58:24,840
family tree if you have sort of your

20609
12:58:23,080 --> 12:58:26,596
elders up here in the tree and then the

20610
12:58:24,840 --> 12:58:28,479
branches below them for their children

20611
12:58:26,596 --> 12:58:29,916
and grandchildren and the like that's

20612
12:58:28,480 --> 12:58:31,800
actually what a computer scientist means

20613
12:58:29,916 --> 12:58:33,680
when they talk about trees not a tree

20614
12:58:31,800 --> 12:58:35,640
that grows up like this but really one

20615
12:58:33,680 --> 12:58:37,360
that typically is depicted growing down

20616
12:58:35,640 --> 12:58:39,080
although this is just an artist's

20617
12:58:37,360 --> 12:58:41,000
depiction no matter what but there are

20618
12:58:39,080 --> 12:58:43,400
certain types of trees in the world

20619
12:58:41,000 --> 12:58:45,596
called binary search trees that are

20620
12:58:43,400 --> 12:58:48,520
structured on paper and in visually like

20621
12:58:45,596 --> 12:58:50,276
a uh family tree but they have a special

20622
12:58:48,520 --> 12:58:52,840
property that lends themselves to

20623
12:58:50,276 --> 12:58:55,115
exactly that feature binary search so

20624
12:58:52,840 --> 12:58:57,039
for instance here is an array back from

20625
12:58:55,116 --> 12:58:59,956
week two and I've sorted a whole bunch

20626
12:58:57,040 --> 12:59:02,000
of numbers here in from 1 to seven we

20627
12:58:59,956 --> 12:59:04,240
know we can do binary search on this

20628
12:59:02,000 --> 12:59:06,680
structure if it's implemented as an

20629
12:59:04,240 --> 12:59:09,680
array but what feature do arrays to be

20630
12:59:06,680 --> 12:59:12,000
clear not have that link lists

20631
12:59:09,680 --> 12:59:14,320
do today's kind of a seesaw like what

20632
12:59:12,000 --> 12:59:16,520
did we just gain by adding link list

20633
12:59:14,320 --> 12:59:18,756
that arrays do not

20634
12:59:16,520 --> 12:59:21,596
allow

20635
12:59:18,756 --> 12:59:23,360
yeah

20636
12:59:21,596 --> 12:59:25,040
yeah you can insert more elements

20637
12:59:23,360 --> 12:59:26,640
without having to copy or moving

20638
12:59:25,040 --> 12:59:29,436
everything else around like right now in

20639
12:59:26,640 --> 12:59:31,756
this single Dimension if these values to

20640
12:59:29,436 --> 12:59:33,240
the left and or right are already used

20641
12:59:31,756 --> 12:59:34,880
then you have to move everything and

20642
12:59:33,240 --> 12:59:36,640
that's where we started today's story so

20643
12:59:34,880 --> 12:59:38,560
arrays kind of paint you into a corner

20644
12:59:36,640 --> 12:59:40,520
because you have to by definition decide

20645
12:59:38,560 --> 12:59:42,840
in advance how big they are well

20646
12:59:40,520 --> 12:59:45,640
couldn't we have some kind of array that

20647
12:59:42,840 --> 12:59:48,479
can still grow but still is contiguous

20648
12:59:45,640 --> 12:59:51,240
so we can do binary search in some way

20649
12:59:48,480 --> 12:59:53,400
well yes if we sort of rethink how we

20650
12:59:51,240 --> 12:59:56,840
Implement binary search Let Me propose

20651
12:59:53,400 --> 12:59:58,436
that this I've chosen these seven

20652
12:59:56,840 --> 13:00:01,719
elements in the array much like the

20653
12:59:58,436 --> 13:00:03,240
lockers from uh week two to be ordered

20654
13:00:01,720 --> 13:00:05,200
from smallest to largest I've

20655
13:00:03,240 --> 13:00:07,276
highlighted now in yellow the middle

20656
13:00:05,200 --> 13:00:09,079
elements here and if we were telling the

20657
13:00:07,276 --> 13:00:11,520
story of week two going left or going

20658
13:00:09,080 --> 13:00:13,520
right let me highlight in red the middle

20659
13:00:11,520 --> 13:00:15,435
elements of the left half and the right

20660
13:00:13,520 --> 13:00:18,159
half and then let me further highlight

20661
13:00:15,436 --> 13:00:21,400
in green the other elements in between

20662
13:00:18,160 --> 13:00:23,116
those and there's a pattern here as you

20663
13:00:21,400 --> 13:00:24,640
might notice whereby there's one yellow

20664
13:00:23,116 --> 13:00:26,560
in the middle and then there's the two

20665
13:00:24,640 --> 13:00:28,680
red and the four green there's kind of

20666
13:00:26,560 --> 13:00:30,399
an implicit structure there if you will

20667
13:00:28,680 --> 13:00:32,436
and what if I do start to think in two

20668
13:00:30,400 --> 13:00:35,840
dimensions and instead of laying out an

20669
13:00:32,436 --> 13:00:38,116
array of lockers like this on the x-axis

20670
13:00:35,840 --> 13:00:41,320
only what if I kind of like Slide the

20671
13:00:38,116 --> 13:00:44,276
four up and pull the uh the the one the

20672
13:00:41,320 --> 13:00:46,680
three the five down and kind of draw

20673
13:00:44,276 --> 13:00:49,880
this in two Dimensions instead well let

20674
13:00:46,680 --> 13:00:52,560
me do that as by separating these things

20675
13:00:49,880 --> 13:00:54,320
like this such that now let me propose

20676
13:00:52,560 --> 13:00:56,399
that each of these squares maybe it

20677
13:00:54,320 --> 13:00:58,560
doesn't have to be contiguous it can be

20678
13:00:56,400 --> 13:01:01,240
anywhere in the computer's memory but I

20679
13:00:58,560 --> 13:01:03,200
can't have these crazy gaps among them

20680
13:01:01,240 --> 13:01:06,000
how could I perhaps keep these things

20681
13:01:03,200 --> 13:01:08,956
connected conceptually what should I add

20682
13:01:06,000 --> 13:01:08,956
to the picture if you

20683
13:01:09,200 --> 13:01:15,755
will yeah branches say again so branches

20684
13:01:13,596 --> 13:01:17,795
metaphorically here and more technically

20685
13:01:15,756 --> 13:01:20,480
in the language of C maybe just some

20686
13:01:17,796 --> 13:01:22,240
arrows some pointers so I won't bother

20687
13:01:20,480 --> 13:01:23,436
drawing things as rectangles constantly

20688
13:01:22,240 --> 13:01:25,479
let me propose that we're now just

20689
13:01:23,436 --> 13:01:27,080
abstracting away what a node is but let

20690
13:01:25,480 --> 13:01:29,116
me claim that each of these squares now

20691
13:01:27,080 --> 13:01:30,840
is a node and a node might have a number

20692
13:01:29,116 --> 13:01:33,320
but it might also have a pointer heck

20693
13:01:30,840 --> 13:01:35,079
maybe even two or more pointers and let

20694
13:01:33,320 --> 13:01:37,720
me draw those now I don't care about

20695
13:01:35,080 --> 13:01:39,360
addresses like ox1 2 3 4 5 6 7 8 n

20696
13:01:37,720 --> 13:01:42,320
anymore let's just draw our pointers

20697
13:01:39,360 --> 13:01:46,560
with arrows but now let me propose that

20698
13:01:42,320 --> 13:01:49,520
we could very well think about this as a

20699
13:01:46,560 --> 13:01:52,399
tree storing what was previous

20700
13:01:49,520 --> 13:01:55,039
previously array data but now each of

20701
13:01:52,400 --> 13:01:56,640
these nodes can be anywhere in memory

20702
13:01:55,040 --> 13:01:58,320
and moreover even though I've kind of

20703
13:01:56,640 --> 13:02:00,000
painted myself into a corner visually on

20704
13:01:58,320 --> 13:02:01,916
the screen so long as there's more

20705
13:02:00,000 --> 13:02:04,200
memory in the computer I could put the

20706
13:02:01,916 --> 13:02:06,360
number zero over here I could put the

20707
13:02:04,200 --> 13:02:08,520
number eight over here and I'm if I'm

20708
13:02:06,360 --> 13:02:11,480
smart I could probably if I want to

20709
13:02:08,520 --> 13:02:13,159
insert other numbers like 2.5 or 1.5 or

20710
13:02:11,480 --> 13:02:15,480
values in between you know I bet we

20711
13:02:13,160 --> 13:02:17,240
could kind of make room by swiveling

20712
13:02:15,480 --> 13:02:19,756
things around and just kind of hanging

20713
13:02:17,240 --> 13:02:21,880
things off of these branches slightly

20714
13:02:19,756 --> 13:02:24,160
differently and so what does this gain

20715
13:02:21,880 --> 13:02:26,880
me well if I instead start to model my

20716
13:02:24,160 --> 13:02:29,360
data not single dimensionally but in two

20717
13:02:26,880 --> 13:02:32,360
dimensions and I connect those nodes

20718
13:02:29,360 --> 13:02:34,160
with these pointers what can I now do I

20719
13:02:32,360 --> 13:02:36,080
think I just gave myself back binary

20720
13:02:34,160 --> 13:02:38,400
search why suppose I'm searching for the

20721
13:02:36,080 --> 13:02:39,680
number five how do I find it Well just

20722
13:02:38,400 --> 13:02:41,160
like in a family tree where you might

20723
13:02:39,680 --> 13:02:42,840
visually start reading from top to

20724
13:02:41,160 --> 13:02:44,680
bottom I'm always going to start from

20725
13:02:42,840 --> 13:02:47,596
the so-called root of a binary search

20726
13:02:44,680 --> 13:02:49,200
tree this is just like the list pointer

20727
13:02:47,596 --> 13:02:50,000
that kicks off the whole link list

20728
13:02:49,200 --> 13:02:51,840
process

20729
13:02:50,000 --> 13:02:53,640
this is the so-called route all right

20730
13:02:51,840 --> 13:02:56,079
here I am at the number four I want to

20731
13:02:53,640 --> 13:02:57,400
find the number five what decision can I

20732
13:02:56,080 --> 13:02:59,276
make when I see that I'm currently at

20733
13:02:57,400 --> 13:03:03,080
the number four just like the phone book

20734
13:02:59,276 --> 13:03:06,360
from week zero where is five

20735
13:03:03,080 --> 13:03:07,916
not it's not to the left and if I were

20736
13:03:06,360 --> 13:03:09,436
had you know built a little mobile here

20737
13:03:07,916 --> 13:03:12,200
or something we could very dramatically

20738
13:03:09,436 --> 13:03:14,320
snip off this Branch this is this is

20739
13:03:12,200 --> 13:03:16,435
like very lowbudget animation these

20740
13:03:14,320 --> 13:03:18,560
nodes could like fall to the ground and

20741
13:03:16,436 --> 13:03:20,436
we're left with half of essentially a

20742
13:03:18,560 --> 13:03:21,956
tree but what do I now know it's

20743
13:03:20,436 --> 13:03:24,116
obviously the five to the right so let

20744
13:03:21,956 --> 13:03:25,680
me go to the right six is obviously not

20745
13:03:24,116 --> 13:03:27,880
the one I'm looking for but what do I

20746
13:03:25,680 --> 13:03:30,640
now know about the five well five is

20747
13:03:27,880 --> 13:03:32,880
less than the sixth so I can sort of

20748
13:03:30,640 --> 13:03:34,479
snip this off here because I know it's

20749
13:03:32,880 --> 13:03:36,159
not going to be down there and I can

20750
13:03:34,480 --> 13:03:38,400
follow the remaining Arrow here and

20751
13:03:36,160 --> 13:03:40,200
voila I just found it and now without

20752
13:03:38,400 --> 13:03:42,200
getting into the weeds of the math I've

20753
13:03:40,200 --> 13:03:44,079
got here what Seven Elements that's

20754
13:03:42,200 --> 13:03:46,596
roughly eight if I round up and if I do

20755
13:03:44,080 --> 13:03:48,880
some log base two I actually 1 two three

20756
13:03:46,596 --> 13:03:50,040
is the key detail here the height of

20757
13:03:48,880 --> 13:03:52,435
this tree

20758
13:03:50,040 --> 13:03:55,240
is three because I took a list of size

20759
13:03:52,436 --> 13:03:57,200
seven and IED it and IED it in order to

20760
13:03:55,240 --> 13:03:59,400
let it dangle in these two Dimensions

20761
13:03:57,200 --> 13:04:02,200
plus or minus one for rounding sake so

20762
13:03:59,400 --> 13:04:04,840
what do I get back I now have binary

20763
13:04:02,200 --> 13:04:06,840
search but it's not like H the middle of

20764
13:04:04,840 --> 13:04:08,916
the middle of the middle I now follow

20765
13:04:06,840 --> 13:04:10,795
these arrows in one of two directions so

20766
13:04:08,916 --> 13:04:13,159
each of these nodes now has an INT and

20767
13:04:10,796 --> 13:04:14,916
maybe a left pointer and a right pointer

20768
13:04:13,160 --> 13:04:17,160
but you can call them anything you want

20769
13:04:14,916 --> 13:04:19,520
and so I've gotten back binary search

20770
13:04:17,160 --> 13:04:22,360
and dynamism because if you want to add

20771
13:04:19,520 --> 13:04:24,755
zero or eight or 9 or 10 we can just

20772
13:04:22,360 --> 13:04:26,640
dangle them at the bottom of the binary

20773
13:04:24,756 --> 13:04:28,480
search tree so what would this look like

20774
13:04:26,640 --> 13:04:31,840
in code but we won't actually implement

20775
13:04:28,480 --> 13:04:34,320
it line by line well here was previously

20776
13:04:31,840 --> 13:04:36,320
our definition of a node for a link list

20777
13:04:34,320 --> 13:04:37,640
which was onedimensional if you will

20778
13:04:36,320 --> 13:04:39,916
even though it might bounce up and down

20779
13:04:37,640 --> 13:04:41,640
on the screen it was still just a line

20780
13:04:39,916 --> 13:04:44,040
if you will well let me get rid of the

20781
13:04:41,640 --> 13:04:45,560
single pointer in the linked list let me

20782
13:04:44,040 --> 13:04:47,560
make a little bit of room here in this

20783
13:04:45,560 --> 13:04:49,956
type death and let me propose that we

20784
13:04:47,560 --> 13:04:52,560
just add two pointers each of which is a

20785
13:04:49,956 --> 13:04:55,159
struct node star one will be called left

20786
13:04:52,560 --> 13:04:57,840
by convention one will be called right

20787
13:04:55,160 --> 13:04:59,956
by convention and so long as someone not

20788
13:04:57,840 --> 13:05:01,956
me not today not in class writes the

20789
13:04:59,956 --> 13:05:04,159
code that stitches together this data

20790
13:05:01,956 --> 13:05:06,159
structure too handling both the left

20791
13:05:04,160 --> 13:05:08,560
child and the right child so to speak I

20792
13:05:06,160 --> 13:05:11,240
think we can indeed stitch together that

20793
13:05:08,560 --> 13:05:13,596
two-dimensional structure and moreover

20794
13:05:11,240 --> 13:05:16,115
once you have this in memory you can

20795
13:05:13,596 --> 13:05:18,200
translate pretty elegantly to code

20796
13:05:16,116 --> 13:05:21,796
binary search itself using a principle

20797
13:05:18,200 --> 13:05:24,159
we talked about recently too here is for

20798
13:05:21,796 --> 13:05:26,360
instance a function that I'll write by

20799
13:05:24,160 --> 13:05:28,320
just clicking through steps called

20800
13:05:26,360 --> 13:05:30,276
search whose purpose in life is to

20801
13:05:28,320 --> 13:05:33,000
return a Boolean true or false the

20802
13:05:30,276 --> 13:05:34,520
number I'm looking for is in the tree

20803
13:05:33,000 --> 13:05:36,560
this search function therefore takes two

20804
13:05:34,520 --> 13:05:38,840
arguments the number I'm looking for

20805
13:05:36,560 --> 13:05:41,520
called number and then a pointer to the

20806
13:05:38,840 --> 13:05:43,359
tree the so-called root of the tree now

20807
13:05:41,520 --> 13:05:45,680
how can I Implement binary search in

20808
13:05:43,360 --> 13:05:48,240
code will recall our brief discussion of

20809
13:05:45,680 --> 13:05:50,200
recursion it turns out recursion is a

20810
13:05:48,240 --> 13:05:51,956
beautiful technique and honestly more

20811
13:05:50,200 --> 13:05:54,200
obvious technique when you have two

20812
13:05:51,956 --> 13:05:56,680
dimensional structures which finally

20813
13:05:54,200 --> 13:05:58,956
after five plus weeks we now do here's

20814
13:05:56,680 --> 13:06:01,000
maybe my first line of code here if the

20815
13:05:58,956 --> 13:06:02,520
tree is null then obviously return false

20816
13:06:01,000 --> 13:06:04,320
you've handed me an empty tree there's

20817
13:06:02,520 --> 13:06:05,596
nothing going on obviously the number

20818
13:06:04,320 --> 13:06:07,756
you're looking for is not going to be

20819
13:06:05,596 --> 13:06:09,795
here so that's my like safe base case to

20820
13:06:07,756 --> 13:06:11,756
make sure I don't screw up and recurse

20821
13:06:09,796 --> 13:06:14,520
infinitely well what else might be the

20822
13:06:11,756 --> 13:06:18,116
case well if the number I'm looking for

20823
13:06:14,520 --> 13:06:20,115
is less than the tree's own number and

20824
13:06:18,116 --> 13:06:21,680
now recall that trees a node star so

20825
13:06:20,116 --> 13:06:23,680
even though I'm calling it a tree it's

20826
13:06:21,680 --> 13:06:25,796
really the current node that's been

20827
13:06:23,680 --> 13:06:28,520
passed in so if the number I'm looking

20828
13:06:25,796 --> 13:06:31,520
for is less than the current nodes

20829
13:06:28,520 --> 13:06:33,276
number then I must know that the number

20830
13:06:31,520 --> 13:06:35,000
I'm looking for is to the left so to

20831
13:06:33,276 --> 13:06:37,436
speak so how can I solve that well this

20832
13:06:35,000 --> 13:06:39,640
is where the magic of recursion just

20833
13:06:37,436 --> 13:06:43,160
return whatever the answer is to calling

20834
13:06:39,640 --> 13:06:44,680
search again but on a sub tree if you

20835
13:06:43,160 --> 13:06:47,240
will this is the sort of equivalent of

20836
13:06:44,680 --> 13:06:49,480
snipping off half of the tree pass in

20837
13:06:47,240 --> 13:06:51,916
the left sub tree if you will with the

20838
13:06:49,480 --> 13:06:53,640
same number else if the number you're

20839
13:06:51,916 --> 13:06:56,320
looking for isn't less than the current

20840
13:06:53,640 --> 13:06:58,560
nodes number but greater than snip off

20841
13:06:56,320 --> 13:07:00,956
the other subtree instead and just

20842
13:06:58,560 --> 13:07:03,399
return whatever search says it finds in

20843
13:07:00,956 --> 13:07:05,240
the right subtree here and then there's

20844
13:07:03,400 --> 13:07:06,720
a fourth and final case what else could

20845
13:07:05,240 --> 13:07:08,630
be true

20846
13:07:06,720 --> 13:07:10,520
logically

20847
13:07:08,630 --> 13:07:12,560
[Music]

20848
13:07:10,520 --> 13:07:15,560
yeah perfect if the number you're

20849
13:07:12,560 --> 13:07:17,840
looking for equals equals the number in

20850
13:07:15,560 --> 13:07:19,720
this node then I'm just going to return

20851
13:07:17,840 --> 13:07:23,159
true and you might recall from our

20852
13:07:19,720 --> 13:07:25,080
recurring discussions of design I don't

20853
13:07:23,160 --> 13:07:27,040
strictly need to ask that explicitly

20854
13:07:25,080 --> 13:07:29,000
either there's no node it's to the left

20855
13:07:27,040 --> 13:07:31,480
it's to the right or you found it so I

20856
13:07:29,000 --> 13:07:34,596
can just Whittle that down as usual to

20857
13:07:31,480 --> 13:07:36,400
an else and this now returns my true so

20858
13:07:34,596 --> 13:07:38,040
here too this is where recursion once

20859
13:07:36,400 --> 13:07:40,160
you get comfy with it sort of gets

20860
13:07:38,040 --> 13:07:41,880
pretty elegant and cool in the sense

20861
13:07:40,160 --> 13:07:43,880
that wow even though there's a lot of

20862
13:07:41,880 --> 13:07:45,360
lines here I mean there's only a few

20863
13:07:43,880 --> 13:07:46,880
interesting lines a lot of it's like

20864
13:07:45,360 --> 13:07:48,480
Curly braces at that which strictly

20865
13:07:46,880 --> 13:07:50,880
speaking I could get rid of and so

20866
13:07:48,480 --> 13:07:52,880
recurs lends itself to Elegance when it

20867
13:07:50,880 --> 13:07:55,360
comes to traversing these

20868
13:07:52,880 --> 13:07:56,956
two-dimensional data structures as well

20869
13:07:55,360 --> 13:08:00,240
so that is in code how you might

20870
13:07:56,956 --> 13:08:04,560
Implement something like

20871
13:08:00,240 --> 13:08:07,079
search questions then on these

20872
13:08:04,560 --> 13:08:08,956
trees we have dynamism we can insert

20873
13:08:07,080 --> 13:08:10,880
more nodes to them they're faster

20874
13:08:08,956 --> 13:08:12,680
because we get B search back but but but

20875
13:08:10,880 --> 13:08:14,596
there's got to be a price paid any

20876
13:08:12,680 --> 13:08:16,520
downsides or question or

20877
13:08:14,596 --> 13:08:18,520
downside okay let me come back to that

20878
13:08:16,520 --> 13:08:20,680
in just one sec downside though what

20879
13:08:18,520 --> 13:08:22,840
price of we paid for this dynamism and

20880
13:08:20,680 --> 13:08:24,436
for this binary

20881
13:08:22,840 --> 13:08:27,520
searchability even though I've

20882
13:08:24,436 --> 13:08:29,276
abstracted it away in the

20883
13:08:27,520 --> 13:08:32,079
picture say

20884
13:08:29,276 --> 13:08:33,560
again we're using a lot of memory right

20885
13:08:32,080 --> 13:08:34,956
I'm kind of misleading you now because

20886
13:08:33,560 --> 13:08:36,320
I'm just drawing these little squares

20887
13:08:34,956 --> 13:08:38,000
with the simple numbers but there's

20888
13:08:36,320 --> 13:08:41,320
actually three things in there a four

20889
13:08:38,000 --> 13:08:43,480
byte integer an 8 by left pointer a 8 by

20890
13:08:41,320 --> 13:08:46,116
right pointer so we're already up to 16

20891
13:08:43,480 --> 13:08:47,956
20 bytes now to store individual ins

20892
13:08:46,116 --> 13:08:49,840
that's probably okay though if memory is

20893
13:08:47,956 --> 13:08:52,880
relatively cheap and voluminous as it

20894
13:08:49,840 --> 13:08:54,719
nowadays is but these are the kinds of

20895
13:08:52,880 --> 13:08:57,640
trade-offs and here too you see a hint

20896
13:08:54,720 --> 13:09:00,040
of why some people still do like and use

20897
13:08:57,640 --> 13:09:01,720
C and in fact it's so omnipresent

20898
13:09:00,040 --> 13:09:03,680
because when you have C you can really

20899
13:09:01,720 --> 13:09:05,240
fine-tune how much memory is being used

20900
13:09:03,680 --> 13:09:07,400
for Better or For Worse under the hood

20901
13:09:05,240 --> 13:09:09,400
as we transition soon to python these

20902
13:09:07,400 --> 13:09:11,560
decisions get made for you and you have

20903
13:09:09,400 --> 13:09:13,240
much much less control about how many me

20904
13:09:11,560 --> 13:09:14,720
how much memory is being used by your

20905
13:09:13,240 --> 13:09:17,840
program because someone else made those

20906
13:09:14,720 --> 13:09:20,200
designed decisions for you

20907
13:09:17,840 --> 13:09:21,956
question

20908
13:09:20,200 --> 13:09:24,320
is it bad if we don't know the parent

20909
13:09:21,956 --> 13:09:27,159
node uh not necessarily there's no

20910
13:09:24,320 --> 13:09:29,040
reason why you need to have pointers in

20911
13:09:27,160 --> 13:09:31,320
both directions however that can lend

20912
13:09:29,040 --> 13:09:33,320
itself to efficiency by spending more

20913
13:09:31,320 --> 13:09:34,880
space and having arrows go up too you

20914
13:09:33,320 --> 13:09:36,880
can actually save more time when

20915
13:09:34,880 --> 13:09:38,399
searching the tree in other context this

20916
13:09:36,880 --> 13:09:40,320
though would be the canonical way the

20917
13:09:38,400 --> 13:09:42,320
typical way to implement it um but

20918
13:09:40,320 --> 13:09:44,480
absolutely just like a doubly link list

20919
13:09:42,320 --> 13:09:48,000
that could help you solve other problems

20920
13:09:44,480 --> 13:09:50,040
too all right so turns out I'm kind of

20921
13:09:48,000 --> 13:09:52,480
overselling binary search trees there

20922
13:09:50,040 --> 13:09:54,916
are perversions of them so to speak

20923
13:09:52,480 --> 13:09:57,200
whereby they won't actually behave as

20924
13:09:54,916 --> 13:09:59,276
advertised for instance here's a a good

20925
13:09:57,200 --> 13:10:01,276
situation suppose you've got an empty

20926
13:09:59,276 --> 13:10:03,159
tree initially and you insert the number

20927
13:10:01,276 --> 13:10:04,520
two well it's got to go somewhere so it

20928
13:10:03,160 --> 13:10:06,436
might as well become the root of this

20929
13:10:04,520 --> 13:10:08,200
binary search tree and let's assume that

20930
13:10:06,436 --> 13:10:10,000
someone wrote the code to do this now

20931
13:10:08,200 --> 13:10:11,755
you want to insert the number one and

20932
13:10:10,000 --> 13:10:14,000
you want to maintain the searchability

20933
13:10:11,756 --> 13:10:16,756
of this tree well it's important to note

20934
13:10:14,000 --> 13:10:18,796
that binary search tree is different

20935
13:10:16,756 --> 13:10:21,360
from tree if you just got a tree in

20936
13:10:18,796 --> 13:10:23,116
memory there is no social contract with

20937
13:10:21,360 --> 13:10:25,200
where the numbers need to go they can be

20938
13:10:23,116 --> 13:10:27,640
completely random all over the place

20939
13:10:25,200 --> 13:10:30,435
binary search tree means that you can do

20940
13:10:27,640 --> 13:10:32,240
binary search means that any node here

20941
13:10:30,436 --> 13:10:35,276
is going to be greater than every node

20942
13:10:32,240 --> 13:10:37,159
here and less than every node here and

20943
13:10:35,276 --> 13:10:39,115
that's a definition it's a recursive

20944
13:10:37,160 --> 13:10:42,880
structural definition that must be true

20945
13:10:39,116 --> 13:10:44,240
to be a binary search tree or BST so if

20946
13:10:42,880 --> 13:10:46,719
we maintain that property ourselves let

20947
13:10:44,240 --> 13:10:48,400
me insert two let me insert one one

20948
13:10:46,720 --> 13:10:51,000
belongs there by that definition let me

20949
13:10:48,400 --> 13:10:53,200
insert three three belongs there by that

20950
13:10:51,000 --> 13:10:56,116
definition but I kind of got lucky in

20951
13:10:53,200 --> 13:10:59,200
that I in the story inserted two and

20952
13:10:56,116 --> 13:11:00,720
then one and then three let me propose a

20953
13:10:59,200 --> 13:11:03,115
sort of perversion of the algorithm

20954
13:11:00,720 --> 13:11:05,796
whereby we just get unlucky let me

20955
13:11:03,116 --> 13:11:08,240
propose that we insert in uh insert one

20956
13:11:05,796 --> 13:11:10,200
first and then we insert two well where

20957
13:11:08,240 --> 13:11:11,956
does two go well logically it goes to

20958
13:11:10,200 --> 13:11:14,640
the right because it's larger all right

20959
13:11:11,956 --> 13:11:17,840
now the user inserts three where does it

20960
13:11:14,640 --> 13:11:20,080
go okay it goes there logically and how

20961
13:11:17,840 --> 13:11:22,679
does this story un fold the user inserts

20962
13:11:20,080 --> 13:11:26,360
four five six it's wonderfully sorted in

20963
13:11:22,680 --> 13:11:28,320
advance by luck but this is a perversion

20964
13:11:26,360 --> 13:11:30,560
of the structure in what

20965
13:11:28,320 --> 13:11:35,116
sense it's still technically a binary

20966
13:11:30,560 --> 13:11:38,159
search tree but what does it look more

20967
13:11:35,116 --> 13:11:40,520
like it really is devolving if you will

20968
13:11:38,160 --> 13:11:42,480
into a linked list and so if you the

20969
13:11:40,520 --> 13:11:45,399
programmer don't Implement a binary

20970
13:11:42,480 --> 13:11:47,116
search tree with some kind of repairs

20971
13:11:45,400 --> 13:11:49,596
going on such that as soon as something

20972
13:11:47,116 --> 13:11:51,000
gets whoa a little too long in stringy I

20973
13:11:49,596 --> 13:11:52,680
think I can fix this it's going to be an

20974
13:11:51,000 --> 13:11:54,320
annoying line number of lines of code

20975
13:11:52,680 --> 13:11:57,160
which we're not going to write here or

20976
13:11:54,320 --> 13:11:58,480
or in a pet but we could kind of pivot

20977
13:11:57,160 --> 13:12:00,560
this thing right and we could just

20978
13:11:58,480 --> 13:12:02,956
rejigger things so that the two becomes

20979
13:12:00,560 --> 13:12:04,756
the new root the one becomes the left

20980
13:12:02,956 --> 13:12:06,200
child the three becomes the right child

20981
13:12:04,756 --> 13:12:08,560
but that's what like two three plus

20982
13:12:06,200 --> 13:12:10,956
lines of code it's possible it's doable

20983
13:12:08,560 --> 13:12:13,640
but it's it's extra work it's extra code

20984
13:12:10,956 --> 13:12:16,080
so unless you write that code though and

20985
13:12:13,640 --> 13:12:17,840
maintain balance of these trees just

20986
13:12:16,080 --> 13:12:19,916
because it's a binary search tree does

20987
13:12:17,840 --> 13:12:22,159
not mean its height is going to be log

20988
13:12:19,916 --> 13:12:24,640
base 2 of n the height could be log it

20989
13:12:22,160 --> 13:12:26,360
could be n in which case you don't get

20990
13:12:24,640 --> 13:12:28,560
those properties so when it comes to

20991
13:12:26,360 --> 13:12:30,956
looking up in a balanced binary search

20992
13:12:28,560 --> 13:12:32,435
tree yes it's log in but if it's

20993
13:12:30,956 --> 13:12:34,400
unbalanced if you don't add that

20994
13:12:32,436 --> 13:12:36,640
additional logic and those repairs so to

20995
13:12:34,400 --> 13:12:39,000
speak you could it could devolve into

20996
13:12:36,640 --> 13:12:40,916
Big O of N and this is a whole category

20997
13:12:39,000 --> 13:12:42,436
of algorithms and fanciness that you

20998
13:12:40,916 --> 13:12:44,000
would explore in a higher level course

20999
13:12:42,436 --> 13:12:45,520
on algorithms and data structures

21000
13:12:44,000 --> 13:12:47,320
there's lots of way to do that sort of

21001
13:12:45,520 --> 13:12:49,435
fixing that I'm alluding to in the

21002
13:12:47,320 --> 13:12:51,916
picture there on the screen

21003
13:12:49,436 --> 13:12:54,160
screen all right a few other data

21004
13:12:51,916 --> 13:12:56,956
structures if you will toward an end of

21005
13:12:54,160 --> 13:13:00,240
a sort of computer science Holy Grail so

21006
13:12:56,956 --> 13:13:02,479
log in is repeatedly a really good place

21007
13:13:00,240 --> 13:13:04,756
to end up we started in week zero when

21008
13:13:02,480 --> 13:13:06,680
we got log in we lost it this earlier

21009
13:13:04,756 --> 13:13:08,720
today by introducing link list but we

21010
13:13:06,680 --> 13:13:11,480
just got it back albeit at the price of

21011
13:13:08,720 --> 13:13:13,000
spending more space but the Holy Grail

21012
13:13:11,480 --> 13:13:14,916
so to speak when it comes to algorithms

21013
13:13:13,000 --> 13:13:16,840
would not be Big O of n certainly

21014
13:13:14,916 --> 13:13:18,596
definitely not n squar like our mer like

21015
13:13:16,840 --> 13:13:20,956
our bubble sorts and selection sorts and

21016
13:13:18,596 --> 13:13:23,200
not even Big O of Logan what's better

21017
13:13:20,956 --> 13:13:26,436
than all of

21018
13:13:23,200 --> 13:13:27,880
those big O of one constant time right

21019
13:13:26,436 --> 13:13:29,596
that's the Holy Grail because if we

21020
13:13:27,880 --> 13:13:32,240
could store huge amounts of data but

21021
13:13:29,596 --> 13:13:34,680
find it instantly in one step or two

21022
13:13:32,240 --> 13:13:36,436
steps or heck even 10 or 20 steps but

21023
13:13:34,680 --> 13:13:38,596
independent of the size of the data

21024
13:13:36,436 --> 13:13:40,200
structure that's pretty powerful I mean

21025
13:13:38,596 --> 13:13:41,795
that's the secret sauce of the Googles

21026
13:13:40,200 --> 13:13:44,596
and the twitters of the world trying to

21027
13:13:41,796 --> 13:13:47,320
get back results really really fast well

21028
13:13:44,596 --> 13:13:49,040
it turns out another abstract data type

21029
13:13:47,320 --> 13:13:50,320
or abstract data structure might be

21030
13:13:49,040 --> 13:13:52,200
something called a dictionary just like

21031
13:13:50,320 --> 13:13:54,276
the maram Webster Oxford English

21032
13:13:52,200 --> 13:13:56,560
dictionaries that you might know which

21033
13:13:54,276 --> 13:13:57,840
associate say words with definitions

21034
13:13:56,560 --> 13:13:59,479
well you can think of a dictionary

21035
13:13:57,840 --> 13:14:01,956
really abstractly as this like two

21036
13:13:59,480 --> 13:14:03,320
columns maybe on a spreadsheet of sorts

21037
13:14:01,956 --> 13:14:04,320
where the left column represents

21038
13:14:03,320 --> 13:14:05,720
something and the right column

21039
13:14:04,320 --> 13:14:07,640
represents something else like the word

21040
13:14:05,720 --> 13:14:09,000
is on the left and its definition is on

21041
13:14:07,640 --> 13:14:10,796
the right and that's almost literally

21042
13:14:09,000 --> 13:14:12,796
what a dictionary is on paper you've got

21043
13:14:10,796 --> 13:14:15,240
all the words and all the definitions

21044
13:14:12,796 --> 13:14:18,080
right next to it but more generally in

21045
13:14:15,240 --> 13:14:20,520
Computing a dictionary really just has

21046
13:14:18,080 --> 13:14:22,520
not words and definitions per se but key

21047
13:14:20,520 --> 13:14:24,079
value pairs this is a term of Art and

21048
13:14:22,520 --> 13:14:25,479
we're going to see this again and again

21049
13:14:24,080 --> 13:14:28,400
especially as we transition to web

21050
13:14:25,480 --> 13:14:31,240
programming keys and values key is what

21051
13:14:28,400 --> 13:14:34,796
you use to look for something the value

21052
13:14:31,240 --> 13:14:36,680
is what you find ultimately via that key

21053
13:14:34,796 --> 13:14:38,756
so that's the generic term there we've

21054
13:14:36,680 --> 13:14:40,040
seen key value pairs really in the past

21055
13:14:38,756 --> 13:14:42,436
in week zero we talked about your

21056
13:14:40,040 --> 13:14:43,916
contacts in your iPhone or Android phone

21057
13:14:42,436 --> 13:14:45,916
uh being an app that has a whole bunch

21058
13:14:43,916 --> 13:14:48,159
of contexts presumably alphabetized by

21059
13:14:45,916 --> 13:14:49,880
first name or last name or the like well

21060
13:14:48,160 --> 13:14:51,756
one one of those contact cards

21061
13:14:49,880 --> 13:14:53,956
ultimately has someone's number for

21062
13:14:51,756 --> 13:14:56,480
instance like John Harvard in this case

21063
13:14:53,956 --> 13:14:58,560
so in that type of application the keys

21064
13:14:56,480 --> 13:15:01,640
is the name like John Harvard that you

21065
13:14:58,560 --> 13:15:03,479
use to find information and the value is

21066
13:15:01,640 --> 13:15:05,040
the number that you find there or if

21067
13:15:03,480 --> 13:15:07,240
there's more information like where he

21068
13:15:05,040 --> 13:15:09,240
lives and uh email address and the like

21069
13:15:07,240 --> 13:15:11,840
the whole contact card could be the

21070
13:15:09,240 --> 13:15:14,000
value thereof the key is what you use to

21071
13:15:11,840 --> 13:15:16,520
look up John Harvard now back in week

21072
13:15:14,000 --> 13:15:17,916
zero oh and rather the corresponding

21073
13:15:16,520 --> 13:15:19,596
table then if we draw this in two

21074
13:15:17,916 --> 13:15:21,320
columns wouldn't be word and definition

21075
13:15:19,596 --> 13:15:23,399
or key value generically it would be

21076
13:15:21,320 --> 13:15:25,360
name and number for instance so we're

21077
13:15:23,400 --> 13:15:27,596
just slapping some new terminology on

21078
13:15:25,360 --> 13:15:29,240
this old contact problem well this is

21079
13:15:27,596 --> 13:15:32,640
the picture we drew way back in week

21080
13:15:29,240 --> 13:15:34,596
zero whereby I claimed that log of n was

21081
13:15:32,640 --> 13:15:36,916
really really good and indeed it was and

21082
13:15:34,596 --> 13:15:38,756
has been since but the Holy Grail would

21083
13:15:36,916 --> 13:15:41,399
indeed be something more like this in

21084
13:15:38,756 --> 13:15:43,436
this dashed Green Line constant time and

21085
13:15:41,400 --> 13:15:45,080
maybe not literally one step but a fixed

21086
13:15:43,436 --> 13:15:47,596
number of steps that even as the problem

21087
13:15:45,080 --> 13:15:50,956
gets huge and you go way way out on the

21088
13:15:47,596 --> 13:15:54,240
right of the X AIS the problem does not

21089
13:15:50,956 --> 13:15:55,956
depend on the side the uh the uh the

21090
13:15:54,240 --> 13:15:58,916
time to solve the problem does not

21091
13:15:55,956 --> 13:16:00,795
depend at all on the size of the problem

21092
13:15:58,916 --> 13:16:03,596
itself you can have a thousand contacts

21093
13:16:00,796 --> 13:16:05,240
or 100,000 contacts constant time means

21094
13:16:03,596 --> 13:16:07,720
it takes the same number of steps no

21095
13:16:05,240 --> 13:16:09,159
matter what well how can we get to that

21096
13:16:07,720 --> 13:16:11,040
point well there's a couple of final

21097
13:16:09,160 --> 13:16:12,360
building blocks today and there's one

21098
13:16:11,040 --> 13:16:14,916
called hashing and this is something

21099
13:16:12,360 --> 13:16:17,680
that will recur a few times but for now

21100
13:16:14,916 --> 13:16:19,159
hashing is all about taking as input

21101
13:16:17,680 --> 13:16:22,756
some value

21102
13:16:19,160 --> 13:16:25,116
and outputting a simpler version thereof

21103
13:16:22,756 --> 13:16:27,000
so for instance here's a a gratuitously

21104
13:16:25,116 --> 13:16:29,160
large deck of cards which are all the

21105
13:16:27,000 --> 13:16:30,680
more visible as a result and in a deck

21106
13:16:29,160 --> 13:16:32,916
of cards typically you've got like what

21107
13:16:30,680 --> 13:16:34,720
52 cards plus maybe the Jokers and

21108
13:16:32,916 --> 13:16:37,079
whatnot and each of those cards has a

21109
13:16:34,720 --> 13:16:38,956
number of sorts and a suit on it and

21110
13:16:37,080 --> 13:16:41,360
here are literally four buckets on the

21111
13:16:38,956 --> 13:16:43,240
stage and how might I go about sorting

21112
13:16:41,360 --> 13:16:44,916
these cards not just by number but also

21113
13:16:43,240 --> 13:16:46,756
by suit well you could certainly like

21114
13:16:44,916 --> 13:16:48,320
spread them all out and sort of make a

21115
13:16:46,756 --> 13:16:49,680
mess of things and just kind of reason

21116
13:16:48,320 --> 13:16:51,840
your way through it and get everything

21117
13:16:49,680 --> 13:16:53,596
in order according to suit and corded by

21118
13:16:51,840 --> 13:16:55,399
number but most of us even if you don't

21119
13:16:53,596 --> 13:16:57,079
have four buckets at home probably are

21120
13:16:55,400 --> 13:16:59,000
going to do something a little more

21121
13:16:57,080 --> 13:17:01,360
intuitive feels like an optimization

21122
13:16:59,000 --> 13:17:02,796
where if I find like the nine of Hearts

21123
13:17:01,360 --> 13:17:04,560
I'm going to put that into the hearts

21124
13:17:02,796 --> 13:17:06,360
bucket the King of Spades I'm going to

21125
13:17:04,560 --> 13:17:08,680
put that into the Spades bucket the jack

21126
13:17:06,360 --> 13:17:11,080
of diamonds over here and I'll do this

21127
13:17:08,680 --> 13:17:13,720
with the Queen of Diamonds and uh the

21128
13:17:11,080 --> 13:17:15,520
Ace of clubs here and the three here and

21129
13:17:13,720 --> 13:17:18,200
the 10 here and even though it's still

21130
13:17:15,520 --> 13:17:20,560
going to be 52 steps why am I and maybe

21131
13:17:18,200 --> 13:17:21,916
at home like why would you perhaps do

21132
13:17:20,560 --> 13:17:26,399
this step

21133
13:17:21,916 --> 13:17:26,399
first what's the value of bucketization

21134
13:17:48,080 --> 13:17:51,040
reduces the probability of errors or the

21135
13:17:49,560 --> 13:17:53,320
like and what I'm doing here to give it

21136
13:17:51,040 --> 13:17:55,360
a technical term is that I'm hashing the

21137
13:17:53,320 --> 13:17:58,320
values I'm taking as input a card like

21138
13:17:55,360 --> 13:18:01,276
this and I'm reducing it more simply

21139
13:17:58,320 --> 13:18:04,360
from a larger domain to a much smaller

21140
13:18:01,276 --> 13:18:06,756
range if you will so here's a domain of

21141
13:18:04,360 --> 13:18:09,596
like 52 possibilities I want to map that

21142
13:18:06,756 --> 13:18:12,160
to a range of four possible outcomes the

21143
13:18:09,596 --> 13:18:14,360
Diamonds the clubs the carts or the

21144
13:18:12,160 --> 13:18:15,880
Spades here and by doing that I'm just

21145
13:18:14,360 --> 13:18:17,520
shrinking the size of the problem so

21146
13:18:15,880 --> 13:18:19,956
hashing does that it's like literally an

21147
13:18:17,520 --> 13:18:22,320
F ofx type Arrangement whereby you pass

21148
13:18:19,956 --> 13:18:25,040
something in and you get back a simpler

21149
13:18:22,320 --> 13:18:27,720
known value well a hash function more

21150
13:18:25,040 --> 13:18:29,880
technically is the algorithm or even the

21151
13:18:27,720 --> 13:18:32,720
math or even the code that implements

21152
13:18:29,880 --> 13:18:34,916
that idea converting something bigger to

21153
13:18:32,720 --> 13:18:37,956
something smaller to this indeed finite

21154
13:18:34,916 --> 13:18:42,320
range of values and it turns out that

21155
13:18:37,956 --> 13:18:45,159
hash tables are a wonderful application

21156
13:18:42,320 --> 13:18:47,360
of arrays and length lists to try to

21157
13:18:45,160 --> 13:18:49,520
Leverage The Best of Both Worlds the

21158
13:18:47,360 --> 13:18:52,720
goal being theoretically to achieve that

21159
13:18:49,520 --> 13:18:53,956
Holy Grail of constant time and that's

21160
13:18:52,720 --> 13:18:54,916
going to be a bit of an overstatement

21161
13:18:53,956 --> 13:18:56,956
because you're not always going to

21162
13:18:54,916 --> 13:18:59,000
achieve it exactly but at least we can

21163
13:18:56,956 --> 13:19:00,880
get a little closer there too so with

21164
13:18:59,000 --> 13:19:03,276
hash tables you have something that

21165
13:19:00,880 --> 13:19:04,956
looks like this this is just an array

21166
13:19:03,276 --> 13:19:06,916
this is an artist rendition of drawing

21167
13:19:04,956 --> 13:19:09,795
it vertically instead of horizontally

21168
13:19:06,916 --> 13:19:12,795
but that's just a a detail graphically

21169
13:19:09,796 --> 13:19:15,360
and this array for instance maybe uh is

21170
13:19:12,796 --> 13:19:17,360
of size 26 and where am I going with

21171
13:19:15,360 --> 13:19:20,320
this well how does Apple how does Google

21172
13:19:17,360 --> 13:19:22,956
Store your contexts alphabetically in

21173
13:19:20,320 --> 13:19:24,436
your phone and search for things quickly

21174
13:19:22,956 --> 13:19:25,720
well they might they probably

21175
13:19:24,436 --> 13:19:27,520
alphabetize at least in English

21176
13:19:25,720 --> 13:19:28,796
according to a through z or if we

21177
13:19:27,520 --> 13:19:31,359
convert that to numbers it's like what

21178
13:19:28,796 --> 13:19:33,796
65 through whatever or really 0 through

21179
13:19:31,360 --> 13:19:36,116
25 suffices if we're using an array of

21180
13:19:33,796 --> 13:19:38,240
size 26 we start counting at zero and we

21181
13:19:36,116 --> 13:19:40,596
count up to 25 but let's abstract that

21182
13:19:38,240 --> 13:19:42,320
away as just letters of the alphabet so

21183
13:19:40,596 --> 13:19:44,115
maybe what Google and apple are doing in

21184
13:19:42,320 --> 13:19:46,116
your phone is storing all of the A's up

21185
13:19:44,116 --> 13:19:48,400
there all of the Z's down there and

21186
13:19:46,116 --> 13:19:50,040
everything else in between and so this

21187
13:19:48,400 --> 13:19:51,560
works pretty well if you start adding

21188
13:19:50,040 --> 13:19:53,240
your friends and your family so for

21189
13:19:51,560 --> 13:19:55,795
instance and I'll get rid of the letter

21190
13:19:53,240 --> 13:19:57,916
so it's to not distract uh alvus might

21191
13:19:55,796 --> 13:20:00,080
go in that first spot because a you

21192
13:19:57,916 --> 13:20:02,200
subtract the 65 maps to zero so we put

21193
13:20:00,080 --> 13:20:03,880
him in the first bucket the a bucket uh

21194
13:20:02,200 --> 13:20:05,399
maybe Zacharias ends up all the way at

21195
13:20:03,880 --> 13:20:07,435
the end there and then in the middle

21196
13:20:05,400 --> 13:20:08,956
might here be Hermione and if we do this

21197
13:20:07,436 --> 13:20:12,200
dot dot dot you keep adding all of your

21198
13:20:08,956 --> 13:20:14,159
classmates you might get a uh contact

21199
13:20:12,200 --> 13:20:17,200
database that has all of this data here

21200
13:20:14,160 --> 13:20:18,596
in now each of these nodes they're drawn

21201
13:20:17,200 --> 13:20:21,000
differently because this is just another

21202
13:20:18,596 --> 13:20:23,040
artist rendition these rectangles these

21203
13:20:21,000 --> 13:20:24,756
long rectangles represent a contact card

21204
13:20:23,040 --> 13:20:26,956
like John Harvard's that's got the name

21205
13:20:24,756 --> 13:20:31,560
maybe email definitely phone number and

21206
13:20:26,956 --> 13:20:34,116
things like that so this seems great why

21207
13:20:31,560 --> 13:20:36,079
how can I find Albus well I go to the a

21208
13:20:34,116 --> 13:20:37,880
bucket how do I find Zacharias I go to

21209
13:20:36,080 --> 13:20:41,560
the Z bucket how do I find Hermione I go

21210
13:20:37,880 --> 13:20:44,276
to the H bucket but but but I've done

21211
13:20:41,560 --> 13:20:46,680
this very deliberately what problem will

21212
13:20:44,276 --> 13:20:49,840
arise eventually assuming you have

21213
13:20:46,680 --> 13:20:49,840
enough classmates

21214
13:20:51,680 --> 13:20:55,796
yeah there'll be too many people too

21215
13:20:53,160 --> 13:20:57,680
many contacts for all of the available

21216
13:20:55,796 --> 13:21:00,560
spaces in the array there's still some

21217
13:20:57,680 --> 13:21:02,880
room here but I'm pretty sure if I think

21218
13:21:00,560 --> 13:21:05,596
back to this particular class uh we've

21219
13:21:02,880 --> 13:21:08,755
got not hermy but also Harry who's also

21220
13:21:05,596 --> 13:21:10,640
an H Hagrid who's also an H so where do

21221
13:21:08,756 --> 13:21:13,240
I put them I could just put them

21222
13:21:10,640 --> 13:21:15,320
arbitrarily in any of the open spots but

21223
13:21:13,240 --> 13:21:16,916
then you lose the immediacy of jumping

21224
13:21:15,320 --> 13:21:19,000
right to the H right to the a right to

21225
13:21:16,916 --> 13:21:20,795
the Z but now that we have link lists we

21226
13:21:19,000 --> 13:21:23,360
can kind of combine these ideas right

21227
13:21:20,796 --> 13:21:25,200
use an array to get to the first letter

21228
13:21:23,360 --> 13:21:28,160
of the name you care about and then if

21229
13:21:25,200 --> 13:21:29,880
you have a collision so to speak whereby

21230
13:21:28,160 --> 13:21:31,840
someone's already there you don't do

21231
13:21:29,880 --> 13:21:33,276
something stupid like put Harry down

21232
13:21:31,840 --> 13:21:35,000
here just because it's available or

21233
13:21:33,276 --> 13:21:36,640
maybe Hagrid down here just because it's

21234
13:21:35,000 --> 13:21:38,680
available because then you're losing the

21235
13:21:36,640 --> 13:21:40,916
immediacy of the lookup why don't you

21236
13:21:38,680 --> 13:21:43,436
just kind of stitch them together in a

21237
13:21:40,916 --> 13:21:46,040
linked list now what does this mean this

21238
13:21:43,436 --> 13:21:47,956
means for most of the characters here

21239
13:21:46,040 --> 13:21:49,840
you have constant time lookup you look

21240
13:21:47,956 --> 13:21:53,040
up alvas boom you're done Zacharias boom

21241
13:21:49,840 --> 13:21:55,719
you're done okay Harry Hermione Hagrid

21242
13:21:53,040 --> 13:21:57,320
it might be one two or three steps so

21243
13:21:55,720 --> 13:21:59,160
that's actually devolving into something

21244
13:21:57,320 --> 13:22:01,200
linear but here we make a distinction

21245
13:21:59,160 --> 13:22:03,756
today between theoretical running times

21246
13:22:01,200 --> 13:22:05,795
which we keep talking about and honestly

21247
13:22:03,756 --> 13:22:08,276
a clock on the wall running times that

21248
13:22:05,796 --> 13:22:11,400
actual humans care about this is way

21249
13:22:08,276 --> 13:22:13,795
faster than a linked list because you

21250
13:22:11,400 --> 13:22:16,520
don't have to search every name it's

21251
13:22:13,796 --> 13:22:18,240
even faster than a an array because you

21252
13:22:16,520 --> 13:22:20,680
don't need to do binary search

21253
13:22:18,240 --> 13:22:24,115
you can literally for most of the names

21254
13:22:20,680 --> 13:22:25,720
find them in constant time one step and

21255
13:22:24,116 --> 13:22:27,276
again it's not theoretically constant

21256
13:22:25,720 --> 13:22:28,796
because these if you only befriend

21257
13:22:27,276 --> 13:22:31,880
people who have H names it's going to be

21258
13:22:28,796 --> 13:22:33,436
a crazy long link list anyway so again

21259
13:22:31,880 --> 13:22:35,755
it really kind of depends on what the

21260
13:22:33,436 --> 13:22:38,240
nature of the data is here but this is

21261
13:22:35,756 --> 13:22:39,720
pretty close to constant time and in

21262
13:22:38,240 --> 13:22:41,276
fact how could we get even closer how

21263
13:22:39,720 --> 13:22:44,480
could we reduce the probability of

21264
13:22:41,276 --> 13:22:46,596
collisions for the H's or any other

21265
13:22:44,480 --> 13:22:49,680
letters how could we avoid putting too

21266
13:22:46,596 --> 13:22:49,680
many H names together

21267
13:22:51,956 --> 13:22:54,360
say a little

21268
13:22:57,400 --> 13:23:01,040
L okay yeah so we could add another

21269
13:22:59,756 --> 13:23:02,640
dimension if you will but let's not add

21270
13:23:01,040 --> 13:23:04,360
a third dimension per se but let's

21271
13:23:02,640 --> 13:23:06,400
indeed look at not just the first letter

21272
13:23:04,360 --> 13:23:08,160
of everyone's name but the first and the

21273
13:23:06,400 --> 13:23:10,916
second and in fact let's see if that

21274
13:23:08,160 --> 13:23:12,520
gets us a little uh further along so let

21275
13:23:10,916 --> 13:23:13,840
me go ahead and propose if you go

21276
13:23:12,520 --> 13:23:15,115
through the whole Harry Potter Universe

21277
13:23:13,840 --> 13:23:17,159
there's actually a lot of collisions if

21278
13:23:15,116 --> 13:23:19,480
we keep going and so we've got the L's

21279
13:23:17,160 --> 13:23:21,400
here the RS the S's and so forth well

21280
13:23:19,480 --> 13:23:23,640
let's clean this up here Hermione

21281
13:23:21,400 --> 13:23:25,680
originally went to the H location but

21282
13:23:23,640 --> 13:23:27,479
let's decrease the probability of

21283
13:23:25,680 --> 13:23:29,916
collisions there and everywhere else

21284
13:23:27,480 --> 13:23:32,040
instead of putting hermion Harry and

21285
13:23:29,916 --> 13:23:34,435
Hagrid Al together let's go ahead and do

21286
13:23:32,040 --> 13:23:36,596
this instead instead of labeling these

21287
13:23:34,436 --> 13:23:38,400
buckets A through Z let's just give

21288
13:23:36,596 --> 13:23:40,479
ourselves more buckets so in fact this

21289
13:23:38,400 --> 13:23:43,080
might be H well instead of H maybe this

21290
13:23:40,480 --> 13:23:45,796
should be ha and then this should be HB

21291
13:23:43,080 --> 13:23:47,880
HC HD h e HF now some of those are a

21292
13:23:45,796 --> 13:23:50,320
little nonsensical cuz I can't think of

21293
13:23:47,880 --> 13:23:52,596
names that match most of those but it's

21294
13:23:50,320 --> 13:23:54,796
deterministic at least we know the

21295
13:23:52,596 --> 13:23:56,596
bucket will be there which is important

21296
13:23:54,796 --> 13:23:59,116
even if it's empty and now we can put

21297
13:23:56,596 --> 13:24:01,320
Hermione here we can put Harry here but

21298
13:23:59,116 --> 13:24:03,276
uhoh we didn't do this perfectly well

21299
13:24:01,320 --> 13:24:05,240
Hagrid still Collide so let me come back

21300
13:24:03,276 --> 13:24:07,640
to you how can we reduce the probability

21301
13:24:05,240 --> 13:24:09,479
of Harry and Hagrid

21302
13:24:07,640 --> 13:24:11,520
colliding yeah so we could look at the

21303
13:24:09,480 --> 13:24:15,596
third letter okay so let me try that

21304
13:24:11,520 --> 13:24:18,795
instead of ha let's look at haa ha ha C

21305
13:24:15,596 --> 13:24:22,115
dot dot dot haq dot dot dot h h e q h e

21306
13:24:18,796 --> 13:24:24,116
r hes and so forth and now I think those

21307
13:24:22,116 --> 13:24:27,720
names and probably all the others we saw

21308
13:24:24,116 --> 13:24:29,756
are now much more cleanly distributed

21309
13:24:27,720 --> 13:24:31,360
there's much lower probability of

21310
13:24:29,756 --> 13:24:33,040
collisions unless two people have like

21311
13:24:31,360 --> 13:24:35,916
almost the same names or one is like a

21312
13:24:33,040 --> 13:24:38,116
prefix of the other but but but even

21313
13:24:35,916 --> 13:24:40,479
though we're now closer than ever to

21314
13:24:38,116 --> 13:24:42,160
constant time because the odds that we

21315
13:24:40,480 --> 13:24:44,320
hit a collision and have to devolve to a

21316
13:24:42,160 --> 13:24:46,320
link list or much lower what's the

21317
13:24:44,320 --> 13:24:49,159
downside that's not completely obvious

21318
13:24:46,320 --> 13:24:52,240
from how I've depicted this on

21319
13:24:49,160 --> 13:24:55,680
screen what's the price I'm paying here

21320
13:24:52,240 --> 13:24:57,795
yeah this is a huge amount of memory the

21321
13:24:55,680 --> 13:25:01,360
number of cells here in the array is now

21322
13:24:57,796 --> 13:25:03,916
what 26 * 26 * 26 for the first the

21323
13:25:01,360 --> 13:25:05,756
second and the third possible characters

21324
13:25:03,916 --> 13:25:07,159
all combinatorically combined here

21325
13:25:05,756 --> 13:25:09,240
that's a lot I didn't even draw them I

21326
13:25:07,160 --> 13:25:11,436
have the dot dot dot to evoke that

21327
13:25:09,240 --> 13:25:13,840
instead that's a huge amount of memory

21328
13:25:11,436 --> 13:25:15,756
this is a very sparse data set now and

21329
13:25:13,840 --> 13:25:19,880
odds are you're going to waste so much

21330
13:25:15,756 --> 13:25:21,956
memory even for the names like Hae ha

21331
13:25:19,880 --> 13:25:23,360
like HQ like I can't even think of names

21332
13:25:21,956 --> 13:25:26,680
so many of those buckets are going to be

21333
13:25:23,360 --> 13:25:29,116
empty not to mention the AAA and the zzz

21334
13:25:26,680 --> 13:25:31,040
and everything else in between so it's a

21335
13:25:29,116 --> 13:25:32,640
trade-off and it might be too expensive

21336
13:25:31,040 --> 13:25:34,040
a trade-off and so you might have to

21337
13:25:32,640 --> 13:25:36,000
tolerate something like the collisions

21338
13:25:34,040 --> 13:25:39,520
we had earlier whereby even though they

21339
13:25:36,000 --> 13:25:42,240
might very well happen at least you uh

21340
13:25:39,520 --> 13:25:44,000
are decreasing the probability by

21341
13:25:42,240 --> 13:25:45,840
perhaps having more buckets like this

21342
13:25:44,000 --> 13:25:47,640
and in fact if I rewind now to where we

21343
13:25:45,840 --> 13:25:50,000
might have gone with this here here's

21344
13:25:47,640 --> 13:25:52,360
how we might represent these nodes in

21345
13:25:50,000 --> 13:25:54,080
the tree previously in the past we've

21346
13:25:52,360 --> 13:25:57,276
had a person who had a string name and a

21347
13:25:54,080 --> 13:26:00,520
string number AKA now Char star and so

21348
13:25:57,276 --> 13:26:03,560
here now might be how in this hash table

21349
13:26:00,520 --> 13:26:05,640
we represent someone's name and number

21350
13:26:03,560 --> 13:26:07,795
as well as a pointer to the next element

21351
13:26:05,640 --> 13:26:09,560
in the list we let me rewind just to the

21352
13:26:07,796 --> 13:26:10,720
picture here we keep drawing different

21353
13:26:09,560 --> 13:26:12,159
shapes because again these are

21354
13:26:10,720 --> 13:26:14,160
abstractions who really cares if they're

21355
13:26:12,160 --> 13:26:15,956
to scale now we've got enough room for

21356
13:26:14,160 --> 13:26:18,000
the person's name not pictured on the

21357
13:26:15,956 --> 13:26:20,320
screen is herm's number that's somewhere

21358
13:26:18,000 --> 13:26:22,480
in this rectangle but yes pictured here

21359
13:26:20,320 --> 13:26:25,040
in this little square is a pointer to

21360
13:26:22,480 --> 13:26:27,000
the next node in the list so by storing

21361
13:26:25,040 --> 13:26:28,956
name and number maybe her address maybe

21362
13:26:27,000 --> 13:26:31,640
her mailing address whatever in addition

21363
13:26:28,956 --> 13:26:34,159
to a pointer allows each of these nodes

21364
13:26:31,640 --> 13:26:36,240
to be connectable just like the nodes in

21365
13:26:34,160 --> 13:26:38,720
a linked list but where they're starting

21366
13:26:36,240 --> 13:26:42,320
is in an array so the array gets us like

21367
13:26:38,720 --> 13:26:44,720
126 of or gets us um Narrows the problem

21368
13:26:42,320 --> 13:26:46,840
from size 26 to one gets us to the link

21369
13:26:44,720 --> 13:26:49,796
list in question hopefully it's a single

21370
13:26:46,840 --> 13:26:52,560
person or perhaps it has more than that

21371
13:26:49,796 --> 13:26:54,756
meanwhile what is the hash table itself

21372
13:26:52,560 --> 13:26:57,000
the hash table the whole thing is

21373
13:26:54,756 --> 13:26:59,956
literally just an array I've hardcoded

21374
13:26:57,000 --> 13:27:02,320
the simplest version of size 26 but what

21375
13:26:59,956 --> 13:27:04,840
do each of those boxes in the vertical

21376
13:27:02,320 --> 13:27:06,436
array represent just a pointer to

21377
13:27:04,840 --> 13:27:07,795
potentially a node a node in a length

21378
13:27:06,436 --> 13:27:10,200
list and if there's no one there if

21379
13:27:07,796 --> 13:27:11,916
there's no one in location y or X or the

21380
13:27:10,200 --> 13:27:14,479
like in that Universe well it's just a

21381
13:27:11,916 --> 13:27:16,276
null pointer signifying there's no uh

21382
13:27:14,480 --> 13:27:18,840
one there but if there is it's going to

21383
13:27:16,276 --> 13:27:21,520
be a pointer to a valid node from which

21384
13:27:18,840 --> 13:27:23,039
we can get to any of the others as well

21385
13:27:21,520 --> 13:27:24,200
and that so-called hash function just

21386
13:27:23,040 --> 13:27:26,880
like the one I did with the greeting

21387
13:27:24,200 --> 13:27:28,520
cards well it's just an a black box if

21388
13:27:26,880 --> 13:27:30,755
you will but implemented somewhere in

21389
13:27:28,520 --> 13:27:34,000
code like in C and so if you pass in

21390
13:27:30,756 --> 13:27:35,596
Albus what is the hash value of Albus

21391
13:27:34,000 --> 13:27:38,520
well in the first version of the story

21392
13:27:35,596 --> 13:27:41,276
with 26 buckets it should be a zero if

21393
13:27:38,520 --> 13:27:43,640
you pass in Zacharias it should be 25

21394
13:27:41,276 --> 13:27:46,680
and so just as my cards were being

21395
13:27:43,640 --> 13:27:48,796
hashed to one of 1 2 3 four values now

21396
13:27:46,680 --> 13:27:52,080
these names are being hashed to one of

21397
13:27:48,796 --> 13:27:54,756
26 possibilities or 26 time 26 or 26 to

21398
13:27:52,080 --> 13:27:56,956
the 3 power if you have more and more

21399
13:27:54,756 --> 13:27:59,916
granularity than

21400
13:27:56,956 --> 13:28:05,159
that questions on this implementation

21401
13:27:59,916 --> 13:28:05,159
now of this idea of a hash

21402
13:28:05,630 --> 13:28:10,280
[Music]

21403
13:28:13,796 --> 13:28:19,520
table if uh if you say that again with

21404
13:28:17,400 --> 13:28:19,520
the

21405
13:28:26,420 --> 13:28:30,400
[Music]

21406
13:28:27,916 --> 13:28:31,795
null oh a good question so if there's so

21407
13:28:30,400 --> 13:28:33,840
much spareness there's all of these

21408
13:28:31,796 --> 13:28:35,640
empty cells in the array couldn't you

21409
13:28:33,840 --> 13:28:37,159
just go in and free them or delete them

21410
13:28:35,640 --> 13:28:41,000
or just kind of shrink the array and not

21411
13:28:37,160 --> 13:28:43,400
have a a AA and aab and a a only have

21412
13:28:41,000 --> 13:28:45,840
the prefixes two or three characters

21413
13:28:43,400 --> 13:28:48,116
that you need you absolutely could do

21414
13:28:45,840 --> 13:28:50,596
that but now what you you lose is the

21415
13:28:48,116 --> 13:28:53,680
arithmetic benefit of being able to map

21416
13:28:50,596 --> 13:28:56,520
each letter to a number if you start uh

21417
13:28:53,680 --> 13:28:58,276
freeing up unused space you don't know

21418
13:28:56,520 --> 13:29:00,399
that Zacharias is necessarily at

21419
13:28:58,276 --> 13:29:02,436
location 25 Albus is still going to be

21420
13:29:00,400 --> 13:29:04,040
at location zero but if you've deleted

21421
13:29:02,436 --> 13:29:05,916
some of the elements in the middle

21422
13:29:04,040 --> 13:29:08,720
Zacharias could be at 24 if you've

21423
13:29:05,916 --> 13:29:10,320
deleted one 23 if you've deleted another

21424
13:29:08,720 --> 13:29:12,240
and so you don't have that arithmetic

21425
13:29:10,320 --> 13:29:14,796
immediacy that you need in order to

21426
13:29:12,240 --> 13:29:16,720
index into the array with constant time

21427
13:29:14,796 --> 13:29:19,160
and the same is going to be true if it's

21428
13:29:16,720 --> 13:29:20,596
uh two letters or three letters you need

21429
13:29:19,160 --> 13:29:22,560
to be able to trust that you can do some

21430
13:29:20,596 --> 13:29:24,756
quick math and jump to the right index

21431
13:29:22,560 --> 13:29:26,756
in constant time and that's again the

21432
13:29:24,756 --> 13:29:29,160
appeal of these arrays so when it comes

21433
13:29:26,756 --> 13:29:31,160
to the running time of a hash table

21434
13:29:29,160 --> 13:29:33,400
inserting values into it searching for

21435
13:29:31,160 --> 13:29:35,796
values therein at the end of the day it

21436
13:29:33,400 --> 13:29:38,200
technically is Big O of n because in the

21437
13:29:35,796 --> 13:29:40,680
craziest case you might have a huge

21438
13:29:38,200 --> 13:29:42,880
fancy hash table but everyone in the

21439
13:29:40,680 --> 13:29:44,756
universe has a name starting with h and

21440
13:29:42,880 --> 13:29:47,079
then it just evolves into a really long

21441
13:29:44,756 --> 13:29:48,756
link list just like a binary search tree

21442
13:29:47,080 --> 13:29:50,640
could do the same but if you choose a

21443
13:29:48,756 --> 13:29:52,080
smarter hash function maybe you mitigate

21444
13:29:50,640 --> 13:29:54,000
that and you don't rely only on the

21445
13:29:52,080 --> 13:29:56,160
first letter but on the second or the

21446
13:29:54,000 --> 13:29:57,840
third as well or some other combination

21447
13:29:56,160 --> 13:30:00,080
of that input and make your hash

21448
13:29:57,840 --> 13:30:02,115
function smarter odds are if you get a

21449
13:30:00,080 --> 13:30:04,680
good hash function you want it get it to

21450
13:30:02,116 --> 13:30:06,840
be more of like order of n divided by K

21451
13:30:04,680 --> 13:30:09,000
where K means constant mathematically

21452
13:30:06,840 --> 13:30:10,560
and so K is the number of buckets so

21453
13:30:09,000 --> 13:30:12,360
ideally you want like a uniform

21454
13:30:10,560 --> 13:30:14,399
distribution you want like this many

21455
13:30:12,360 --> 13:30:16,720
people here this many people here you

21456
13:30:14,400 --> 13:30:18,400
don't want there to be some or no people

21457
13:30:16,720 --> 13:30:20,400
you want a uniform statistical

21458
13:30:18,400 --> 13:30:21,840
distribution and maybe you get that from

21459
13:30:20,400 --> 13:30:24,000
Human names maybe you don't but that's

21460
13:30:21,840 --> 13:30:26,000
kind of the challenge of a hash function

21461
13:30:24,000 --> 13:30:28,040
of course Big O of n over K is not a

21462
13:30:26,000 --> 13:30:30,720
thing because we always throw away

21463
13:30:28,040 --> 13:30:33,360
constants like K so it's still Big O of

21464
13:30:30,720 --> 13:30:35,160
n but again the distinction today is

21465
13:30:33,360 --> 13:30:37,160
that okay yes academically you learned

21466
13:30:35,160 --> 13:30:39,480
in cs50 that sure it's Big O ofin but my

21467
13:30:37,160 --> 13:30:41,720
God it's 26 times faster if you do the

21468
13:30:39,480 --> 13:30:44,200
hash function well and you spread

21469
13:30:41,720 --> 13:30:46,200
everyone out over the hash table and

21470
13:30:44,200 --> 13:30:47,479
that's the appeal of these kinds of

21471
13:30:46,200 --> 13:30:50,880
structures

21472
13:30:47,480 --> 13:30:54,276
and we've got one more for you if I may

21473
13:30:50,880 --> 13:30:56,880
something now known as a try so it turns

21474
13:30:54,276 --> 13:31:00,079
out that a try is even cooler if you

21475
13:30:56,880 --> 13:31:03,916
like this kind of thing in that it does

21476
13:31:00,080 --> 13:31:05,916
not devolve into Big O of n it is truly

21477
13:31:03,916 --> 13:31:08,755
constant time but there's going to be a

21478
13:31:05,916 --> 13:31:12,159
price there's going to be a gotcha a try

21479
13:31:08,756 --> 13:31:14,560
is sort of a fancier tree and it's short

21480
13:31:12,160 --> 13:31:17,116
for retrieval but pronounced try for

21481
13:31:14,560 --> 13:31:21,000
weird historical reasons but a try is a

21482
13:31:17,116 --> 13:31:22,756
tree each of whose nodes is an array

21483
13:31:21,000 --> 13:31:24,080
right so this is all like crazy mashups

21484
13:31:22,756 --> 13:31:25,360
now people started inventing data

21485
13:31:24,080 --> 13:31:26,680
structures just by combining different

21486
13:31:25,360 --> 13:31:30,480
ones unfortunately a lot of the good

21487
13:31:26,680 --> 13:31:32,276
ideas are taken but you just have

21488
13:31:30,480 --> 13:31:33,520
benefits from certain aspects of those

21489
13:31:32,276 --> 13:31:34,880
data structures and combining them

21490
13:31:33,520 --> 13:31:36,880
ideally gives you the best of both

21491
13:31:34,880 --> 13:31:39,159
worlds so to speak so here might be the

21492
13:31:36,880 --> 13:31:41,115
root of a try it's literally a big node

21493
13:31:39,160 --> 13:31:43,520
a big rectangle but it's actually an

21494
13:31:41,116 --> 13:31:45,796
array so there's like 26 locations in

21495
13:31:43,520 --> 13:31:48,520
this picture here and here's how you use

21496
13:31:45,796 --> 13:31:51,640
a try for instance to store names just

21497
13:31:48,520 --> 13:31:54,000
like the hash table it you treat each of

21498
13:31:51,640 --> 13:31:55,520
the elements of that array in that node

21499
13:31:54,000 --> 13:31:58,200
as like a letter of the alphabet so a

21500
13:31:55,520 --> 13:32:00,795
through z or 0 through 25 and if you

21501
13:31:58,200 --> 13:32:03,039
want to store someone's name in here you

21502
13:32:00,796 --> 13:32:06,480
do so as follows if you want to store

21503
13:32:03,040 --> 13:32:08,400
like uh an H you index into the H

21504
13:32:06,480 --> 13:32:10,480
location and if you want to store the

21505
13:32:08,400 --> 13:32:13,640
second letter of someone's name like an

21506
13:32:10,480 --> 13:32:15,680
a well you add another node below it and

21507
13:32:13,640 --> 13:32:18,436
such one is connected to the other and

21508
13:32:15,680 --> 13:32:20,720
you then identify the a in that array

21509
13:32:18,436 --> 13:32:23,240
and then you go on and maybe put a g if

21510
13:32:20,720 --> 13:32:26,240
the goal is to store spoiler now Hagrid

21511
13:32:23,240 --> 13:32:28,360
in this data structure and then the r

21512
13:32:26,240 --> 13:32:30,159
and the I and then the D but when you

21513
13:32:28,360 --> 13:32:32,000
get to the D the end of the name you

21514
13:32:30,160 --> 13:32:34,640
have to somehow flag that this is the

21515
13:32:32,000 --> 13:32:36,400
end of a name that we've embedded into

21516
13:32:34,640 --> 13:32:38,000
this data structure so whereas all of

21517
13:32:36,400 --> 13:32:39,680
these are called out in white just to

21518
13:32:38,000 --> 13:32:42,040
make obvious what we're connecting to

21519
13:32:39,680 --> 13:32:44,116
what green has to be like a bull that's

21520
13:32:42,040 --> 13:32:46,756
true that just indicates like the buck

21521
13:32:44,116 --> 13:32:49,596
stops here like d is the last letter in

21522
13:32:46,756 --> 13:32:52,360
someone's actual name and what's kind of

21523
13:32:49,596 --> 13:32:54,435
cool now about a try is that we can

21524
13:32:52,360 --> 13:32:56,520
repeat this for other names as well so

21525
13:32:54,436 --> 13:32:58,956
for instance here is where we might put

21526
13:32:56,520 --> 13:33:03,479
Harry as well and notice they share a

21527
13:32:58,956 --> 13:33:05,596
common prefix ha for Hagrid ha for Harry

21528
13:33:03,480 --> 13:33:07,360
so we're reusing some of these nodes

21529
13:33:05,596 --> 13:33:09,479
some of these arrays we can even slip

21530
13:33:07,360 --> 13:33:13,320
Hermione in here too borrowing only the

21531
13:33:09,480 --> 13:33:16,400
H but she gets the H then the E then r r

21532
13:33:13,320 --> 13:33:18,796
m i o n e and so forth and we Mark at

21533
13:33:16,400 --> 13:33:22,000
the end of her name too that she's in

21534
13:33:18,796 --> 13:33:25,276
there now what's the takeaway here well

21535
13:33:22,000 --> 13:33:28,080
what is the running time of a try how

21536
13:33:25,276 --> 13:33:29,560
many steps does it take to find someone

21537
13:33:28,080 --> 13:33:31,360
in this data structure and let me zoom

21538
13:33:29,560 --> 13:33:33,399
out so that it sort of suddenly becomes

21539
13:33:31,360 --> 13:33:36,596
a massive data structure with even more

21540
13:33:33,400 --> 13:33:37,720
in it uh maybe it looks sorry no I'll

21541
13:33:36,596 --> 13:33:38,880
keep it on this one maybe it looks a

21542
13:33:37,720 --> 13:33:40,880
little something like this with just

21543
13:33:38,880 --> 13:33:44,880
these three names but how many steps

21544
13:33:40,880 --> 13:33:47,360
does it take to find Hagrid or Harry or

21545
13:33:44,880 --> 13:33:49,240
Hermione no matter how many names are in

21546
13:33:47,360 --> 13:33:54,400
this data structure there's three at the

21547
13:33:49,240 --> 13:33:58,479
moment but it takes what h a g r i d so

21548
13:33:54,400 --> 13:34:02,480
six steps to find Hagrid uh h a r r y

21549
13:33:58,480 --> 13:34:05,880
five steps to find Harry h e r m i o n e

21550
13:34:02,480 --> 13:34:08,160
eight steps to find Hermione but notice

21551
13:34:05,880 --> 13:34:10,479
that those steps are only dependent on

21552
13:34:08,160 --> 13:34:12,436
what the lengths of the human's names

21553
13:34:10,480 --> 13:34:14,520
and let's assume that no one's going to

21554
13:34:12,436 --> 13:34:16,400
have a infinitely long name it's going

21555
13:34:14,520 --> 13:34:18,520
to max out at what like eight no maybe

21556
13:34:16,400 --> 13:34:20,640
eight 18 maybe 20 30 there's actually

21557
13:34:18,520 --> 13:34:22,596
some pretty long human names out there

21558
13:34:20,640 --> 13:34:26,080
but it's going to be finite you know

21559
13:34:22,596 --> 13:34:28,720
it's abounded whereas most contexts n

21560
13:34:26,080 --> 13:34:30,360
could grow forever so what's compelling

21561
13:34:28,720 --> 13:34:32,276
here is if you assume that the longest

21562
13:34:30,360 --> 13:34:34,956
name is I don't know 50 for the sake of

21563
13:34:32,276 --> 13:34:36,560
a theme here then you know that finding

21564
13:34:34,956 --> 13:34:39,400
anyone in this data structure will take

21565
13:34:36,560 --> 13:34:41,840
you no more than 50 steps 50 is thus a

21566
13:34:39,400 --> 13:34:44,400
constant which means you have big O of

21567
13:34:41,840 --> 13:34:46,079
one running time it doesn't matter if

21568
13:34:44,400 --> 13:34:47,880
there's a million people in this phone

21569
13:34:46,080 --> 13:34:49,360
book or a billion people in this phone

21570
13:34:47,880 --> 13:34:50,916
book that's going to definitely add more

21571
13:34:49,360 --> 13:34:55,276
nodes to it but it's still going to take

21572
13:34:50,916 --> 13:34:58,040
you h a r uh sorry h a g r i d six steps

21573
13:34:55,276 --> 13:35:00,520
to find Hagrid h a r r y five steps to

21574
13:34:58,040 --> 13:35:03,360
find Harry even if there's a billion

21575
13:35:00,520 --> 13:35:05,916
other people in that data structure so

21576
13:35:03,360 --> 13:35:07,240
now we actually do seem to have constant

21577
13:35:05,916 --> 13:35:09,520
time if you assume that there's going to

21578
13:35:07,240 --> 13:35:12,320
be a bound on the length of the name why

21579
13:35:09,520 --> 13:35:13,795
don't we use tries for everything then

21580
13:35:12,320 --> 13:35:15,756
what's the price we're paying for this

21581
13:35:13,796 --> 13:35:19,160
data structure even though we've

21582
13:35:15,756 --> 13:35:22,160
represented just three characters here

21583
13:35:19,160 --> 13:35:24,116
yeah it's a lot of memory yeah and you

21584
13:35:22,160 --> 13:35:26,160
can see it even with these three names

21585
13:35:24,116 --> 13:35:28,640
most of the squares on the screen are

21586
13:35:26,160 --> 13:35:30,400
empty like bites and bits that are there

21587
13:35:28,640 --> 13:35:31,560
and are allocated and they need to be

21588
13:35:30,400 --> 13:35:33,756
there because you need to be able to do

21589
13:35:31,560 --> 13:35:35,560
that arithmetic thing of this being zero

21590
13:35:33,756 --> 13:35:37,000
this being 25 so you can jump from boom

21591
13:35:35,560 --> 13:35:39,840
boom boom boom based on each of the

21592
13:35:37,000 --> 13:35:41,596
letters but it's a hugely sparse data

21593
13:35:39,840 --> 13:35:44,000
structure which means it takes up a

21594
13:35:41,596 --> 13:35:46,520
crazy amount of memory now maybe that's

21595
13:35:44,000 --> 13:35:47,756
tolerable especially for short names but

21596
13:35:46,520 --> 13:35:49,680
that's going to be the trade-off as well

21597
13:35:47,756 --> 13:35:52,596
and this is such a tension in Computing

21598
13:35:49,680 --> 13:35:54,596
almost any time you want to improve time

21599
13:35:52,596 --> 13:35:56,159
you want to speed up the efficiency the

21600
13:35:54,596 --> 13:35:58,916
speed of your algorithm you're going to

21601
13:35:56,160 --> 13:36:00,956
spend space if by contrast you want to

21602
13:35:58,916 --> 13:36:03,000
decrease the amount of space you might

21603
13:36:00,956 --> 13:36:05,116
very well have to increase the running

21604
13:36:03,000 --> 13:36:07,116
time it is indeed this seesaw back and

21605
13:36:05,116 --> 13:36:09,400
forth and you your colleagues your

21606
13:36:07,116 --> 13:36:11,880
company need to decide what resource is

21607
13:36:09,400 --> 13:36:13,320
the most precious heck it might be much

21608
13:36:11,880 --> 13:36:15,079
harder to code one of these data

21609
13:36:13,320 --> 13:36:16,720
structures than another you're a human

21610
13:36:15,080 --> 13:36:19,040
your time is valuable do you really want

21611
13:36:16,720 --> 13:36:20,520
to spend hours implementing a try when

21612
13:36:19,040 --> 13:36:22,480
you know hey in 30 minutes I can bang

21613
13:36:20,520 --> 13:36:24,435
out an array nowadays or a linked list

21614
13:36:22,480 --> 13:36:26,116
even there too development time is going

21615
13:36:24,436 --> 13:36:27,840
to be yet another resource and why

21616
13:36:26,116 --> 13:36:30,240
sometimes there's good code or bad code

21617
13:36:27,840 --> 13:36:31,916
it depends on what you're prioritizing

21618
13:36:30,240 --> 13:36:34,159
so what do each of these nodes look like

21619
13:36:31,916 --> 13:36:35,916
in a try well we can keep calling it a

21620
13:36:34,160 --> 13:36:37,200
node this is a very generic term for

21621
13:36:35,916 --> 13:36:40,000
just a container in these data

21622
13:36:37,200 --> 13:36:43,000
structures in this story though let me

21623
13:36:40,000 --> 13:36:46,400
claim that everyone has a number like a

21624
13:36:43,000 --> 13:36:49,116
phone number a string akhr star every

21625
13:36:46,400 --> 13:36:52,000
every node has 26 children or

21626
13:36:49,116 --> 13:36:54,436
technically an array of size 26 that can

21627
13:36:52,000 --> 13:36:57,040
point to more of these nodes notice that

21628
13:36:54,436 --> 13:36:59,400
I don't need to store the name of

21629
13:36:57,040 --> 13:37:01,360
someone in a try because it's implicit

21630
13:36:59,400 --> 13:37:03,040
in the path that you take to find them

21631
13:37:01,360 --> 13:37:05,480
so that's a minor optimization but it

21632
13:37:03,040 --> 13:37:07,276
saves us some space but this would be

21633
13:37:05,480 --> 13:37:10,640
just a different data structure we could

21634
13:37:07,276 --> 13:37:12,840
use to actually solve this problem as

21635
13:37:10,640 --> 13:37:14,436
well albeit at a very expensive cost and

21636
13:37:12,840 --> 13:37:16,880
what do we need our variable to be that

21637
13:37:14,436 --> 13:37:19,080
stores the try just like four we just

21638
13:37:16,880 --> 13:37:21,479
need a single pointer that hangs on to

21639
13:37:19,080 --> 13:37:23,680
the root of this structure that's null

21640
13:37:21,480 --> 13:37:25,160
if it's empty or non-null if it's

21641
13:37:23,680 --> 13:37:28,480
actually pointing at

21642
13:37:25,160 --> 13:37:30,756
something any questions then on

21643
13:37:28,480 --> 13:37:32,720
tries and if it's feeling like a lot the

21644
13:37:30,756 --> 13:37:35,680
fire the the fire hydrant it is we

21645
13:37:32,720 --> 13:37:38,200
started with arrays then link list then

21646
13:37:35,680 --> 13:37:39,400
tries but questions on how we've just

21647
13:37:38,200 --> 13:37:41,020
assembled from these basic building

21648
13:37:39,400 --> 13:37:43,680
blocks

21649
13:37:41,020 --> 13:37:46,560
[Music]

21650
13:37:43,680 --> 13:37:50,240
yeah a good question why is this not uh

21651
13:37:46,560 --> 13:37:52,320
size 26 uh it's just like with the try

21652
13:37:50,240 --> 13:37:54,880
just like with the link list before it

21653
13:37:52,320 --> 13:37:56,520
just tends to be en code convenient to

21654
13:37:54,880 --> 13:37:58,200
have a separate additional pointer

21655
13:37:56,520 --> 13:37:59,680
that's small that just points to the

21656
13:37:58,200 --> 13:38:01,596
beginning of the data structure because

21657
13:37:59,680 --> 13:38:03,520
that way it can be null thereby clearly

21658
13:38:01,596 --> 13:38:05,640
indicating there are no nodes the whole

21659
13:38:03,520 --> 13:38:08,596
structure is empty if you allocated one

21660
13:38:05,640 --> 13:38:10,159
of those nodes you absolutely could but

21661
13:38:08,596 --> 13:38:12,079
then you'd be just wasting space even if

21662
13:38:10,160 --> 13:38:13,880
it's empty and it creates an ambiguity

21663
13:38:12,080 --> 13:38:15,840
so just having a single pointer linked

21664
13:38:13,880 --> 13:38:18,916
to the beginnings of all of these things

21665
13:38:15,840 --> 13:38:25,240
is a good thing other questions now on

21666
13:38:18,916 --> 13:38:28,840
tries or trees or hash tables or

21667
13:38:25,240 --> 13:38:31,840
arrays so what problems might arise well

21668
13:38:28,840 --> 13:38:35,276
here's a counter example what names are

21669
13:38:31,840 --> 13:38:35,276
manifest in this try

21670
13:38:35,480 --> 13:38:39,480
here feel free to just call it

21671
13:38:40,520 --> 13:38:47,079
out what do you

21672
13:38:42,596 --> 13:38:49,520
see Danielle and Danielle so presumably

21673
13:38:47,080 --> 13:38:51,276
if these are two uh names here one of

21674
13:38:49,520 --> 13:38:53,039
which is a prefix of another notice that

21675
13:38:51,276 --> 13:38:54,720
the data structure still works and I

21676
13:38:53,040 --> 13:38:56,116
chose you know a friend's name and then

21677
13:38:54,720 --> 13:38:57,680
appended a couple of more characters to

21678
13:38:56,116 --> 13:39:01,116
it that's also a name because we have

21679
13:38:57,680 --> 13:39:02,840
here d a n i e l and the green

21680
13:39:01,116 --> 13:39:04,200
technically is implemented as a bull or

21681
13:39:02,840 --> 13:39:05,755
something like that that indicates a

21682
13:39:04,200 --> 13:39:08,320
word stops here but we don't want to

21683
13:39:05,756 --> 13:39:10,956
preclude storing Danielle as well who's

21684
13:39:08,320 --> 13:39:12,680
a super string if you will of Daniel and

21685
13:39:10,956 --> 13:39:14,520
so that's okay too so long as the

21686
13:39:12,680 --> 13:39:17,080
structure allows for the pointers to

21687
13:39:14,520 --> 13:39:19,320
keep going so even that works out okay

21688
13:39:17,080 --> 13:39:20,916
whereas it might not have otherwise and

21689
13:39:19,320 --> 13:39:23,720
in terms of the running time just to be

21690
13:39:20,916 --> 13:39:27,159
clear at the end of the day tries do

21691
13:39:23,720 --> 13:39:29,320
give you actual constant time for

21692
13:39:27,160 --> 13:39:31,400
insertions lookups deletions and the

21693
13:39:29,320 --> 13:39:34,360
like because it's dependent only on the

21694
13:39:31,400 --> 13:39:36,360
length of the input the key if you will

21695
13:39:34,360 --> 13:39:39,680
and not on how many other people are in

21696
13:39:36,360 --> 13:39:41,956
your phone or a dress book and now

21697
13:39:39,680 --> 13:39:43,916
thought we'd conclude with a visual if

21698
13:39:41,956 --> 13:39:47,080
you've gotten out into the square anyone

21699
13:39:43,916 --> 13:39:49,240
recognize this okay okay sweet green a

21700
13:39:47,080 --> 13:39:51,596
local salad place what are we looking at

21701
13:39:49,240 --> 13:39:52,880
here and what's its connection to today

21702
13:39:51,596 --> 13:39:54,320
um you're about to become all the

21703
13:39:52,880 --> 13:39:56,719
geekier in the real world cuz you will

21704
13:39:54,320 --> 13:39:59,560
start to see data structures

21705
13:39:56,720 --> 13:40:03,000
everywhere what is this or how does this

21706
13:39:59,560 --> 13:40:03,880
work maybe in salad form who's been to

21707
13:40:03,000 --> 13:40:06,880
Sweet

21708
13:40:03,880 --> 13:40:08,110
green okay either of you so how does

21709
13:40:06,880 --> 13:40:11,168
this

21710
13:40:08,110 --> 13:40:11,169
[Music]

21711
13:40:15,040 --> 13:40:19,756
work okay good so if you order a salad

21712
13:40:17,720 --> 13:40:22,756
for someone named L when it's ready they

21713
13:40:19,756 --> 13:40:24,720
put it in the l section here and so this

21714
13:40:22,756 --> 13:40:26,200
is kind of a set of key value pairs

21715
13:40:24,720 --> 13:40:28,080
right if L is the first letter of

21716
13:40:26,200 --> 13:40:30,079
someone's name the value hopefully is

21717
13:40:28,080 --> 13:40:32,080
the salad and so what you kind of have

21718
13:40:30,080 --> 13:40:33,796
here is a dictionary key value pairs

21719
13:40:32,080 --> 13:40:36,040
where it's not words and definitions

21720
13:40:33,796 --> 13:40:38,240
it's names and salads and you can think

21721
13:40:36,040 --> 13:40:40,160
of this too as kind of a hash table why

21722
13:40:38,240 --> 13:40:42,200
even though it actually doesn't fit on

21723
13:40:40,160 --> 13:40:43,916
one long shelf cu the store is only so

21724
13:40:42,200 --> 13:40:45,840
big this is really an array and

21725
13:40:43,916 --> 13:40:47,880
apparently a is missing or maybe it's

21726
13:40:45,840 --> 13:40:49,520
around around the corner but this array

21727
13:40:47,880 --> 13:40:51,200
just happens to wrap onto multiple lines

21728
13:40:49,520 --> 13:40:53,560
but it's still conceptually a single

21729
13:40:51,200 --> 13:40:56,680
Dimension but suppose two people have

21730
13:40:53,560 --> 13:40:56,680
the name L what do they do

21731
13:40:58,680 --> 13:41:03,040
typically yeah so maybe they they well

21732
13:41:01,480 --> 13:41:04,240
if they run put that much effort into it

21733
13:41:03,040 --> 13:41:05,720
they might look at the second letter and

21734
13:41:04,240 --> 13:41:07,479
then the third letter odds are this is

21735
13:41:05,720 --> 13:41:09,160
not that interesting a problem to solve

21736
13:41:07,480 --> 13:41:11,796
optimally in that way but they probably

21737
13:41:09,160 --> 13:41:13,400
do start stacking the salads on top of

21738
13:41:11,796 --> 13:41:15,040
each other maybe scooching it over just

21739
13:41:13,400 --> 13:41:16,840
a little bit and so what do you have

21740
13:41:15,040 --> 13:41:19,160
there well now you start to view the

21741
13:41:16,840 --> 13:41:20,479
lens through like cs50 glasses like okay

21742
13:41:19,160 --> 13:41:21,596
you have an array and then you have like

21743
13:41:20,480 --> 13:41:23,080
these link lists that are sort of

21744
13:41:21,596 --> 13:41:24,680
growing here but even then you run into

21745
13:41:23,080 --> 13:41:26,000
a problem why because it's not really a

21746
13:41:24,680 --> 13:41:28,080
link list because at some point you're

21747
13:41:26,000 --> 13:41:29,916
going to hit the boundary here so it's

21748
13:41:28,080 --> 13:41:31,560
kind of like an array of arrays because

21749
13:41:29,916 --> 13:41:33,880
you can only fit what like three or four

21750
13:41:31,560 --> 13:41:35,596
salads here and so long story short we

21751
13:41:33,880 --> 13:41:37,755
started today deliberately talking about

21752
13:41:35,596 --> 13:41:39,596
real world things like stacks and cues

21753
13:41:37,756 --> 13:41:41,756
and even though it did escalate quickly

21754
13:41:39,596 --> 13:41:43,956
into binary search trees and hash tables

21755
13:41:41,756 --> 13:41:45,560
and tries even those things are

21756
13:41:43,956 --> 13:41:47,400
everywhere even though they don't call

21757
13:41:45,560 --> 13:41:49,320
them as such these are just solutions to

21758
13:41:47,400 --> 13:41:51,276
problems and now with this final week of

21759
13:41:49,320 --> 13:41:53,159
SE under your belt you have all the more

21760
13:41:51,276 --> 13:41:55,400
of a technical toolkit via which to

21761
13:41:53,160 --> 13:41:57,276
implement these things and code next

21762
13:41:55,400 --> 13:41:58,640
week we'll be able to trust that someone

21763
13:41:57,276 --> 13:42:00,756
else solved all these problems we'll

21764
13:41:58,640 --> 13:42:02,916
introduce Python and lines of code like

21765
13:42:00,756 --> 13:42:04,400
this will finally become lines of code

21766
13:42:02,916 --> 13:42:06,159
like that so that's the promise ahead

21767
13:42:04,400 --> 13:42:08,820
and we'll see you next

21768
13:42:06,160 --> 13:42:12,690
[Applause]

21769
13:42:08,820 --> 13:42:12,690
[Music]

21770
13:42:14,880 --> 13:42:17,880
time

21771
13:42:22,920 --> 13:42:31,250
[Music]

21772
13:42:51,140 --> 13:42:54,309
[Music]

21773
13:42:56,360 --> 13:43:00,110
[Music]

21774
13:43:14,796 --> 13:43:17,796
yeah

21775
13:43:31,350 --> 13:43:38,220
[Applause]

21776
13:43:31,580 --> 13:43:38,220
[Music]

21777
13:43:38,290 --> 13:43:42,120
[Applause]

21778
13:43:44,756 --> 13:43:47,756
yeah

21779
13:43:51,540 --> 13:43:56,970
[Music]

21780
13:43:57,400 --> 13:44:03,520
all right this is cs50 and this is week

21781
13:44:00,756 --> 13:44:06,240
six wherein we finally transitioned from

21782
13:44:03,520 --> 13:44:08,755
scratch to see to now Python and indeed

21783
13:44:06,240 --> 13:44:11,720
this is going to be somewhat of a unique

21784
13:44:08,756 --> 13:44:14,400
experience in that just like a few weeks

21785
13:44:11,720 --> 13:44:16,160
past perhaps for the first time and now

21786
13:44:14,400 --> 13:44:17,520
uh today you're going to learn a new

21787
13:44:16,160 --> 13:44:20,160
language but the goal isn't just to

21788
13:44:17,520 --> 13:44:22,359
throw another fire hose of content and

21789
13:44:20,160 --> 13:44:24,200
syntax and whatnot at you but rather to

21790
13:44:22,360 --> 13:44:26,040
really equip you all to actually teach

21791
13:44:24,200 --> 13:44:27,560
yourself new languages in the future and

21792
13:44:26,040 --> 13:44:29,436
so indeed what we'll do today what we'll

21793
13:44:27,560 --> 13:44:31,916
do this coming week is sort of prepare

21794
13:44:29,436 --> 13:44:33,640
you to stand on your own and once python

21795
13:44:31,916 --> 13:44:35,000
is p a and the world has moved on to

21796
13:44:33,640 --> 13:44:36,916
some other language in some number of

21797
13:44:35,000 --> 13:44:38,276
years you'll be well equipped to figure

21798
13:44:36,916 --> 13:44:40,040
out how to wrap your mind around some

21799
13:44:38,276 --> 13:44:41,956
new syntax some new language and solve

21800
13:44:40,040 --> 13:44:44,040
problems as well now you recall in week

21801
13:44:41,956 --> 13:44:46,320
zero this is where we started just

21802
13:44:44,040 --> 13:44:48,640
saying hello to the world and that

21803
13:44:46,320 --> 13:44:50,480
quickly escalated just a week later in C

21804
13:44:48,640 --> 13:44:52,479
to see be something much much more

21805
13:44:50,480 --> 13:44:54,200
cryptic and if you've still sort of

21806
13:44:52,480 --> 13:44:55,520
struggled with some of the syntax find

21807
13:44:54,200 --> 13:44:57,640
yourself checking your notes or your

21808
13:44:55,520 --> 13:44:59,359
previous code like that's totally normal

21809
13:44:57,640 --> 13:45:02,200
and that's one of the reasons why there

21810
13:44:59,360 --> 13:45:04,080
are languages besides C out there among

21811
13:45:02,200 --> 13:45:06,240
them this language called python humans

21812
13:45:04,080 --> 13:45:07,916
over the decades have realized gee that

21813
13:45:06,240 --> 13:45:09,840
wasn't necessarily the best designed

21814
13:45:07,916 --> 13:45:11,680
decision or humans have realized wow you

21815
13:45:09,840 --> 13:45:14,359
know what now that computers have gotten

21816
13:45:11,680 --> 13:45:16,400
faster with more memory and more faster

21817
13:45:14,360 --> 13:45:18,956
CPUs we can actually do more with our

21818
13:45:16,400 --> 13:45:20,680
programming languages so just as human

21819
13:45:18,956 --> 13:45:22,436
languages evolve so do actual

21820
13:45:20,680 --> 13:45:24,240
programming languages and even within a

21821
13:45:22,436 --> 13:45:26,200
programming language there's typically

21822
13:45:24,240 --> 13:45:29,320
different versions We for instance have

21823
13:45:26,200 --> 13:45:32,115
been using version C11 of C which was

21824
13:45:29,320 --> 13:45:33,880
updated in 2011 um but python itself

21825
13:45:32,116 --> 13:45:36,320
continues to evolve and it's now up to

21826
13:45:33,880 --> 13:45:37,755
version three plus and so there too

21827
13:45:36,320 --> 13:45:40,116
these things will evolve in the coming

21828
13:45:37,756 --> 13:45:42,400
days thankfully what you're about to see

21829
13:45:40,116 --> 13:45:44,240
is hello world for the third time but

21830
13:45:42,400 --> 13:45:47,240
it's going to be literally this none of

21831
13:45:44,240 --> 13:45:50,436
the crazy syntax above or below fewer

21832
13:45:47,240 --> 13:45:52,200
semicolons if any fewer curly braces and

21833
13:45:50,436 --> 13:45:54,640
really a lot of the distractions get out

21834
13:45:52,200 --> 13:45:56,520
of the way so to get there let's

21835
13:45:54,640 --> 13:45:58,596
consider exactly how we've been

21836
13:45:56,520 --> 13:46:00,956
programming up until now so you write a

21837
13:45:58,596 --> 13:46:02,956
program in C and you've got hopefully no

21838
13:46:00,956 --> 13:46:05,000
syntax error so you're ready to build it

21839
13:46:02,956 --> 13:46:06,640
that is compil it and so you've run make

21840
13:46:05,000 --> 13:46:09,560
and then you've run the program like/

21841
13:46:06,640 --> 13:46:11,040
hello or if you think back to week two

21842
13:46:09,560 --> 13:46:12,399
where we took a peak underneath the hood

21843
13:46:11,040 --> 13:46:14,596
of what make is doing it's really

21844
13:46:12,400 --> 13:46:16,276
running the actual compiler something

21845
13:46:14,596 --> 13:46:18,159
called clang maybe with some command

21846
13:46:16,276 --> 13:46:21,320
line arguments creating a program called

21847
13:46:18,160 --> 13:46:22,596
hello and then you could do do/ hello so

21848
13:46:21,320 --> 13:46:24,240
today you're going to start doing

21849
13:46:22,596 --> 13:46:26,596
something similar in spirit but fewer

21850
13:46:24,240 --> 13:46:28,200
steps no longer will you have to compile

21851
13:46:26,596 --> 13:46:30,040
your code and then run it and then maybe

21852
13:46:28,200 --> 13:46:32,240
fix or change it and then compile your

21853
13:46:30,040 --> 13:46:34,520
code and run it and then repeat repeat

21854
13:46:32,240 --> 13:46:36,795
the process of running your code is

21855
13:46:34,520 --> 13:46:38,520
going to be distilled into just a single

21856
13:46:36,796 --> 13:46:40,956
step and the way to think of this for

21857
13:46:38,520 --> 13:46:43,320
now is that where a c is frequently used

21858
13:46:40,956 --> 13:46:45,520
as indeed a compiled language whereby

21859
13:46:43,320 --> 13:46:46,796
you convert it first to zeros and ones

21860
13:46:45,520 --> 13:46:48,916
Python's going to let you speed things

21861
13:46:46,796 --> 13:46:50,640
up whereby you the human programmer

21862
13:46:48,916 --> 13:46:51,916
don't have to compile it you're just

21863
13:46:50,640 --> 13:46:54,680
going to run what's called an

21864
13:46:51,916 --> 13:46:56,795
interpreter which by Design is named the

21865
13:46:54,680 --> 13:46:59,040
exact same thing as the language itself

21866
13:46:56,796 --> 13:47:00,956
and by running this program installed in

21867
13:46:59,040 --> 13:47:02,880
VSS code or eventually on your own Max

21868
13:47:00,956 --> 13:47:05,200
or PCS this is just going to tell your

21869
13:47:02,880 --> 13:47:07,200
computer to interpret this code and

21870
13:47:05,200 --> 13:47:08,680
figure out how to get down to that lower

21871
13:47:07,200 --> 13:47:10,680
level of zeros and ones but you don't

21872
13:47:08,680 --> 13:47:14,320
have to compile the code yourself

21873
13:47:10,680 --> 13:47:15,756
anymore so with that said let's consider

21874
13:47:14,320 --> 13:47:17,560
what the code is going to look like side

21875
13:47:15,756 --> 13:47:19,276
by side in fact let's look back at some

21876
13:47:17,560 --> 13:47:21,399
scratch blocks just like we did with C

21877
13:47:19,276 --> 13:47:22,795
in week one and do some side by sides

21878
13:47:21,400 --> 13:47:23,956
because even though some of the syntax

21879
13:47:22,796 --> 13:47:26,360
this week and Beyond's going to be

21880
13:47:23,956 --> 13:47:28,400
different like the ideas are truly going

21881
13:47:26,360 --> 13:47:30,840
to be the same there's not all that much

21882
13:47:28,400 --> 13:47:32,560
intellectually new just yet so whereas

21883
13:47:30,840 --> 13:47:34,399
in week zero we might have said hello to

21884
13:47:32,560 --> 13:47:36,720
the world with this purple puzzle piece

21885
13:47:34,400 --> 13:47:40,200
today of course uh or rather in week one

21886
13:47:36,720 --> 13:47:41,596
it looked like this in C but today

21887
13:47:40,200 --> 13:47:43,795
moving forward it's going to quite

21888
13:47:41,596 --> 13:47:45,880
simply look like this instead and if we

21889
13:47:43,796 --> 13:47:48,276
go back and forth for just a moment here

21890
13:47:45,880 --> 13:47:50,596
again is the version in C noticing the

21891
13:47:48,276 --> 13:47:53,040
very seike characteristics and just at a

21892
13:47:50,596 --> 13:47:55,320
glance here in Python I claim it's now

21893
13:47:53,040 --> 13:47:56,840
this what do you apparently need not

21894
13:47:55,320 --> 13:48:00,680
worry about

21895
13:47:56,840 --> 13:48:01,956
anymore what's gone so semicolon is gone

21896
13:48:00,680 --> 13:48:03,720
and indeed you don't need those to

21897
13:48:01,956 --> 13:48:07,080
finish most of your thoughts anymore

21898
13:48:03,720 --> 13:48:08,436
anything else so the back sln is absent

21899
13:48:07,080 --> 13:48:10,240
and that's kind of curious because we're

21900
13:48:08,436 --> 13:48:11,916
still going to get a new line but we'll

21901
13:48:10,240 --> 13:48:13,360
see that it's become the default and

21902
13:48:11,916 --> 13:48:15,435
this one's a little more subtle but now

21903
13:48:13,360 --> 13:48:17,560
the function is called print instead of

21904
13:48:15,436 --> 13:48:20,160
print F so it's a little more familiar

21905
13:48:17,560 --> 13:48:22,596
in that sense all right so when it comes

21906
13:48:20,160 --> 13:48:24,200
to using libraries that is code that

21907
13:48:22,596 --> 13:48:25,916
other people have written in the past

21908
13:48:24,200 --> 13:48:28,719
we've done things like hash include

21909
13:48:25,916 --> 13:48:31,115
cs50.h to use cs50's own header file or

21910
13:48:28,720 --> 13:48:32,880
standard IO or standard lib or string or

21911
13:48:31,116 --> 13:48:34,720
any number of other header files you

21912
13:48:32,880 --> 13:48:36,360
have all used well moving forward we're

21913
13:48:34,720 --> 13:48:38,680
going to give you for this first week a

21914
13:48:36,360 --> 13:48:40,436
similar cs-50 Library just very

21915
13:48:38,680 --> 13:48:42,200
short-term uh training wheels that will

21916
13:48:40,436 --> 13:48:44,436
quickly take off because in reality it's

21917
13:48:42,200 --> 13:48:46,276
a lot easier to do things in python as

21918
13:48:44,436 --> 13:48:48,956
we'll see but the Syntax for this now is

21919
13:48:46,276 --> 13:48:51,756
going to be to import the cs50 library

21920
13:48:48,956 --> 13:48:53,560
in this way and when we have now this

21921
13:48:51,756 --> 13:48:54,840
ability we can actually start writing

21922
13:48:53,560 --> 13:48:57,756
some code right away in fact let me

21923
13:48:54,840 --> 13:48:59,399
switch over to vs code here and just as

21924
13:48:57,756 --> 13:49:01,796
in the past I'll create a new file but

21925
13:48:59,400 --> 13:49:02,956
instead of creating something called C

21926
13:49:01,796 --> 13:49:05,840
I'm going to go ahead and create my

21927
13:49:02,956 --> 13:49:08,159
first program called hello.py using Code

21928
13:49:05,840 --> 13:49:09,755
space hello.py that of course gives me

21929
13:49:08,160 --> 13:49:12,276
this new tab and let me actually quite

21930
13:49:09,756 --> 13:49:14,880
simply do what I proposed print quote

21931
13:49:12,276 --> 13:49:17,040
unquote hello world without the back

21932
13:49:14,880 --> 13:49:19,795
slash without the semicolon without the

21933
13:49:17,040 --> 13:49:21,756
F in print and now let me go down to my

21934
13:49:19,796 --> 13:49:24,000
terminal window and I don't have to

21935
13:49:21,756 --> 13:49:26,756
compile it I don't have to do dot slash

21936
13:49:24,000 --> 13:49:28,320
i instead run a program called python

21937
13:49:26,756 --> 13:49:30,276
whose purpose in life is now to

21938
13:49:28,320 --> 13:49:32,756
interpret my code top to bottom left to

21939
13:49:30,276 --> 13:49:35,916
right and if I run python of hello.py

21940
13:49:32,756 --> 13:49:37,880
crossing my fingers as always voila now

21941
13:49:35,916 --> 13:49:39,719
I have printed out hello world so we

21942
13:49:37,880 --> 13:49:41,399
seem to have gotten the new line for

21943
13:49:39,720 --> 13:49:43,200
free in this sense where it's

21944
13:49:41,400 --> 13:49:44,956
automatically happening the dollar sign

21945
13:49:43,200 --> 13:49:47,880
isn't weirdly on the same line like it

21946
13:49:44,956 --> 13:49:50,159
want was in week one but that's just a a

21947
13:49:47,880 --> 13:49:52,360
minor detail here if we switch back to

21948
13:49:50,160 --> 13:49:54,480
now some other capabilities well indeed

21949
13:49:52,360 --> 13:49:56,596
with the cs50 library you can also not

21950
13:49:54,480 --> 13:49:58,436
just import the library itself but

21951
13:49:56,596 --> 13:49:59,756
specific functions and you'll see that

21952
13:49:58,436 --> 13:50:02,240
temporarily we're going to give you a

21953
13:49:59,756 --> 13:50:04,596
helper function called get string just

21954
13:50:02,240 --> 13:50:06,240
like in C that just makes it work

21955
13:50:04,596 --> 13:50:07,399
exactly the same way as in C and we'll

21956
13:50:06,240 --> 13:50:09,520
see a couple of other functions that

21957
13:50:07,400 --> 13:50:10,880
will just make life easier initially but

21958
13:50:09,520 --> 13:50:12,640
quickly will we take those training

21959
13:50:10,880 --> 13:50:15,276
wheels off so that nothing is indeed

21960
13:50:12,640 --> 13:50:17,320
cs50 specific all right well how about

21961
13:50:15,276 --> 13:50:19,596
functions more generally in Python let's

21962
13:50:17,320 --> 13:50:21,796
do a whirlwind tour if you will much

21963
13:50:19,596 --> 13:50:24,360
like we did in that first week of C

21964
13:50:21,796 --> 13:50:26,000
comparing one to the other so back in

21965
13:50:24,360 --> 13:50:27,840
our world of scratch one of the first

21966
13:50:26,000 --> 13:50:30,200
programs we wrote was this one here

21967
13:50:27,840 --> 13:50:32,795
whereby we asked the human their name we

21968
13:50:30,200 --> 13:50:34,956
then used the return value that was sort

21969
13:50:32,796 --> 13:50:38,596
of automatically stored in this answer

21970
13:50:34,956 --> 13:50:40,560
variable as a second argument to join so

21971
13:50:38,596 --> 13:50:43,040
that we could say hello David or hello

21972
13:50:40,560 --> 13:50:45,795
Carter so this was back in week one uh

21973
13:50:43,040 --> 13:50:47,400
week zero in week one we converted it to

21974
13:50:45,796 --> 13:50:49,400
this and here's a perfect example of

21975
13:50:47,400 --> 13:50:50,956
things like escalating quickly and again

21976
13:50:49,400 --> 13:50:52,640
this is why we start in scratch there's

21977
13:50:50,956 --> 13:50:54,560
just so much distraction here to achieve

21978
13:50:52,640 --> 13:50:56,596
the same idea but even today we're going

21979
13:50:54,560 --> 13:51:00,200
to chip away at some of that syntax so

21980
13:50:56,596 --> 13:51:01,720
in C we had to declare the argument as a

21981
13:51:00,200 --> 13:51:03,276
we had to declare the variable as a

21982
13:51:01,720 --> 13:51:05,880
string here we of course had the

21983
13:51:03,276 --> 13:51:08,360
semicolon and more well in Python the

21984
13:51:05,880 --> 13:51:12,000
comparable code now is going to look

21985
13:51:08,360 --> 13:51:14,160
more simply like this so semicolon is

21986
13:51:12,000 --> 13:51:16,560
again gone on both lines for that matter

21987
13:51:14,160 --> 13:51:19,436
so that's good what else appears to have

21988
13:51:16,560 --> 13:51:21,000
changed or disappeared yeah type of

21989
13:51:19,436 --> 13:51:23,320
variable yeah so I didn't have to

21990
13:51:21,000 --> 13:51:25,640
specifically say that answer is now a

21991
13:51:23,320 --> 13:51:27,916
string and indeed python is is

21992
13:51:25,640 --> 13:51:30,320
dynamically typed and in fact it will

21993
13:51:27,916 --> 13:51:33,240
infer from Context exactly what it is

21994
13:51:30,320 --> 13:51:36,916
you are storing in that variable other

21995
13:51:33,240 --> 13:51:36,916
details that seem a little bit

21996
13:51:37,640 --> 13:51:41,360
different little bit different what else

21997
13:51:39,756 --> 13:51:44,276
jumps out at you here I'll go back this

21998
13:51:41,360 --> 13:51:46,116
was the C version and maybe Focus now on

21999
13:51:44,276 --> 13:51:47,880
the second line because we've rather

22000
13:51:46,116 --> 13:51:52,360
exhausted the first here's now the

22001
13:51:47,880 --> 13:51:52,360
python version what's different here

22002
13:51:54,680 --> 13:51:59,560
yeah yeah there's no percent s anymore

22003
13:51:57,560 --> 13:52:02,115
there's no second argument at the moment

22004
13:51:59,560 --> 13:52:03,795
per se to print now it is still a little

22005
13:52:02,116 --> 13:52:05,436
weird it's as though I've like deployed

22006
13:52:03,796 --> 13:52:06,880
some addition here arithmetically but

22007
13:52:05,436 --> 13:52:08,560
that's not the case some of you have

22008
13:52:06,880 --> 13:52:10,840
programmed before and plus some of you

22009
13:52:08,560 --> 13:52:13,079
might know means what in this

22010
13:52:10,840 --> 13:52:14,840
context so to combine or more

22011
13:52:13,080 --> 13:52:15,956
technically anyone know the buzz word

22012
13:52:14,840 --> 13:52:18,159
yeah

22013
13:52:15,956 --> 13:52:19,956
to concatenate so to concatenate is like

22014
13:52:18,160 --> 13:52:21,756
the fancy way of what scratch calls

22015
13:52:19,956 --> 13:52:23,240
joining which is to take one string on

22016
13:52:21,756 --> 13:52:25,680
the left one string on the right and to

22017
13:52:23,240 --> 13:52:28,040
join them together to glue them together

22018
13:52:25,680 --> 13:52:29,596
if you will so this is not addition it

22019
13:52:28,040 --> 13:52:31,116
would be if it were numbers involved

22020
13:52:29,596 --> 13:52:33,079
instead but because we've got a string

22021
13:52:31,116 --> 13:52:34,680
hello comma and another string

22022
13:52:33,080 --> 13:52:36,756
implicitly in this variable based on

22023
13:52:34,680 --> 13:52:38,560
what the human typed in in response to

22024
13:52:36,756 --> 13:52:41,596
this get string function that's going to

22025
13:52:38,560 --> 13:52:43,795
concatenate hello comma space and then

22026
13:52:41,596 --> 13:52:45,435
David or Carter or whatever the human

22027
13:52:43,796 --> 13:52:46,840
has typed in but turns out there's going

22028
13:52:45,436 --> 13:52:48,080
to be different ways to do this in

22029
13:52:46,840 --> 13:52:49,755
Python and we'll show you a few

22030
13:52:48,080 --> 13:52:52,276
different ones and here too try not to

22031
13:52:49,756 --> 13:52:53,680
get too hung up on or frustrated by like

22032
13:52:52,276 --> 13:52:55,040
all of the different ways you can solve

22033
13:52:53,680 --> 13:52:56,956
problems odds are you're going to be

22034
13:52:55,040 --> 13:52:58,640
picking up tips and techniques for years

22035
13:52:56,956 --> 13:53:00,116
to come if you continue programming so

22036
13:52:58,640 --> 13:53:02,756
let's just give you a few of the

22037
13:53:00,116 --> 13:53:04,756
possible ways so here's a second way you

22038
13:53:02,756 --> 13:53:07,360
could print out hello comma David or

22039
13:53:04,756 --> 13:53:08,796
hello comma Carter but what has changed

22040
13:53:07,360 --> 13:53:11,756
in the previous version I used

22041
13:53:08,796 --> 13:53:13,520
concatenation explicitly and the space

22042
13:53:11,756 --> 13:53:15,560
here is important grammatically just so

22043
13:53:13,520 --> 13:53:17,359
we get that in the final phrase

22044
13:53:15,560 --> 13:53:20,479
now I'm proposing to get rid of that

22045
13:53:17,360 --> 13:53:22,276
space to add a comma outside of the

22046
13:53:20,480 --> 13:53:24,640
double quotes as well but if you think

22047
13:53:22,276 --> 13:53:27,400
back to C this probably just means that

22048
13:53:24,640 --> 13:53:29,840
print similar in spirit to print F can

22049
13:53:27,400 --> 13:53:31,560
take not just one argument but even two

22050
13:53:29,840 --> 13:53:32,916
and in fact because of this comma in the

22051
13:53:31,560 --> 13:53:35,640
middle that's outside of the double

22052
13:53:32,916 --> 13:53:38,000
quotes it's hello comma and then it will

22053
13:53:35,640 --> 13:53:39,880
be automatically concatenated with even

22054
13:53:38,000 --> 13:53:42,160
without using the plus to whatever the

22055
13:53:39,880 --> 13:53:44,880
value of answer is and by default just

22056
13:53:42,160 --> 13:53:46,596
for grammatical prettiness the print fun

22057
13:53:44,880 --> 13:53:48,719
function always gives you a space for

22058
13:53:46,596 --> 13:53:50,320
free in between each of the multiple

22059
13:53:48,720 --> 13:53:52,080
arguments you pass in we'll see how you

22060
13:53:50,320 --> 13:53:54,000
can override that down the line but for

22061
13:53:52,080 --> 13:53:56,720
now that's just another way to do it now

22062
13:53:54,000 --> 13:53:58,276
perhaps the better if slightly cryptic

22063
13:53:56,720 --> 13:54:00,160
way to do this or just the increasingly

22064
13:53:58,276 --> 13:54:03,000
common way is probably this third

22065
13:54:00,160 --> 13:54:04,596
version which looks a little weird too

22066
13:54:03,000 --> 13:54:05,916
and probably the weirdness jumps out

22067
13:54:04,596 --> 13:54:08,756
we've automatic we've suddenly

22068
13:54:05,916 --> 13:54:10,596
introduced these like Curly braces which

22069
13:54:08,756 --> 13:54:13,640
I promised were mostly gone and they are

22070
13:54:10,596 --> 13:54:16,756
but inside of this string here I've done

22071
13:54:13,640 --> 13:54:18,640
a curly brace which might mean what just

22072
13:54:16,756 --> 13:54:20,116
intuitively and here is sort of an

22073
13:54:18,640 --> 13:54:22,116
example of how you learn a new language

22074
13:54:20,116 --> 13:54:23,640
just kind of infer from Context how

22075
13:54:22,116 --> 13:54:26,360
python probably

22076
13:54:23,640 --> 13:54:27,796
works what might this mean yeah able to

22077
13:54:26,360 --> 13:54:29,680
tell that this is not one of the actual

22078
13:54:27,796 --> 13:54:32,080
stat

22079
13:54:29,680 --> 13:54:33,956
inside yeah so this is an indication

22080
13:54:32,080 --> 13:54:35,756
because the curly braces because this is

22081
13:54:33,956 --> 13:54:38,080
the way python was designed that we want

22082
13:54:35,756 --> 13:54:41,320
to plug in the value of answer not

22083
13:54:38,080 --> 13:54:43,400
literally a ANS w r and the fancy word

22084
13:54:41,320 --> 13:54:45,520
here is that the answer variable will be

22085
13:54:43,400 --> 13:54:48,000
interpolated that is substituted with

22086
13:54:45,520 --> 13:54:49,435
its actual value but but but and this is

22087
13:54:48,000 --> 13:54:51,520
actually weird looking and this was

22088
13:54:49,436 --> 13:54:53,240
introduced a few years ago to python

22089
13:54:51,520 --> 13:54:55,399
what else did I have to change to make

22090
13:54:53,240 --> 13:54:57,596
these curly braces work

22091
13:54:55,400 --> 13:55:00,320
apparently

22092
13:54:57,596 --> 13:55:02,276
yeah yeah there's this weird F and so

22093
13:55:00,320 --> 13:55:04,756
it's sort of like part of print F but

22094
13:55:02,276 --> 13:55:06,479
now it's inside the curly it's inside

22095
13:55:04,756 --> 13:55:08,360
the parenthesis there this is just the

22096
13:55:06,480 --> 13:55:09,880
way python designed this so a few years

22097
13:55:08,360 --> 13:55:12,360
ago when they introduced what are called

22098
13:55:09,880 --> 13:55:14,956
format strings or F strings you

22099
13:55:12,360 --> 13:55:18,040
literally prefix your quoted string with

22100
13:55:14,956 --> 13:55:19,916
the uh letter F and then you can use

22101
13:55:18,040 --> 13:55:21,360
trickery like this like putting curly

22102
13:55:19,916 --> 13:55:23,360
braces so that the value will be

22103
13:55:21,360 --> 13:55:24,956
substituted automatically if you forget

22104
13:55:23,360 --> 13:55:27,040
the F you're going to literally see

22105
13:55:24,956 --> 13:55:29,479
hello comma curly brace answer close

22106
13:55:27,040 --> 13:55:32,200
curly brace if you add the F it's indeed

22107
13:55:29,480 --> 13:55:34,400
interpolated the value is plugged in all

22108
13:55:32,200 --> 13:55:37,079
right questions on how we can just say

22109
13:55:34,400 --> 13:55:38,796
hello to the world via python in this

22110
13:55:37,080 --> 13:55:42,240
case

22111
13:55:38,796 --> 13:55:44,160
yeah if you do this without the without

22112
13:55:42,240 --> 13:55:46,916
the F if you omit the F you will

22113
13:55:44,160 --> 13:55:49,916
literally see c h e l l o comma curly

22114
13:55:46,916 --> 13:55:51,719
brace a NS w r close curly brace so in

22115
13:55:49,916 --> 13:55:54,040
fact let's do this let me go back to vs

22116
13:55:51,720 --> 13:55:57,200
code here quickly I've still got my file

22117
13:55:54,040 --> 13:55:59,240
called hello.py open and let me go ahead

22118
13:55:57,200 --> 13:56:03,039
and change this ever so slightly so I'm

22119
13:55:59,240 --> 13:56:05,880
going to go ahead and uh let's say from

22120
13:56:03,040 --> 13:56:08,276
cs50 import get string and that's just

22121
13:56:05,880 --> 13:56:10,880
the new syntax I propose using to import

22122
13:56:08,276 --> 13:56:13,596
a function from someone else's Library

22123
13:56:10,880 --> 13:56:16,435
I'm going to now go ahead and ask the

22124
13:56:13,596 --> 13:56:18,399
question uh let's go ahead and use get

22125
13:56:16,436 --> 13:56:20,880
string storing the result and answer so

22126
13:56:18,400 --> 13:56:23,240
get string quote unquote what's your

22127
13:56:20,880 --> 13:56:25,240
name question mark and then on this line

22128
13:56:23,240 --> 13:56:27,240
I'm going to deliberately make a mistake

22129
13:56:25,240 --> 13:56:30,880
here exactly to your question let me

22130
13:56:27,240 --> 13:56:32,720
just say hello comma answer and just

22131
13:56:30,880 --> 13:56:34,360
this now even though answer is a

22132
13:56:32,720 --> 13:56:36,840
variable Python's not going to be so

22133
13:56:34,360 --> 13:56:38,840
presumptuous as to just plug in the

22134
13:56:36,840 --> 13:56:40,916
value of a variable called answer what

22135
13:56:38,840 --> 13:56:43,596
it's going to do of course is if I type

22136
13:56:40,916 --> 13:56:45,276
in my name whoops I typed too fast let

22137
13:56:43,596 --> 13:56:47,840
me go ahead and rerun that again if I

22138
13:56:45,276 --> 13:56:50,560
run python of hello.py type in my name

22139
13:56:47,840 --> 13:56:53,039
and hit enter I get hello comma answer

22140
13:56:50,560 --> 13:56:55,560
well let me do one better let me apply

22141
13:56:53,040 --> 13:56:58,200
these curly braces as before let me

22142
13:56:55,560 --> 13:57:00,276
rerun python of hello.py What's Your

22143
13:56:58,200 --> 13:57:02,039
Name daav ID and here's again the answer

22144
13:57:00,276 --> 13:57:04,079
to your question now we get literally

22145
13:57:02,040 --> 13:57:05,840
the curly braces so the fix here

22146
13:57:04,080 --> 13:57:08,680
ultimately is just going to be to add

22147
13:57:05,840 --> 13:57:11,679
the F there rerun my program again with

22148
13:57:08,680 --> 13:57:13,200
daav ID and now hello comma David so

22149
13:57:11,680 --> 13:57:15,436
this is admittedly a little more cryptic

22150
13:57:13,200 --> 13:57:17,200
than the ones with the Plus the comma

22151
13:57:15,436 --> 13:57:18,436
but this is just increasingly common why

22152
13:57:17,200 --> 13:57:19,719
because you can read it left to right

22153
13:57:18,436 --> 13:57:21,200
it's nice and convenient it's less

22154
13:57:19,720 --> 13:57:22,756
cryptic than the percent s's so it's

22155
13:57:21,200 --> 13:57:25,755
sort of a new and improved version if

22156
13:57:22,756 --> 13:57:27,400
you will of printf in C based on Decades

22157
13:57:25,756 --> 13:57:32,040
of experience of programmers doing

22158
13:57:27,400 --> 13:57:33,040
things like this questions on printing

22159
13:57:32,040 --> 13:57:35,756
in this

22160
13:57:33,040 --> 13:57:36,640
way we're now on our way to programming

22161
13:57:35,756 --> 13:57:39,040
in

22162
13:57:36,640 --> 13:57:41,796
Python anything all right well what more

22163
13:57:39,040 --> 13:57:44,880
can we do with this language here well

22164
13:57:41,796 --> 13:57:46,480
let me propose that we consider that we

22165
13:57:44,880 --> 13:57:49,520
have for

22166
13:57:46,480 --> 13:57:52,720
instance a few other features that we

22167
13:57:49,520 --> 13:57:57,039
can add to the mix as well

22168
13:57:52,720 --> 13:57:59,640
namely let's say some data types as well

22169
13:57:57,040 --> 13:58:01,000
so let me flip over here to um back to

22170
13:57:59,640 --> 13:58:03,159
the slides and there's different data

22171
13:58:01,000 --> 13:58:05,000
types in python as we'll soon see but

22172
13:58:03,160 --> 13:58:07,756
they're not as explicit as we already

22173
13:58:05,000 --> 13:58:09,400
saw by using a string from get string

22174
13:58:07,756 --> 13:58:12,160
you don't have to explicitly State what

22175
13:58:09,400 --> 13:58:14,880
it is but you solve recall and see all

22176
13:58:12,160 --> 13:58:17,000
of these various data types and then in

22177
13:58:14,880 --> 13:58:18,956
python kind of nicely enough this list

22178
13:58:17,000 --> 13:58:21,360
is about to get shorter and so here is

22179
13:58:18,956 --> 13:58:23,116
our list in C here is an abbreviated

22180
13:58:21,360 --> 13:58:25,116
list in Python so we're still going to

22181
13:58:23,116 --> 13:58:27,680
have strings but they're going to be

22182
13:58:25,116 --> 13:58:29,160
more succinctly called stirs now St Str

22183
13:58:27,680 --> 13:58:30,480
we're still going to have in for

22184
13:58:29,160 --> 13:58:32,116
integers we're still going to have

22185
13:58:30,480 --> 13:58:33,796
floats for floating Point values we're

22186
13:58:32,116 --> 13:58:35,680
even going to have bulls for true and

22187
13:58:33,796 --> 13:58:39,040
false but what's missing now from the

22188
13:58:35,680 --> 13:58:41,320
list is long and floats and why is that

22189
13:58:39,040 --> 13:58:43,640
or rather long and double well recall

22190
13:58:41,320 --> 13:58:46,640
that in C those used more bits well in

22191
13:58:43,640 --> 13:58:48,796
Python the smaller data types previously

22192
13:58:46,640 --> 13:58:50,680
int and Float themselves just use more

22193
13:58:48,796 --> 13:58:52,796
bits for you and so you don't need to

22194
13:58:50,680 --> 13:58:54,840
distinguish between small and large you

22195
13:58:52,796 --> 13:58:57,360
just use one data type and the language

22196
13:58:54,840 --> 13:58:58,435
gives you a bigger range than before it

22197
13:58:57,360 --> 13:59:00,916
turns out though there's going to be

22198
13:58:58,436 --> 13:59:02,360
some other features as well of python

22199
13:59:00,916 --> 13:59:04,159
these data types one of which will be

22200
13:59:02,360 --> 13:59:06,116
called range another of which will be

22201
13:59:04,160 --> 13:59:07,436
list So Gone will be arrays we'll

22202
13:59:06,116 --> 13:59:10,596
actually use something literally called

22203
13:59:07,436 --> 13:59:13,000
a list tle sort of like XY pairs for

22204
13:59:10,596 --> 13:59:15,079
coordinates and things like that uh dict

22205
13:59:13,000 --> 13:59:17,240
for dictionaries so we have built-in

22206
13:59:15,080 --> 13:59:19,080
capabilities for storing keys and values

22207
13:59:17,240 --> 13:59:20,276
we'll see and even a set sort of

22208
13:59:19,080 --> 13:59:21,400
mathematically a set is like a

22209
13:59:20,276 --> 13:59:23,200
collection of values but it

22210
13:59:21,400 --> 13:59:24,916
automatically gets rid of duplicates for

22211
13:59:23,200 --> 13:59:28,000
you so all of these things we could

22212
13:59:24,916 --> 13:59:30,360
absolutely Implement in C if we wanted

22213
13:59:28,000 --> 13:59:32,400
and indeed in problem set five you've

22214
13:59:30,360 --> 13:59:35,040
been implementing your very own spell

22215
13:59:32,400 --> 13:59:37,320
checker using some form of hashtable

22216
13:59:35,040 --> 13:59:39,520
well it turns out that in Python you can

22217
13:59:37,320 --> 13:59:41,480
solve those same problems but perhaps a

22218
13:59:39,520 --> 13:59:44,359
little more readily in fact let me go

22219
13:59:41,480 --> 13:59:47,040
back over here to vs code and let me

22220
13:59:44,360 --> 13:59:49,756
propose that I do the following let me

22221
13:59:47,040 --> 13:59:52,360
go ahead and create a file called

22222
13:59:49,756 --> 13:59:54,916
dictionary. let me propose that I try to

22223
13:59:52,360 --> 13:59:57,640
implement say problem set five our spell

22224
13:59:54,916 --> 14:00:00,435
checker in Python instead of c and

22225
13:59:57,640 --> 14:00:02,320
Achieve ultimately the same kind of

22226
14:00:00,436 --> 14:00:04,360
behavior uh whereby I'll be able to

22227
14:00:02,320 --> 14:00:05,720
spell check a whole bunch of words so

22228
14:00:04,360 --> 14:00:06,880
this is jumping the gun a little bit

22229
14:00:05,720 --> 14:00:08,880
because you're about to see syntax will

22230
14:00:06,880 --> 14:00:10,040
revisit over the course of today but for

22231
14:00:08,880 --> 14:00:12,479
now I've got a new file called

22232
14:00:10,040 --> 14:00:14,756
dictionary. py and let me begin to

22233
14:00:12,480 --> 14:00:16,596
create uh some placehold ERS for

22234
14:00:14,756 --> 14:00:18,360
functions we'll see in just a bit that

22235
14:00:16,596 --> 14:00:20,560
in Python you can define a function

22236
14:00:18,360 --> 14:00:23,240
called check and that check function can

22237
14:00:20,560 --> 14:00:25,520
take a word as it's input and I'll come

22238
14:00:23,240 --> 14:00:27,840
back to this in just a moment in Python

22239
14:00:25,520 --> 14:00:29,079
I can define a second function like load

22240
14:00:27,840 --> 14:00:31,795
which itself will take a whole

22241
14:00:29,080 --> 14:00:33,796
dictionary just like in problem set five

22242
14:00:31,796 --> 14:00:36,276
and I'll go ahead and come back to the

22243
14:00:33,796 --> 14:00:38,000
implementation of this meanwhile we

22244
14:00:36,276 --> 14:00:40,640
might similarly Implement a function

22245
14:00:38,000 --> 14:00:42,160
called size which takes no arguments but

22246
14:00:40,640 --> 14:00:44,240
ultimately is going to return the size

22247
14:00:42,160 --> 14:00:46,400
of my dictionary of words and then last

22248
14:00:44,240 --> 14:00:48,916
lastly for consistency with problem set

22249
14:00:46,400 --> 14:00:50,720
five we might Define an unload function

22250
14:00:48,916 --> 14:00:52,360
whose purpose in life is to free any

22251
14:00:50,720 --> 14:00:54,520
memory that you've been using just to

22252
14:00:52,360 --> 14:00:55,956
give it back to the computer now odds

22253
14:00:54,520 --> 14:00:57,916
are whether you're still working on

22254
14:00:55,956 --> 14:01:00,200
speller or half finished speller like

22255
14:00:57,916 --> 14:01:02,200
you wrote a decent amount of lines of

22256
14:01:00,200 --> 14:01:04,560
code and indeed it's been by design a

22257
14:01:02,200 --> 14:01:07,200
challenge but one of the reasons for

22258
14:01:04,560 --> 14:01:08,956
these higher level languages like python

22259
14:01:07,200 --> 14:01:11,560
is that you can stand on the shoulders

22260
14:01:08,956 --> 14:01:13,640
of programmers before you and solve very

22261
14:01:11,560 --> 14:01:15,159
common problems much more quickly so

22262
14:01:13,640 --> 14:01:16,916
that you can f us on building your new

22263
14:01:15,160 --> 14:01:18,640
app or your web application or your own

22264
14:01:16,916 --> 14:01:22,200
project to solve problems of interest to

22265
14:01:18,640 --> 14:01:24,796
you so at the risk of crushing some

22266
14:01:22,200 --> 14:01:26,596
Spirits let me propose that in Python if

22267
14:01:24,796 --> 14:01:28,720
you want a dictionary for something like

22268
14:01:26,596 --> 14:01:30,435
a spell checker well that's fine go

22269
14:01:28,720 --> 14:01:32,916
ahead and give yourself a variable like

22270
14:01:30,436 --> 14:01:36,000
words to store all of those words and

22271
14:01:32,916 --> 14:01:38,399
just assign it equal to a dictionary or

22272
14:01:36,000 --> 14:01:40,756
dict for short in Python that will give

22273
14:01:38,400 --> 14:01:42,720
you a hashtable now it turns out in

22274
14:01:40,756 --> 14:01:44,640
speller recall you don't need to worry

22275
14:01:42,720 --> 14:01:46,680
about words and definition conditions

22276
14:01:44,640 --> 14:01:48,240
it's just about spellchecking the words

22277
14:01:46,680 --> 14:01:50,520
so strictly speaking we don't need keys

22278
14:01:48,240 --> 14:01:52,159
and values we just need keys so I'm

22279
14:01:50,520 --> 14:01:53,596
going to save myself a few more key

22280
14:01:52,160 --> 14:01:56,200
strokes by just saying that technically

22281
14:01:53,596 --> 14:01:57,756
in Python using a set suffices again a

22282
14:01:56,200 --> 14:01:59,479
set is just a collection of values with

22283
14:01:57,756 --> 14:02:02,000
no duplicates but they don't necessarily

22284
14:01:59,480 --> 14:02:04,276
have uh keys and values it's just one or

22285
14:02:02,000 --> 14:02:06,436
the other but now that I have on line

22286
14:02:04,276 --> 14:02:09,436
one I claim the equivalent in Python of

22287
14:02:06,436 --> 14:02:11,560
a hash table I can actually do something

22288
14:02:09,436 --> 14:02:14,640
like this here's how I might implement

22289
14:02:11,560 --> 14:02:17,000
the check function in Python if the word

22290
14:02:14,640 --> 14:02:20,276
passed into this function is in my

22291
14:02:17,000 --> 14:02:25,436
variable called words well return true

22292
14:02:20,276 --> 14:02:27,840
else go ahead and return false done wait

22293
14:02:25,436 --> 14:02:29,680
you're thinking if anything at all maybe

22294
14:02:27,840 --> 14:02:31,719
we want to handle lowercase instead of

22295
14:02:29,680 --> 14:02:33,116
just uppercase and lowercase well you

22296
14:02:31,720 --> 14:02:34,796
know what in Python if you want to force

22297
14:02:33,116 --> 14:02:36,320
a whole word to lowercase you don't have

22298
14:02:34,796 --> 14:02:37,916
to iterate over it with a loop you don't

22299
14:02:36,320 --> 14:02:40,200
have to use any of that ctype functions

22300
14:02:37,916 --> 14:02:41,560
or anything just say word. lower and

22301
14:02:40,200 --> 14:02:43,795
that will convert the whole thing to

22302
14:02:41,560 --> 14:02:45,399
lowercase for parody with the dictionary

22303
14:02:43,796 --> 14:02:47,880
all right how about something like the

22304
14:02:45,400 --> 14:02:49,756
load function in Python well in Python

22305
14:02:47,880 --> 14:02:52,159
you can open files just like in C for

22306
14:02:49,756 --> 14:02:54,640
instance in Python I might do open the

22307
14:02:52,160 --> 14:02:57,160
dictionary argument in read mode just

22308
14:02:54,640 --> 14:02:59,520
like fopen in Python I might do

22309
14:02:57,160 --> 14:03:03,400
something like this for each line in

22310
14:02:59,520 --> 14:03:06,916
that file let me go ahead and add to my

22311
14:03:03,400 --> 14:03:10,276
words variable that line and then let me

22312
14:03:06,916 --> 14:03:11,880
go ahead and close that file and I think

22313
14:03:10,276 --> 14:03:14,159
I'm done I'm just going to go ahead and

22314
14:03:11,880 --> 14:03:15,840
return true just because I think think

22315
14:03:14,160 --> 14:03:18,200
I'm already done now here too I could

22316
14:03:15,840 --> 14:03:20,276
nitpick a little bit technically if I'm

22317
14:03:18,200 --> 14:03:22,000
reading in every line from the file

22318
14:03:20,276 --> 14:03:23,840
every line in the dictionary ends with

22319
14:03:22,000 --> 14:03:26,080
technically a back sln but there's an

22320
14:03:23,840 --> 14:03:27,840
easy way to get rid of that uh just like

22321
14:03:26,080 --> 14:03:29,360
you might in see with an alternative

22322
14:03:27,840 --> 14:03:32,479
syntax what I'm actually going to do is

22323
14:03:29,360 --> 14:03:35,320
this let me grab from the current line

22324
14:03:32,480 --> 14:03:37,840
the current word by stripping off with

22325
14:03:35,320 --> 14:03:39,640
reverse strip R strip a function will

22326
14:03:37,840 --> 14:03:41,596
again see that just gets rid of the

22327
14:03:39,640 --> 14:03:43,320
trailing new line the back sln at the

22328
14:03:41,596 --> 14:03:45,640
end of that line and what I really want

22329
14:03:43,320 --> 14:03:47,756
to do then is add this word to that

22330
14:03:45,640 --> 14:03:49,916
dictionary meanwhile if I want to figure

22331
14:03:47,756 --> 14:03:51,400
out what the size is of my dictionary

22332
14:03:49,916 --> 14:03:53,320
well and see you're probably writing

22333
14:03:51,400 --> 14:03:55,320
code to iterate over all of those lines

22334
14:03:53,320 --> 14:03:57,640
and you're just going to uh count them

22335
14:03:55,320 --> 14:03:59,360
up using a variable not so in Python you

22336
14:03:57,640 --> 14:04:02,200
can just return the length of those

22337
14:03:59,360 --> 14:04:04,080
words and better still in Python you

22338
14:04:02,200 --> 14:04:07,640
don't have to manage your own memory no

22339
14:04:04,080 --> 14:04:09,756
more Malo no more free no more manual

22340
14:04:07,640 --> 14:04:12,200
thinking about memory the language just

22341
14:04:09,756 --> 14:04:14,040
deals with all of that for you so you

22342
14:04:12,200 --> 14:04:16,640
know what it suffices for me to just

22343
14:04:14,040 --> 14:04:20,360
return true and claim that unloading is

22344
14:04:16,640 --> 14:04:21,916
done for me and that's it again whether

22345
14:04:20,360 --> 14:04:23,840
you're in the middle of or already

22346
14:04:21,916 --> 14:04:26,479
finished this might perhaps suggest some

22347
14:04:23,840 --> 14:04:28,956
frustration but also Enlightenment in

22348
14:04:26,480 --> 14:04:31,480
this in that this is why higher level

22349
14:04:28,956 --> 14:04:33,560
languages exist you can build on top of

22350
14:04:31,480 --> 14:04:35,160
the same principles the same ideas with

22351
14:04:33,560 --> 14:04:37,640
which you've been dealing struggling

22352
14:04:35,160 --> 14:04:39,640
even this past week but you can now

22353
14:04:37,640 --> 14:04:42,116
express yourself all the more succinctly

22354
14:04:39,640 --> 14:04:44,240
like this one line implements a hash

22355
14:04:42,116 --> 14:04:46,916
table for you and all of this now now

22356
14:04:44,240 --> 14:04:50,276
just uses that hash table in a simpler

22357
14:04:46,916 --> 14:04:51,956
way any questions now on this keeping in

22358
14:04:50,276 --> 14:04:54,596
mind that the point nonetheless of

22359
14:04:51,956 --> 14:04:56,080
speller and P said 5 is to understand

22360
14:04:54,596 --> 14:04:59,479
what's really going on underneath the

22361
14:04:56,080 --> 14:05:01,436
hood and better still to notice this

22362
14:04:59,480 --> 14:05:02,796
this might seem all rather amazing but

22363
14:05:01,436 --> 14:05:04,796
let me go ahead and do this I've

22364
14:05:02,796 --> 14:05:06,320
actually got a couple of versions of

22365
14:05:04,796 --> 14:05:08,116
speller written here and I've got a

22366
14:05:06,320 --> 14:05:09,956
version written in C that I won't show

22367
14:05:08,116 --> 14:05:12,436
the source code for but I'm going to go

22368
14:05:09,956 --> 14:05:15,840
ahead and make that version of speller

22369
14:05:12,436 --> 14:05:18,240
in C and I'm going to go ahead here and

22370
14:05:15,840 --> 14:05:20,079
let's say split my window here for just

22371
14:05:18,240 --> 14:05:22,200
a moment and I'm going to go into a

22372
14:05:20,080 --> 14:05:24,480
python version of spell really that I

22373
14:05:22,200 --> 14:05:27,560
just wrote and on the left hand side

22374
14:05:24,480 --> 14:05:30,756
here let me go ahead and run speller the

22375
14:05:27,560 --> 14:05:32,520
version I compiled in C using a big text

22376
14:05:30,756 --> 14:05:34,956
like uh the Sherlock Holmes text which

22377
14:05:32,520 --> 14:05:37,320
is a whole lot of words in it and on the

22378
14:05:34,956 --> 14:05:39,240
right hand side let me run python of

22379
14:05:37,320 --> 14:05:40,840
spell. Pi which is a separate file I

22380
14:05:39,240 --> 14:05:43,916
wrote in advance just like we give you

22381
14:05:40,840 --> 14:05:45,719
speller.c and I'll similarly run this on

22382
14:05:43,916 --> 14:05:48,320
the Sherlock Holmes text and I'm going

22383
14:05:45,720 --> 14:05:50,116
to do my best to hit enter on the left

22384
14:05:48,320 --> 14:05:52,159
and the right of my screen at the same

22385
14:05:50,116 --> 14:05:53,840
time but we should see hopefully the

22386
14:05:52,160 --> 14:05:56,436
same list of misspelled words and the

22387
14:05:53,840 --> 14:05:59,159
timings thereof so here we go on the

22388
14:05:56,436 --> 14:06:02,240
right here we go on the

22389
14:05:59,160 --> 14:06:04,596
left all right sort of a race to see

22390
14:06:02,240 --> 14:06:09,159
which one wins here C is on the left

22391
14:06:04,596 --> 14:06:11,840
python is on the right okay

22392
14:06:09,160 --> 14:06:14,436
interesting hopefully Python's close

22393
14:06:11,840 --> 14:06:16,320
behind note that some of the is internet

22394
14:06:14,436 --> 14:06:19,080
delay and so it might not necessarily be

22395
14:06:16,320 --> 14:06:21,240
a crazy number of seconds but the system

22396
14:06:19,080 --> 14:06:23,000
is indeed using if we measure at a low

22397
14:06:21,240 --> 14:06:26,436
level how much time the CPU spent

22398
14:06:23,000 --> 14:06:27,916
executing my code C took a total of 1.64

22399
14:06:26,436 --> 14:06:29,320
seconds that was pretty fast even though

22400
14:06:27,916 --> 14:06:31,956
it took a moment more for all of the

22401
14:06:29,320 --> 14:06:34,880
btes to come over the Internet the

22402
14:06:31,956 --> 14:06:37,596
python version though took what 2.44

22403
14:06:34,880 --> 14:06:39,079
seconds so what might an inference be I

22404
14:06:37,596 --> 14:06:41,115
mean one maybe I'm just better at

22405
14:06:39,080 --> 14:06:44,520
programming in c than I am in Python

22406
14:06:41,116 --> 14:06:49,916
which is probably not true

22407
14:06:44,520 --> 14:06:49,916
but what else might you infer from this

22408
14:06:51,480 --> 14:06:55,320
example should we maybe give up on

22409
14:06:53,596 --> 14:06:58,240
python stick with

22410
14:06:55,320 --> 14:07:00,400
C no so where what might be going on

22411
14:06:58,240 --> 14:07:01,916
here like why is the python version that

22412
14:07:00,400 --> 14:07:04,320
I claim is correct and I think the

22413
14:07:01,916 --> 14:07:06,956
numbers all line up just not the

22414
14:07:04,320 --> 14:07:08,240
times where's the trade-off here well

22415
14:07:06,956 --> 14:07:10,795
here again is sort of this design

22416
14:07:08,240 --> 14:07:10,795
tradeoff

22417
14:07:12,640 --> 14:07:18,320
yeah yeah exactly in order to save the

22418
14:07:16,400 --> 14:07:19,956
human programmer time there's a lot more

22419
14:07:18,320 --> 14:07:22,240
features built into python more

22420
14:07:19,956 --> 14:07:24,200
functions more automatic management of

22421
14:07:22,240 --> 14:07:26,520
memory and so forth and you have to pay

22422
14:07:24,200 --> 14:07:28,360
a price like someone else's code is

22423
14:07:26,520 --> 14:07:29,640
doing all of that work for you but if

22424
14:07:28,360 --> 14:07:31,320
they've written some number of lines of

22425
14:07:29,640 --> 14:07:33,680
code those are just more lines of code

22426
14:07:31,320 --> 14:07:35,720
that need to be executed for you whereas

22427
14:07:33,680 --> 14:07:38,640
here the computer is at the risk of

22428
14:07:35,720 --> 14:07:40,640
oversimplifying only running my lines of

22429
14:07:38,640 --> 14:07:42,159
code so there's just less overhead and

22430
14:07:40,640 --> 14:07:43,956
so this is a Perpetual trade-off

22431
14:07:42,160 --> 14:07:45,956
typically when using a more userfriendly

22432
14:07:43,956 --> 14:07:48,360
and more modern language one of the

22433
14:07:45,956 --> 14:07:49,479
prices you might pay is performance now

22434
14:07:48,360 --> 14:07:50,796
there's a lot of smart computer

22435
14:07:49,480 --> 14:07:53,756
scientists in the world though trying to

22436
14:07:50,796 --> 14:07:55,680
push back on those same tradeoffs and so

22437
14:07:53,756 --> 14:07:58,116
these interpreters like the command I

22438
14:07:55,680 --> 14:08:00,000
wrote python technically can especially

22439
14:07:58,116 --> 14:08:01,480
if you run a program again and again

22440
14:08:00,000 --> 14:08:03,756
they can actually sort of secretly

22441
14:08:01,480 --> 14:08:05,880
behind the scenes compile your code for

22442
14:08:03,756 --> 14:08:07,360
you down to zeros and ones and then the

22443
14:08:05,880 --> 14:08:09,276
second the third the fourth time you run

22444
14:08:07,360 --> 14:08:10,956
that program it might very well be

22445
14:08:09,276 --> 14:08:13,079
faster so this is a bit of a head fake

22446
14:08:10,956 --> 14:08:15,756
here in that I'm running them once and

22447
14:08:13,080 --> 14:08:17,436
only once but we could get benefit over

22448
14:08:15,756 --> 14:08:19,240
time if we kept running the python

22449
14:08:17,436 --> 14:08:21,116
version again and again and perhaps

22450
14:08:19,240 --> 14:08:23,115
fine-tune the performance but in general

22451
14:08:21,116 --> 14:08:25,116
there's going to be this trade-off now

22452
14:08:23,116 --> 14:08:26,956
would you rather spend the 60 seconds I

22453
14:08:25,116 --> 14:08:30,040
wrote implementing a spell checker or

22454
14:08:26,956 --> 14:08:32,479
the 6 hours 16 hours you might be or

22455
14:08:30,040 --> 14:08:34,240
have spent implementing the same and C

22456
14:08:32,480 --> 14:08:35,956
you know probably not for productivity

22457
14:08:34,240 --> 14:08:38,200
sake this is why we have these

22458
14:08:35,956 --> 14:08:41,320
additional languages just for fun let me

22459
14:08:38,200 --> 14:08:43,000
flip over to another screen here and

22460
14:08:41,320 --> 14:08:45,560
open up a version of python that's

22461
14:08:43,000 --> 14:08:48,880
actually on on my in just a second on my

22462
14:08:45,560 --> 14:08:50,276
own uh Mac instead of the cloud so that

22463
14:08:48,880 --> 14:08:52,159
I can actually do something with

22464
14:08:50,276 --> 14:08:54,520
Graphics so here I just have a black and

22465
14:08:52,160 --> 14:08:56,360
white terminal window on my very own Mac

22466
14:08:54,520 --> 14:08:58,115
and I've pre-installed python just like

22467
14:08:56,360 --> 14:09:00,956
we've done so for VSS code in the cloud

22468
14:08:58,116 --> 14:09:03,796
for you uh notice that I've got this uh

22469
14:09:00,956 --> 14:09:05,640
photo of uh perhaps one of your favorite

22470
14:09:03,796 --> 14:09:08,240
TV shows here with the cast of The

22471
14:09:05,640 --> 14:09:10,720
Office notice all of the faces in this

22472
14:09:08,240 --> 14:09:13,240
image here and let me propose that we

22473
14:09:10,720 --> 14:09:16,200
try to find one face in the crowd sort

22474
14:09:13,240 --> 14:09:18,240
of CSI style whereby we want to find

22475
14:09:16,200 --> 14:09:20,640
perhaps the stranton Strangler so to

22476
14:09:18,240 --> 14:09:23,320
speak and so here is an example of this

22477
14:09:20,640 --> 14:09:25,320
this guy's face now how do we go about

22478
14:09:23,320 --> 14:09:26,840
finding this specific face in the crowd

22479
14:09:25,320 --> 14:09:28,080
well our human eyes obviously can pluck

22480
14:09:26,840 --> 14:09:30,435
him out especially if you're familiar

22481
14:09:28,080 --> 14:09:33,916
with the show but let me go ahead and do

22482
14:09:30,436 --> 14:09:36,360
this instead let me go ahead and propose

22483
14:09:33,916 --> 14:09:38,795
that we run code that I already wrote in

22484
14:09:36,360 --> 14:09:40,116
advance here this is a Python program

22485
14:09:38,796 --> 14:09:41,880
with more lines of code that we won't

22486
14:09:40,116 --> 14:09:45,040
dwell on for today but it's meant to

22487
14:09:41,880 --> 14:09:47,399
motivate what we can do from a a pillow

22488
14:09:45,040 --> 14:09:50,560
uh Library implying a python image

22489
14:09:47,400 --> 14:09:52,116
Library I want to import some type of

22490
14:09:50,560 --> 14:09:53,435
information called some type of some

22491
14:09:52,116 --> 14:09:55,680
feature called image so that I can

22492
14:09:53,436 --> 14:09:57,436
manipulate images not unlike our own

22493
14:09:55,680 --> 14:09:59,560
problem set 4 and this is kind of

22494
14:09:57,436 --> 14:10:03,080
powerful you in Python you can just

22495
14:09:59,560 --> 14:10:05,520
import face recognition as a library

22496
14:10:03,080 --> 14:10:07,276
that someone else wrote from there I'm

22497
14:10:05,520 --> 14:10:08,880
going to create a variable called image

22498
14:10:07,276 --> 14:10:11,916
I'm going to use this face recognitions

22499
14:10:08,880 --> 14:10:13,435
libraries load image file function it's

22500
14:10:11,916 --> 14:10:15,435
a little verbose but it's similar in

22501
14:10:13,436 --> 14:10:18,200
Spirit to F open and I'm going to open

22502
14:10:15,436 --> 14:10:20,756
office. jpeg I'm going to then declare a

22503
14:10:18,200 --> 14:10:23,039
second variable called face locations

22504
14:10:20,756 --> 14:10:24,560
plural because what I'm expecting to get

22505
14:10:23,040 --> 14:10:27,560
back per the documentation for this

22506
14:10:24,560 --> 14:10:29,880
library is a list of all of the faces

22507
14:10:27,560 --> 14:10:31,479
locations that are detected all right

22508
14:10:29,880 --> 14:10:33,719
then I'm going to iterate over each of

22509
14:10:31,480 --> 14:10:35,436
those uh faces using a for Loop that

22510
14:10:33,720 --> 14:10:37,480
we'll see in more detail I'm going to

22511
14:10:35,436 --> 14:10:40,200
then infer what the top right bottom and

22512
14:10:37,480 --> 14:10:43,916
left Corners are of that face and then

22513
14:10:40,200 --> 14:10:46,755
what I'm going to do here is show that

22514
14:10:43,916 --> 14:10:52,560
face alone if I've detected the face in

22515
14:10:46,756 --> 14:10:55,640
question so let me go ahead here and run

22516
14:10:52,560 --> 14:10:57,360
detect. and we'll see not just the one

22517
14:10:55,640 --> 14:11:00,240
face we're looking for but if I run

22518
14:10:57,360 --> 14:11:02,436
python of detect. piy it's going to do

22519
14:11:00,240 --> 14:11:06,680
all of the analysis I'll see a big

22520
14:11:02,436 --> 14:11:10,000
opening here now of all of the faces

22521
14:11:06,680 --> 14:11:11,756
that were detected in this here program

22522
14:11:10,000 --> 14:11:13,796
okay some better than others I guess if

22523
14:11:11,756 --> 14:11:16,320
you zoom in on catching someone typical

22524
14:11:13,796 --> 14:11:18,276
Angela if you now want to Now find that

22525
14:11:16,320 --> 14:11:20,080
one face I think we need to train the

22526
14:11:18,276 --> 14:11:21,596
software a bit more so let me actually

22527
14:11:20,080 --> 14:11:24,000
open up a second program called

22528
14:11:21,596 --> 14:11:25,840
recognize that's got more going on but

22529
14:11:24,000 --> 14:11:27,320
let me with a wave of a hand point out

22530
14:11:25,840 --> 14:11:30,880
that I'm now loading not only the

22531
14:11:27,320 --> 14:11:33,240
office. JPEG but also toby. JPEG to sort

22532
14:11:30,880 --> 14:11:36,079
of train the algorithm to find that

22533
14:11:33,240 --> 14:11:38,956
specific face and so now if I run this

22534
14:11:36,080 --> 14:11:41,956
second version recognize. with python of

22535
14:11:38,956 --> 14:11:43,795
recognize. py hold my breath for just a

22536
14:11:41,956 --> 14:11:46,159
moment it's an analyzing presumably all

22537
14:11:43,796 --> 14:11:49,000
of the faces you see the same original

22538
14:11:46,160 --> 14:11:51,276
photo but do you see one such face

22539
14:11:49,000 --> 14:11:54,240
highlighted here this adversion of the

22540
14:11:51,276 --> 14:11:56,320
code found Toby highlighted him with

22541
14:11:54,240 --> 14:11:57,916
this green and voila we have face

22542
14:11:56,320 --> 14:11:59,240
recognition so for better for worse this

22543
14:11:57,916 --> 14:12:01,320
is what's happening increasingly

22544
14:11:59,240 --> 14:12:02,795
societally nowadays and honestly even

22545
14:12:01,320 --> 14:12:04,200
though I didn't write the code live

22546
14:12:02,796 --> 14:12:06,240
because it's a good dozen or more lines

22547
14:12:04,200 --> 14:12:08,479
of code it's not terribly many and

22548
14:12:06,240 --> 14:12:10,520
literally all the authorities all we

22549
14:12:08,480 --> 14:12:12,796
have to do is import face recognition

22550
14:12:10,520 --> 14:12:14,956
and voila you have access like these

22551
14:12:12,796 --> 14:12:16,916
techn IES are here already but let's

22552
14:12:14,956 --> 14:12:19,956
consider for just a moment how did we

22553
14:12:16,916 --> 14:12:21,000
find Toby like how might that Library

22554
14:12:19,956 --> 14:12:22,916
even though we're not going to look at

22555
14:12:21,000 --> 14:12:24,796
its implementation details how does it

22556
14:12:22,916 --> 14:12:28,719
find Toby and distinguish him from all

22557
14:12:24,796 --> 14:12:30,640
of these other faces in the crowd what

22558
14:12:28,720 --> 14:12:33,000
might it be doing

22559
14:12:30,640 --> 14:12:34,796
intuitively think back even to pet 4

22560
14:12:33,000 --> 14:12:37,480
like what you yourselves have access to

22561
14:12:34,796 --> 14:12:37,480
data wise

22562
14:12:38,796 --> 14:12:45,080
yeah you know pixels in one area area

22563
14:12:44,040 --> 14:12:47,116
and a lot

22564
14:12:45,080 --> 14:12:52,436
of

22565
14:12:47,116 --> 14:12:52,436
that it's a lot of a lot of

22566
14:12:54,436 --> 14:12:59,480
simar yeah exactly and to summarize for

22567
14:12:57,000 --> 14:13:00,956
for camera here we have trained the

22568
14:12:59,480 --> 14:13:02,640
software if you will by giving it a

22569
14:13:00,956 --> 14:13:04,880
photo of Toby's face by so by looking

22570
14:13:02,640 --> 14:13:06,080
for the same or really similar pixels

22571
14:13:04,880 --> 14:13:08,435
especially if it's a slightly different

22572
14:13:06,080 --> 14:13:10,436
image of Toby we can perhaps identify

22573
14:13:08,436 --> 14:13:12,040
him in the crowd and what really is a

22574
14:13:10,436 --> 14:13:13,916
human face well at the end of the day

22575
14:13:12,040 --> 14:13:15,596
the computer only knows it as a pattern

22576
14:13:13,916 --> 14:13:17,840
of bits or really at a higher level a

22577
14:13:15,596 --> 14:13:19,880
pattern of pixels so maybe a human face

22578
14:13:17,840 --> 14:13:22,320
is perhaps best defined in general as

22579
14:13:19,880 --> 14:13:24,115
like two eyes and a nose and a mouth

22580
14:13:22,320 --> 14:13:26,200
that even though all of us look similar

22581
14:13:24,116 --> 14:13:27,956
structurally odds are the measurement

22582
14:13:26,200 --> 14:13:29,755
between the eyes and the nose and the

22583
14:13:27,956 --> 14:13:31,596
width of the mouth the skin tone and all

22584
14:13:29,756 --> 14:13:33,880
of these other physical characteristics

22585
14:13:31,596 --> 14:13:35,479
are patterns that software could perhaps

22586
14:13:33,880 --> 14:13:36,880
detect and then look sort of

22587
14:13:35,480 --> 14:13:39,200
statistically through the image looking

22588
14:13:36,880 --> 14:13:41,200
for the closest possible match to these

22589
14:13:39,200 --> 14:13:43,079
various measurement shapes colors and

22590
14:13:41,200 --> 14:13:44,200
sizes and the like and indeed that might

22591
14:13:43,080 --> 14:13:47,276
might be the intuition but what's

22592
14:13:44,200 --> 14:13:50,880
powerful here again is just how easy and

22593
14:13:47,276 --> 14:13:52,640
readily available this technology now is

22594
14:13:50,880 --> 14:13:55,435
all right so with that said let's

22595
14:13:52,640 --> 14:13:56,756
propose to consider what more we can do

22596
14:13:55,436 --> 14:13:58,640
with python itself get back to the

22597
14:13:56,756 --> 14:14:00,840
fundamentals so that you yourselves can

22598
14:13:58,640 --> 14:14:04,000
start to implement something along those

22599
14:14:00,840 --> 14:14:06,435
same lines so besides having access to

22600
14:14:04,000 --> 14:14:08,720
things like a get string function um the

22601
14:14:06,436 --> 14:14:12,040
cs50 library provides a few other things

22602
14:14:08,720 --> 14:14:14,040
as well namely in C we had these but in

22603
14:14:12,040 --> 14:14:15,880
Python we're going to have fewer in

22604
14:14:14,040 --> 14:14:17,720
Python our library short term is going

22605
14:14:15,880 --> 14:14:19,719
to give you not only get string but also

22606
14:14:17,720 --> 14:14:21,160
get in and get float why it's actually

22607
14:14:19,720 --> 14:14:23,436
just kind of annoying as we'll student

22608
14:14:21,160 --> 14:14:25,240
see to get back an integer or a float

22609
14:14:23,436 --> 14:14:28,116
from a user and just make sure that it's

22610
14:14:25,240 --> 14:14:30,276
an INT and a float and not like a word

22611
14:14:28,116 --> 14:14:33,160
like cat or dog or some string that's

22612
14:14:30,276 --> 14:14:35,320
not actually a number well we can import

22613
14:14:33,160 --> 14:14:37,160
not just the specific function get

22614
14:14:35,320 --> 14:14:39,360
string but we can actually import all of

22615
14:14:37,160 --> 14:14:41,520
these functions one at a time like this

22616
14:14:39,360 --> 14:14:44,000
as we'll soon see or you can even in

22617
14:14:41,520 --> 14:14:46,000
Python import specific functions from a

22618
14:14:44,000 --> 14:14:47,720
file one of you asked a while back when

22619
14:14:46,000 --> 14:14:50,480
you import when you include something

22620
14:14:47,720 --> 14:14:52,680
like cs50.h or standard i.h you're

22621
14:14:50,480 --> 14:14:54,880
actually getting all of the code in that

22622
14:14:52,680 --> 14:14:57,320
file which potentially can add bulk to

22623
14:14:54,880 --> 14:14:59,596
your own program or time in this case

22624
14:14:57,320 --> 14:15:02,040
when you import specific functions from

22625
14:14:59,596 --> 14:15:04,115
python you can be a little more narrowly

22626
14:15:02,040 --> 14:15:06,756
uh precise as to what it is you want to

22627
14:15:04,116 --> 14:15:08,720
have access to all right so with that

22628
14:15:06,756 --> 14:15:11,080
said let's go ahead and see what

22629
14:15:08,720 --> 14:15:12,596
conditionals look like in Python so in

22630
14:15:11,080 --> 14:15:13,480
the left hand side again here we'll see

22631
14:15:12,596 --> 14:15:14,956
scrp

22632
14:15:13,480 --> 14:15:17,000
and here for instance was just kind of a

22633
14:15:14,956 --> 14:15:21,040
contrived example asking if x is less

22634
14:15:17,000 --> 14:15:23,276
than y then say x is less than y in C it

22635
14:15:21,040 --> 14:15:25,880
looked like this in Python now it's

22636
14:15:23,276 --> 14:15:29,840
going to look like this instead and

22637
14:15:25,880 --> 14:15:31,360
here's before in C and here's after and

22638
14:15:29,840 --> 14:15:33,320
just to call out a few of the obvious

22639
14:15:31,360 --> 14:15:36,360
differences what has changed in Python

22640
14:15:33,320 --> 14:15:36,360
for conditionals it would

22641
14:15:36,436 --> 14:15:42,240
seem sort of what's the difference

22642
14:15:40,080 --> 14:15:44,116
yeah yeah so there's no more curly

22643
14:15:42,240 --> 14:15:46,000
braces and indeed you don't use those

22644
14:15:44,116 --> 14:15:47,880
what appears to be taking their place if

22645
14:15:46,000 --> 14:15:49,956
you might

22646
14:15:47,880 --> 14:15:52,680
infer what seems to have taken their

22647
14:15:49,956 --> 14:15:54,795
place what do you think so the colon at

22648
14:15:52,680 --> 14:15:56,796
the start of this line here but also

22649
14:15:54,796 --> 14:15:59,360
even more important now is this

22650
14:15:56,796 --> 14:16:00,840
indentation below it so some of you and

22651
14:15:59,360 --> 14:16:03,000
we know this from Office hours have a

22652
14:16:00,840 --> 14:16:04,399
habit of like uh indenting everything on

22653
14:16:03,000 --> 14:16:06,560
the left right and it's just kind of

22654
14:16:04,400 --> 14:16:09,596
this crazy mess to look at frustrating

22655
14:16:06,560 --> 14:16:11,079
for you surely but C and clang is pretty

22656
14:16:09,596 --> 14:16:13,640
tolerant when it comes to things like

22657
14:16:11,080 --> 14:16:15,480
Whit space in a program python uh-uh

22658
14:16:13,640 --> 14:16:17,956
they realized years ago that let's help

22659
14:16:15,480 --> 14:16:20,116
humans help themselves and just require

22660
14:16:17,956 --> 14:16:21,756
standard indentation so four spaces

22661
14:16:20,116 --> 14:16:23,720
would be the norm here but because it's

22662
14:16:21,756 --> 14:16:26,160
indented below that colon that indeed

22663
14:16:23,720 --> 14:16:27,680
indicates that this now is part of that

22664
14:16:26,160 --> 14:16:31,040
condition something else has gone

22665
14:16:27,680 --> 14:16:33,720
missing versus C in this conditional

22666
14:16:31,040 --> 14:16:36,160
what else is a little

22667
14:16:33,720 --> 14:16:37,756
simplified yeah so no more parentheses

22668
14:16:36,160 --> 14:16:39,680
you can still use them especially when

22669
14:16:37,756 --> 14:16:41,720
you need to logically to do order of

22670
14:16:39,680 --> 14:16:42,956
operations like in math but in this case

22671
14:16:41,720 --> 14:16:44,640
if you just want to ask a simple

22672
14:16:42,956 --> 14:16:46,360
question like if x less than y you can

22673
14:16:44,640 --> 14:16:48,080
just do it like that how about when you

22674
14:16:46,360 --> 14:16:50,436
have an if else well this is almost the

22675
14:16:48,080 --> 14:16:52,040
same here with these same changes in C

22676
14:16:50,436 --> 14:16:53,720
this looked like this and it's starting

22677
14:16:52,040 --> 14:16:55,720
to get a bit bulky at least if we use

22678
14:16:53,720 --> 14:16:57,400
our curly braces in this way in Python

22679
14:16:55,720 --> 14:16:58,880
we can tighten things up further even

22680
14:16:57,400 --> 14:17:01,000
though strictly speaking in C you don't

22681
14:16:58,880 --> 14:17:03,560
always need the curly braces but here

22682
14:17:01,000 --> 14:17:05,436
gone are the parentheses again gone are

22683
14:17:03,560 --> 14:17:07,479
the curly braces indentation is

22684
14:17:05,436 --> 14:17:09,756
consistent and we've just added another

22685
14:17:07,480 --> 14:17:11,756
keyword else with a colon but no more

22686
14:17:09,756 --> 14:17:14,756
semicolons as well how about something

22687
14:17:11,756 --> 14:17:17,240
larger like this and if else if else

22688
14:17:14,756 --> 14:17:20,240
this one's a little curious but in C it

22689
14:17:17,240 --> 14:17:22,916
looked like this if else if else in

22690
14:17:20,240 --> 14:17:24,720
Python it now looks like this and

22691
14:17:22,916 --> 14:17:26,079
there's perhaps one curiosity here that

22692
14:17:24,720 --> 14:17:27,480
honestly all these years later I still

22693
14:17:26,080 --> 14:17:30,400
can't remember how to spell it half the

22694
14:17:27,480 --> 14:17:34,240
time what's weird about

22695
14:17:30,400 --> 14:17:37,796
this what do you spot as

22696
14:17:34,240 --> 14:17:37,795
different uh yeah over

22697
14:17:37,956 --> 14:17:43,840
here yeah instead of else if it's l if

22698
14:17:41,480 --> 14:17:45,640
why apparently El space if was just too

22699
14:17:43,840 --> 14:17:47,640
many keystrokes for humans to type so

22700
14:17:45,640 --> 14:17:49,360
they condensed it into this way probably

22701
14:17:47,640 --> 14:17:51,116
means it's a little more distinguishable

22702
14:17:49,360 --> 14:17:52,680
too for the computer between the if and

22703
14:17:51,116 --> 14:17:54,720
the else to but just something to

22704
14:17:52,680 --> 14:17:56,480
remember now it's indeed L if and not

22705
14:17:54,720 --> 14:17:58,160
else if all right so what about

22706
14:17:56,480 --> 14:18:01,200
variables in Python I've used a couple

22707
14:17:58,160 --> 14:18:03,560
of them already but let's let's um

22708
14:18:01,200 --> 14:18:04,956
distill exactly how you define uh and

22709
14:18:03,560 --> 14:18:06,079
declare these things as well so in

22710
14:18:04,956 --> 14:18:07,840
scratch if we wanted to create a

22711
14:18:06,080 --> 14:18:09,916
variable called counter and set it equal

22712
14:18:07,840 --> 14:18:11,956
initially to zero we would do something

22713
14:18:09,916 --> 14:18:13,680
like this specify that it's an INT use

22714
14:18:11,956 --> 14:18:16,040
the assignment op operator and the

22715
14:18:13,680 --> 14:18:18,360
thought with a semicolon in Python it's

22716
14:18:16,040 --> 14:18:20,200
just simpler you name the variable you

22717
14:18:18,360 --> 14:18:21,956
use the assignment operator as before

22718
14:18:20,200 --> 14:18:23,560
you set it equal to some value and

22719
14:18:21,956 --> 14:18:25,276
that's it you don't mention the type you

22720
14:18:23,560 --> 14:18:27,360
don't mention the semicolon or anything

22721
14:18:25,276 --> 14:18:29,640
more what if you want to change a

22722
14:18:27,360 --> 14:18:31,400
variable like the counter by one that is

22723
14:18:29,640 --> 14:18:33,796
incremented by one you have a few

22724
14:18:31,400 --> 14:18:35,360
different ways here in C we saw syntax

22725
14:18:33,796 --> 14:18:37,360
like this where you can say counter

22726
14:18:35,360 --> 14:18:40,160
equals counter plus one which again

22727
14:18:37,360 --> 14:18:42,436
feels like illogical how can counter

22728
14:18:40,160 --> 14:18:44,880
equal counter plus one but again we read

22729
14:18:42,436 --> 14:18:47,160
this code really right to left updating

22730
14:18:44,880 --> 14:18:48,719
its value by one um in Python it's

22731
14:18:47,160 --> 14:18:50,596
almost the same you just get rid of the

22732
14:18:48,720 --> 14:18:51,880
semicolon so that logic is there but

22733
14:18:50,596 --> 14:18:53,479
recall in C we could do something

22734
14:18:51,880 --> 14:18:55,880
slightly different that we can also do

22735
14:18:53,480 --> 14:18:58,320
in Python in Python you can also more

22736
14:18:55,880 --> 14:19:00,200
succinctly do this plus equals and then

22737
14:18:58,320 --> 14:19:01,720
whatever number you want to add or you

22738
14:19:00,200 --> 14:19:04,880
can even change it to subtract if you

22739
14:19:01,720 --> 14:19:06,756
prefer sadly gone is something you've

22740
14:19:04,880 --> 14:19:08,560
probably typed a whole lot what was the

22741
14:19:06,756 --> 14:19:11,756
other way you can add

22742
14:19:08,560 --> 14:19:13,159
one Plus+ is no more sadly in Python

22743
14:19:11,756 --> 14:19:15,360
just too many ways to do the same thing

22744
14:19:13,160 --> 14:19:17,596
so they got rid of it in favor of just

22745
14:19:15,360 --> 14:19:18,880
this syntax here so keep that in mind as

22746
14:19:17,596 --> 14:19:21,000
well what about loops when you want to

22747
14:19:18,880 --> 14:19:22,719
do something in Python again and again

22748
14:19:21,000 --> 14:19:25,796
well in scratch in week zero here's how

22749
14:19:22,720 --> 14:19:27,360
we meowed three times specifically in C

22750
14:19:25,796 --> 14:19:28,840
we had a couple of ways of doing this

22751
14:19:27,360 --> 14:19:30,680
this was like the more mechanical

22752
14:19:28,840 --> 14:19:32,755
approach where you create a variable

22753
14:19:30,680 --> 14:19:35,480
called I you set it equal to zero you

22754
14:19:32,756 --> 14:19:37,000
then do while I is less than three the

22755
14:19:35,480 --> 14:19:39,640
following and then you yourself

22756
14:19:37,000 --> 14:19:41,116
increment I again and again mechanical

22757
14:19:39,640 --> 14:19:42,720
in the sense that like you have to

22758
14:19:41,116 --> 14:19:44,320
implement all of these gears and make

22759
14:19:42,720 --> 14:19:46,680
them turn yourself but this was a

22760
14:19:44,320 --> 14:19:48,916
correct way to do that in Python we can

22761
14:19:46,680 --> 14:19:51,360
still achieve the same idea but we don't

22762
14:19:48,916 --> 14:19:52,795
need the int keyword we don't need any

22763
14:19:51,360 --> 14:19:54,240
of the semicolons we don't need the

22764
14:19:52,796 --> 14:19:56,680
parentheses we don't need the curly

22765
14:19:54,240 --> 14:19:58,200
braces we can't use the Plus+ so maybe

22766
14:19:56,680 --> 14:20:00,956
that's a minor step backwards if you're

22767
14:19:58,200 --> 14:20:03,200
a fan but otherwise the code the logic

22768
14:20:00,956 --> 14:20:05,436
is exactly the same but there's other

22769
14:20:03,200 --> 14:20:07,479
ways to achieve this same idea recall

22770
14:20:05,436 --> 14:20:09,480
that in C we could also do this you

22771
14:20:07,480 --> 14:20:11,756
could use a for Loop which it does

22772
14:20:09,480 --> 14:20:13,436
exactly the same thing both are correct

22773
14:20:11,756 --> 14:20:15,116
both are arguably welld designed it's

22774
14:20:13,436 --> 14:20:17,596
kind of to each their own when it comes

22775
14:20:15,116 --> 14:20:19,640
to choosing between these in Python

22776
14:20:17,596 --> 14:20:22,159
though we're going to have to think

22777
14:20:19,640 --> 14:20:25,276
through how to do this so you don't do

22778
14:20:22,160 --> 14:20:27,640
the same for loop as in C the closest I

22779
14:20:25,276 --> 14:20:30,079
could come up with is this where you say

22780
14:20:27,640 --> 14:20:32,479
four I or whatever variable you want to

22781
14:20:30,080 --> 14:20:34,360
do the counting in literally the

22782
14:20:32,480 --> 14:20:36,240
preposition and then you use square

22783
14:20:34,360 --> 14:20:38,080
brackets here and we've used square

22784
14:20:36,240 --> 14:20:41,680
brackets before in the context of like

22785
14:20:38,080 --> 14:20:43,880
arrays and things like that and the 012

22786
14:20:41,680 --> 14:20:45,360
looks like an array in some sense even

22787
14:20:43,880 --> 14:20:47,200
though we've also seen arrays with curly

22788
14:20:45,360 --> 14:20:49,360
braces but these square brackets for now

22789
14:20:47,200 --> 14:20:51,520
denote a list python does not have

22790
14:20:49,360 --> 14:20:54,240
arrays an array is that contiguous chunk

22791
14:20:51,520 --> 14:20:56,840
of memory back to back to back that you

22792
14:20:54,240 --> 14:20:59,360
have to resize somehow by moving things

22793
14:20:56,840 --> 14:21:02,359
around in memory as per two weeks ago in

22794
14:20:59,360 --> 14:21:04,116
Python though you can just create a list

22795
14:21:02,360 --> 14:21:05,956
like this using square brackets and

22796
14:21:04,116 --> 14:21:08,116
better still as we'll see you can add or

22797
14:21:05,956 --> 14:21:11,000
even remove things from that list down

22798
14:21:08,116 --> 14:21:13,276
the road um this though is not going to

22799
14:21:11,000 --> 14:21:15,720
be very welld designed this will work

22800
14:21:13,276 --> 14:21:18,000
this will iterate in Python three

22801
14:21:15,720 --> 14:21:19,680
times but what might rub you the wrong

22802
14:21:18,000 --> 14:21:22,000
way about this design even if you've

22803
14:21:19,680 --> 14:21:25,200
never seen python before how does this

22804
14:21:22,000 --> 14:21:25,200
example not end well

22805
14:21:25,880 --> 14:21:30,115
yeah yeah like if you're making a large

22806
14:21:28,116 --> 14:21:31,840
list you have to type out each one of

22807
14:21:30,116 --> 14:21:34,240
these numbers like comma three comma

22808
14:21:31,840 --> 14:21:36,795
four comma 5 comma dot dot do 50 comma

22809
14:21:34,240 --> 14:21:38,360
dot dot dot 500 like surely that's not

22810
14:21:36,796 --> 14:21:40,240
the best solution to have all of these

22811
14:21:38,360 --> 14:21:42,680
numbers on the code on the screen

22812
14:21:40,240 --> 14:21:44,596
wrapping endlessly on the screen so in

22813
14:21:42,680 --> 14:21:46,640
Python another way to do this would be

22814
14:21:44,596 --> 14:21:48,880
to use a function called range which

22815
14:21:46,640 --> 14:21:51,840
technically is a data type unto itself

22816
14:21:48,880 --> 14:21:53,840
and this returns to you as many values

22817
14:21:51,840 --> 14:21:55,399
as you ask for it range takes some other

22818
14:21:53,840 --> 14:21:56,560
arguments as well but the simplest use

22819
14:21:55,400 --> 14:21:59,880
case here is if you want back the

22820
14:21:56,560 --> 14:22:02,079
numbers 0 1 and two a total of three

22821
14:21:59,880 --> 14:22:04,276
values you say hey python please give me

22822
14:22:02,080 --> 14:22:06,400
a range of three values and by default

22823
14:22:04,276 --> 14:22:09,000
they start at zero on up but this is

22824
14:22:06,400 --> 14:22:11,360
more efficient than it would be to

22825
14:22:09,000 --> 14:22:12,916
hardcode the entire list at once and the

22826
14:22:11,360 --> 14:22:14,160
best metaphor I could up with is

22827
14:22:12,916 --> 14:22:15,680
something like this like here for

22828
14:22:14,160 --> 14:22:17,480
instance is a deck of cards this is sort

22829
14:22:15,680 --> 14:22:20,560
of normal human size and there's

22830
14:22:17,480 --> 14:22:23,240
presumably 52 cards here so writing out

22831
14:22:20,560 --> 14:22:24,720
0 through 51 on code would be a little

22832
14:22:23,240 --> 14:22:27,079
ridiculous for the reasons you know it

22833
14:22:24,720 --> 14:22:29,080
would just be very unwieldy and ugly and

22834
14:22:27,080 --> 14:22:30,680
wrapping and all of that it would be the

22835
14:22:29,080 --> 14:22:32,560
phys it would be the virtual equivalent

22836
14:22:30,680 --> 14:22:34,436
of me like handing you all of these

22837
14:22:32,560 --> 14:22:35,756
cards at once to just deal with and

22838
14:22:34,436 --> 14:22:37,400
right you know they're not that big but

22839
14:22:35,756 --> 14:22:39,160
like it's a lot of cards to hold on to

22840
14:22:37,400 --> 14:22:41,400
it requires a lot of memory or physical

22841
14:22:39,160 --> 14:22:43,436
storage if you will what range does

22842
14:22:41,400 --> 14:22:46,756
metaphorically is if you ask me for

22843
14:22:43,436 --> 14:22:49,520
three cards I hand you them one at a

22844
14:22:46,756 --> 14:22:51,560
time like this so that at any point in

22845
14:22:49,520 --> 14:22:54,079
time you only have one number in the

22846
14:22:51,560 --> 14:22:56,040
computer's memory until you're handed

22847
14:22:54,080 --> 14:22:57,480
the next the alternative the previous

22848
14:22:56,040 --> 14:22:59,916
version would be to hand me all three

22849
14:22:57,480 --> 14:23:01,916
cards at once or all 52 cards at once

22850
14:22:59,916 --> 14:23:04,360
but in this case range is just way more

22851
14:23:01,916 --> 14:23:05,755
efficient you can do range of a thousand

22852
14:23:04,360 --> 14:23:07,756
that's not going to give you a list of a

22853
14:23:05,756 --> 14:23:10,520
thousand values all at once it's going

22854
14:23:07,756 --> 14:23:13,240
to give you a thousand values one at a

22855
14:23:10,520 --> 14:23:16,719
time reducing memory sign signicantly in

22856
14:23:13,240 --> 14:23:18,640
the computer itself all right so besides

22857
14:23:16,720 --> 14:23:20,680
this what about doing something forever

22858
14:23:18,640 --> 14:23:22,320
in scratch well we could do this

22859
14:23:20,680 --> 14:23:24,796
literally with a forever block which

22860
14:23:22,320 --> 14:23:27,200
didn't quite exist in C in C we had had

22861
14:23:24,796 --> 14:23:30,160
to hack it together by saying while true

22862
14:23:27,200 --> 14:23:32,880
because true is by definition TR always

22863
14:23:30,160 --> 14:23:35,360
true so this just in uh deliberately

22864
14:23:32,880 --> 14:23:37,200
induces an infinite Loop for us in

22865
14:23:35,360 --> 14:23:39,360
Python the logic's going to be almost

22866
14:23:37,200 --> 14:23:41,360
the same and infinite Loops in Python

22867
14:23:39,360 --> 14:23:43,000
tend to actually be even more common

22868
14:23:41,360 --> 14:23:45,560
because you can always break out of them

22869
14:23:43,000 --> 14:23:47,796
as you couldn't see in Python it looks

22870
14:23:45,560 --> 14:23:50,520
like this and this is slightly more

22871
14:23:47,796 --> 14:23:52,756
subtle but gone are the curly braces

22872
14:23:50,520 --> 14:23:54,359
gone or the parentheses but ever so

22873
14:23:52,756 --> 14:23:56,796
slight difference

22874
14:23:54,360 --> 14:23:58,520
toal capital T for true and it's going

22875
14:23:56,796 --> 14:23:59,640
to be a capital f for false stupid

22876
14:23:58,520 --> 14:24:00,956
little differences eventually you're

22877
14:23:59,640 --> 14:24:02,276
going to mistype one or the other but

22878
14:24:00,956 --> 14:24:04,400
these are the kinds of things to keep an

22879
14:24:02,276 --> 14:24:06,956
eye out and to start recognizing in your

22880
14:24:04,400 --> 14:24:09,520
mind's eye when you read code questions

22881
14:24:06,956 --> 14:24:11,080
now on any of these building

22882
14:24:09,520 --> 14:24:14,079
blocks

22883
14:24:11,080 --> 14:24:14,080
yeah

22884
14:24:14,916 --> 14:24:20,916
I in the for Loop was I re uh it was set

22885
14:24:18,956 --> 14:24:23,320
to zero on the first iteration then one

22886
14:24:20,916 --> 14:24:25,596
on the next then two on the third and

22887
14:24:23,320 --> 14:24:28,956
the same thing for range it just doesn't

22888
14:24:25,596 --> 14:24:30,795
use up as much memory all at once other

22889
14:24:28,956 --> 14:24:33,436
questions now on any of these building

22890
14:24:30,796 --> 14:24:35,560
blocks of

22891
14:24:33,436 --> 14:24:37,436
python no all right well let's go ahead

22892
14:24:35,560 --> 14:24:39,840
and build something a little more than

22893
14:24:37,436 --> 14:24:42,080
hello let me propose that over here we

22894
14:24:39,840 --> 14:24:44,079
Implement maybe the the simplest of

22895
14:24:42,080 --> 14:24:47,400
calculators here so let me go back to vs

22896
14:24:44,080 --> 14:24:50,720
code here open my terminal uh window and

22897
14:24:47,400 --> 14:24:53,240
open up say a file called

22898
14:24:50,720 --> 14:24:55,000
calculator. and in calculator. we'll

22899
14:24:53,240 --> 14:24:56,479
have an opportunity to explore some of

22900
14:24:55,000 --> 14:24:58,480
these building blocks but we'll allow

22901
14:24:56,480 --> 14:25:00,276
things to escalate pretty quickly to

22902
14:24:58,480 --> 14:25:02,680
more interesting examples so that we can

22903
14:25:00,276 --> 14:25:04,079
do the same thing ultimately as well and

22904
14:25:02,680 --> 14:25:06,276
in fact let me go ahead and do this

22905
14:25:04,080 --> 14:25:08,200
moreover I've brought some code with me

22906
14:25:06,276 --> 14:25:11,159
in advance uh for instance something

22907
14:25:08,200 --> 14:25:12,640
called calculator 0. C from the first

22908
14:25:11,160 --> 14:25:14,596
week of C

22909
14:25:12,640 --> 14:25:16,720
and let me go ahead and split my window

22910
14:25:14,596 --> 14:25:19,560
here in fact so that I can now do

22911
14:25:16,720 --> 14:25:23,320
something like uh this let me move this

22912
14:25:19,560 --> 14:25:24,596
over here here calculator. Pi so now I

22913
14:25:23,320 --> 14:25:27,400
have on the left of my screen

22914
14:25:24,596 --> 14:25:28,520
calculator. C or calculator z.c because

22915
14:25:27,400 --> 14:25:30,640
that's the first version I made and

22916
14:25:28,520 --> 14:25:32,640
calculator. Pi on the right let me go

22917
14:25:30,640 --> 14:25:34,240
ahead and Implement really the same idea

22918
14:25:32,640 --> 14:25:37,479
here so on the right hand side the

22919
14:25:34,240 --> 14:25:40,596
analog of including cs50.h would be from

22920
14:25:37,480 --> 14:25:42,276
cs50 import get int if I want to indeed

22921
14:25:40,596 --> 14:25:43,795
use this function now I'm going to go

22922
14:25:42,276 --> 14:25:45,479
ahead and give myself a variable X

22923
14:25:43,796 --> 14:25:47,000
without defining its type I'm going to

22924
14:25:45,480 --> 14:25:49,956
use this get int function and I'm going

22925
14:25:47,000 --> 14:25:51,240
to prompt the user for X just like in C

22926
14:25:49,956 --> 14:25:54,320
I'm then going to go ahead and prompt

22927
14:25:51,240 --> 14:25:56,400
the user for another int like y here

22928
14:25:54,320 --> 14:25:59,320
just like in C and at the very end I'm

22929
14:25:56,400 --> 14:26:01,640
going to go ahead and do print X Plus Y

22930
14:25:59,320 --> 14:26:03,520
and that's it now granted I have some

22931
14:26:01,640 --> 14:26:05,080
comments in my C version of the code

22932
14:26:03,520 --> 14:26:07,039
just to remind you of what each line is

22933
14:26:05,080 --> 14:26:08,956
doing but I've still distilled this into

22934
14:26:07,040 --> 14:26:10,720
like six lines or really four if I get

22935
14:26:08,956 --> 14:26:13,116
rid of the blank line so it's already

22936
14:26:10,720 --> 14:26:15,040
perhaps a bit tighter here here but

22937
14:26:13,116 --> 14:26:17,116
there's also it's tighter because

22938
14:26:15,040 --> 14:26:20,360
something really important historically

22939
14:26:17,116 --> 14:26:22,080
is missing what did I seem to Omit

22940
14:26:20,360 --> 14:26:24,596
altogether that we haven't really

22941
14:26:22,080 --> 14:26:27,480
highlighted yet

22942
14:26:24,596 --> 14:26:29,560
yeah yeah the main function is gone and

22943
14:26:27,480 --> 14:26:31,116
in fact maybe you took for granted that

22944
14:26:29,560 --> 14:26:32,916
it just worked a moment ago when I wrote

22945
14:26:31,116 --> 14:26:34,480
hello but I didn't have a main function

22946
14:26:32,916 --> 14:26:36,399
in hello either and this too is a

22947
14:26:34,480 --> 14:26:38,080
feature of python and a lot of other

22948
14:26:36,400 --> 14:26:39,880
languages as well instead of having to

22949
14:26:38,080 --> 14:26:41,080
adhere to these long-standing Traditions

22950
14:26:39,880 --> 14:26:42,719
if you just want to write code and get

22951
14:26:41,080 --> 14:26:44,720
something done fine just write code and

22952
14:26:42,720 --> 14:26:47,040
get something done without necessarily

22953
14:26:44,720 --> 14:26:49,880
all of the same boiler plate so whatever

22954
14:26:47,040 --> 14:26:51,956
is in your python file left indented if

22955
14:26:49,880 --> 14:26:53,880
you will by default is just going to be

22956
14:26:51,956 --> 14:26:56,240
the code that The Interpreter runs top

22957
14:26:53,880 --> 14:26:59,320
to bottom left to right well let me go

22958
14:26:56,240 --> 14:27:00,956
ahead now and run code like this let me

22959
14:26:59,320 --> 14:27:02,956
go ahead and open that back up my

22960
14:27:00,956 --> 14:27:05,360
terminal window run python of

22961
14:27:02,956 --> 14:27:07,640
calculator. piy and I'll do X is one y

22962
14:27:05,360 --> 14:27:09,596
is 2 and as you might expect it gives me

22963
14:27:07,640 --> 14:27:11,479
three slight aesthetic bug I put my

22964
14:27:09,596 --> 14:27:12,956
space in the wrong place here so that's

22965
14:27:11,480 --> 14:27:14,916
a new mistake let me fix that

22966
14:27:12,956 --> 14:27:17,360
aesthetically let me rerun python of

22967
14:27:14,916 --> 14:27:20,115
calculator. Pi type in one type in two

22968
14:27:17,360 --> 14:27:23,080
and voila there is now my same version

22969
14:27:20,116 --> 14:27:24,360
again but let me propose now that we get

22970
14:27:23,080 --> 14:27:26,160
rid of this training wheel we don't want

22971
14:27:24,360 --> 14:27:27,680
to keep taking one step forward and then

22972
14:27:26,160 --> 14:27:30,276
two steps back by adding these training

22973
14:27:27,680 --> 14:27:32,796
wheels so let me instead do this in my

22974
14:27:30,276 --> 14:27:34,956
version of calculator. suppose that we

22975
14:27:32,796 --> 14:27:38,160
take away already the training wheel

22976
14:27:34,956 --> 14:27:40,276
that is the cs50 library here and let me

22977
14:27:38,160 --> 14:27:42,640
instead then use just Python's built-in

22978
14:27:40,276 --> 14:27:45,115
function called input which literally

22979
14:27:42,640 --> 14:27:48,116
does just that it gets input from the

22980
14:27:45,116 --> 14:27:50,160
user and it stores it as before in X and

22981
14:27:48,116 --> 14:27:52,360
Y so this is not cs50 specific this is

22982
14:27:50,160 --> 14:27:54,080
real world Python Programming well let

22983
14:27:52,360 --> 14:27:57,436
me go ahead and run again python of

22984
14:27:54,080 --> 14:28:00,400
calculator. Pi and of course if x is one

22985
14:27:57,436 --> 14:28:03,116
and Y is 2 X + Y should of course still

22986
14:28:00,400 --> 14:28:06,360
be three

22987
14:28:03,116 --> 14:28:08,520
hm it's apparently 12 according to

22988
14:28:06,360 --> 14:28:10,720
python until cs50's Library gets

22989
14:28:08,520 --> 14:28:15,276
involved but does anyone want to

22990
14:28:10,720 --> 14:28:15,276
infer what's just went wrong

22991
14:28:17,160 --> 14:28:22,596
yeah exactly the input function by

22992
14:28:19,956 --> 14:28:24,240
Design always returns a string of text

22993
14:28:22,596 --> 14:28:25,916
after all that's what the human typed in

22994
14:28:24,240 --> 14:28:27,916
and even though yes I type the number

22995
14:28:25,916 --> 14:28:30,276
keys on the keyboard it's still coming

22996
14:28:27,916 --> 14:28:32,320
back is all text now maybe we should use

22997
14:28:30,276 --> 14:28:34,436
like a get in function well that doesn't

22998
14:28:32,320 --> 14:28:37,116
exist in Python all you can do is get

22999
14:28:34,436 --> 14:28:39,840
textual input a string from the user but

23000
14:28:37,116 --> 14:28:41,916
we can convert one to the other and so a

23001
14:28:39,840 --> 14:28:44,916
fix for this so that we don't accident

23002
14:28:41,916 --> 14:28:46,719
Al concatenate that is join X+ y

23003
14:28:44,916 --> 14:28:48,916
together would be to do something like

23004
14:28:46,720 --> 14:28:51,680
this let me go back to my python code

23005
14:28:48,916 --> 14:28:53,640
here and whereas in C we could

23006
14:28:51,680 --> 14:28:55,956
previously do type casting we could

23007
14:28:53,640 --> 14:28:57,916
convert one type to another that

23008
14:28:55,956 --> 14:28:59,756
generally wasn't the case when you were

23009
14:28:57,916 --> 14:29:02,040
doing something complex like a string to

23010
14:28:59,756 --> 14:29:04,360
an INT you could do a Char to an INT and

23011
14:29:02,040 --> 14:29:06,400
vice versa but for a string recall there

23012
14:29:04,360 --> 14:29:08,956
was a special function in the ctype

23013
14:29:06,400 --> 14:29:12,240
library called a to I like ask e to

23014
14:29:08,956 --> 14:29:13,956
integer that's uh that closest analog

23015
14:29:12,240 --> 14:29:16,276
here and in fact the way to do this in

23016
14:29:13,956 --> 14:29:18,479
Python would be to use a function called

23017
14:29:16,276 --> 14:29:20,276
int which indeed is the name of the data

23018
14:29:18,480 --> 14:29:23,436
type 2 even though I have not yet had to

23019
14:29:20,276 --> 14:29:26,159
type it and I can convert the output of

23020
14:29:23,436 --> 14:29:29,916
the input function automatically from a

23021
14:29:26,160 --> 14:29:32,080
string immediately to an INT and now if

23022
14:29:29,916 --> 14:29:34,276
I go back to my terminal window rerun

23023
14:29:32,080 --> 14:29:37,240
python of calculator. piy with one and

23024
14:29:34,276 --> 14:29:39,360
two for X and Y now I'm back in business

23025
14:29:37,240 --> 14:29:41,756
so that then is for instance what the

23026
14:29:39,360 --> 14:29:43,116
cs50 library does if temporarily this

23027
14:29:41,756 --> 14:29:45,240
week is it just deals with the

23028
14:29:43,116 --> 14:29:47,436
conversion for you and in fact bad

23029
14:29:45,240 --> 14:29:50,000
things could happen if I type the wrong

23030
14:29:47,436 --> 14:29:51,720
thing like dog or cat instead of a

23031
14:29:50,000 --> 14:29:53,720
number but we'll cross that bridge in

23032
14:29:51,720 --> 14:29:55,596
just a moment as well all right what if

23033
14:29:53,720 --> 14:29:57,116
we do something slightly different now

23034
14:29:55,596 --> 14:29:59,240
with our calculator instead of just

23035
14:29:57,116 --> 14:30:02,000
addition let me go ahead and do how

23036
14:29:59,240 --> 14:30:05,795
about uh div instead of addition let's

23037
14:30:02,000 --> 14:30:08,720
do division instead so Z equals x / y

23038
14:30:05,796 --> 14:30:10,480
thereby giving me a third variable Z let

23039
14:30:08,720 --> 14:30:13,680
me go ahead and run python of

23040
14:30:10,480 --> 14:30:17,080
calculator. piy again I'll type in one

23041
14:30:13,680 --> 14:30:19,436
I'll type in three this time and what

23042
14:30:17,080 --> 14:30:20,956
prog what problem do you think we're

23043
14:30:19,436 --> 14:30:23,720
about to

23044
14:30:20,956 --> 14:30:26,000
see or is it gone what happened when I

23045
14:30:23,720 --> 14:30:28,276
did this in C albeit with some slightly

23046
14:30:26,000 --> 14:30:31,276
more cryptic syntax when I divided one

23047
14:30:28,276 --> 14:30:35,079
number like one one divided by

23048
14:30:31,276 --> 14:30:38,040
three anyone recall

23049
14:30:35,080 --> 14:30:41,080
yeah yeah so it would round down to the

23050
14:30:38,040 --> 14:30:44,160
nearest integer whereby you experience

23051
14:30:41,080 --> 14:30:46,080
trunc so if you take an integer like one

23052
14:30:44,160 --> 14:30:48,720
you divide it by another integer like

23053
14:30:46,080 --> 14:30:53,160
three that technically should be

23054
14:30:48,720 --> 14:30:55,320
0.33333 infinitely long but in uh C

23055
14:30:53,160 --> 14:30:56,916
recall you truncate the value if you

23056
14:30:55,320 --> 14:30:58,520
divide an INT by an INT you get back an

23057
14:30:56,916 --> 14:31:00,680
INT which means you get only the integer

23058
14:30:58,520 --> 14:31:02,880
part which was the zero now python

23059
14:31:00,680 --> 14:31:05,000
actually handles this for us and avoids

23060
14:31:02,880 --> 14:31:07,596
the truncation but it leaves us still

23061
14:31:05,000 --> 14:31:10,680
with one other problem here which is

23062
14:31:07,596 --> 14:31:12,040
going to be for instance not necessarily

23063
14:31:10,680 --> 14:31:13,916
visible at a GL

23064
14:31:12,040 --> 14:31:16,320
this looks correct this has solved the

23065
14:31:13,916 --> 14:31:17,880
problem in C so truncation does not

23066
14:31:16,320 --> 14:31:19,680
happen the integers are automatically

23067
14:31:17,880 --> 14:31:22,200
converted to a float a floating point

23068
14:31:19,680 --> 14:31:23,320
value but what other problem did we trip

23069
14:31:22,200 --> 14:31:28,115
over back

23070
14:31:23,320 --> 14:31:28,116
in week uh

23071
14:31:28,160 --> 14:31:33,320
one what else got a little dicey when

23072
14:31:31,480 --> 14:31:36,596
dealing with simple

23073
14:31:33,320 --> 14:31:37,880
arithmetic anyone recall well the syntax

23074
14:31:36,596 --> 14:31:40,000
in Python's a little different but let

23075
14:31:37,880 --> 14:31:42,040
me go ahead and do this it turns out in

23076
14:31:40,000 --> 14:31:43,756
Python if you want to see more

23077
14:31:42,040 --> 14:31:45,480
significant digits than what I'm seeing

23078
14:31:43,756 --> 14:31:47,916
here by the default which is a dozen or

23079
14:31:45,480 --> 14:31:50,560
so let me go ahead and print out Z as

23080
14:31:47,916 --> 14:31:52,276
follows let me first print out a format

23081
14:31:50,560 --> 14:31:54,159
string because I want to format Z in an

23082
14:31:52,276 --> 14:31:56,115
interesting way and notice this would

23083
14:31:54,160 --> 14:31:57,596
have no effect on the difference this is

23084
14:31:56,116 --> 14:31:59,436
just a format string that for no

23085
14:31:57,596 --> 14:32:01,880
compelling reason at the moment is

23086
14:31:59,436 --> 14:32:04,276
interpolating z in those curly braces

23087
14:32:01,880 --> 14:32:06,079
using an F string or format string if I

23088
14:32:04,276 --> 14:32:08,276
run this again with one and three we'll

23089
14:32:06,080 --> 14:32:10,436
see indeed the exact same thing but when

23090
14:32:08,276 --> 14:32:12,360
you use an F string you indeed have the

23091
14:32:10,436 --> 14:32:15,200
ability to format that string more

23092
14:32:12,360 --> 14:32:17,200
precisely just like with percent F in

23093
14:32:15,200 --> 14:32:20,520
Python you could start to fine-tune how

23094
14:32:17,200 --> 14:32:23,360
many significant digits you see in uh p

23095
14:32:20,520 --> 14:32:24,719
in C rather in Python you can do the

23096
14:32:23,360 --> 14:32:26,276
same but the syntax is a little

23097
14:32:24,720 --> 14:32:29,560
different if you want the computer to

23098
14:32:26,276 --> 14:32:32,079
interpolate Z and show you 50

23099
14:32:29,560 --> 14:32:34,079
significant digits that is 50 numbers

23100
14:32:32,080 --> 14:32:36,160
after the decimal point syntax is

23101
14:32:34,080 --> 14:32:37,840
similar to C but it's a little different

23102
14:32:36,160 --> 14:32:40,956
you literally put a colon after the

23103
14:32:37,840 --> 14:32:43,115
variable's name 50 means show me the

23104
14:32:40,956 --> 14:32:45,276
decimal point and then 50 digits to the

23105
14:32:43,116 --> 14:32:47,680
right and the F just indicates please

23106
14:32:45,276 --> 14:32:50,079
treat this as a floating point value so

23107
14:32:47,680 --> 14:32:54,320
now if I rerun python of calculator. Pi

23108
14:32:50,080 --> 14:32:56,276
divide 1 by 3 unfortunately python has

23109
14:32:54,320 --> 14:32:58,756
not solved all of the world's problems

23110
14:32:56,276 --> 14:33:00,956
for us this again was an example of

23111
14:32:58,756 --> 14:33:03,000
floating point in Precision so that

23112
14:33:00,956 --> 14:33:04,200
problem is still latent so just because

23113
14:33:03,000 --> 14:33:05,436
the world has advanced doesn't

23114
14:33:04,200 --> 14:33:07,479
necessarily mean that all of our

23115
14:33:05,436 --> 14:33:09,840
problems from C have gone away there are

23116
14:33:07,480 --> 14:33:12,000
solutions using third-party libraries

23117
14:33:09,840 --> 14:33:13,956
for scientific calculations and the like

23118
14:33:12,000 --> 14:33:17,596
but out of the box floating point in

23119
14:33:13,956 --> 14:33:20,640
Precision is still an issue meanwhile

23120
14:33:17,596 --> 14:33:22,479
there was one other problem in C that we

23121
14:33:20,640 --> 14:33:25,040
ran into involving numbers and that was

23122
14:33:22,480 --> 14:33:27,360
this integer overflow recall that an

23123
14:33:25,040 --> 14:33:28,956
integer in C only took up what like 32

23124
14:33:27,360 --> 14:33:30,596
bits typically which meant you could

23125
14:33:28,956 --> 14:33:31,956
count as high as four billion or maybe

23126
14:33:30,596 --> 14:33:34,115
if you're doing positive and negatives

23127
14:33:31,956 --> 14:33:35,400
as high as two billion after which weird

23128
14:33:34,116 --> 14:33:37,320
things would happen the number would go

23129
14:33:35,400 --> 14:33:39,840
to zero or negative or just it would

23130
14:33:37,320 --> 14:33:41,400
overflow or wrap back around well

23131
14:33:39,840 --> 14:33:44,399
wonderfully in Python they did it at

23132
14:33:41,400 --> 14:33:46,596
least address this whereby you can count

23133
14:33:44,400 --> 14:33:48,796
as high as you want and python will just

23134
14:33:46,596 --> 14:33:51,276
use more and more and more and more bits

23135
14:33:48,796 --> 14:33:54,040
and bites to store really big numbers so

23136
14:33:51,276 --> 14:33:57,240
integer overflow is not a thing with

23137
14:33:54,040 --> 14:33:59,200
that said python is limited to how many

23138
14:33:57,240 --> 14:34:01,400
digits it will show you on the screen at

23139
14:33:59,200 --> 14:34:04,320
once as a string but mathematically your

23140
14:34:01,400 --> 14:34:06,796
math will be correct now so we've taken

23141
14:34:04,320 --> 14:34:08,880
a couple steps forward One Step sideways

23142
14:34:06,796 --> 14:34:11,320
but indeed we've solved some of our

23143
14:34:08,880 --> 14:34:16,320
problems here all right questions now

23144
14:34:11,320 --> 14:34:17,956
now on any of these examples thus

23145
14:34:16,320 --> 14:34:21,080
far

23146
14:34:17,956 --> 14:34:22,276
question all right well how about uh how

23147
14:34:21,080 --> 14:34:25,560
about another problem that we

23148
14:34:22,276 --> 14:34:27,240
encountered in C let's revisit it here

23149
14:34:25,560 --> 14:34:28,880
in python as well so let me go ahead and

23150
14:34:27,240 --> 14:34:33,240
on the left hand side here let me open

23151
14:34:28,880 --> 14:34:37,680
up a file called say compare let's see

23152
14:34:33,240 --> 14:34:39,360
uh how about a file called compare 3. C

23153
14:34:37,680 --> 14:34:41,200
on the left and let me go ahead and

23154
14:34:39,360 --> 14:34:43,276
create a new file on the right called

23155
14:34:41,200 --> 14:34:45,755
compare. Pi because recall that bad

23156
14:34:43,276 --> 14:34:48,360
things happened when we needed to

23157
14:34:45,756 --> 14:34:50,436
compare two values in C so on the left

23158
14:34:48,360 --> 14:34:53,000
here is a reminder of what we once did

23159
14:34:50,436 --> 14:34:55,276
in C whereby if we want to compare

23160
14:34:53,000 --> 14:34:58,400
values we can get an INT in C stored in

23161
14:34:55,276 --> 14:35:00,795
x a get int in C stored in y we then

23162
14:34:58,400 --> 14:35:03,320
have our familiar conditional logic here

23163
14:35:00,796 --> 14:35:05,400
just printing out if x is less than y or

23164
14:35:03,320 --> 14:35:08,720
not well we can certainly do the same

23165
14:35:05,400 --> 14:35:10,596
thing ultimately in Python by using some

23166
14:35:08,720 --> 14:35:12,640
fairly familiar syntax and let's just

23167
14:35:10,596 --> 14:35:16,680
demonstrate this one quickly let me go

23168
14:35:12,640 --> 14:35:18,880
over here too I'll do from cs50 import

23169
14:35:16,680 --> 14:35:21,596
uh get int even though I could do this

23170
14:35:18,880 --> 14:35:23,435
instead with the input function itself x

23171
14:35:21,596 --> 14:35:26,079
equals get int and I'll prompt the user

23172
14:35:23,436 --> 14:35:28,436
for that y equals get int and I'll

23173
14:35:26,080 --> 14:35:29,756
prompt the user for that after that

23174
14:35:28,436 --> 14:35:32,320
recall that I can say without

23175
14:35:29,756 --> 14:35:35,560
parentheses if x is less than y then

23176
14:35:32,320 --> 14:35:38,640
print out without the F uh X is less

23177
14:35:35,560 --> 14:35:42,795
than y then I can go ahead and say else

23178
14:35:38,640 --> 14:35:46,240
if x is greater than y i can print out

23179
14:35:42,796 --> 14:35:47,880
uh quote unquote X is greater than y if

23180
14:35:46,240 --> 14:35:49,360
you'd like to interject now what did I

23181
14:35:47,880 --> 14:35:55,399
screw

23182
14:35:49,360 --> 14:35:57,796
up anyone yeah L if right so L if L if x

23183
14:35:55,400 --> 14:36:01,276
is greater than y else this part's the

23184
14:35:57,796 --> 14:36:03,240
same print X is equal to Y so there's

23185
14:36:01,276 --> 14:36:05,115
not all that much new there's no New

23186
14:36:03,240 --> 14:36:06,479
Logic going on here but at least

23187
14:36:05,116 --> 14:36:08,160
syntactically it's a little cleaner

23188
14:36:06,480 --> 14:36:10,320
indeed this program is only 11 lines

23189
14:36:08,160 --> 14:36:12,680
long albeit without any comments let me

23190
14:36:10,320 --> 14:36:15,596
go ahead and run python of compare. Pi

23191
14:36:12,680 --> 14:36:18,520
let's see is 1 less than two indeed

23192
14:36:15,596 --> 14:36:20,640
let's run it again is 2 less than 1 no

23193
14:36:18,520 --> 14:36:23,956
it's greater than and let's lastly type

23194
14:36:20,640 --> 14:36:26,040
in one and one twice X is equal to Y so

23195
14:36:23,956 --> 14:36:27,640
we've got a pretty side by side onetoone

23196
14:36:26,040 --> 14:36:30,160
conversion here let's do something a

23197
14:36:27,640 --> 14:36:32,479
little more interesting then and see how

23198
14:36:30,160 --> 14:36:34,480
about I open instead something where we

23199
14:36:32,480 --> 14:36:37,956
actually compared for a purpose so if I

23200
14:36:34,480 --> 14:36:42,320
open up from last uh from earlier in the

23201
14:36:37,956 --> 14:36:44,596
course how about uh agree do C which

23202
14:36:42,320 --> 14:36:46,680
prompt the user to agree to something or

23203
14:36:44,596 --> 14:36:49,115
not and let me code up a new version

23204
14:36:46,680 --> 14:36:51,320
here called agree. pi and I'll do this

23205
14:36:49,116 --> 14:36:53,840
on the right hand side with agree. pi

23206
14:36:51,320 --> 14:36:55,560
but on gree do c on the left notice that

23207
14:36:53,840 --> 14:36:59,399
this is how we did this sort of yes no

23208
14:36:55,560 --> 14:37:02,320
thing in C we compared c a character

23209
14:36:59,400 --> 14:37:04,276
equal to single quotes y or equal to

23210
14:37:02,320 --> 14:37:06,640
single quotes little Y and then the same

23211
14:37:04,276 --> 14:37:07,840
thing for n now in Python this one's

23212
14:37:06,640 --> 14:37:09,680
actually going to be a little bit

23213
14:37:07,840 --> 14:37:12,435
different here let me go ahead and in

23214
14:37:09,680 --> 14:37:14,796
the python version of this let me do

23215
14:37:12,436 --> 14:37:16,720
something like this uh we'll use get

23216
14:37:14,796 --> 14:37:19,720
string uh actually no we'll just use

23217
14:37:16,720 --> 14:37:22,916
input in this case so let's do uh s

23218
14:37:19,720 --> 14:37:25,840
equals input and we'll ask the user the

23219
14:37:22,916 --> 14:37:29,795
same thing do you agree question mark

23220
14:37:25,840 --> 14:37:33,000
then let's go ahead and say if s equals

23221
14:37:29,796 --> 14:37:36,080
equals how about uh

23222
14:37:33,000 --> 14:37:38,276
y huh how do I do this well a few things

23223
14:37:36,080 --> 14:37:40,000
turns out I'm going to do this s equals

23224
14:37:38,276 --> 14:37:44,000
equals little y then I'm going to go

23225
14:37:40,000 --> 14:37:46,640
ahead and print out a agreed and L if s

23226
14:37:44,000 --> 14:37:48,680
equals equals capital N or S equals

23227
14:37:46,640 --> 14:37:51,159
equals lowercase n I'm going to go ahead

23228
14:37:48,680 --> 14:37:52,956
and print out not agreed and I claimed

23229
14:37:51,160 --> 14:37:55,720
for the moment that this is identical

23230
14:37:52,956 --> 14:37:58,080
now to the program on the right the

23231
14:37:55,720 --> 14:37:59,840
program on the left in C but what's

23232
14:37:58,080 --> 14:38:01,956
different so we're still doing the same

23233
14:37:59,840 --> 14:38:04,159
kind of logic these equal equals for

23234
14:38:01,956 --> 14:38:05,840
comparing for equality but notice that

23235
14:38:04,160 --> 14:38:07,400
nicely enough python got rid of the two

23236
14:38:05,840 --> 14:38:09,200
vertical bars and it's just literally

23237
14:38:07,400 --> 14:38:11,436
the word or if you recall seeing

23238
14:38:09,200 --> 14:38:13,956
Ampersand Ampersand to express a logical

23239
14:38:11,436 --> 14:38:16,360
and in C you can just write literally

23240
14:38:13,956 --> 14:38:18,640
the word and and so here's a hint of why

23241
14:38:16,360 --> 14:38:20,160
python tends to be pretty popular people

23242
14:38:18,640 --> 14:38:21,680
just like that it's a little closer to

23243
14:38:20,160 --> 14:38:24,880
English there's a little less of the

23244
14:38:21,680 --> 14:38:27,200
cryptic syntax here now this is correct

23245
14:38:24,880 --> 14:38:29,596
as this code will now work but I've also

23246
14:38:27,200 --> 14:38:32,039
used double quotes instead of single

23247
14:38:29,596 --> 14:38:34,520
quotes and I also omitted a few minutes

23248
14:38:32,040 --> 14:38:37,320
ago for my list of data types in Python

23249
14:38:34,520 --> 14:38:39,795
the word Char in Python there are no

23250
14:38:37,320 --> 14:38:41,400
chars there are no individual characters

23251
14:38:39,796 --> 14:38:43,916
if you want to manipulate individual

23252
14:38:41,400 --> 14:38:47,240
character you use a string that is to

23253
14:38:43,916 --> 14:38:49,560
say a stir of size one now in Python you

23254
14:38:47,240 --> 14:38:51,000
can use single quotes or double quotes

23255
14:38:49,560 --> 14:38:52,840
I'm deliberately using double quotes

23256
14:38:51,000 --> 14:38:55,560
everywhere just for consistency with how

23257
14:38:52,840 --> 14:38:57,320
we treat strings in C it's pretty common

23258
14:38:55,560 --> 14:38:58,840
though to use single quotes instead if

23259
14:38:57,320 --> 14:39:00,796
only because on most keyboards you don't

23260
14:38:58,840 --> 14:39:02,079
have to hold the shift key anymore I

23261
14:39:00,796 --> 14:39:03,520
mean humans have really started to

23262
14:39:02,080 --> 14:39:05,640
optimize just how quickly they want to

23263
14:39:03,520 --> 14:39:07,560
be able to code so using a single quote

23264
14:39:05,640 --> 14:39:09,560
tends to be pretty popular in Python and

23265
14:39:07,560 --> 14:39:12,880
other languages as well they are

23266
14:39:09,560 --> 14:39:14,479
fundamentally the same uh single or

23267
14:39:12,880 --> 14:39:17,880
double unlike in C where they have

23268
14:39:14,480 --> 14:39:19,480
meaning so this is correct I claim and

23269
14:39:17,880 --> 14:39:21,755
in fact let me run this real quick I'll

23270
14:39:19,480 --> 14:39:23,320
open up my terminal window here let me

23271
14:39:21,756 --> 14:39:26,720
get rid of the version and see run

23272
14:39:23,320 --> 14:39:27,956
python of agree. piy and I'll type in y

23273
14:39:26,720 --> 14:39:29,640
okay I'll run it again and type in

23274
14:39:27,956 --> 14:39:32,040
little Y and I'll stipulate it's going

23275
14:39:29,640 --> 14:39:34,200
to work for no as well but this isn't

23276
14:39:32,040 --> 14:39:35,840
necessarily the only way we can do this

23277
14:39:34,200 --> 14:39:39,719
there are other ways to implement the

23278
14:39:35,840 --> 14:39:42,840
same idea and in fact I can go about

23279
14:39:39,720 --> 14:39:46,720
doing this this instead let me go back

23280
14:39:42,840 --> 14:39:49,520
up to my code here and we saw a hint of

23281
14:39:46,720 --> 14:39:51,200
this earlier we know that lists exist in

23282
14:39:49,520 --> 14:39:53,479
Python and you can create them just by

23283
14:39:51,200 --> 14:39:55,039
using square brackets so what if I

23284
14:39:53,480 --> 14:39:58,796
simplify the code a little bit and just

23285
14:39:55,040 --> 14:40:02,720
say if s is in the following list of

23286
14:39:58,796 --> 14:40:04,840
values capital y or lowercase y it's not

23287
14:40:02,720 --> 14:40:06,276
all that different logically but it's a

23288
14:40:04,840 --> 14:40:10,719
little tighter it's a little more

23289
14:40:06,276 --> 14:40:13,200
compact so L ifs is in capital N or

23290
14:40:10,720 --> 14:40:14,756
lowercase n i can express that same idea

23291
14:40:13,200 --> 14:40:16,795
too so here again it's just getting a

23292
14:40:14,756 --> 14:40:18,040
little more pleasant to write code

23293
14:40:16,796 --> 14:40:19,400
there's less like hitting of the

23294
14:40:18,040 --> 14:40:21,596
keyboard you can express yourself a

23295
14:40:19,400 --> 14:40:24,796
little more succinctly and using the

23296
14:40:21,596 --> 14:40:27,916
keyword in Python will figure out how to

23297
14:40:24,796 --> 14:40:30,000
search the entire list for whatever the

23298
14:40:27,916 --> 14:40:32,159
value of s is and if it finds it it will

23299
14:40:30,000 --> 14:40:35,116
return true automatically else it will

23300
14:40:32,160 --> 14:40:38,796
return false so if I run agree. Pi again

23301
14:40:35,116 --> 14:40:41,796
and type in capital y or lowercase y

23302
14:40:38,796 --> 14:40:44,240
that still now works well I can typen

23303
14:40:41,796 --> 14:40:46,640
tighten this up further if I want to add

23304
14:40:44,240 --> 14:40:49,360
more features well what if I want to

23305
14:40:46,640 --> 14:40:54,240
support not just why Big Y and little y

23306
14:40:49,360 --> 14:40:56,080
but how about yes or yes or in case the

23307
14:40:54,240 --> 14:40:57,795
user's yelling or you know someone who

23308
14:40:56,080 --> 14:41:00,000
doesn't really isn't good with caps lock

23309
14:40:57,796 --> 14:41:03,116
types in yes wait a minute but it could

23310
14:41:00,000 --> 14:41:06,160
be weird like do we want to support this

23311
14:41:03,116 --> 14:41:08,040
or this I mean this this just gets

23312
14:41:06,160 --> 14:41:09,400
really tedious quickly combinatorically

23313
14:41:08,040 --> 14:41:11,916
if you consider all of these possible

23314
14:41:09,400 --> 14:41:13,596
permutations what would be smarter than

23315
14:41:11,916 --> 14:41:16,435
doing something like this if you want to

23316
14:41:13,596 --> 14:41:19,000
just be able to tolerate yes in any form

23317
14:41:16,436 --> 14:41:22,040
of capitalization like logically what

23318
14:41:19,000 --> 14:41:25,480
would be nice maybe whatever theut is

23319
14:41:22,040 --> 14:41:27,320
you justf over to all lower and then

23320
14:41:25,480 --> 14:41:29,200
exactly super common Paradigm why don't

23321
14:41:27,320 --> 14:41:31,276
we just force the users's input to all

23322
14:41:29,200 --> 14:41:33,240
lowercase or all uppercase doesn't

23323
14:41:31,276 --> 14:41:35,320
matter so long as we're self-consistent

23324
14:41:33,240 --> 14:41:37,079
and just compare against all uppercase

23325
14:41:35,320 --> 14:41:39,560
or all lowercase and that will get rid

23326
14:41:37,080 --> 14:41:42,116
of all of the possible permutations

23327
14:41:39,560 --> 14:41:43,479
otherwise now in C we might have done

23328
14:41:42,116 --> 14:41:46,520
something like this we might have

23329
14:41:43,480 --> 14:41:50,040
simplified this whole list and just said

23330
14:41:46,520 --> 14:41:54,000
let's say uh we'll do how about

23331
14:41:50,040 --> 14:41:55,880
lowercase so y or yes and we'll just

23332
14:41:54,000 --> 14:41:58,596
leave it at that but we need to force

23333
14:41:55,880 --> 14:42:00,840
now s to lowercase well in C we would

23334
14:41:58,596 --> 14:42:03,159
have used the ctype library we would

23335
14:42:00,840 --> 14:42:05,039
have done like two lower and called that

23336
14:42:03,160 --> 14:42:07,276
function passing it in although not

23337
14:42:05,040 --> 14:42:09,840
really cuz in C type those operate on

23338
14:42:07,276 --> 14:42:11,240
individual characters or chars not whole

23339
14:42:09,840 --> 14:42:12,916
strings we have actually didn't see a

23340
14:42:11,240 --> 14:42:16,720
function that could convert the whole

23341
14:42:12,916 --> 14:42:18,115
string in C to lowercase but in Python

23342
14:42:16,720 --> 14:42:21,276
we're going to benefit from some other

23343
14:42:18,116 --> 14:42:23,720
feature as well it turns out that python

23344
14:42:21,276 --> 14:42:24,880
supports what's called objectoriented

23345
14:42:23,720 --> 14:42:26,720
programming and we're only going to

23346
14:42:24,880 --> 14:42:28,276
scratch the surface of this in cs50 but

23347
14:42:26,720 --> 14:42:30,276
if you take a higher level course in

23348
14:42:28,276 --> 14:42:32,680
programming or CS you explore this as a

23349
14:42:30,276 --> 14:42:34,159
different Paradigm up until now in C

23350
14:42:32,680 --> 14:42:36,160
we've been focusing on what's called

23351
14:42:34,160 --> 14:42:38,000
really procedural programming you write

23352
14:42:36,160 --> 14:42:40,560
procedures you write functions top to

23353
14:42:38,000 --> 14:42:42,796
bottom uh left to right and when you

23354
14:42:40,560 --> 14:42:44,720
want to change some value we were in the

23355
14:42:42,796 --> 14:42:46,880
habit of using a procedure that is a

23356
14:42:44,720 --> 14:42:48,916
function you would pass something like a

23357
14:42:46,880 --> 14:42:50,680
variable into a function like to Upper

23358
14:42:48,916 --> 14:42:52,880
or to lower and it would do its thing

23359
14:42:50,680 --> 14:42:55,520
and hand you back a value well it turns

23360
14:42:52,880 --> 14:42:58,240
out that it would be nicer programming

23361
14:42:55,520 --> 14:43:00,479
wise if some data types just had

23362
14:42:58,240 --> 14:43:02,200
built-in functionality like why do we

23363
14:43:00,480 --> 14:43:03,796
have our variables over here and all of

23364
14:43:02,200 --> 14:43:05,520
our helper functions like two upper and

23365
14:43:03,796 --> 14:43:07,200
two lower over here such that we

23366
14:43:05,520 --> 14:43:09,240
constantly have to pass one into the

23367
14:43:07,200 --> 14:43:11,159
other it would be nice to sort of bake

23368
14:43:09,240 --> 14:43:14,040
into our data types buil-in

23369
14:43:11,160 --> 14:43:17,520
functionality so that you can change

23370
14:43:14,040 --> 14:43:19,080
variables using their own default be uh

23371
14:43:17,520 --> 14:43:20,640
buil-in functionality and so

23372
14:43:19,080 --> 14:43:23,916
object-oriented programming otherwise

23373
14:43:20,640 --> 14:43:26,479
known as oop is a technique whereby

23374
14:43:23,916 --> 14:43:31,115
certain types of values like a string

23375
14:43:26,480 --> 14:43:33,720
AKA stir not only have properties inside

23376
14:43:31,116 --> 14:43:37,360
of them attributes just like a struct in

23377
14:43:33,720 --> 14:43:40,560
C your data can also have functions

23378
14:43:37,360 --> 14:43:42,200
built into them as well so whereas in C

23379
14:43:40,560 --> 14:43:44,680
which is not objectoriented you have

23380
14:43:42,200 --> 14:43:46,435
strs and strs can only store data like a

23381
14:43:44,680 --> 14:43:49,956
name and a number when implementing a

23382
14:43:46,436 --> 14:43:52,116
person in Python you can for instance

23383
14:43:49,956 --> 14:43:54,795
have not just a structure otherwise

23384
14:43:52,116 --> 14:43:57,596
known as a class storing a name and a

23385
14:43:54,796 --> 14:44:00,240
number you can have a function like call

23386
14:43:57,596 --> 14:44:02,956
that person or email that person or

23387
14:44:00,240 --> 14:44:05,079
actual verbs or actions associated with

23388
14:44:02,956 --> 14:44:07,360
that piece of data now in the context of

23389
14:44:05,080 --> 14:44:09,640
strings it turns out that strings come

23390
14:44:07,360 --> 14:44:12,916
with a lot of useful functionality and

23391
14:44:09,640 --> 14:44:14,680
in fact this URL here which is in docs.

23392
14:44:12,916 --> 14:44:17,079
python.org which is the official

23393
14:44:14,680 --> 14:44:19,796
documentation for python you'll see a

23394
14:44:17,080 --> 14:44:22,040
whole list of methods that is functions

23395
14:44:19,796 --> 14:44:24,916
that come with strings that you can

23396
14:44:22,040 --> 14:44:27,040
actually use to modify their values and

23397
14:44:24,916 --> 14:44:28,916
what I mean by this is the following if

23398
14:44:27,040 --> 14:44:30,880
we go through the documentation poke

23399
14:44:28,916 --> 14:44:33,399
around it turns out that strings come

23400
14:44:30,880 --> 14:44:34,840
with a function called Lower and if you

23401
14:44:33,400 --> 14:44:36,596
want to use that function you just have

23402
14:44:34,840 --> 14:44:39,956
to use slightly different syntax than in

23403
14:44:36,596 --> 14:44:42,795
C you do not do to lower and you do not

23404
14:44:39,956 --> 14:44:46,320
say as I just did lower because this

23405
14:44:42,796 --> 14:44:48,596
function is built into s itself and just

23406
14:44:46,320 --> 14:44:51,116
like in C when you want to go inside of

23407
14:44:48,596 --> 14:44:53,560
a variable like a structure and access a

23408
14:44:51,116 --> 14:44:55,956
piece of data inside of it like name or

23409
14:44:53,560 --> 14:44:58,840
number when you also have functions

23410
14:44:55,956 --> 14:45:00,596
built into data types AKA methods a

23411
14:44:58,840 --> 14:45:04,479
method is just a function that is built

23412
14:45:00,596 --> 14:45:08,040
into a piece of data you can do s do

23413
14:45:04,480 --> 14:45:10,276
lower open pen closed pen in this case

23414
14:45:08,040 --> 14:45:16,520
and I can do this down here as well if

23415
14:45:10,276 --> 14:45:19,040
if s do lower in quote unquote uh n or

23416
14:45:16,520 --> 14:45:20,755
no the whole thing I can force this

23417
14:45:19,040 --> 14:45:21,840
whole thing to lowercase so the only

23418
14:45:20,756 --> 14:45:23,640
difference here now is in

23419
14:45:21,840 --> 14:45:25,560
object-oriented programming instead of

23420
14:45:23,640 --> 14:45:28,240
constantly passing a value into a

23421
14:45:25,560 --> 14:45:31,596
function you just access a function

23422
14:45:28,240 --> 14:45:33,400
that's inside of the value it just works

23423
14:45:31,596 --> 14:45:34,880
because of how the language itself is

23424
14:45:33,400 --> 14:45:36,116
defined and the only way you know that

23425
14:45:34,880 --> 14:45:38,840
these functions exist is the

23426
14:45:36,116 --> 14:45:43,720
documentation a Class A book a website

23427
14:45:38,840 --> 14:45:43,719
or the like questions now on this

23428
14:45:44,436 --> 14:45:48,436
technique all right I claim this is

23429
14:45:46,436 --> 14:45:50,796
correct now even though you've never

23430
14:45:48,436 --> 14:45:52,956
programmed most of you in Python before

23431
14:45:50,796 --> 14:45:55,160
not super well-designed there's an

23432
14:45:52,956 --> 14:45:58,240
subtle inefficiency now on lines three

23433
14:45:55,160 --> 14:46:01,916
and five together what's dumb about how

23434
14:45:58,240 --> 14:46:04,916
I've used lower might you

23435
14:46:01,916 --> 14:46:04,916
think

23436
14:46:06,160 --> 14:46:09,880
yeah yeah if you're going to use the

23437
14:46:08,116 --> 14:46:11,720
same function twice and ask the same

23438
14:46:09,880 --> 14:46:13,520
question expecting the same answer why

23439
14:46:11,720 --> 14:46:15,080
are you calling the function itself

23440
14:46:13,520 --> 14:46:16,680
twice maybe we should just store the

23441
14:46:15,080 --> 14:46:18,360
result in a variable so we could do this

23442
14:46:16,680 --> 14:46:19,596
in a couple of different ways we for

23443
14:46:18,360 --> 14:46:21,360
instance could go up here and create

23444
14:46:19,596 --> 14:46:24,399
another variable called T and set that

23445
14:46:21,360 --> 14:46:27,080
equal to s. lower and then we could just

23446
14:46:24,400 --> 14:46:28,880
change this to be T here but honestly I

23447
14:46:27,080 --> 14:46:30,756
don't think we technically need another

23448
14:46:28,880 --> 14:46:32,916
variable Al together here I could just

23449
14:46:30,756 --> 14:46:36,200
do something like this let's change the

23450
14:46:32,916 --> 14:46:38,435
value of s to be the lowercase version

23451
14:46:36,200 --> 14:46:40,200
thereof and so now I can quite simply

23452
14:46:38,436 --> 14:46:42,560
refer to S again and again like this

23453
14:46:40,200 --> 14:46:45,399
this reusing that same value now to be

23454
14:46:42,560 --> 14:46:47,276
sure I have now just lost the user's

23455
14:46:45,400 --> 14:46:49,400
original input and if I care about that

23456
14:46:47,276 --> 14:46:51,115
if they typed in all caps I have no idea

23457
14:46:49,400 --> 14:46:52,956
anymore so maybe I do want to use a

23458
14:46:51,116 --> 14:46:54,756
separate variable altogether but a

23459
14:46:52,956 --> 14:46:57,159
takeaway here too is that strings in

23460
14:46:54,756 --> 14:47:00,160
Python are technically what we'll call

23461
14:46:57,160 --> 14:47:02,756
immutable that is they cannot be changed

23462
14:47:00,160 --> 14:47:05,320
this was not true in C once we gave you

23463
14:47:02,756 --> 14:47:07,276
arrays in week two or memory in week

23464
14:47:05,320 --> 14:47:08,796
four you could go to town on a string

23465
14:47:07,276 --> 14:47:10,795
and change any of the characters you

23466
14:47:08,796 --> 14:47:12,680
want upper casing lower casing changing

23467
14:47:10,796 --> 14:47:16,680
it shortening it and so forth but in

23468
14:47:12,680 --> 14:47:19,040
this case uh this returns a copy of s

23469
14:47:16,680 --> 14:47:21,400
forced to lowercase it doesn't change

23470
14:47:19,040 --> 14:47:23,560
the original string that is the memory

23471
14:47:21,400 --> 14:47:25,560
the bytes in the computer's memory when

23472
14:47:23,560 --> 14:47:27,320
you assign it back to S you're

23473
14:47:25,560 --> 14:47:29,596
essentially forgetting about the old

23474
14:47:27,320 --> 14:47:31,040
version of s but because python does

23475
14:47:29,596 --> 14:47:33,000
memory management for you there's no

23476
14:47:31,040 --> 14:47:35,080
maloc there's no free python

23477
14:47:33,000 --> 14:47:37,720
automatically frees up the original

23478
14:47:35,080 --> 14:47:40,040
bytes like yees and hands them back to

23479
14:47:37,720 --> 14:47:43,276
the operating system for you all right

23480
14:47:40,040 --> 14:47:45,916
questions now on this

23481
14:47:43,276 --> 14:47:49,320
technique questions on

23482
14:47:45,916 --> 14:47:51,159
this in general I'll call out the python

23483
14:47:49,320 --> 14:47:52,560
documentation will start to be your

23484
14:47:51,160 --> 14:47:54,040
friend because in class we'll only

23485
14:47:52,560 --> 14:47:56,399
scratch the surface with some of these

23486
14:47:54,040 --> 14:47:57,560
things but in docs. python.org for

23487
14:47:56,400 --> 14:47:59,520
instance there's a whole reference of

23488
14:47:57,560 --> 14:48:01,360
all of the built-in functions that come

23489
14:47:59,520 --> 14:48:03,240
with the language as well as for

23490
14:48:01,360 --> 14:48:05,116
instance those with the string all right

23491
14:48:03,240 --> 14:48:06,720
well let me go ahead and before we take

23492
14:48:05,116 --> 14:48:09,000
a break let's go ahead and create

23493
14:48:06,720 --> 14:48:12,200
something a little familiar to based on

23494
14:48:09,000 --> 14:48:14,916
our week here in C let me propose that

23495
14:48:12,200 --> 14:48:17,000
we revisit those examples in involving

23496
14:48:14,916 --> 14:48:18,840
some meow so for instance when we had

23497
14:48:17,000 --> 14:48:20,956
our cat meow back in the first week and

23498
14:48:18,840 --> 14:48:23,200
then second in C we did something that

23499
14:48:20,956 --> 14:48:25,360
was a little stupid at first whereby we

23500
14:48:23,200 --> 14:48:27,719
created a file as I'll do here this time

23501
14:48:25,360 --> 14:48:30,276
called meow. p and if I want a cat to

23502
14:48:27,720 --> 14:48:33,116
meow three times I could run it once

23503
14:48:30,276 --> 14:48:35,360
like this little copy paste and now

23504
14:48:33,116 --> 14:48:37,160
python of meow. py and I'm done now

23505
14:48:35,360 --> 14:48:39,276
we've visited this example like two

23506
14:48:37,160 --> 14:48:41,480
times at least now in scratch it and see

23507
14:48:39,276 --> 14:48:43,636
it's correct I'll stipulate but what's

23508
14:48:41,480 --> 14:48:47,200
obviously poorly

23509
14:48:43,636 --> 14:48:49,520
designed what's the fault here

23510
14:48:47,200 --> 14:48:50,840
yeah it should just be a loop right like

23511
14:48:49,520 --> 14:48:52,520
why type it three times literally

23512
14:48:50,840 --> 14:48:54,159
copying and pasting is almost always a

23513
14:48:52,520 --> 14:48:55,520
bad thing except in C when you have the

23514
14:48:54,160 --> 14:48:57,276
function prototypes that you need to

23515
14:48:55,520 --> 14:48:59,159
borrow but in this case this is just

23516
14:48:57,276 --> 14:49:01,636
inefficient so what could we do better

23517
14:48:59,160 --> 14:49:03,116
here in Python well in Python we could

23518
14:49:01,636 --> 14:49:04,756
probably change this in a few different

23519
14:49:03,116 --> 14:49:07,200
ways we could borrow some of the syntax

23520
14:49:04,756 --> 14:49:09,000
we proposed in slide form earlier like

23521
14:49:07,200 --> 14:49:12,200
give me a variable called I set it to

23522
14:49:09,000 --> 14:49:14,000
zero no semicolon while I is less than

23523
14:49:12,200 --> 14:49:16,200
three if I want to do this three times I

23524
14:49:14,000 --> 14:49:19,200
can go ahead and print out meow and then

23525
14:49:16,200 --> 14:49:21,680
I can do i+ equals one and I think this

23526
14:49:19,200 --> 14:49:23,840
would do the trick python of meow. and

23527
14:49:21,680 --> 14:49:26,276
we're back in business already well if I

23528
14:49:23,840 --> 14:49:27,795
wanted to change this to a for Loop well

23529
14:49:26,276 --> 14:49:29,240
in Python it would be a little tighter

23530
14:49:27,796 --> 14:49:32,400
but this would not be the best approach

23531
14:49:29,240 --> 14:49:37,040
so for I in uh

23532
14:49:32,400 --> 14:49:39,160
012 I could just do print meow like this

23533
14:49:37,040 --> 14:49:41,680
and that too would get the job done but

23534
14:49:39,160 --> 14:49:43,480
to my to our discussion earlier this

23535
14:49:41,680 --> 14:49:45,080
would get stupid pretty quickly if you

23536
14:49:43,480 --> 14:49:46,636
had to keep enumerating all of these

23537
14:49:45,080 --> 14:49:50,200
values like what did we introduce

23538
14:49:46,636 --> 14:49:51,956
instead the the range function exactly

23539
14:49:50,200 --> 14:49:54,159
so that hands me back way more

23540
14:49:51,956 --> 14:49:55,916
efficiently just the values I want

23541
14:49:54,160 --> 14:49:58,000
indeed one at a time so even this if I

23542
14:49:55,916 --> 14:50:00,479
run it a third a third or fourth time

23543
14:49:58,000 --> 14:50:02,360
we've got the same result but now let's

23544
14:50:00,480 --> 14:50:03,880
transition to where we went with this

23545
14:50:02,360 --> 14:50:05,560
back in the day how can we start to

23546
14:50:03,880 --> 14:50:07,636
modularize this like just like it would

23547
14:50:05,560 --> 14:50:09,880
be nice I claimed if MIT had given us a

23548
14:50:07,636 --> 14:50:11,916
meow function wouldn't it be nice if

23549
14:50:09,880 --> 14:50:14,159
like python had given us a meow function

23550
14:50:11,916 --> 14:50:15,956
maybe less compelling in Python but how

23551
14:50:14,160 --> 14:50:17,560
can I build my own function well I did

23552
14:50:15,956 --> 14:50:19,795
this briefly with the spell checker

23553
14:50:17,560 --> 14:50:21,399
earlier but let me go ahead and propose

23554
14:50:19,796 --> 14:50:25,000
that we could Implement now our own

23555
14:50:21,400 --> 14:50:27,080
version of this in python as follows let

23556
14:50:25,000 --> 14:50:29,880
me go ahead and start fresh here and use

23557
14:50:27,080 --> 14:50:32,400
the keyword defa so this did not exist

23558
14:50:29,880 --> 14:50:34,276
in C you had the return value the

23559
14:50:32,400 --> 14:50:36,040
function name the arguments in Python

23560
14:50:34,276 --> 14:50:39,400
you literally say defa to define a

23561
14:50:36,040 --> 14:50:40,956
function you give it a name like meow

23562
14:50:39,400 --> 14:50:42,720
and now now I'm going to go ahead and in

23563
14:50:40,956 --> 14:50:44,840
this function just print out meow and

23564
14:50:42,720 --> 14:50:47,116
this lets me change it to anything else

23565
14:50:44,840 --> 14:50:51,079
I want in the future but for now it's an

23566
14:50:47,116 --> 14:50:52,796
abstraction and in fact I can uh move it

23567
14:50:51,080 --> 14:50:54,520
out of sight out of mind just going to

23568
14:50:52,796 --> 14:50:56,916
hit enter a bunch of times to pretend

23569
14:50:54,520 --> 14:50:59,276
like now it exists but I don't care how

23570
14:50:56,916 --> 14:51:01,956
it is implemented and up here now I can

23571
14:50:59,276 --> 14:51:04,596
do something like this 4 I in range of

23572
14:51:01,956 --> 14:51:06,720
three let me go ahead and not print meow

23573
14:51:04,596 --> 14:51:08,795
anymore let me just call meow and

23574
14:51:06,720 --> 14:51:11,796
tightening up my code further but I

23575
14:51:08,796 --> 14:51:13,400
think let's see python of meow. py this

23576
14:51:11,796 --> 14:51:15,560
is I think going to be the first time it

23577
14:51:13,400 --> 14:51:19,080
does not work

23578
14:51:15,560 --> 14:51:22,320
correctly okay so here we have sadly our

23579
14:51:19,080 --> 14:51:23,796
first python error and let's see the

23580
14:51:22,320 --> 14:51:25,880
syntax is going to be different from C

23581
14:51:23,796 --> 14:51:27,560
or clangs output traceback is like the

23582
14:51:25,880 --> 14:51:29,435
term of art here this is like a trace

23583
14:51:27,560 --> 14:51:31,360
back of all of the lines of code that

23584
14:51:29,436 --> 14:51:33,240
were just executed or really functions

23585
14:51:31,360 --> 14:51:34,840
you called the file name is

23586
14:51:33,240 --> 14:51:36,795
uninteresting this is like my codes

23587
14:51:34,840 --> 14:51:39,636
space specifically but the file name is

23588
14:51:36,796 --> 14:51:41,520
important here meow. py uh line two is

23589
14:51:39,636 --> 14:51:43,240
is the issue okay I didn't get very far

23590
14:51:41,520 --> 14:51:45,000
before I screwed up and then there's a

23591
14:51:43,240 --> 14:51:47,680
name error and you'll see in Python

23592
14:51:45,000 --> 14:51:49,956
there's typically these capitalized uh

23593
14:51:47,680 --> 14:51:51,400
keywords that hint at what the issue is

23594
14:51:49,956 --> 14:51:54,200
it's something related to names of

23595
14:51:51,400 --> 14:51:55,756
variables meow is not defined all right

23596
14:51:54,200 --> 14:51:57,435
you're programming python for the first

23597
14:51:55,756 --> 14:52:00,720
time you've screwed up you're following

23598
14:51:57,436 --> 14:52:04,116
some online tutorial you're seeing this

23599
14:52:00,720 --> 14:52:08,240
reason through it like why might meow

23600
14:52:04,116 --> 14:52:11,040
not be defined what can weer infer about

23601
14:52:08,240 --> 14:52:14,880
python how to troubleshoot

23602
14:52:11,040 --> 14:52:16,840
logically is it me ised after maybe is

23603
14:52:14,880 --> 14:52:18,755
it because meow is defined after you

23604
14:52:16,840 --> 14:52:21,200
know as smart as python seems to be Visa

23605
14:52:18,756 --> 14:52:22,956
VC they have some similar design

23606
14:52:21,200 --> 14:52:24,560
characteristics so let's try that so let

23607
14:52:22,956 --> 14:52:27,756
me scroll all the way back down to where

23608
14:52:24,560 --> 14:52:30,159
I move this earlier let me uh get rid of

23609
14:52:27,756 --> 14:52:32,360
it way down there I'll copy it to my

23610
14:52:30,160 --> 14:52:34,116
clipboard and let me just kind of hack

23611
14:52:32,360 --> 14:52:36,276
something together let me just put it up

23612
14:52:34,116 --> 14:52:38,160
here and let's see if this works so now

23613
14:52:36,276 --> 14:52:40,840
let me clear my terminal run python of

23614
14:52:38,160 --> 14:52:42,520
meow. okay we're back in business so

23615
14:52:40,840 --> 14:52:44,039
that was actually really good intuition

23616
14:52:42,520 --> 14:52:45,916
good debugging technique to sort of

23617
14:52:44,040 --> 14:52:47,200
reason through it now this is kind of

23618
14:52:45,916 --> 14:52:48,840
contradicting what I claimed back in

23619
14:52:47,200 --> 14:52:50,719
week one which was that you know the

23620
14:52:48,840 --> 14:52:52,079
main part of your program ideally should

23621
14:52:50,720 --> 14:52:53,636
just be at the top of the file like

23622
14:52:52,080 --> 14:52:55,276
don't make me look for it it's not a

23623
14:52:53,636 --> 14:52:57,720
huge deal with like a four-line program

23624
14:52:55,276 --> 14:52:59,479
but if you've got 40 lines 400 lines you

23625
14:52:57,720 --> 14:53:01,400
don't want like the juice juicy part of

23626
14:52:59,480 --> 14:53:03,636
your program to be way down here and all

23627
14:53:01,400 --> 14:53:05,720
of these functions way up here so it

23628
14:53:03,636 --> 14:53:07,956
would be nice maybe if we actually have

23629
14:53:05,720 --> 14:53:10,320
a main function and so it actually turns

23630
14:53:07,956 --> 14:53:12,436
out to be a convention in Python to

23631
14:53:10,320 --> 14:53:14,000
define a main function it's not a

23632
14:53:12,436 --> 14:53:16,756
special function that's automatically

23633
14:53:14,000 --> 14:53:17,956
called like in C but humans realized you

23634
14:53:16,756 --> 14:53:20,360
know what that was a pretty useful

23635
14:53:17,956 --> 14:53:22,596
feature let me Define a function called

23636
14:53:20,360 --> 14:53:24,596
main let me indent these lines

23637
14:53:22,596 --> 14:53:26,399
underneath it let me practice what I'm

23638
14:53:24,596 --> 14:53:29,079
preaching which is put the main code at

23639
14:53:26,400 --> 14:53:32,240
the top of the file and wonderfully in

23640
14:53:29,080 --> 14:53:34,040
Python now you do not need prototypes

23641
14:53:32,240 --> 14:53:35,880
there's none of that hackish copying and

23642
14:53:34,040 --> 14:53:37,276
pasting of the return type the name and

23643
14:53:35,880 --> 14:53:40,320
the arguments to a function like we

23644
14:53:37,276 --> 14:53:43,276
needed in C this is now

23645
14:53:40,320 --> 14:53:45,116
okay instead except for one Minor Detail

23646
14:53:43,276 --> 14:53:48,000
let me go ahead and run python of

23647
14:53:45,116 --> 14:53:50,636
meow. hopefully now I've solve this

23648
14:53:48,000 --> 14:53:53,436
problem by having a main function but

23649
14:53:50,636 --> 14:53:55,880
now nothing has happened all right even

23650
14:53:53,436 --> 14:53:59,116
if you've never programmed in Python

23651
14:53:55,880 --> 14:54:01,840
before What might explain this

23652
14:53:59,116 --> 14:54:03,796
behavior and how do I

23653
14:54:01,840 --> 14:54:05,636
fix again when you're off in the real

23654
14:54:03,796 --> 14:54:09,080
world learning some new language all you

23655
14:54:05,636 --> 14:54:11,400
have is deductive logic to debug yeah I

23656
14:54:09,080 --> 14:54:11,400
remember

23657
14:54:16,840 --> 14:54:20,159
right so the solution to be clear in C

23658
14:54:18,680 --> 14:54:21,680
was that we had to put the Prototype up

23659
14:54:20,160 --> 14:54:23,040
here otherwise we'd get an error message

23660
14:54:21,680 --> 14:54:25,756
in this case I'm actually not getting an

23661
14:54:23,040 --> 14:54:27,636
error message and indeed I'll claim that

23662
14:54:25,756 --> 14:54:28,956
you don't need the prototypes in Python

23663
14:54:27,636 --> 14:54:30,520
just not necessary because that was

23664
14:54:28,956 --> 14:54:33,520
annoying if nothing

23665
14:54:30,520 --> 14:54:35,079
else but what else might explain yeah

23666
14:54:33,520 --> 14:54:37,880
I'm

23667
14:54:35,080 --> 14:54:40,116
back yeah maybe you have to call Main

23668
14:54:37,880 --> 14:54:42,916
itself if main is not some some special

23669
14:54:40,116 --> 14:54:44,880
status in Python maybe just because it

23670
14:54:42,916 --> 14:54:47,240
exists isn't enough and indeed if you

23671
14:54:44,880 --> 14:54:49,000
want to call Maine the new convention is

23672
14:54:47,240 --> 14:54:50,956
actually going to be as the very last

23673
14:54:49,000 --> 14:54:53,240
line of your program typically to

23674
14:54:50,956 --> 14:54:55,116
literally call Main it's a little stupid

23675
14:54:53,240 --> 14:54:56,840
stupid looking but you know they made a

23676
14:54:55,116 --> 14:55:00,596
design decision and this is how now we

23677
14:54:56,840 --> 14:55:02,755
work around it python of meowy now we're

23678
14:55:00,596 --> 14:55:04,795
back in business but now logically why

23679
14:55:02,756 --> 14:55:07,680
does this work the way it does well in

23680
14:55:04,796 --> 14:55:09,596
this case top to bottom line one is

23681
14:55:07,680 --> 14:55:11,276
telling python to define a fun fun

23682
14:55:09,596 --> 14:55:12,956
called Main and then Define it as

23683
14:55:11,276 --> 14:55:15,520
follows lines two and three but it's not

23684
14:55:12,956 --> 14:55:17,240
calling main yet line six is telling

23685
14:55:15,520 --> 14:55:19,560
python how to define a function called

23686
14:55:17,240 --> 14:55:22,436
meow but it's not calling these lines

23687
14:55:19,560 --> 14:55:24,880
yet now line 10 you're telling python

23688
14:55:22,436 --> 14:55:26,520
call Main and at that point python has

23689
14:55:24,880 --> 14:55:28,840
been trained if you will to know what

23690
14:55:26,520 --> 14:55:31,596
main is on line one to know what meow is

23691
14:55:28,840 --> 14:55:34,435
on line six and so it's now perfectly

23692
14:55:31,596 --> 14:55:36,596
okay for Maine to be above meow because

23693
14:55:34,436 --> 14:55:39,040
you never called them yet you defined

23694
14:55:36,596 --> 14:55:41,840
defined and then you called and that's

23695
14:55:39,040 --> 14:55:45,200
the logic behind this any questions now

23696
14:55:41,840 --> 14:55:48,159
on the structure of this technique

23697
14:55:45,200 --> 14:55:49,560
here now let's do one more then recall

23698
14:55:48,160 --> 14:55:52,320
that the last thing we did in scratch

23699
14:55:49,560 --> 14:55:53,560
and in Python uh scratch and in C was to

23700
14:55:52,320 --> 14:55:55,840
actually

23701
14:55:53,560 --> 14:55:57,560
parameterize uh these same function so

23702
14:55:55,840 --> 14:55:59,039
suppose that you don't want Maine to be

23703
14:55:57,560 --> 14:56:00,795
responsible for the loop here you

23704
14:55:59,040 --> 14:56:02,756
instead want to very simply do something

23705
14:56:00,796 --> 14:56:04,956
like meow three times and be done with

23706
14:56:02,756 --> 14:56:06,880
it well in Python it's going to be

23707
14:56:04,956 --> 14:56:08,720
similar in spirit toy but again we don't

23708
14:56:06,880 --> 14:56:10,916
need to keep mentioning data types if

23709
14:56:08,720 --> 14:56:14,276
you want me now to take some argument

23710
14:56:10,916 --> 14:56:15,680
like a number n you can just specify n

23711
14:56:14,276 --> 14:56:17,000
as the name of that argument or you

23712
14:56:15,680 --> 14:56:18,596
could call it anything else of course

23713
14:56:17,000 --> 14:56:21,796
that you want you don't have to specify

23714
14:56:18,596 --> 14:56:23,795
int or anything else in your code now

23715
14:56:21,796 --> 14:56:27,080
inside of meow you can do something like

23716
14:56:23,796 --> 14:56:29,116
for I in let's say I definitely now

23717
14:56:27,080 --> 14:56:31,040
can't do this because like that would be

23718
14:56:29,116 --> 14:56:32,636
weird to start the list and end it with

23719
14:56:31,040 --> 14:56:36,116
n so if I can come back over here what's

23720
14:56:32,636 --> 14:56:40,000
the solution how can I do something n

23721
14:56:36,116 --> 14:56:42,796
times yeah using range so range is nice

23722
14:56:40,000 --> 14:56:45,436
cuz I can pass in now this variable n

23723
14:56:42,796 --> 14:56:48,160
and now I can meow whoops now I can

23724
14:56:45,436 --> 14:56:49,880
print out quote unquote meow so it's

23725
14:56:48,160 --> 14:56:51,360
almost the same as in scratch almost the

23726
14:56:49,880 --> 14:56:54,040
same as in C but it's a little simpler

23727
14:56:51,360 --> 14:56:58,276
and if now I run meow. P I'll have the

23728
14:56:54,040 --> 14:57:01,596
ability now to do this here as well all

23729
14:56:58,276 --> 14:57:03,240
right questions on any of this right now

23730
14:57:01,596 --> 14:57:05,040
we're sort of like taking the stroll

23731
14:57:03,240 --> 14:57:07,636
through week one we're going to

23732
14:57:05,040 --> 14:57:09,796
momentarily escalate things to look not

23733
14:57:07,636 --> 14:57:11,360
only at some of these basic but also

23734
14:57:09,796 --> 14:57:13,320
other features like we saw with face

23735
14:57:11,360 --> 14:57:15,276
recognition with the speller or the like

23736
14:57:13,320 --> 14:57:17,200
um because of how many of us are here we

23737
14:57:15,276 --> 14:57:18,400
have a huge amount of candy out in the

23738
14:57:17,200 --> 14:57:20,200
lobby so why don't we go ahead and take

23739
14:57:18,400 --> 14:57:21,956
a 10-minute break and we come back we'll

23740
14:57:20,200 --> 14:57:26,000
do even fancier more powerful things

23741
14:57:21,956 --> 14:57:27,916
with python in 10 all right so we are

23742
14:57:26,000 --> 14:57:29,636
back among our goals now are to

23743
14:57:27,916 --> 14:57:31,320
introduce a few more building blocks so

23744
14:57:29,636 --> 14:57:33,040
that we can solve more interesting

23745
14:57:31,320 --> 14:57:34,880
problems at the end much like those that

23746
14:57:33,040 --> 14:57:36,276
we began with you recall from a few

23747
14:57:34,880 --> 14:57:38,320
weeks ago we played with this sort of

23748
14:57:36,276 --> 14:57:40,756
two-dimensional Super Mario World and we

23749
14:57:38,320 --> 14:57:42,796
tried to print a vertical column of like

23750
14:57:40,756 --> 14:57:44,520
three or more bricks well let me propose

23751
14:57:42,796 --> 14:57:46,880
that we use this as an opportunity to

23752
14:57:44,520 --> 14:57:48,880
now Tinker with some of Python's more uh

23753
14:57:46,880 --> 14:57:50,795
useful more userfriendly functionality

23754
14:57:48,880 --> 14:57:54,000
as well so let me code a file called

23755
14:57:50,796 --> 14:57:55,436
mario. py and let's just print out like

23756
14:57:54,000 --> 14:57:57,480
that the equivalent of that vertical

23757
14:57:55,436 --> 14:58:00,276
column so it's of height three each one

23758
14:57:57,480 --> 14:58:02,560
is a hash so let's do for I in range of

23759
14:58:00,276 --> 14:58:05,795
three initially and let's just print out

23760
14:58:02,560 --> 14:58:07,956
a single hash and I think now python of

23761
14:58:05,796 --> 14:58:10,040
mario. py voila we're in business

23762
14:58:07,956 --> 14:58:12,320
printing out just that same pyramid

23763
14:58:10,040 --> 14:58:14,436
there or just that same column there

23764
14:58:12,320 --> 14:58:16,200
what if though we want to print a column

23765
14:58:14,436 --> 14:58:18,040
of like some variable height where the

23766
14:58:16,200 --> 14:58:20,435
user tells us how tall they want it to

23767
14:58:18,040 --> 14:58:24,520
be well let me go up here for instance

23768
14:58:20,436 --> 14:58:28,840
and instead how about we'll use um let's

23769
14:58:24,520 --> 14:58:31,719
do this how about uh from cs50

23770
14:58:28,840 --> 14:58:33,596
import how about the get in function as

23771
14:58:31,720 --> 14:58:36,240
before so it will deal with making sure

23772
14:58:33,596 --> 14:58:37,795
the user gives us an integer and now in

23773
14:58:36,240 --> 14:58:40,040
the past whenever we wanted to get a

23774
14:58:37,796 --> 14:58:42,276
number from a user we've actually

23775
14:58:40,040 --> 14:58:46,116
followed a certain Paradigm in fact if I

23776
14:58:42,276 --> 14:58:50,320
open up here for instance uh how about

23777
14:58:46,116 --> 14:58:54,436
Mario in how about Mario 1. C from a

23778
14:58:50,320 --> 14:58:57,240
while back you might recall that we had

23779
14:58:54,436 --> 14:58:59,040
code like this and we specifically use

23780
14:58:57,240 --> 14:59:01,040
the do while loop and see whenever we

23781
14:58:59,040 --> 14:59:02,916
want to like get something from the user

23782
14:59:01,040 --> 14:59:04,480
maybe again and again and again until

23783
14:59:02,916 --> 14:59:06,360
they cooperate at which point we finally

23784
14:59:04,480 --> 14:59:07,956
break out of the loop so it turns out

23785
14:59:06,360 --> 14:59:10,636
python does have while Loops does have

23786
14:59:07,956 --> 14:59:11,916
four Loops does not have do while loops

23787
14:59:10,636 --> 14:59:13,636
and yet pretty much anytime you've

23788
14:59:11,916 --> 14:59:15,916
gotten user input you've probably used

23789
14:59:13,636 --> 14:59:18,479
this Paradigm so it turns out that the

23790
14:59:15,916 --> 14:59:20,880
python equivalent of this is to do

23791
14:59:18,480 --> 14:59:22,680
similar in spirit but using only a while

23792
14:59:20,880 --> 14:59:24,520
loop and a common Paradigm in python as

23793
14:59:22,680 --> 14:59:26,756
I alluded earlier is to actually

23794
14:59:24,520 --> 14:59:29,795
deliberately induce an infinite Loop

23795
14:59:26,756 --> 14:59:32,040
while true capital T and then do what

23796
14:59:29,796 --> 14:59:34,840
you want to do like get an INT from the

23797
14:59:32,040 --> 14:59:38,160
user and prompt them for the height for

23798
14:59:34,840 --> 14:59:40,115
instance in question and then if you're

23799
14:59:38,160 --> 14:59:42,360
sure that the user has given you what

23800
14:59:40,116 --> 14:59:44,000
you want like n is greater than zero

23801
14:59:42,360 --> 14:59:45,956
which is what I want in this case cuz I

23802
14:59:44,000 --> 14:59:47,796
want a positive integer otherwise

23803
14:59:45,956 --> 14:59:49,636
there's nothing to print you literally

23804
14:59:47,796 --> 14:59:51,880
just break out of the loop and so we

23805
14:59:49,636 --> 14:59:54,080
could actually use this technique in C

23806
14:59:51,880 --> 14:59:56,360
it's just not really done in C you could

23807
14:59:54,080 --> 14:59:58,360
absolutely in C have done a while true

23808
14:59:56,360 --> 15:00:00,200
loop with the parentheses lowercase true

23809
14:59:58,360 --> 15:00:02,560
you could break out of it and so forth

23810
15:00:00,200 --> 15:00:04,399
but in Python this is like the python

23811
15:00:02,560 --> 15:00:06,880
way and this is actually a term of art

23812
15:00:04,400 --> 15:00:09,080
this way in Python is pythonic like this

23813
15:00:06,880 --> 15:00:10,840
is the way everyone does it quote

23814
15:00:09,080 --> 15:00:12,360
unquote doesn't mean you have to but

23815
15:00:10,840 --> 15:00:14,115
that's sort of the way like the cool

23816
15:00:12,360 --> 15:00:15,956
python programmers would Implement an

23817
15:00:14,116 --> 15:00:17,636
idea like this trying to do something

23818
15:00:15,956 --> 15:00:19,756
again and again and again until the user

23819
15:00:17,636 --> 15:00:21,756
actually cooperates but all we've done

23820
15:00:19,756 --> 15:00:24,360
is take away the do while loop but still

23821
15:00:21,756 --> 15:00:26,116
logically we can implement the same idea

23822
15:00:24,360 --> 15:00:29,720
now below this let me go ahead and just

23823
15:00:26,116 --> 15:00:31,276
print out for I in range of n this time

23824
15:00:29,720 --> 15:00:33,400
because I want it to be variable and not

23825
15:00:31,276 --> 15:00:35,479
three I can go ahead and print out the

23826
15:00:33,400 --> 15:00:38,080
hash let me go ahead and get rid of the

23827
15:00:35,480 --> 15:00:40,520
C version here open my terminal window

23828
15:00:38,080 --> 15:00:42,796
and I'll run again python of mario. py

23829
15:00:40,520 --> 15:00:44,399
I'll type in three and I get back those

23830
15:00:42,796 --> 15:00:47,560
three hashes but if I instead type in

23831
15:00:44,400 --> 15:00:49,160
four I now get four hashes instead so

23832
15:00:47,560 --> 15:00:50,880
the takeaway here is quite simply that

23833
15:00:49,160 --> 15:00:54,720
this would be the way for instance to

23834
15:00:50,880 --> 15:00:56,596
actually get back a value in Python that

23835
15:00:54,720 --> 15:00:58,596
is consistent with some parameter like

23836
15:00:56,596 --> 15:01:00,560
greater than zero how about this let's

23837
15:00:58,596 --> 15:01:02,636
actually uh practice what we preached a

23838
15:01:00,560 --> 15:01:04,720
moment ago with our meowing examples and

23839
15:01:02,636 --> 15:01:06,916
kind of factoring all this out let me go

23840
15:01:04,720 --> 15:01:09,240
ahead and Define a main function as

23841
15:01:06,916 --> 15:01:11,200
before let me go ahead and assume for

23842
15:01:09,240 --> 15:01:13,360
the moment that a get height function

23843
15:01:11,200 --> 15:01:15,276
exists which is not a thing in Python

23844
15:01:13,360 --> 15:01:16,400
I'm going to invent it in just a moment

23845
15:01:15,276 --> 15:01:19,636
and now I'm going to go ahead and do

23846
15:01:16,400 --> 15:01:21,756
something like this for I in the range

23847
15:01:19,636 --> 15:01:24,880
of that height well let's go ahead and

23848
15:01:21,756 --> 15:01:26,880
print out those hashes so I'm assuming

23849
15:01:24,880 --> 15:01:28,840
that get height exists let me go ahead

23850
15:01:26,880 --> 15:01:30,956
and Implement that abstraction so Define

23851
15:01:28,840 --> 15:01:32,596
a function now called get height it's

23852
15:01:30,956 --> 15:01:36,080
not going to take any arguments in this

23853
15:01:32,596 --> 15:01:38,040
design while true I can go ahead and do

23854
15:01:36,080 --> 15:01:40,720
the same thing as before assign a

23855
15:01:38,040 --> 15:01:43,000
variable n the return value of get int

23856
15:01:40,720 --> 15:01:46,360
prompting the user for that height and

23857
15:01:43,000 --> 15:01:51,040
then if n is greater than zero I can go

23858
15:01:46,360 --> 15:01:53,400
ahead and break but if I break here I

23859
15:01:51,040 --> 15:01:56,000
logically just like can see end up

23860
15:01:53,400 --> 15:01:58,520
executing below the loop in question but

23861
15:01:56,000 --> 15:02:01,276
there's nothing there but if I want get

23862
15:01:58,520 --> 15:02:04,840
height to return the height what should

23863
15:02:01,276 --> 15:02:04,840
I type here on line 14

23864
15:02:05,116 --> 15:02:10,796
logically what do I want to return to be

23865
15:02:07,680 --> 15:02:13,756
clear yeah so I actually want to return

23866
15:02:10,796 --> 15:02:16,480
n and here's another curiosity of python

23867
15:02:13,756 --> 15:02:19,360
Visa BC there doesn't seem to be an

23868
15:02:16,480 --> 15:02:20,916
issue of scope anymore right in C it was

23869
15:02:19,360 --> 15:02:22,360
super important to not only declare your

23870
15:02:20,916 --> 15:02:23,680
variables with the data types you also

23871
15:02:22,360 --> 15:02:26,320
had to be mindful of like where they

23872
15:02:23,680 --> 15:02:28,200
exist inside of those curly braces in

23873
15:02:26,320 --> 15:02:30,680
Python it turns out you can be a little

23874
15:02:28,200 --> 15:02:33,636
looser with things for better for worse

23875
15:02:30,680 --> 15:02:37,956
and so on line 11 if I create a variable

23876
15:02:33,636 --> 15:02:39,360
called n it exists on line 11 12 and

23877
15:02:37,956 --> 15:02:42,560
even 13

23878
15:02:39,360 --> 15:02:45,200
outside of the while loop so to be clear

23879
15:02:42,560 --> 15:02:47,756
in C with a while loop we would have

23880
15:02:45,200 --> 15:02:49,795
ordinarily had not the colon we would

23881
15:02:47,756 --> 15:02:51,560
have had the curly brace like here and

23882
15:02:49,796 --> 15:02:54,320
over here and a week ago I would have

23883
15:02:51,560 --> 15:02:56,115
claimed that in C N does not exist

23884
15:02:54,320 --> 15:02:57,720
outside of the while loop by nature of

23885
15:02:56,116 --> 15:03:00,320
those curly braces even though the curly

23886
15:02:57,720 --> 15:03:03,560
braces are gone python actually allows

23887
15:03:00,320 --> 15:03:06,796
you to use a variable anytime after you

23888
15:03:03,560 --> 15:03:09,159
have assigned it a value so slightly

23889
15:03:06,796 --> 15:03:11,320
more powerful as such how however I can

23890
15:03:09,160 --> 15:03:13,400
tighten this up a little bit logically

23891
15:03:11,320 --> 15:03:15,720
and this is true in C I don't really

23892
15:03:13,400 --> 15:03:18,956
need to break out of the loop by using

23893
15:03:15,720 --> 15:03:21,240
break recall that or know that I can

23894
15:03:18,956 --> 15:03:23,520
actually once I'm ready to go I can just

23895
15:03:21,240 --> 15:03:25,079
return the value I care about even

23896
15:03:23,520 --> 15:03:26,880
inside of the loop and that will have

23897
15:03:25,080 --> 15:03:29,160
the side effect of breaking me out of

23898
15:03:26,880 --> 15:03:31,680
the loop and also breaking me out of and

23899
15:03:29,160 --> 15:03:33,360
returning from the entire function so

23900
15:03:31,680 --> 15:03:35,436
nothing too new here in terms of C

23901
15:03:33,360 --> 15:03:37,956
versus python except for this issue of

23902
15:03:35,436 --> 15:03:39,880
scope and I indeed returned n at the

23903
15:03:37,956 --> 15:03:42,276
bottom there just to make clear that n

23904
15:03:39,880 --> 15:03:45,560
would still exist so either of those are

23905
15:03:42,276 --> 15:03:48,596
correct now I just have a Python program

23906
15:03:45,560 --> 15:03:50,320
that I think is going to allow me to

23907
15:03:48,596 --> 15:03:53,756
implement this same Mario idea so let's

23908
15:03:50,320 --> 15:03:56,956
run python of mario. and okay so nothing

23909
15:03:53,756 --> 15:04:00,480
happened uh python of mario.

23910
15:03:56,956 --> 15:04:02,795
py what did I do wrong yeah I have to

23911
15:04:00,480 --> 15:04:05,000
call Main so at the bottom of my code I

23912
15:04:02,796 --> 15:04:07,436
have to call Main here and this is a

23913
15:04:05,000 --> 15:04:08,916
stylistic detail that's been subtle um

23914
15:04:07,436 --> 15:04:11,956
generally speaking when when you are

23915
15:04:08,916 --> 15:04:13,916
writing in Python um there's not a cs50

23916
15:04:11,956 --> 15:04:16,040
style guide per se there's actually a

23917
15:04:13,916 --> 15:04:19,560
python style guide that most people

23918
15:04:16,040 --> 15:04:21,840
adhere to um it's and in this case

23919
15:04:19,560 --> 15:04:23,795
double blank lines between functions is

23920
15:04:21,840 --> 15:04:25,956
the norm I'm doing that deliberately

23921
15:04:23,796 --> 15:04:27,596
although uh it might otherwise not be

23922
15:04:25,956 --> 15:04:30,720
obvious but now that I've called main on

23923
15:04:27,596 --> 15:04:32,795
line 16 let's run mario. once more aha

23924
15:04:30,720 --> 15:04:34,680
now we get there now we see it type in

23925
15:04:32,796 --> 15:04:37,480
three and I'm back in business printing

23926
15:04:34,680 --> 15:04:40,480
out the values there

23927
15:04:37,480 --> 15:04:40,480
yeah

23928
15:04:41,400 --> 15:04:45,796
sure why do I need the if condition at

23929
15:04:42,880 --> 15:04:48,240
all why can't I just return n here as by

23930
15:04:45,796 --> 15:04:50,596
doing return n or if I really want to be

23931
15:04:48,240 --> 15:04:53,916
succinct I could technically just do

23932
15:04:50,596 --> 15:04:55,200
this the only reason I added the if

23933
15:04:53,916 --> 15:04:57,596
condition is because if the user types

23934
15:04:55,200 --> 15:04:59,240
in negative 1 -2 I wanted to prompt them

23935
15:04:57,596 --> 15:05:00,756
again and again that's all but that

23936
15:04:59,240 --> 15:05:03,320
would be totally acceptable too if you

23937
15:05:00,756 --> 15:05:05,436
were okay with that result instead well

23938
15:05:03,320 --> 15:05:08,000
let me do one other thing here to point

23939
15:05:05,436 --> 15:05:09,916
out why we are using get in so

23940
15:05:08,000 --> 15:05:11,560
frequently this new training wheel all

23941
15:05:09,916 --> 15:05:13,719
be it temporarily so let me go back to

23942
15:05:11,560 --> 15:05:17,360
the way it was a moment ago and let me

23943
15:05:13,720 --> 15:05:20,080
propose now to take away get int I

23944
15:05:17,360 --> 15:05:22,160
claimed earlier that if you're not using

23945
15:05:20,080 --> 15:05:24,240
get int you can just use the input

23946
15:05:22,160 --> 15:05:27,160
function itself from

23947
15:05:24,240 --> 15:05:29,479
python but that always returns a string

23948
15:05:27,160 --> 15:05:31,880
or a stir and so recall that you have to

23949
15:05:29,480 --> 15:05:34,200
pass the output of the input function to

23950
15:05:31,880 --> 15:05:36,956
an INT either on the same line or if you

23951
15:05:34,200 --> 15:05:38,795
prefer on another line instead but it

23952
15:05:36,956 --> 15:05:41,840
turns out what I didn't do was show you

23953
15:05:38,796 --> 15:05:43,956
what happens if you uh don't cooperate

23954
15:05:41,840 --> 15:05:47,115
with the user uh with the program so if

23955
15:05:43,956 --> 15:05:49,240
I run python of mario. now works great

23956
15:05:47,116 --> 15:05:51,480
even without the get int function and I

23957
15:05:49,240 --> 15:05:53,240
can do it with four still works great

23958
15:05:51,480 --> 15:05:54,956
but let me clear my terminal and be

23959
15:05:53,240 --> 15:05:57,840
difficult now as the user and type in C

23960
15:05:54,956 --> 15:05:59,720
for the height instead enter now we see

23961
15:05:57,840 --> 15:06:01,636
one of those tracebacks again this one

23962
15:05:59,720 --> 15:06:03,680
is different this isn't a name error but

23963
15:06:01,636 --> 15:06:05,479
apparently a value error and if I kind

23964
15:06:03,680 --> 15:06:07,720
of ignore the stuff I don't understand I

23965
15:06:05,480 --> 15:06:10,276
can see invalid literal for INT with

23966
15:06:07,720 --> 15:06:12,956
base 10 cat that's a super cryptic way

23967
15:06:10,276 --> 15:06:15,840
of saying that c a is not a number in

23968
15:06:12,956 --> 15:06:17,596
decimal notation and so I would seem to

23969
15:06:15,840 --> 15:06:19,479
have to somehow handle this case and if

23970
15:06:17,596 --> 15:06:22,200
you want to be more Curious you'll see

23971
15:06:19,480 --> 15:06:23,880
that this is indeed a trace back and um

23972
15:06:22,200 --> 15:06:25,560
C tends to do this too or the debugger

23973
15:06:23,880 --> 15:06:26,680
would do this for you too you can see

23974
15:06:25,560 --> 15:06:28,479
all of the functions that have been

23975
15:06:26,680 --> 15:06:31,520
called to get you to this point so

23976
15:06:28,480 --> 15:06:34,320
apparently my problem is initially in

23977
15:06:31,520 --> 15:06:37,079
line 14 but line 14 if I keep scrolling

23978
15:06:34,320 --> 15:06:39,159
is uninteresting it's main but line 14

23979
15:06:37,080 --> 15:06:41,756
leads me to execute line two which is

23980
15:06:39,160 --> 15:06:44,560
indeed in main that leads me to execute

23981
15:06:41,756 --> 15:06:46,480
line nine which is in get height and

23982
15:06:44,560 --> 15:06:48,000
okay here's the issue so the closest

23983
15:06:46,480 --> 15:06:50,276
line number to the error message is the

23984
15:06:48,000 --> 15:06:52,436
one that probably reveals the most line

23985
15:06:50,276 --> 15:06:54,200
nine is where my issue is so I can't

23986
15:06:52,436 --> 15:06:55,916
just blindly ask the user for input and

23987
15:06:54,200 --> 15:06:57,880
then convert it to an INT if they're not

23988
15:06:55,916 --> 15:06:59,479
going to give me an INT now how do we

23989
15:06:57,880 --> 15:07:01,360
deal with this well back in problem set

23990
15:06:59,480 --> 15:07:03,720
two you might recall validating that the

23991
15:07:01,360 --> 15:07:05,520
user typed in a number and using a for

23992
15:07:03,720 --> 15:07:06,796
Loop and the like well it turns out

23993
15:07:05,520 --> 15:07:09,755
there's a better way to do this in

23994
15:07:06,796 --> 15:07:11,880
Python and the are kind of there if you

23995
15:07:09,756 --> 15:07:13,756
want to try to convert something for a

23996
15:07:11,880 --> 15:07:16,115
number to a number that might not

23997
15:07:13,756 --> 15:07:17,796
actually be a number turns out Python

23998
15:07:16,116 --> 15:07:20,480
and certain other languages literally

23999
15:07:17,796 --> 15:07:22,080
have a keyword called try and if only

24000
15:07:20,480 --> 15:07:23,916
this existed for the past few weeks I

24001
15:07:22,080 --> 15:07:25,720
know but like you can try to do the

24002
15:07:23,916 --> 15:07:27,719
following with your code what do I want

24003
15:07:25,720 --> 15:07:30,436
to try to do well I want to try to

24004
15:07:27,720 --> 15:07:32,916
execute those few lines except if

24005
15:07:30,436 --> 15:07:35,116
there's an error so I can say except if

24006
15:07:32,916 --> 15:07:37,240
there's a value error specifically the

24007
15:07:35,116 --> 15:07:39,916
one I screwed up and created a moment

24008
15:07:37,240 --> 15:07:41,520
ago and if there is a value error I can

24009
15:07:39,916 --> 15:07:44,596
print out an informative message to the

24010
15:07:41,520 --> 15:07:47,479
user like not an integer or anything

24011
15:07:44,596 --> 15:07:49,880
else and what's happening here now is

24012
15:07:47,480 --> 15:07:52,636
literally this operative word try the

24013
15:07:49,880 --> 15:07:54,840
pro python is going to try to get input

24014
15:07:52,636 --> 15:07:56,796
and try to convert it to an in and it's

24015
15:07:54,840 --> 15:07:59,359
going to try to check if it's greater

24016
15:07:56,796 --> 15:08:01,116
than zero and then try to return it all

24017
15:07:59,360 --> 15:08:03,040
why all of three of those lines are

24018
15:08:01,116 --> 15:08:05,400
inside of indented underneath the tri

24019
15:08:03,040 --> 15:08:08,596
block except if something goes wrong

24020
15:08:05,400 --> 15:08:10,320
specifically a value error happens then

24021
15:08:08,596 --> 15:08:12,596
it prints this but it doesn't return

24022
15:08:10,320 --> 15:08:14,680
anything and because I'm in a loop that

24023
15:08:12,596 --> 15:08:16,795
means it's going to do it again and

24024
15:08:14,680 --> 15:08:20,040
again and again until the human actually

24025
15:08:16,796 --> 15:08:21,720
cooperates and gives me an actual number

24026
15:08:20,040 --> 15:08:24,240
and so this too is what the world would

24027
15:08:21,720 --> 15:08:26,320
call pythonic in Python you don't

24028
15:08:24,240 --> 15:08:27,795
necessarily rigorously try to validate

24029
15:08:26,320 --> 15:08:29,520
the users's input make sure they haven't

24030
15:08:27,796 --> 15:08:31,796
screwed up you honestly take a more

24031
15:08:29,520 --> 15:08:34,359
laxidasical approach and just try to do

24032
15:08:31,796 --> 15:08:36,360
something but catch an error if it

24033
15:08:34,360 --> 15:08:38,400
happens so catch is also a term of art

24034
15:08:36,360 --> 15:08:40,200
even though it's not a keyword here

24035
15:08:38,400 --> 15:08:42,276
except if something happens you handle

24036
15:08:40,200 --> 15:08:43,956
it so you try and you handle it it's

24037
15:08:42,276 --> 15:08:46,240
sort of best effort programming if you

24038
15:08:43,956 --> 15:08:48,720
will but this is baked into the mindset

24039
15:08:46,240 --> 15:08:51,200
of the Python uh programming community

24040
15:08:48,720 --> 15:08:53,680
so now if I do python of mario. py and I

24041
15:08:51,200 --> 15:08:56,956
cooperate works great as before try and

24042
15:08:53,680 --> 15:09:00,240
succeed three Works four works if though

24043
15:08:56,956 --> 15:09:02,680
I try and fail by typing in cat it

24044
15:09:00,240 --> 15:09:04,079
doesn't crash per se it doesn't show me

24045
15:09:02,680 --> 15:09:05,796
an error it shows me something more user

24046
15:09:04,080 --> 15:09:07,880
friendly like not an integer and then I

24047
15:09:05,796 --> 15:09:10,880
can try again with dog not an integer I

24048
15:09:07,880 --> 15:09:12,399
can try again with five and now it works

24049
15:09:10,880 --> 15:09:14,040
so we won't generally have you write

24050
15:09:12,400 --> 15:09:16,400
much in the way of these try except

24051
15:09:14,040 --> 15:09:18,840
blocks only because they get a little

24052
15:09:16,400 --> 15:09:20,436
sophisticated quickly but that is to

24053
15:09:18,840 --> 15:09:21,719
reveal what the get int function is

24054
15:09:20,436 --> 15:09:23,080
doing this is why we give you the

24055
15:09:21,720 --> 15:09:24,520
training wheels so that when you want to

24056
15:09:23,080 --> 15:09:26,080
get an INT you don't have to jump

24057
15:09:24,520 --> 15:09:28,079
through all these annoying Hoops to do

24058
15:09:26,080 --> 15:09:31,040
so but that's all the library is really

24059
15:09:28,080 --> 15:09:32,680
doing for you is just try and accept you

24060
15:09:31,040 --> 15:09:35,680
won't be left with any training wheels

24061
15:09:32,680 --> 15:09:40,040
ultimately questions now on getting

24062
15:09:35,680 --> 15:09:40,040
inputs and trying in this way

24063
15:09:40,160 --> 15:09:42,840
anything at all

24064
15:09:45,680 --> 15:09:50,756
yeah Tri block it say that oh you could

24065
15:09:49,200 --> 15:09:52,479
you put the condition outside of the tri

24066
15:09:50,756 --> 15:09:53,636
block short answer yes and in fact I

24067
15:09:52,480 --> 15:09:55,000
struggled with this last night when

24068
15:09:53,636 --> 15:09:58,479
tweaking this example to show the

24069
15:09:55,000 --> 15:10:01,636
simplest version I will disclaim that

24070
15:09:58,480 --> 15:10:04,276
really I should only be trying literally

24071
15:10:01,636 --> 15:10:06,320
to do the The Fragile part and then down

24072
15:10:04,276 --> 15:10:08,159
here I should be really doing what

24073
15:10:06,320 --> 15:10:10,116
you're proposing which is do the

24074
15:10:08,160 --> 15:10:12,000
condition out here the problem is though

24075
15:10:10,116 --> 15:10:14,116
that logically this gets messy quickly

24076
15:10:12,000 --> 15:10:16,160
right because except if there's a value

24077
15:10:14,116 --> 15:10:18,040
error I want to print out not an integer

24078
15:10:16,160 --> 15:10:19,596
I can't compare n against zero then

24079
15:10:18,040 --> 15:10:21,680
because n doesn't exist because there

24080
15:10:19,596 --> 15:10:23,040
was an error so it turns out and I'll

24081
15:10:21,680 --> 15:10:24,720
show you this this is now the advanced

24082
15:10:23,040 --> 15:10:27,360
version of python there's actually an

24083
15:10:24,720 --> 15:10:29,636
else keyword you can use in Python that

24084
15:10:27,360 --> 15:10:32,160
does not accompany if or L if it

24085
15:10:29,636 --> 15:10:34,240
accompanies try and accept which I think

24086
15:10:32,160 --> 15:10:36,080
is weirdly confusing a different word

24087
15:10:34,240 --> 15:10:38,000
would have been better but if you really

24088
15:10:36,080 --> 15:10:39,400
prefer I could have done this instead

24089
15:10:38,000 --> 15:10:40,756
dead and this is one of these design

24090
15:10:39,400 --> 15:10:42,596
things where like reasonable people will

24091
15:10:40,756 --> 15:10:44,560
disagree generally speaking you should

24092
15:10:42,596 --> 15:10:46,680
only try to do the one line that might

24093
15:10:44,560 --> 15:10:48,040
very well fail but honestly this looks

24094
15:10:46,680 --> 15:10:50,480
kind of stupid now it's just

24095
15:10:48,040 --> 15:10:52,636
unnecessarily complicated and so my own

24096
15:10:50,480 --> 15:10:54,400
preference was actually the original

24097
15:10:52,636 --> 15:10:56,116
which was yeah I'm trying a few extra

24098
15:10:54,400 --> 15:10:57,756
lines that really aren't going to fail

24099
15:10:56,116 --> 15:10:59,560
mathematically but it's just tighter

24100
15:10:57,756 --> 15:11:01,080
it's cleaner this way and here's again

24101
15:10:59,560 --> 15:11:02,399
the sort of like you know arguments

24102
15:11:01,080 --> 15:11:03,560
you'll start to make yourself as you get

24103
15:11:02,400 --> 15:11:04,796
more comfortable with programming you'll

24104
15:11:03,560 --> 15:11:06,360
have an opinion you'll disagree with

24105
15:11:04,796 --> 15:11:08,916
someone and so long as you can back your

24106
15:11:06,360 --> 15:11:12,720
argument up pretty

24107
15:11:08,916 --> 15:11:15,360
probably all right so how about we now

24108
15:11:12,720 --> 15:11:16,956
take away some piece of magic that's

24109
15:11:15,360 --> 15:11:18,956
been here for a while let me go ahead

24110
15:11:16,956 --> 15:11:21,956
and uh Delete all of this here and let

24111
15:11:18,956 --> 15:11:23,680
me propose that we revisit uh not that

24112
15:11:21,956 --> 15:11:25,040
vertical column and the exceptions that

24113
15:11:23,680 --> 15:11:26,880
might result from getting input but

24114
15:11:25,040 --> 15:11:28,560
these like horizontal question marks

24115
15:11:26,880 --> 15:11:30,680
that we saw a while ago so I want all of

24116
15:11:28,560 --> 15:11:32,159
those question marks on the same line

24117
15:11:30,680 --> 15:11:33,756
and yet I worry we're about to see a

24118
15:11:32,160 --> 15:11:35,436
challenge here because print up until

24119
15:11:33,756 --> 15:11:37,240
now has been putting new lines

24120
15:11:35,436 --> 15:11:39,796
everywhere automatically even without

24121
15:11:37,240 --> 15:11:42,636
those backslash NS well let me propose

24122
15:11:39,796 --> 15:11:44,720
that we do this for I in the range of

24123
15:11:42,636 --> 15:11:47,000
four if I want four question marks let

24124
15:11:44,720 --> 15:11:48,276
me just print four question marks

24125
15:11:47,000 --> 15:11:51,436
unfortunately I don't think this is

24126
15:11:48,276 --> 15:11:53,795
correct yet let me run python of mario.

24127
15:11:51,436 --> 15:11:56,276
and of course this gives me a column

24128
15:11:53,796 --> 15:11:58,560
instead of the row of question marks

24129
15:11:56,276 --> 15:12:00,560
that I want so how do we do this well it

24130
15:11:58,560 --> 15:12:03,115
turns out if you read the documentation

24131
15:12:00,560 --> 15:12:05,000
for the print function it turns out that

24132
15:12:03,116 --> 15:12:06,840
print not surprisingly perhaps takes a

24133
15:12:05,000 --> 15:12:08,796
lot of different arguments as well and

24134
15:12:06,840 --> 15:12:11,320
in fact if you go to the documentation

24135
15:12:08,796 --> 15:12:13,880
for it you'll see that it takes not just

24136
15:12:11,320 --> 15:12:15,916
positional arguments that is from left

24137
15:12:13,880 --> 15:12:17,596
to right separated by commas turns out

24138
15:12:15,916 --> 15:12:19,435
python has supports a fancier feature

24139
15:12:17,596 --> 15:12:21,956
with arguments where you can pass the

24140
15:12:19,436 --> 15:12:24,240
names of arguments to functions too so

24141
15:12:21,956 --> 15:12:27,159
what do I mean by this if I go back to

24142
15:12:24,240 --> 15:12:30,360
vs code here and I've read the

24143
15:12:27,160 --> 15:12:33,000
documentation it turns out that yes as

24144
15:12:30,360 --> 15:12:35,276
before you can pass multiple arguments

24145
15:12:33,000 --> 15:12:37,200
to python like this like hello comma

24146
15:12:35,276 --> 15:12:39,276
David comma me that will just

24147
15:12:37,200 --> 15:12:41,520
automatically concatenate all three of

24148
15:12:39,276 --> 15:12:43,000
those positional arguments together

24149
15:12:41,520 --> 15:12:44,479
they're positional in the sense that

24150
15:12:43,000 --> 15:12:46,480
they literally flow from left to right

24151
15:12:44,480 --> 15:12:48,360
separated by commas but if you don't

24152
15:12:46,480 --> 15:12:50,520
want to just pass in values like that

24153
15:12:48,360 --> 15:12:52,796
you want to actually print out as I did

24154
15:12:50,520 --> 15:12:55,795
before a question mark but you want to

24155
15:12:52,796 --> 15:12:58,080
override the default behavior of print

24156
15:12:55,796 --> 15:13:00,560
by changing the line ending you can

24157
15:12:58,080 --> 15:13:02,240
actually do this you can use the name of

24158
15:13:00,560 --> 15:13:05,636
an argument that you know exists from

24159
15:13:02,240 --> 15:13:08,079
the documentation set it equal to some

24160
15:13:05,636 --> 15:13:10,756
alternative value and in fact even

24161
15:13:08,080 --> 15:13:13,956
though this looks cryptic this is how I

24162
15:13:10,756 --> 15:13:16,400
would override the end of each line to

24163
15:13:13,956 --> 15:13:18,240
be quote unquote that is nothing because

24164
15:13:16,400 --> 15:13:21,240
if you read the documentation the

24165
15:13:18,240 --> 15:13:24,636
default value for this end argument does

24166
15:13:21,240 --> 15:13:26,436
someone want to guess is is back sln so

24167
15:13:24,636 --> 15:13:29,479
if you read the documentation you'll see

24168
15:13:26,436 --> 15:13:31,916
that back sln is the implied default for

24169
15:13:29,480 --> 15:13:33,680
this end argument and so if you want to

24170
15:13:31,916 --> 15:13:37,680
change it you just say end equals

24171
15:13:33,680 --> 15:13:40,400
something else and so here I can change

24172
15:13:37,680 --> 15:13:42,796
change it to nothing and now rerun

24173
15:13:40,400 --> 15:13:44,436
python of mario. and now they're all on

24174
15:13:42,796 --> 15:13:46,360
the same line now looks a little stupid

24175
15:13:44,436 --> 15:13:47,840
cuz I made that sort of week one mistake

24176
15:13:46,360 --> 15:13:49,720
where I still need to move the cursor to

24177
15:13:47,840 --> 15:13:51,000
the next line that's just a different

24178
15:13:49,720 --> 15:13:52,756
problem I'm just going to go over here

24179
15:13:51,000 --> 15:13:54,756
and print nothing I don't even need to

24180
15:13:52,756 --> 15:13:57,080
print back sln because if print

24181
15:13:54,756 --> 15:13:58,796
automatically gives you a backslash n

24182
15:13:57,080 --> 15:14:01,040
just call print with nothing and you'll

24183
15:13:58,796 --> 15:14:03,080
get that for free so let me rerun python

24184
15:14:01,040 --> 15:14:05,360
of mario. Pi and now it looks a little

24185
15:14:03,080 --> 15:14:06,916
prettier at the prompt and to be super

24186
15:14:05,360 --> 15:14:08,840
clear as to what's going on suppose I

24187
15:14:06,916 --> 15:14:11,000
want to sort of make an exclamation here

24188
15:14:08,840 --> 15:14:13,200
I could change the back sln default to

24189
15:14:11,000 --> 15:14:15,840
like an exclamation point Just for kicks

24190
15:14:13,200 --> 15:14:17,320
and if I run python of mario. py again

24191
15:14:15,840 --> 15:14:19,956
now I get this sort of you know

24192
15:14:17,320 --> 15:14:22,116
exclamation with question marks and

24193
15:14:19,956 --> 15:14:23,400
exclamation points as well so that's all

24194
15:14:22,116 --> 15:14:25,916
that's going on here and this is what's

24195
15:14:23,400 --> 15:14:28,000
called a named argument it literally has

24196
15:14:25,916 --> 15:14:29,916
a name that you can specify when calling

24197
15:14:28,000 --> 15:14:31,796
it in and it's different from positional

24198
15:14:29,916 --> 15:14:33,880
in that you're literally using the

24199
15:14:31,796 --> 15:14:35,000
name let me propose something else

24200
15:14:33,880 --> 15:14:36,479
though and this is why people kind of

24201
15:14:35,000 --> 15:14:39,320
like python there's just kind of cool

24202
15:14:36,480 --> 15:14:42,956
ways to do things that's kind of a you

24203
15:14:39,320 --> 15:14:45,240
know ver it's a three line verbose way

24204
15:14:42,956 --> 15:14:47,400
of printing out four question marks you

24205
15:14:45,240 --> 15:14:49,200
know I could certainly take the you know

24206
15:14:47,400 --> 15:14:50,916
shortcut and just do this but that's not

24207
15:14:49,200 --> 15:14:52,320
really that interesting for anyone

24208
15:14:50,916 --> 15:14:54,360
especially if I want to do it a variable

24209
15:14:52,320 --> 15:14:57,636
number of times but python does let you

24210
15:14:54,360 --> 15:15:00,240
do this if you want to uh multiply a

24211
15:14:57,636 --> 15:15:02,880
character some number of times not only

24212
15:15:00,240 --> 15:15:06,276
can you use Plus for concatenation you

24213
15:15:02,880 --> 15:15:08,520
can use star or an asterisk for

24214
15:15:06,276 --> 15:15:10,795
multiplication if you will that is

24215
15:15:08,520 --> 15:15:12,880
concatenation again and again and again

24216
15:15:10,796 --> 15:15:15,636
so if I just print out quote unquote

24217
15:15:12,880 --> 15:15:17,719
question mark Time 4 that's actually

24218
15:15:15,636 --> 15:15:20,159
going to be the tightest way the most

24219
15:15:17,720 --> 15:15:21,796
distinct way I can print four question

24220
15:15:20,160 --> 15:15:24,360
marks instead and if I don't use four I

24221
15:15:21,796 --> 15:15:25,840
use n where I get n from the user bang

24222
15:15:24,360 --> 15:15:29,276
like now I've gotten rid of the four

24223
15:15:25,840 --> 15:15:32,956
Loop entirely and I'm using the the star

24224
15:15:29,276 --> 15:15:34,956
operator to manipulate it instead and to

24225
15:15:32,956 --> 15:15:38,040
be super clear here in so far as python

24226
15:15:34,956 --> 15:15:39,479
does not have milock or free or memory

24227
15:15:38,040 --> 15:15:42,680
management that you have to do guess

24228
15:15:39,480 --> 15:15:42,680
what python also doesn't

24229
15:15:43,400 --> 15:15:46,680
have anything on your minds the past

24230
15:15:45,756 --> 15:15:50,880
couple of

24231
15:15:46,680 --> 15:15:53,080
weeks doesn't have pointers yes so

24232
15:15:50,880 --> 15:15:54,755
python does not have pointers which just

24233
15:15:53,080 --> 15:15:56,796
means that all of that happens for you

24234
15:15:54,756 --> 15:15:58,720
automatically underneath the hood Again

24235
15:15:56,796 --> 15:16:00,840
by way of code that someone else wrote

24236
15:15:58,720 --> 15:16:02,956
how about one more throwback with Mario

24237
15:16:00,840 --> 15:16:05,115
we've talked about in week one this sort

24238
15:16:02,956 --> 15:16:08,596
of two-dimensional structure where it's

24239
15:16:05,116 --> 15:16:10,320
like I claim like 3x3 a grid of bricks

24240
15:16:08,596 --> 15:16:11,795
if you will well how can we do this in

24241
15:16:10,320 --> 15:16:15,000
Python we can do this in a couple of

24242
15:16:11,796 --> 15:16:17,080
ways now let me go back to my mario. py

24243
15:16:15,000 --> 15:16:19,240
and let me do something like for I in

24244
15:16:17,080 --> 15:16:21,360
range of we'll just do three even though

24245
15:16:19,240 --> 15:16:23,795
I know now I could use get int or I

24246
15:16:21,360 --> 15:16:25,436
could use input and int and if I want to

24247
15:16:23,796 --> 15:16:27,480
do something two-dimensionally just like

24248
15:16:25,436 --> 15:16:31,000
in C you can Nest your for Loop so maybe

24249
15:16:27,480 --> 15:16:34,956
I could do 4J in range of three and then

24250
15:16:31,000 --> 15:16:37,116
in here I could print out a uh hash

24251
15:16:34,956 --> 15:16:39,200
symbol and then let's see if that gives

24252
15:16:37,116 --> 15:16:41,636
me nine total so if I've got a nested

24253
15:16:39,200 --> 15:16:44,399
Loop like this python of mario.

24254
15:16:41,636 --> 15:16:45,916
hopefully gives me a grid no it gave me

24255
15:16:44,400 --> 15:16:48,240
a column of

24256
15:16:45,916 --> 15:16:51,200
nine why

24257
15:16:48,240 --> 15:16:53,400
logically even though I've got my row

24258
15:16:51,200 --> 15:16:55,916
and my

24259
15:16:53,400 --> 15:16:59,480
columns

24260
15:16:55,916 --> 15:17:01,079
yeah yeah the line ending so in my row I

24261
15:16:59,480 --> 15:17:02,680
can't let print just keep adding new

24262
15:17:01,080 --> 15:17:04,560
line adding new lines so I just have to

24263
15:17:02,680 --> 15:17:06,320
override this here and let me not screw

24264
15:17:04,560 --> 15:17:08,399
up like before let me print one at the

24265
15:17:06,320 --> 15:17:10,916
end of the whole row just to move the

24266
15:17:08,400 --> 15:17:13,276
cursor down and I think now together now

24267
15:17:10,916 --> 15:17:15,159
we've got our 3x3 of course we could

24268
15:17:13,276 --> 15:17:17,560
tighten this up further like if I don't

24269
15:17:15,160 --> 15:17:20,360
like the nested loop I probably could go

24270
15:17:17,560 --> 15:17:23,040
in here and just print out for instance

24271
15:17:20,360 --> 15:17:24,680
a uh a brick times three or I could

24272
15:17:23,040 --> 15:17:26,520
change the three to a variable if I've

24273
15:17:24,680 --> 15:17:28,276
gotten it from the user so I can tighten

24274
15:17:26,520 --> 15:17:29,956
this up further so again just different

24275
15:17:28,276 --> 15:17:31,680
ways to solve the same problem and again

24276
15:17:29,956 --> 15:17:33,000
sort of evidence of why a lot of people

24277
15:17:31,680 --> 15:17:34,916
like python there's just some more

24278
15:17:33,000 --> 15:17:36,560
pleasant ways to solve problems without

24279
15:17:34,916 --> 15:17:40,040
getting into the weeds constantly of

24280
15:17:36,560 --> 15:17:42,079
doing things like like with um uh for

24281
15:17:40,040 --> 15:17:43,240
loops and wild Loops endlessly all right

24282
15:17:42,080 --> 15:17:44,796
well how about some other building

24283
15:17:43,240 --> 15:17:47,079
blocks lists are going to be so

24284
15:17:44,796 --> 15:17:49,116
incredibly useful in Python just as

24285
15:17:47,080 --> 15:17:50,360
arrays were in C but arrays are annoying

24286
15:17:49,116 --> 15:17:51,880
because you have to manage the memory

24287
15:17:50,360 --> 15:17:53,636
yourself you have to know in advance how

24288
15:17:51,880 --> 15:17:56,115
big they are or you have to use pointers

24289
15:17:53,636 --> 15:17:57,479
and malok or realloc to resize them like

24290
15:17:56,116 --> 15:17:59,596
oh my God like the past two weeks have

24291
15:17:57,480 --> 15:18:02,160
been painful in that sense but python

24292
15:17:59,596 --> 15:18:04,000
does this all for free for you in fact

24293
15:18:02,160 --> 15:18:06,796
there's a whole bunch of functions that

24294
15:18:04,000 --> 15:18:11,080
come with python that involve lists and

24295
15:18:06,796 --> 15:18:14,596
they'll ow us ultimately um to do things

24296
15:18:11,080 --> 15:18:16,116
again and again and again uh with uh

24297
15:18:14,596 --> 15:18:17,479
within the same data structure and for

24298
15:18:16,116 --> 15:18:19,360
instance we'll be able to get the length

24299
15:18:17,480 --> 15:18:21,360
of a list you don't have to remember it

24300
15:18:19,360 --> 15:18:23,400
yourself in a variable you can just ask

24301
15:18:21,360 --> 15:18:25,840
python how many elements are in this

24302
15:18:23,400 --> 15:18:28,200
list and with this I think we can solve

24303
15:18:25,840 --> 15:18:32,039
some some old problems too so let me go

24304
15:18:28,200 --> 15:18:34,956
back here to vs code let me close Mario

24305
15:18:32,040 --> 15:18:37,276
and give us a new program called scores.

24306
15:18:34,956 --> 15:18:39,360
piy and rather than show the C and the

24307
15:18:37,276 --> 15:18:42,240
python now let's just focus on Python

24308
15:18:39,360 --> 15:18:43,916
and in scores. C way back when we just

24309
15:18:42,240 --> 15:18:46,916
averaged like three test scores or

24310
15:18:43,916 --> 15:18:48,956
something like that 72 73 and 33 a few

24311
15:18:46,916 --> 15:18:52,079
weeks ago so if I want to create a list

24312
15:18:48,956 --> 15:18:54,560
in this python version of 72 73 33 I

24313
15:18:52,080 --> 15:18:56,240
just use my square bracket notation C

24314
15:18:54,560 --> 15:18:58,840
let you use curly braces if you know the

24315
15:18:56,240 --> 15:19:01,000
values in advance but Python's just this

24316
15:18:58,840 --> 15:19:03,479
and now if I want to compute the average

24317
15:19:01,000 --> 15:19:05,680
in pi in C recall I did something with a

24318
15:19:03,480 --> 15:19:07,756
loop I added all the values together I

24319
15:19:05,680 --> 15:19:09,360
then divided by the total number values

24320
15:19:07,756 --> 15:19:11,360
just like you would in grade school and

24321
15:19:09,360 --> 15:19:13,320
that gave me the average well python

24322
15:19:11,360 --> 15:19:15,636
comes with a lot of super handy

24323
15:19:13,320 --> 15:19:17,436
functions not just length but others as

24324
15:19:15,636 --> 15:19:20,000
well and so in fact if you want to

24325
15:19:17,436 --> 15:19:22,520
compute the average you can take the sum

24326
15:19:20,000 --> 15:19:24,720
of all of those scores and divide it by

24327
15:19:22,520 --> 15:19:27,039
the length of all of those scores so

24328
15:19:24,720 --> 15:19:29,320
python comes with length comes with sum

24329
15:19:27,040 --> 15:19:31,756
you can just pass in a whole list of any

24330
15:19:29,320 --> 15:19:33,720
size and let it deal with that problem

24331
15:19:31,756 --> 15:19:35,596
for you so if I want to now print out

24332
15:19:33,720 --> 15:19:38,240
this average I can print out average

24333
15:19:35,596 --> 15:19:40,520
colon and then I'll plug in my average

24334
15:19:38,240 --> 15:19:42,436
uh string for variable for interpolation

24335
15:19:40,520 --> 15:19:44,240
let me make this an F string so that it

24336
15:19:42,436 --> 15:19:46,796
gets formatted and let me just run

24337
15:19:44,240 --> 15:19:48,596
python of scores. Pi and there's my

24338
15:19:46,796 --> 15:19:49,956
average it's sort of rounding weird

24339
15:19:48,596 --> 15:19:52,756
because we're still vulnerable to some

24340
15:19:49,956 --> 15:19:54,320
floating point in Precision but at least

24341
15:19:52,756 --> 15:19:56,636
I didn't need loops and I didn't have to

24342
15:19:54,320 --> 15:19:58,400
write all this darn code just to do

24343
15:19:56,636 --> 15:20:00,320
something that you know Excel and Google

24344
15:19:58,400 --> 15:20:02,520
spreadsheets can just do like that well

24345
15:20:00,320 --> 15:20:04,756
python is closer to those kinds of tools

24346
15:20:02,520 --> 15:20:06,840
but more powerful and that you can

24347
15:20:04,756 --> 15:20:08,840
manipulate the data yourself how about

24348
15:20:06,840 --> 15:20:10,679
though if I want to um get a bunch of

24349
15:20:08,840 --> 15:20:12,596
scores manually from the user and then

24350
15:20:10,680 --> 15:20:15,160
sum them together well let's combine a

24351
15:20:12,596 --> 15:20:19,115
few ideas here how about this first let

24352
15:20:15,160 --> 15:20:20,880
me go ahead and uh import um the cs50 LI

24353
15:20:19,116 --> 15:20:22,200
get in function from the cs50 library

24354
15:20:20,880 --> 15:20:24,636
just so we don't have to deal with try

24355
15:20:22,200 --> 15:20:27,039
and accept or all of that and let me go

24356
15:20:24,636 --> 15:20:30,116
ahead and give myself an empty list and

24357
15:20:27,040 --> 15:20:32,200
this is powerful in py in C there's

24358
15:20:30,116 --> 15:20:33,840
really there's no point to an empty

24359
15:20:32,200 --> 15:20:35,596
array because if you create an empty

24360
15:20:33,840 --> 15:20:37,596
array with square bracket notation like

24361
15:20:35,596 --> 15:20:39,916
it's not useful for anything but in

24362
15:20:37,596 --> 15:20:42,115
Python you can create it empty because

24363
15:20:39,916 --> 15:20:44,000
python will grow and shrink the list for

24364
15:20:42,116 --> 15:20:45,956
you automatically as you add things to

24365
15:20:44,000 --> 15:20:47,436
it so if I want to get three scores from

24366
15:20:45,956 --> 15:20:50,276
the user I could do something like this

24367
15:20:47,436 --> 15:20:53,240
for I in range of three and then I can

24368
15:20:50,276 --> 15:20:55,159
grab a variable called score or anything

24369
15:20:53,240 --> 15:20:57,596
I could call get int prompt the human

24370
15:20:55,160 --> 15:20:59,680
for the score that they want to type in

24371
15:20:57,596 --> 15:21:02,040
and then once they do I can do this

24372
15:20:59,680 --> 15:21:04,840
thinking back to our objectoriented

24373
15:21:02,040 --> 15:21:07,596
programming capability now I could do

24374
15:21:04,840 --> 15:21:09,479
scores dot a pen

24375
15:21:07,596 --> 15:21:10,840
and I Canen that score to it and you

24376
15:21:09,480 --> 15:21:12,636
would only know this from having read

24377
15:21:10,840 --> 15:21:14,679
the documentation heard it in class in a

24378
15:21:12,636 --> 15:21:16,560
book or whatnot but it turns out that

24379
15:21:14,680 --> 15:21:19,240
just like strings have functions like

24380
15:21:16,560 --> 15:21:21,200
lower built into them lists have

24381
15:21:19,240 --> 15:21:23,115
functions like append built into them

24382
15:21:21,200 --> 15:21:25,435
that just literally appends to the end

24383
15:21:23,116 --> 15:21:28,040
of the list for you and python will grow

24384
15:21:25,436 --> 15:21:30,320
or Shrink it as needed no more Malo or C

24385
15:21:28,040 --> 15:21:32,840
or Realo or the like so this just

24386
15:21:30,320 --> 15:21:35,720
appends to the scores array the scores

24387
15:21:32,840 --> 15:21:37,596
list that score and then again and again

24388
15:21:35,720 --> 15:21:39,720
and again so the array starts at

24389
15:21:37,596 --> 15:21:42,636
sorry the list starts at size zero then

24390
15:21:39,720 --> 15:21:44,596
grows to one then two then three without

24391
15:21:42,636 --> 15:21:47,636
you having to do anything else and so

24392
15:21:44,596 --> 15:21:50,000
now down here I can compute an average

24393
15:21:47,636 --> 15:21:52,320
with the sum of those scores divided by

24394
15:21:50,000 --> 15:21:54,596
the length of the total number of scores

24395
15:21:52,320 --> 15:21:56,636
and to be clear length is the total

24396
15:21:54,596 --> 15:21:58,880
number of elements in the list doesn't

24397
15:21:56,636 --> 15:22:01,116
matter how big the values themselves are

24398
15:21:58,880 --> 15:22:04,000
now I can go ahead and print out an FST

24399
15:22:01,116 --> 15:22:07,240
string uh with something like average

24400
15:22:04,000 --> 15:22:09,956
colon average and curly braces and and

24401
15:22:07,240 --> 15:22:11,479
if I run python of scores. piy I'll type

24402
15:22:09,956 --> 15:22:14,040
in just for the sake of discussion the

24403
15:22:11,480 --> 15:22:15,680
three values I still get the same answer

24404
15:22:14,040 --> 15:22:18,240
but that would have been painful to do

24405
15:22:15,680 --> 15:22:20,480
in see unless you committ it in advance

24406
15:22:18,240 --> 15:22:24,880
to a fixed size array which we already

24407
15:22:20,480 --> 15:22:27,276
decided weeks ago was annoying or uh you

24408
15:22:24,880 --> 15:22:30,520
uh grew it dynamically using malok or

24409
15:22:27,276 --> 15:22:32,320
realloc or the like all right what else

24410
15:22:30,520 --> 15:22:34,956
can I do well there's some nice things

24411
15:22:32,320 --> 15:22:37,520
you might as well know exist um instead

24412
15:22:34,956 --> 15:22:39,756
of scores. aen you can do slight

24413
15:22:37,520 --> 15:22:42,240
fanciness like this like if you want to

24414
15:22:39,756 --> 15:22:44,880
append something to a list you can

24415
15:22:42,240 --> 15:22:47,400
actually do plus equals and then put

24416
15:22:44,880 --> 15:22:49,916
that thing in a a temporary list of its

24417
15:22:47,400 --> 15:22:51,596
own and just use what is essentially

24418
15:22:49,916 --> 15:22:54,079
concatenation but not concatenation of

24419
15:22:51,596 --> 15:22:57,399
strings but concatination of lists so

24420
15:22:54,080 --> 15:22:59,560
this new line six appends to the scores

24421
15:22:57,400 --> 15:23:00,956
list this tiny little list I'm

24422
15:22:59,560 --> 15:23:03,159
temporarily creating with just the

24423
15:23:00,956 --> 15:23:05,000
current new score so just another piece

24424
15:23:03,160 --> 15:23:07,276
of syntax that's worth seeing that

24425
15:23:05,000 --> 15:23:09,360
allows you to do something like that as

24426
15:23:07,276 --> 15:23:11,200
well all right well how about we go back

24427
15:23:09,360 --> 15:23:12,756
to strings for a moment and all these

24428
15:23:11,200 --> 15:23:14,795
examples as always are on the course's

24429
15:23:12,756 --> 15:23:17,000
website afterward suppose we want to do

24430
15:23:14,796 --> 15:23:19,160
something like converting characters to

24431
15:23:17,000 --> 15:23:20,636
uppercase well to be clear I could do

24432
15:23:19,160 --> 15:23:23,160
something like this let me create a

24433
15:23:20,636 --> 15:23:25,320
program called uppercase dop let me

24434
15:23:23,160 --> 15:23:27,200
prompt the user for a before string as

24435
15:23:25,320 --> 15:23:29,276
by using the input function or get

24436
15:23:27,200 --> 15:23:31,159
string which is almost the same and I'll

24437
15:23:29,276 --> 15:23:33,479
prompt the user for a string

24438
15:23:31,160 --> 15:23:37,480
beforeand then let me go ahead and print

24439
15:23:33,480 --> 15:23:40,840
out uh how about the keyword after

24440
15:23:37,480 --> 15:23:42,276
and then end the new line with nothing

24441
15:23:40,840 --> 15:23:44,880
just so that I can see before on one

24442
15:23:42,276 --> 15:23:46,880
line and after on the next line and then

24443
15:23:44,880 --> 15:23:51,040
let me do this and here's where python

24444
15:23:46,880 --> 15:23:55,240
gets pleasant too with loops for C in

24445
15:23:51,040 --> 15:23:57,400
before print c. uper n equals quote

24446
15:23:55,240 --> 15:23:59,079
unquote and then I'll print this here

24447
15:23:57,400 --> 15:24:01,400
all right that was fast but let's try to

24448
15:23:59,080 --> 15:24:02,956
infer what's going on so line one just

24449
15:24:01,400 --> 15:24:04,720
gets input from the user stores it in a

24450
15:24:02,956 --> 15:24:07,000
variable called before line two

24451
15:24:04,720 --> 15:24:08,636
literally just prints after but doesn't

24452
15:24:07,000 --> 15:24:11,916
move the new line to uh the cursor to

24453
15:24:08,636 --> 15:24:14,560
the next line what it then does is this

24454
15:24:11,916 --> 15:24:16,795
and in C this was a little more annoying

24455
15:24:14,560 --> 15:24:18,956
you needed a for loop with I you needed

24456
15:24:16,796 --> 15:24:22,360
array in uh notation with the square

24457
15:24:18,956 --> 15:24:25,520
brackets but python if you say four

24458
15:24:22,360 --> 15:24:27,560
variable in string so for c for

24459
15:24:25,520 --> 15:24:30,240
character in string Python's going to

24460
15:24:27,560 --> 15:24:31,916
automatically assign C to the first word

24461
15:24:30,240 --> 15:24:33,360
letter that the user types in then on

24462
15:24:31,916 --> 15:24:34,479
the next iteration the second letter the

24463
15:24:33,360 --> 15:24:36,360
third letter and the fourth so you don't

24464
15:24:34,480 --> 15:24:38,480
need any square bracket notation you

24465
15:24:36,360 --> 15:24:40,880
just you see and python will do it for

24466
15:24:38,480 --> 15:24:42,680
you and just hand you back one at a time

24467
15:24:40,880 --> 15:24:45,956
each of the letters that the user has

24468
15:24:42,680 --> 15:24:48,480
typed in so if I go back over here and I

24469
15:24:45,956 --> 15:24:52,080
run for instance python of uppercase

24470
15:24:48,480 --> 15:24:54,560
dopy and I'll type in how about uh David

24471
15:24:52,080 --> 15:24:57,040
in all lowercase and hit enter you'll

24472
15:24:54,560 --> 15:24:58,840
now see that it's all uppercase instead

24473
15:24:57,040 --> 15:25:00,720
by iterating over it indeed one

24474
15:24:58,840 --> 15:25:02,320
character at a time but we already know

24475
15:25:00,720 --> 15:25:04,116
thanks to object-oriented programming

24476
15:25:02,320 --> 15:25:05,520
strings themselves have the

24477
15:25:04,116 --> 15:25:07,320
functionality built in to not just

24478
15:25:05,520 --> 15:25:09,520
uppercase Single Character

24479
15:25:07,320 --> 15:25:11,360
but the whole string so honestly this

24480
15:25:09,520 --> 15:25:15,276
was a bit of a silly exercise I don't

24481
15:25:11,360 --> 15:25:16,720
need to use a loop anymore like in see

24482
15:25:15,276 --> 15:25:18,320
and so some of the habits you've only

24483
15:25:16,720 --> 15:25:19,840
just developed in recent weeks it's time

24484
15:25:18,320 --> 15:25:22,116
to start breaking them when they're not

24485
15:25:19,840 --> 15:25:25,320
necessary I can create a variable called

24486
15:25:22,116 --> 15:25:27,560
after set it equal to before do uper

24487
15:25:25,320 --> 15:25:29,520
which indeed exists just like lower

24488
15:25:27,560 --> 15:25:32,435
exists and then what I can go ahead and

24489
15:25:29,520 --> 15:25:34,159
print out is for instance uh let's get

24490
15:25:32,436 --> 15:25:37,480
rid of this print line here and do it at

24491
15:25:34,160 --> 15:25:40,000
the end after and print the value of

24492
15:25:37,480 --> 15:25:42,080
that variable so now if I rerun

24493
15:25:40,000 --> 15:25:44,796
uppercase Pi type in David and all

24494
15:25:42,080 --> 15:25:47,320
lowercase I can just uppercase the whole

24495
15:25:44,796 --> 15:25:49,796
thing all at once because again in C in

24496
15:25:47,320 --> 15:25:53,436
Python you don't have to operate on

24497
15:25:49,796 --> 15:25:57,400
characters individually questions on any

24498
15:25:53,436 --> 15:25:59,880
of these tricks up until

24499
15:25:57,400 --> 15:26:01,400
now now all right how about a few other

24500
15:25:59,880 --> 15:26:03,719
techniques that we saw and C that we'll

24501
15:26:01,400 --> 15:26:06,956
bring back now in Python so it turns out

24502
15:26:03,720 --> 15:26:08,520
in Python there are other librar you can

24503
15:26:06,956 --> 15:26:11,080
use two that unlock even more

24504
15:26:08,520 --> 15:26:12,956
functionality so in C if you wanted

24505
15:26:11,080 --> 15:26:15,360
command line arguments you just change

24506
15:26:12,956 --> 15:26:18,520
the proo the signature for main to be

24507
15:26:15,360 --> 15:26:21,880
void instead of void to be int argc

24508
15:26:18,520 --> 15:26:24,276
comma string argv Open brackets for an

24509
15:26:21,880 --> 15:26:25,755
array or Char star eventually well it

24510
15:26:24,276 --> 15:26:27,159
turns out in Python that if you want to

24511
15:26:25,756 --> 15:26:28,720
access command line arguments it's a

24512
15:26:27,160 --> 15:26:31,560
little simpler but they're tucked away

24513
15:26:28,720 --> 15:26:34,596
in a library otherwise known as a module

24514
15:26:31,560 --> 15:26:36,240
called CIS the CIS or system module now

24515
15:26:34,596 --> 15:26:37,479
this is similar in spirit to the cs50

24516
15:26:36,240 --> 15:26:38,840
library and that it's got a bunch of

24517
15:26:37,480 --> 15:26:41,200
functionality built in but this one

24518
15:26:38,840 --> 15:26:44,200
comes with python itself so if I want to

24519
15:26:41,200 --> 15:26:46,680
create a program like greet py in VSS

24520
15:26:44,200 --> 15:26:50,560
code here let me go ahead and do this

24521
15:26:46,680 --> 15:26:52,480
from the CIS Library let's import argv

24522
15:26:50,560 --> 15:26:54,000
and that's just a thing that exists it's

24523
15:26:52,480 --> 15:26:56,000
not built into main because there is no

24524
15:26:54,000 --> 15:26:57,756
main per se anymore so it's tucked away

24525
15:26:56,000 --> 15:26:59,560
in that library and now I can do

24526
15:26:57,756 --> 15:27:02,400
something like this if the length of

24527
15:26:59,560 --> 15:27:04,479
argv equals equals 2 well let's go ahead

24528
15:27:02,400 --> 15:27:08,596
and print out something friendly like

24529
15:27:04,480 --> 15:27:11,596
hello comma AR V bracket 1 and then

24530
15:27:08,596 --> 15:27:13,795
close quotes else if the length of RV is

24531
15:27:11,596 --> 15:27:15,840
not equal to two let's just go ahead and

24532
15:27:13,796 --> 15:27:17,200
print out hello world now at a glance

24533
15:27:15,840 --> 15:27:18,755
this might look a little cryptic but

24534
15:27:17,200 --> 15:27:22,399
it's identical to what we did a few

24535
15:27:18,756 --> 15:27:24,680
weeks ago when I run this python of

24536
15:27:22,400 --> 15:27:28,000
greet with no arguments it just says

24537
15:27:24,680 --> 15:27:30,080
hello world but if I instead add a

24538
15:27:28,000 --> 15:27:33,480
command line argument like my first name

24539
15:27:30,080 --> 15:27:36,560
and hit enter now the length of arv is

24540
15:27:33,480 --> 15:27:39,520
no longer one it's going to be two and

24541
15:27:36,560 --> 15:27:42,435
so it prints out hello David instead so

24542
15:27:39,520 --> 15:27:44,680
the takeaway here is that whereas in C

24543
15:27:42,436 --> 15:27:48,756
argv technically contained the name of

24544
15:27:44,680 --> 15:27:50,680
your program like hello or dog greet and

24545
15:27:48,756 --> 15:27:52,840
then everything the human typed Python's

24546
15:27:50,680 --> 15:27:54,916
a little different in that because we're

24547
15:27:52,840 --> 15:27:57,596
using The Interpreter in this way

24548
15:27:54,916 --> 15:28:01,159
Technically when you run python of greet

24549
15:27:57,596 --> 15:28:03,320
py the length of arv is only one it

24550
15:28:01,160 --> 15:28:05,720
contains only greet so the name of the

24551
15:28:03,320 --> 15:28:07,159
file it does not unnecessarily contain

24552
15:28:05,720 --> 15:28:09,520
python itself because what's the point

24553
15:28:07,160 --> 15:28:10,796
of that being there omnes it does

24554
15:28:09,520 --> 15:28:14,000
contain the number of words that the

24555
15:28:10,796 --> 15:28:16,360
human typed after python itself so argv

24556
15:28:14,000 --> 15:28:18,360
is length one here argv is length two

24557
15:28:16,360 --> 15:28:20,916
here and that's why when it did equal to

24558
15:28:18,360 --> 15:28:23,360
I saw hello David instead of the default

24559
15:28:20,916 --> 15:28:25,320
hello world so same ability to access

24560
15:28:23,360 --> 15:28:27,116
command line arguments add these kinds

24561
15:28:25,320 --> 15:28:30,796
of inputs to your functions but you have

24562
15:28:27,116 --> 15:28:33,080
to unlock it by way of using Arvy uh

24563
15:28:30,796 --> 15:28:34,680
instead in this way if you want to see

24564
15:28:33,080 --> 15:28:38,080
all of the words you could do something

24565
15:28:34,680 --> 15:28:42,320
like this uh just as if we combine ideas

24566
15:28:38,080 --> 15:28:43,436
here for I in range of how about length

24567
15:28:42,320 --> 15:28:46,360
of

24568
15:28:43,436 --> 15:28:48,916
arv then I can do this print argv

24569
15:28:46,360 --> 15:28:51,240
bracket I all right a little cryptic but

24570
15:28:48,916 --> 15:28:53,520
line three is just a for Loop iterating

24571
15:28:51,240 --> 15:28:55,400
over the range of length of argv so if

24572
15:28:53,520 --> 15:28:57,916
the human types in two words the length

24573
15:28:55,400 --> 15:28:59,720
of argv will be two so this is just a

24574
15:28:57,916 --> 15:29:02,795
way of saying iterate over all of the

24575
15:28:59,720 --> 15:29:05,720
words in arv printing them one at a time

24576
15:29:02,796 --> 15:29:07,400
so python of greet dopy enter just

24577
15:29:05,720 --> 15:29:10,000
prints out the name of the program

24578
15:29:07,400 --> 15:29:12,360
python of greet dopy with David prints

24579
15:29:10,000 --> 15:29:14,080
out greet dopy and then David I can keep

24580
15:29:12,360 --> 15:29:17,360
running it though with more words and

24581
15:29:14,080 --> 15:29:20,160
they'll each get printed one at a time

24582
15:29:17,360 --> 15:29:21,840
but what's nice too about Python and

24583
15:29:20,160 --> 15:29:23,560
this is the point of this exercise

24584
15:29:21,840 --> 15:29:25,636
honestly this looks pretty cryptic this

24585
15:29:23,560 --> 15:29:28,240
is not very pleasant to look at if you

24586
15:29:25,636 --> 15:29:32,276
just want to iterate over every word in

24587
15:29:28,240 --> 15:29:35,795
a list which argv is watch what I can do

24588
15:29:32,276 --> 15:29:38,479
I can do for ARG or any variable name in

24589
15:29:35,796 --> 15:29:40,436
ARG V let me just now print out that

24590
15:29:38,480 --> 15:29:41,880
argument I could keep calling it I but I

24591
15:29:40,436 --> 15:29:44,480
seems weird when it's not a number so

24592
15:29:41,880 --> 15:29:48,636
I'm changing to AR as a word instead if

24593
15:29:44,480 --> 15:29:50,796
I now do python of greet py it does this

24594
15:29:48,636 --> 15:29:53,240
if I do python of greet David it does

24595
15:29:50,796 --> 15:29:55,200
that again David ma it does that again

24596
15:29:53,240 --> 15:29:56,636
so this is again why Python's just very

24597
15:29:55,200 --> 15:29:58,276
appealing you want to do something this

24598
15:29:56,636 --> 15:29:59,840
many times iterate over a list just say

24599
15:29:58,276 --> 15:30:01,795
it and it reads a little more like

24600
15:29:59,840 --> 15:30:03,755
English and there's even other fanciness

24601
15:30:01,796 --> 15:30:05,240
too if I may it's a little stupid that I

24602
15:30:03,756 --> 15:30:07,956
keep seeing the name of the program

24603
15:30:05,240 --> 15:30:10,756
greet dopy so I it'd be nice if I could

24604
15:30:07,956 --> 15:30:14,636
remove that python also supports what

24605
15:30:10,756 --> 15:30:15,636
are called slices of arrays sorry slices

24606
15:30:14,636 --> 15:30:19,240
of lists even though I get the

24607
15:30:15,636 --> 15:30:20,720
terminology confused if Arvy is a list

24608
15:30:19,240 --> 15:30:22,756
then it's going to print out everything

24609
15:30:20,720 --> 15:30:25,596
in it but if I want a slice of it that

24610
15:30:22,756 --> 15:30:28,560
starts at location one all the way to

24611
15:30:25,596 --> 15:30:30,200
the end you can use this funky syntax in

24612
15:30:28,560 --> 15:30:32,399
between the square brackets which we've

24613
15:30:30,200 --> 15:30:35,079
not seen yet that's going to start at

24614
15:30:32,400 --> 15:30:37,720
item one and go all the way to the end

24615
15:30:35,080 --> 15:30:40,080
and so this is a nice clever way of

24616
15:30:37,720 --> 15:30:42,080
slicing off if you will the very first

24617
15:30:40,080 --> 15:30:45,756
element because now when I run greet doy

24618
15:30:42,080 --> 15:30:48,560
David men I should only see David and

24619
15:30:45,756 --> 15:30:50,916
men if I only want one element I could

24620
15:30:48,560 --> 15:30:53,840
do one to two if I want all of them I

24621
15:30:50,916 --> 15:30:55,755
could do zero onward I could give myself

24622
15:30:53,840 --> 15:30:57,916
just two of one of them in this way so

24623
15:30:55,756 --> 15:30:59,400
you can play with the start value and

24624
15:30:57,916 --> 15:31:01,159
the end value in this way to sort of

24625
15:30:59,400 --> 15:31:04,040
slice and dice these lists in different

24626
15:31:01,160 --> 15:31:06,080
ways that would have been a pain in see

24627
15:31:04,040 --> 15:31:09,360
just because we didn't really have the

24628
15:31:06,080 --> 15:31:12,480
built-in support for manipulating arrays

24629
15:31:09,360 --> 15:31:14,160
as cleanly as this all right just so

24630
15:31:12,480 --> 15:31:16,596
you've seen it too though this one is

24631
15:31:14,160 --> 15:31:18,160
less uh exciting to see live if I go

24632
15:31:16,596 --> 15:31:19,680
ahead and create a quick program here it

24633
15:31:18,160 --> 15:31:22,160
turns out there's something else in the

24634
15:31:19,680 --> 15:31:24,360
CIS Library the ability to exit programs

24635
15:31:22,160 --> 15:31:25,840
either exiting with status code one or

24636
15:31:24,360 --> 15:31:28,080
zero as we've been doing anytime

24637
15:31:25,840 --> 15:31:29,560
something goes right or wrong so for

24638
15:31:28,080 --> 15:31:31,840
instance Let Me Whip up a quick program

24639
15:31:29,560 --> 15:31:36,200
that just says if the length of cy.

24640
15:31:31,840 --> 15:31:37,755
argv uh does not equal two then let's y

24641
15:31:36,200 --> 15:31:40,636
at the user and say you're missing a

24642
15:31:37,756 --> 15:31:44,596
command line argument otherwise command

24643
15:31:40,636 --> 15:31:47,400
line argument and let's then return cy.

24644
15:31:44,596 --> 15:31:49,596
exit one else let's go ahead and

24645
15:31:47,400 --> 15:31:53,320
logically just say print a formatted

24646
15:31:49,596 --> 15:31:55,916
string that says hello as before cy.

24647
15:31:53,320 --> 15:31:57,080
arv1 now things look different all of a

24648
15:31:55,916 --> 15:31:58,795
sudden but I'm doing something

24649
15:31:57,080 --> 15:32:01,916
deliberately first let's see what this

24650
15:31:58,796 --> 15:32:04,080
does so on line one I'm importing not

24651
15:32:01,916 --> 15:32:06,159
argv specifically I'm importing the

24652
15:32:04,080 --> 15:32:08,360
whole CIS library and we'll see why in

24653
15:32:06,160 --> 15:32:11,116
second well it turns out that this Arvy

24654
15:32:08,360 --> 15:32:13,756
the CIS library has not only the Arvy

24655
15:32:11,116 --> 15:32:15,956
list it also has a function called exit

24656
15:32:13,756 --> 15:32:17,840
which I'd like to be able to use as well

24657
15:32:15,956 --> 15:32:20,240
so it turns out that if you import a

24658
15:32:17,840 --> 15:32:21,636
whole library in this way that's fine

24659
15:32:20,240 --> 15:32:23,360
but you have to refer to the things

24660
15:32:21,636 --> 15:32:25,756
inside of it by using that same

24661
15:32:23,360 --> 15:32:28,320
library's name and a DOT to sort of

24662
15:32:25,756 --> 15:32:30,400
namespace it so to speak so here I'm

24663
15:32:28,320 --> 15:32:32,240
just saying if the user types in does

24664
15:32:30,400 --> 15:32:33,796
not type in two words yell at them with

24665
15:32:32,240 --> 15:32:35,520
missing command line argument and then

24666
15:32:33,796 --> 15:32:38,000
exit with one just like in C when you do

24667
15:32:35,520 --> 15:32:39,916
exit one just means something went wrong

24668
15:32:38,000 --> 15:32:41,436
otherwise print out hello to this and

24669
15:32:39,916 --> 15:32:42,916
this is starting to look cryptic but

24670
15:32:41,436 --> 15:32:45,000
it's just a combination of ideas the

24671
15:32:42,916 --> 15:32:48,240
curly braces means interpolate this

24672
15:32:45,000 --> 15:32:49,956
value plug it in here cy. Arvy is just

24673
15:32:48,240 --> 15:32:52,880
the verbose way of saying go into the

24674
15:32:49,956 --> 15:32:55,040
CIS library and get the argv variable

24675
15:32:52,880 --> 15:32:57,956
therein and bracket one of course just

24676
15:32:55,040 --> 15:33:01,080
like arrays and C is just the second

24677
15:32:57,956 --> 15:33:03,680
element at the prompt so when I run this

24678
15:33:01,080 --> 15:33:06,596
version now python of exit. py with no

24679
15:33:03,680 --> 15:33:09,160
arguments I get yelled at in this way if

24680
15:33:06,596 --> 15:33:11,795
however I type in two arguments total

24681
15:33:09,160 --> 15:33:14,200
the name of the file and my own name now

24682
15:33:11,796 --> 15:33:15,636
I get greeted with hello David and it's

24683
15:33:14,200 --> 15:33:17,719
the same idea before this was a very

24684
15:33:15,636 --> 15:33:20,276
low-level technique but same thing here

24685
15:33:17,720 --> 15:33:22,840
if you do Echo dollar sign question mark

24686
15:33:20,276 --> 15:33:25,400
enter you'll see the exit code of your

24687
15:33:22,840 --> 15:33:28,115
program so if I do this incorrectly

24688
15:33:25,400 --> 15:33:30,560
again let me rerun it without my name

24689
15:33:28,116 --> 15:33:32,796
enter I get yelled at but if I do Echo

24690
15:33:30,560 --> 15:33:35,636
dollar sign question mark there's the

24691
15:33:32,796 --> 15:33:38,880
secret one that's returned again just to

24692
15:33:35,636 --> 15:33:42,916
show You parody with C in this case

24693
15:33:38,880 --> 15:33:42,916
questions now on any of these techniques

24694
15:33:43,436 --> 15:33:47,400
here all right how about something

24695
15:33:45,916 --> 15:33:49,360
that's a little more powerful too we

24696
15:33:47,400 --> 15:33:51,000
spent so much time in week zero and one

24697
15:33:49,360 --> 15:33:53,000
doing searching and then eventually

24698
15:33:51,000 --> 15:33:54,596
sorting in week three well it turns out

24699
15:33:53,000 --> 15:33:55,880
python can help with some of this too

24700
15:33:54,596 --> 15:33:57,840
let me go ahead and create a program

24701
15:33:55,880 --> 15:34:00,000
called names. py that's just going to be

24702
15:33:57,840 --> 15:34:02,000
an opportunity to maybe search over a

24703
15:34:00,000 --> 15:34:04,596
whole bunch of names let me go ahead and

24704
15:34:02,000 --> 15:34:06,720
import CIS and then just so I have

24705
15:34:04,596 --> 15:34:08,520
access to exit and let me go ahead and

24706
15:34:06,720 --> 15:34:10,680
create a variable called names that's

24707
15:34:08,520 --> 15:34:14,200
going to be a list with a whole bunch of

24708
15:34:10,680 --> 15:34:18,276
names uh how about Here Charlie and Fred

24709
15:34:14,200 --> 15:34:20,435
and George and Jenny and Percy and

24710
15:34:18,276 --> 15:34:22,000
lastly Ron so a whole bunch of names

24711
15:34:20,436 --> 15:34:23,916
here and you know it'd be a little

24712
15:34:22,000 --> 15:34:25,840
Annoying to implement code that iterates

24713
15:34:23,916 --> 15:34:28,079
over that from left to right and see

24714
15:34:25,840 --> 15:34:29,399
searching for one of those names in fact

24715
15:34:28,080 --> 15:34:31,360
what name well let's go ahead and ask

24716
15:34:29,400 --> 15:34:32,956
the user to input the name that they

24717
15:34:31,360 --> 15:34:35,560
want to search for so that we can tell

24718
15:34:32,956 --> 15:34:37,956
them if the name is there or not and we

24719
15:34:35,560 --> 15:34:40,720
could do this similar to C in Python

24720
15:34:37,956 --> 15:34:43,756
doing something like this so for n in

24721
15:34:40,720 --> 15:34:46,480
names where n is just a variable to

24722
15:34:43,756 --> 15:34:49,000
iterate over each name if how about the

24723
15:34:46,480 --> 15:34:52,360
name I'm looking for equals the current

24724
15:34:49,000 --> 15:34:54,400
name in the list AKA n let's print out

24725
15:34:52,360 --> 15:34:56,916
something friendly like found and then

24726
15:34:54,400 --> 15:34:59,636
let's do cy. Exit 0 to indicate that we

24727
15:34:56,916 --> 15:35:01,320
found whoever that is otherwise if we

24728
15:34:59,636 --> 15:35:02,840
get all the way to the bottom here

24729
15:35:01,320 --> 15:35:04,560
outside of this Loop let's just print

24730
15:35:02,840 --> 15:35:07,435
not found because if we haven't exited

24731
15:35:04,560 --> 15:35:09,520
yet and then let's just exit with one

24732
15:35:07,436 --> 15:35:13,320
just to be clear I can continue

24733
15:35:09,520 --> 15:35:15,880
importing all of CIS or I could do from

24734
15:35:13,320 --> 15:35:18,840
CIS import exit and then I could get rid

24735
15:35:15,880 --> 15:35:20,240
of CIS dot everywhere else but you know

24736
15:35:18,840 --> 15:35:22,000
sometimes it's helpful to know exactly

24737
15:35:20,240 --> 15:35:24,756
where functions came from so this two is

24738
15:35:22,000 --> 15:35:26,116
just a matter of style in this case all

24739
15:35:24,756 --> 15:35:29,200
right so let's go ahead and run this

24740
15:35:26,116 --> 15:35:31,436
python of names. piy and let's look for

24741
15:35:29,200 --> 15:35:33,039
like Ron all the way at the end you know

24742
15:35:31,436 --> 15:35:35,320
all right he's found and let's search

24743
15:35:33,040 --> 15:35:38,040
for someone outside of the family here

24744
15:35:35,320 --> 15:35:39,596
like herion not found okay so it seems

24745
15:35:38,040 --> 15:35:42,560
to be working in this way but I've

24746
15:35:39,596 --> 15:35:44,840
essentially implemented what

24747
15:35:42,560 --> 15:35:49,115
algorithm what algorithm would this seem

24748
15:35:44,840 --> 15:35:50,000
to be per lines seven and eight and nine

24749
15:35:49,116 --> 15:35:52,200
and

24750
15:35:50,000 --> 15:35:53,560
10 yeah so it's just linear search it's

24751
15:35:52,200 --> 15:35:55,360
a loop even though the syntax is a

24752
15:35:53,560 --> 15:35:56,720
little more succinct today and it's just

24753
15:35:55,360 --> 15:35:59,080
iterating over the whole thing well

24754
15:35:56,720 --> 15:36:00,956
honestly we've seen an even more tur way

24755
15:35:59,080 --> 15:36:03,240
to do this in Python and this again is

24756
15:36:00,956 --> 15:36:05,276
what makes it a more pleasant language

24757
15:36:03,240 --> 15:36:07,680
sometimes why don't I just do this

24758
15:36:05,276 --> 15:36:09,680
instead in of iterating one at a time

24759
15:36:07,680 --> 15:36:12,520
why don't I just say this let me go

24760
15:36:09,680 --> 15:36:14,916
ahead and change my condition to just be

24761
15:36:12,520 --> 15:36:18,359
How about if the name we're looking for

24762
15:36:14,916 --> 15:36:20,479
is in the names list we're done we found

24763
15:36:18,360 --> 15:36:22,520
it use the in preposition that we've

24764
15:36:20,480 --> 15:36:24,436
seen a couple of times now that itself

24765
15:36:22,520 --> 15:36:27,115
asks the question is something in

24766
15:36:24,436 --> 15:36:28,720
something else and python will take care

24767
15:36:27,116 --> 15:36:31,240
of linear search for us and it's going

24768
15:36:28,720 --> 15:36:33,160
to work exactly the same if I do python

24769
15:36:31,240 --> 15:36:34,720
of names. search for run it's still

24770
15:36:33,160 --> 15:36:36,840
going to find him and it's still going

24771
15:36:34,720 --> 15:36:38,480
to do it linearly in this case but I

24772
15:36:36,840 --> 15:36:42,276
don't have to write all of the lower

24773
15:36:38,480 --> 15:36:47,000
level code myself in this

24774
15:36:42,276 --> 15:36:49,079
case questions now on any of this the

24775
15:36:47,000 --> 15:36:52,400
code's just getting shorter and

24776
15:36:49,080 --> 15:36:54,756
shorter now what about uh let's see what

24777
15:36:52,400 --> 15:36:56,400
else might we have here how about this

24778
15:36:54,756 --> 15:36:57,796
it turns out let's go ahead and

24779
15:36:56,400 --> 15:36:59,720
Implement that phone book that we

24780
15:36:57,796 --> 15:37:01,080
started metaphorically with in the

24781
15:36:59,720 --> 15:37:03,436
beginning of the course let's code up a

24782
15:37:01,080 --> 15:37:05,756
program called phonebook dopy and in

24783
15:37:03,436 --> 15:37:07,720
this case let's go ahead and let's

24784
15:37:05,756 --> 15:37:09,796
create a dictionary this time recall

24785
15:37:07,720 --> 15:37:11,680
that a dictionary is a little something

24786
15:37:09,796 --> 15:37:14,880
that implements something like this like

24787
15:37:11,680 --> 15:37:17,360
a two column table that's got keys and

24788
15:37:14,880 --> 15:37:18,840
values words and definitions names and

24789
15:37:17,360 --> 15:37:21,240
numbers and let's focus on the last of

24790
15:37:18,840 --> 15:37:22,840
those names and numbers in this case

24791
15:37:21,240 --> 15:37:24,795
well I claimed earlier that python has

24792
15:37:22,840 --> 15:37:26,755
built-in support for dictionaries dict

24793
15:37:24,796 --> 15:37:28,560
objects that you can create with one

24794
15:37:26,756 --> 15:37:29,880
line I didn't need it for speller

24795
15:37:28,560 --> 15:37:31,916
because a set is sufficient when you

24796
15:37:29,880 --> 15:37:33,916
only want one of the keys or the values

24797
15:37:31,916 --> 15:37:35,916
not both but now I want some names and

24798
15:37:33,916 --> 15:37:37,916
numbers so it turns out in pyth python

24799
15:37:35,916 --> 15:37:40,479
you can create an empty dictionary by

24800
15:37:37,916 --> 15:37:42,435
saying dict open parenthesis close and

24801
15:37:40,480 --> 15:37:44,636
that just gives you essentially a chart

24802
15:37:42,436 --> 15:37:46,916
that looks like this with nothing in it

24803
15:37:44,636 --> 15:37:50,596
or there's more succinct syntax you can

24804
15:37:46,916 --> 15:37:52,596
alternatively do uh this with two curly

24805
15:37:50,596 --> 15:37:54,399
braces instead and in fact I've been

24806
15:37:52,596 --> 15:37:58,399
using a shortcut all this time when I

24807
15:37:54,400 --> 15:38:01,200
had a list earlier where my

24808
15:37:58,400 --> 15:38:03,160
variable uh was called scores and I did

24809
15:38:01,200 --> 15:38:05,636
this that was actually the shorthand

24810
15:38:03,160 --> 15:38:07,636
version of this hey python give me an

24811
15:38:05,636 --> 15:38:09,596
empty list so there's different Syntax

24812
15:38:07,636 --> 15:38:12,560
for achieving the same goal in this case

24813
15:38:09,596 --> 15:38:15,479
if I want a dictionary for people I can

24814
15:38:12,560 --> 15:38:17,636
either do this or more commonly just two

24815
15:38:15,480 --> 15:38:19,240
curly braces like that all right well

24816
15:38:17,636 --> 15:38:20,916
what do I want to put in this well let

24817
15:38:19,240 --> 15:38:22,596
me actually put some things in this and

24818
15:38:20,916 --> 15:38:24,560
I'm going to just move my Clos curly

24819
15:38:22,596 --> 15:38:27,040
brace to a new line if I want to

24820
15:38:24,560 --> 15:38:29,756
implement this idea of keys and values

24821
15:38:27,040 --> 15:38:33,040
the way you do this in Python is key

24822
15:38:29,756 --> 15:38:35,116
colon value comma key colon value so

24823
15:38:33,040 --> 15:38:36,796
you'd implement it more in code so for

24824
15:38:35,116 --> 15:38:39,040
instance if I want Carter to be the

24825
15:38:36,796 --> 15:38:43,200
first key in my phone book and I want

24826
15:38:39,040 --> 15:38:45,596
his number to be+ one 617495 1000 I can

24827
15:38:43,200 --> 15:38:48,039
put that as the corresponding value the

24828
15:38:45,596 --> 15:38:50,520
colon is in between both are strings or

24829
15:38:48,040 --> 15:38:52,276
stirs so I've quoted both deliberately

24830
15:38:50,520 --> 15:38:53,680
if I want to add myself I can put a

24831
15:38:52,276 --> 15:38:55,320
comma and then just to keep things

24832
15:38:53,680 --> 15:38:56,956
pretty I'm moving the cursor to the next

24833
15:38:55,320 --> 15:38:58,796
line but that's not strictly required

24834
15:38:56,956 --> 15:39:03,040
aesthetically it's just good style and

24835
15:38:58,796 --> 15:39:06,596
here I might do+ 1 949 468 uh

24836
15:39:03,040 --> 15:39:08,796
2750 and now I have a dictionary that

24837
15:39:06,596 --> 15:39:11,079
essentially has two rows here David uh

24838
15:39:08,796 --> 15:39:12,680
Carter and his number and David and his

24839
15:39:11,080 --> 15:39:14,160
number as well and if I kept adding to

24840
15:39:12,680 --> 15:39:15,956
this this call this chart would just get

24841
15:39:14,160 --> 15:39:17,756
longer and longer suppose I want to

24842
15:39:15,956 --> 15:39:19,720
search for one of our numbers well let's

24843
15:39:17,756 --> 15:39:21,596
prompt the user for the name for whose

24844
15:39:19,720 --> 15:39:23,276
number you want to search by getting

24845
15:39:21,596 --> 15:39:25,320
string or you know what we don't need

24846
15:39:23,276 --> 15:39:28,400
the cs50 library let's just use input

24847
15:39:25,320 --> 15:39:30,720
and prompt the user for a name and now

24848
15:39:28,400 --> 15:39:35,320
we can use this super syntax and just

24849
15:39:30,720 --> 15:39:38,520
say if name in people print the format

24850
15:39:35,320 --> 15:39:42,756
added string number colon and here we

24851
15:39:38,520 --> 15:39:44,636
can do this people bracket name okay so

24852
15:39:42,756 --> 15:39:46,840
this is getting kind of cool kind of

24853
15:39:44,636 --> 15:39:49,080
quickly kind of confusingly so let me

24854
15:39:46,840 --> 15:39:52,000
run this python of phone

24855
15:39:49,080 --> 15:39:54,756
book. let's type in Carter and indeed I

24856
15:39:52,000 --> 15:39:58,160
see his number let's run it again with

24857
15:39:54,756 --> 15:40:00,916
David and I see my number here so what's

24858
15:39:58,160 --> 15:40:03,200
going on well it turns out that a

24859
15:40:00,916 --> 15:40:04,916
dictionary is very similar in spirit to

24860
15:40:03,200 --> 15:40:07,596
a list it's actually very similar in

24861
15:40:04,916 --> 15:40:10,719
spirit to an array in C but instead of

24862
15:40:07,596 --> 15:40:13,276
being limited to keys that are numbers

24863
15:40:10,720 --> 15:40:15,596
like bracket 0o bracket 1 bracket two

24864
15:40:13,276 --> 15:40:18,240
you can actually use words and that's

24865
15:40:15,596 --> 15:40:20,840
all I'm doing here on line eight if I

24866
15:40:18,240 --> 15:40:22,560
want to check for the name Carter which

24867
15:40:20,840 --> 15:40:25,399
is currently in this variable called

24868
15:40:22,560 --> 15:40:28,000
name I can index into my people

24869
15:40:25,400 --> 15:40:30,680
dictionary using not a number but using

24870
15:40:28,000 --> 15:40:33,240
literally a string the name Carter or

24871
15:40:30,680 --> 15:40:35,040
David or anything else to make this

24872
15:40:33,240 --> 15:40:36,795
clear too notice that I'm at the moment

24873
15:40:35,040 --> 15:40:39,276
you using this format string which is

24874
15:40:36,796 --> 15:40:41,160
adding some undue complexity but I could

24875
15:40:39,276 --> 15:40:42,560
clarify this perhaps further as this I

24876
15:40:41,160 --> 15:40:45,040
could give myself another variable

24877
15:40:42,560 --> 15:40:47,720
called number set it equal to the people

24878
15:40:45,040 --> 15:40:49,796
dictionary indexing into it using the

24879
15:40:47,720 --> 15:40:51,840
current name and now I can shorten this

24880
15:40:49,796 --> 15:40:55,040
to make it clear that all I'm doing is

24881
15:40:51,840 --> 15:40:57,435
printing the value of that and in fact I

24882
15:40:55,040 --> 15:40:59,480
can do this even more cryptically if I

24883
15:40:57,436 --> 15:41:01,480
this would be weird to do but if I only

24884
15:40:59,480 --> 15:41:03,916
ever want to show David's phone number

24885
15:41:01,480 --> 15:41:06,956
and never Carter's I can literally quote

24886
15:41:03,916 --> 15:41:08,560
unquote index into the people dictionary

24887
15:41:06,956 --> 15:41:10,596
because now when I run this even if I

24888
15:41:08,560 --> 15:41:12,520
type Carter I'm going to get back my

24889
15:41:10,596 --> 15:41:14,756
number instead but that's all that's

24890
15:41:12,520 --> 15:41:18,520
happening if I undo that because that's

24891
15:41:14,756 --> 15:41:21,240
now a bug but I index into it using the

24892
15:41:18,520 --> 15:41:22,680
value of name dictionaries are just so

24893
15:41:21,240 --> 15:41:24,115
wonderfully convenient because now you

24894
15:41:22,680 --> 15:41:26,596
can associate anything with anything

24895
15:41:24,116 --> 15:41:29,436
else but not using numbers but entire

24896
15:41:26,596 --> 15:41:31,560
keywords instead so here's how if in

24897
15:41:29,436 --> 15:41:34,276
spell we gave you not just words but

24898
15:41:31,560 --> 15:41:36,720
hundreds of thousands of definitions as

24899
15:41:34,276 --> 15:41:38,159
well you could essentially store them as

24900
15:41:36,720 --> 15:41:39,756
this and then when the human wants to

24901
15:41:38,160 --> 15:41:41,480
look up a definition in a proper

24902
15:41:39,756 --> 15:41:43,360
dictionary not just for spellchecking

24903
15:41:41,480 --> 15:41:46,320
you could index into the dictionary

24904
15:41:43,360 --> 15:41:49,756
using square brackets and get back the

24905
15:41:46,320 --> 15:41:53,436
definition in English as well

24906
15:41:49,756 --> 15:41:53,436
questions on this

24907
15:42:04,080 --> 15:42:08,116
yeah

24908
15:42:05,756 --> 15:42:10,436
location a really good question so how

24909
15:42:08,116 --> 15:42:12,276
to summarize how is python finding that

24910
15:42:10,436 --> 15:42:15,040
name within that dictionary this is

24911
15:42:12,276 --> 15:42:17,320
where honestly speller in pet 5 is what

24912
15:42:15,040 --> 15:42:18,596
Python's all about so you have struggled

24913
15:42:17,320 --> 15:42:19,840
are struggling with implementing your

24914
15:42:18,596 --> 15:42:21,560
own spell checker and implementing your

24915
15:42:19,840 --> 15:42:23,795
own hash table and recall that per last

24916
15:42:21,560 --> 15:42:26,320
week the goal of a hash table is to

24917
15:42:23,796 --> 15:42:28,000
ideally get constant time access not

24918
15:42:26,320 --> 15:42:30,436
something linear which is slow and even

24919
15:42:28,000 --> 15:42:33,160
better than something uh uh logarithmic

24920
15:42:30,436 --> 15:42:35,116
like log base 2 of n so Python and the

24921
15:42:33,160 --> 15:42:37,276
really smart people who invented it they

24922
15:42:35,116 --> 15:42:40,276
have written the code that does its best

24923
15:42:37,276 --> 15:42:41,479
to give you constant time searches of

24924
15:42:40,276 --> 15:42:42,880
dictionaries and they're not always

24925
15:42:41,480 --> 15:42:44,320
going to succeed just as you and your

24926
15:42:42,880 --> 15:42:45,755
own problem set probably going to have

24927
15:42:44,320 --> 15:42:47,520
some collisions once in a while and

24928
15:42:45,756 --> 15:42:49,520
start to have chains of length lists of

24929
15:42:47,520 --> 15:42:51,039
words but this is where again you defer

24930
15:42:49,520 --> 15:42:52,880
to someone else someone smarter than you

24931
15:42:51,040 --> 15:42:54,680
someone with more time than you to solve

24932
15:42:52,880 --> 15:42:56,240
these problems for you and if you read

24933
15:42:54,680 --> 15:42:58,480
Python's documentation you'll see that

24934
15:42:56,240 --> 15:43:00,520
it doesn't guarantee constant time but

24935
15:42:58,480 --> 15:43:03,400
it's going to ideally optimize the data

24936
15:43:00,520 --> 15:43:05,039
structure for you to get as fast as

24937
15:43:03,400 --> 15:43:07,160
possible and of all of the data

24938
15:43:05,040 --> 15:43:09,000
structures um like a dictionary a

24939
15:43:07,160 --> 15:43:10,596
hashtable is really like the Swiss army

24940
15:43:09,000 --> 15:43:12,320
knife of computing because it just lets

24941
15:43:10,596 --> 15:43:14,115
you associate something with something

24942
15:43:12,320 --> 15:43:15,756
else and even though we keep focusing on

24943
15:43:14,116 --> 15:43:17,160
names and numbers that's a really

24944
15:43:15,756 --> 15:43:18,796
powerful thing because it's more

24945
15:43:17,160 --> 15:43:20,796
powerful than lists and arrays which are

24946
15:43:18,796 --> 15:43:22,756
only numbers and something else now you

24947
15:43:20,796 --> 15:43:24,756
can have any sorts of relationships

24948
15:43:22,756 --> 15:43:26,560
instead all right let me show a few

24949
15:43:24,756 --> 15:43:28,400
other examples before we culminate with

24950
15:43:26,560 --> 15:43:30,596
some more powerful techniques in pythons

24951
15:43:28,400 --> 15:43:32,596
thanks to libraries how about this

24952
15:43:30,596 --> 15:43:35,079
problem we encountered in week four

24953
15:43:32,596 --> 15:43:38,159
which was this let me code up a program

24954
15:43:35,080 --> 15:43:41,160
called again compare. Pi here but this

24955
15:43:38,160 --> 15:43:43,400
time compare to Strings and not numbers

24956
15:43:41,160 --> 15:43:46,240
so let me for instance do uh get one

24957
15:43:43,400 --> 15:43:47,636
string from the user called s just for

24958
15:43:46,240 --> 15:43:50,520
the sake of discussion let me get

24959
15:43:47,636 --> 15:43:51,680
another string from the user uh called T

24960
15:43:50,520 --> 15:43:54,795
so that we can actually do some

24961
15:43:51,680 --> 15:43:56,040
comparison here and if s equals equals T

24962
15:43:54,796 --> 15:43:58,520
let's go ahead and print out that

24963
15:43:56,040 --> 15:44:00,276
they're the same else let's go ahead and

24964
15:43:58,520 --> 15:44:01,880
print out that they're different so this

24965
15:44:00,276 --> 15:44:04,596
is very similar to what we did in week

24966
15:44:01,880 --> 15:44:06,956
four but in week four recall we did this

24967
15:44:04,596 --> 15:44:10,000
spef specifically because we had

24968
15:44:06,956 --> 15:44:12,360
encountered a problem for instance if I

24969
15:44:10,000 --> 15:44:16,000
run whoops

24970
15:44:12,360 --> 15:44:16,000
uh if I

24971
15:44:16,680 --> 15:44:24,436
run what's going on uh input

24972
15:44:21,320 --> 15:44:24,436
T come

24973
15:44:24,480 --> 15:44:30,756
on oh the okay wow okay long day all

24974
15:44:28,560 --> 15:44:33,399
right if I run the proper command python

24975
15:44:30,756 --> 15:44:36,200
of compare. py then let's go ahead and

24976
15:44:33,400 --> 15:44:38,840
type in something like cat in all

24977
15:44:36,200 --> 15:44:41,719
lowercase cats in all lowercase and

24978
15:44:38,840 --> 15:44:44,159
they're the same uh if though I do this

24979
15:44:41,720 --> 15:44:45,840
again with dog and dog they're the same

24980
15:44:44,160 --> 15:44:47,160
and of course cat and dog they're

24981
15:44:45,840 --> 15:44:50,115
different but does anyone recall from

24982
15:44:47,160 --> 15:44:53,520
two weeks ago when I typed in my name

24983
15:44:50,116 --> 15:44:56,520
twice both identically capitalized what

24984
15:44:53,520 --> 15:44:58,916
did it say that they were in

24985
15:44:56,520 --> 15:45:00,680
fact different and why was that like why

24986
15:44:58,916 --> 15:45:03,560
were two strings in C different even

24987
15:45:00,680 --> 15:45:06,320
though I typed literally the same

24988
15:45:03,560 --> 15:45:07,916
thing two different places in memory so

24989
15:45:06,320 --> 15:45:09,520
each string might look the same

24990
15:45:07,916 --> 15:45:11,795
aesthetically but of course was stored

24991
15:45:09,520 --> 15:45:13,956
elsewhere in memory and yet python

24992
15:45:11,796 --> 15:45:16,360
appears to be using the equality

24993
15:45:13,956 --> 15:45:18,000
operator equals equals like you and I

24994
15:45:16,360 --> 15:45:21,040
would expect as humans actually

24995
15:45:18,000 --> 15:45:23,360
comparing for us Char by Char in each of

24996
15:45:21,040 --> 15:45:25,116
those strings for actual equality so

24997
15:45:23,360 --> 15:45:27,080
this is a feature of python in that it's

24998
15:45:25,116 --> 15:45:28,720
just easier to do and why well this

24999
15:45:27,080 --> 15:45:30,436
derives from the reality that in Python

25000
15:45:28,720 --> 15:45:32,276
there are no pointers anymore there's no

25001
15:45:30,436 --> 15:45:34,080
underlying memory management it's not up

25002
15:45:32,276 --> 15:45:36,276
to you now to worry about those lower

25003
15:45:34,080 --> 15:45:38,636
level details the language itself takes

25004
15:45:36,276 --> 15:45:40,596
care of that for you and so similarly if

25005
15:45:38,636 --> 15:45:42,796
I do this and don't ask the user for two

25006
15:45:40,596 --> 15:45:44,880
strings but just one and then I do

25007
15:45:42,796 --> 15:45:47,080
something like this how about give

25008
15:45:44,880 --> 15:45:48,840
myself a second variable T set it equal

25009
15:45:47,080 --> 15:45:51,080
to s.

25010
15:45:48,840 --> 15:45:53,560
capitalize which note is not the same as

25011
15:45:51,080 --> 15:45:55,320
upper capitalize by Design per Python's

25012
15:45:53,560 --> 15:45:58,159
documentation will only capitalize the

25013
15:45:55,320 --> 15:46:00,680
first letter for you I can now print out

25014
15:45:58,160 --> 15:46:02,880
say two F strings here what the value of

25015
15:46:00,680 --> 15:46:05,240
s is and then let me print out with

25016
15:46:02,880 --> 15:46:07,840
another F string what the value of t is

25017
15:46:05,240 --> 15:46:10,756
and recall that in C this was a problem

25018
15:46:07,840 --> 15:46:13,520
because if you capitalize s and store it

25019
15:46:10,756 --> 15:46:16,436
in t we accidentally capitalized both s

25020
15:46:13,520 --> 15:46:18,755
and t but in this case in Python when I

25021
15:46:16,436 --> 15:46:22,596
actually run this and type in cat in all

25022
15:46:18,756 --> 15:46:25,160
lowercase the original s is unchanged

25023
15:46:22,596 --> 15:46:27,560
because when I use capitalize on line

25024
15:46:25,160 --> 15:46:30,916
three this is indeed capitalizing s but

25025
15:46:27,560 --> 15:46:33,079
it's returning a copy of the result it

25026
15:46:30,916 --> 15:46:35,320
cannot change S itself because again for

25027
15:46:33,080 --> 15:46:37,160
that technical term s is IM mutable

25028
15:46:35,320 --> 15:46:39,480
strings once they exist cannot be

25029
15:46:37,160 --> 15:46:42,680
changed themselves but you can return

25030
15:46:39,480 --> 15:46:44,560
copies and modified mutated copies of

25031
15:46:42,680 --> 15:46:46,040
those same strings so in short all of

25032
15:46:44,560 --> 15:46:48,399
those headaches we encountered in week

25033
15:46:46,040 --> 15:46:50,720
four are now solved really in the way

25034
15:46:48,400 --> 15:46:52,240
you might expect and here's another one

25035
15:46:50,720 --> 15:46:54,560
that we dwell on in week four with the

25036
15:46:52,240 --> 15:46:57,079
colored uh liquid in glasses let me code

25037
15:46:54,560 --> 15:47:00,320
up a program called swap. pi and in

25038
15:46:57,080 --> 15:47:02,956
swap. pi let me set x equal to 1 y equal

25039
15:47:00,320 --> 15:47:06,436
to 2 and then let me just print out an F

25040
15:47:02,956 --> 15:47:10,680
string here so how about X X is this

25041
15:47:06,436 --> 15:47:12,480
comma Y is that and then let me do that

25042
15:47:10,680 --> 15:47:14,756
twice just for the sake of demonstration

25043
15:47:12,480 --> 15:47:16,596
and in here recall that we had to create

25044
15:47:14,756 --> 15:47:18,796
a swap function but then we had to pass

25045
15:47:16,596 --> 15:47:21,240
it in by reference with the Amper sand

25046
15:47:18,796 --> 15:47:23,400
and like oh my God like that was kind of

25047
15:47:21,240 --> 15:47:26,240
peak complexity and see well if you want

25048
15:47:23,400 --> 15:47:29,956
to swap X and Y in Python you could do X

25049
15:47:26,240 --> 15:47:32,680
comma yal y comma X and now python of

25050
15:47:29,956 --> 15:47:35,276
swap whoops python of

25051
15:47:32,680 --> 15:47:37,240
swap. and there we go all of that's

25052
15:47:35,276 --> 15:47:39,680
handled for you sort of like a shell

25053
15:47:37,240 --> 15:47:43,159
game without even a temporary variable

25054
15:47:39,680 --> 15:47:45,680
in mind so what more can we do here how

25055
15:47:43,160 --> 15:47:47,560
about a few final building blocks and

25056
15:47:45,680 --> 15:47:49,200
these related now to files from that

25057
15:47:47,560 --> 15:47:51,795
week four suppose that I want to save

25058
15:47:49,200 --> 15:47:53,560
some names and numbers in like a a CSV

25059
15:47:51,796 --> 15:47:55,756
file comma separated values which is

25060
15:47:53,560 --> 15:47:59,276
like a very lightweight spreadsheet well

25061
15:47:55,756 --> 15:48:02,480
first let me create a uh phonebook CSV

25062
15:47:59,276 --> 15:48:04,795
file that just has name comma number as

25063
15:48:02,480 --> 15:48:06,200
like the first row there but after after

25064
15:48:04,796 --> 15:48:09,160
that I'm going to go ahead now and code

25065
15:48:06,200 --> 15:48:10,880
up a phonebook dopy program that

25066
15:48:09,160 --> 15:48:12,636
actually allows me to add things to this

25067
15:48:10,880 --> 15:48:14,680
phone book so let me split my screen

25068
15:48:12,636 --> 15:48:17,756
here so that we can see the old and the

25069
15:48:14,680 --> 15:48:20,596
new and down here in my code for phone

25070
15:48:17,756 --> 15:48:22,116
book. in this new and improved version

25071
15:48:20,596 --> 15:48:24,795
I'm going to actually import a whole

25072
15:48:22,116 --> 15:48:26,436
other Library this one called CSV and

25073
15:48:24,796 --> 15:48:28,080
here too especially for people in data

25074
15:48:26,436 --> 15:48:30,360
science and the like really like being

25075
15:48:28,080 --> 15:48:31,360
in a manipulate files and data that

25076
15:48:30,360 --> 15:48:33,880
might very well be stored in

25077
15:48:31,360 --> 15:48:35,436
spreadsheets or csvs comma separated

25078
15:48:33,880 --> 15:48:38,240
values which we we saw briefly in week

25079
15:48:35,436 --> 15:48:40,796
four in phonebook then it suffices to

25080
15:48:38,240 --> 15:48:42,756
just import CSV after reading the

25081
15:48:40,796 --> 15:48:45,040
documentation therefore because this is

25082
15:48:42,756 --> 15:48:47,560
going to give me functionality in code

25083
15:48:45,040 --> 15:48:50,040
related to CSV files so here's how I

25084
15:48:47,560 --> 15:48:52,320
might open a file in Python I literally

25085
15:48:50,040 --> 15:48:54,320
call open it's not fop now it's just

25086
15:48:52,320 --> 15:48:55,916
open and I open this file called

25087
15:48:54,320 --> 15:48:58,596
phonebook.com

25088
15:48:55,916 --> 15:49:00,079
going to open it in a pend mode not

25089
15:48:58,596 --> 15:49:02,596
right where it would change the whole

25090
15:49:00,080 --> 15:49:05,200
thing I want to append new line at a

25091
15:49:02,596 --> 15:49:07,040
time uh after this I want to get maybe

25092
15:49:05,200 --> 15:49:09,039
how about a name from the user so let's

25093
15:49:07,040 --> 15:49:11,320
prompt the user for some input for their

25094
15:49:09,040 --> 15:49:14,400
name and then let's prompt the user for

25095
15:49:11,320 --> 15:49:16,956
a number as well using input prompting

25096
15:49:14,400 --> 15:49:18,320
for number all right and now this is a

25097
15:49:16,956 --> 15:49:19,956
little cryptic and you'd only know this

25098
15:49:18,320 --> 15:49:23,276
from the documentation but if you want

25099
15:49:19,956 --> 15:49:25,400
to write line rows to a CSV file that

25100
15:49:23,276 --> 15:49:27,560
you can then view in Excel or the like

25101
15:49:25,400 --> 15:49:28,880
you can do this give me a variable

25102
15:49:27,560 --> 15:49:31,636
called writer but I could call it

25103
15:49:28,880 --> 15:49:34,560
anything I want let me use a CSV do

25104
15:49:31,636 --> 15:49:37,200
writer function that comes with this CSV

25105
15:49:34,560 --> 15:49:39,720
Library passing in the file this is like

25106
15:49:37,200 --> 15:49:41,636
saying hey python treat this open file

25107
15:49:39,720 --> 15:49:43,160
as a CSV file so that things are

25108
15:49:41,636 --> 15:49:45,756
separated with commas and nicely

25109
15:49:43,160 --> 15:49:48,000
formatted in rows and columns now I'm

25110
15:49:45,756 --> 15:49:50,240
going to do this use that writer to

25111
15:49:48,000 --> 15:49:52,520
write a row well what do I want to write

25112
15:49:50,240 --> 15:49:55,040
I want to write a short list namely the

25113
15:49:52,520 --> 15:49:56,956
current name and the current number to

25114
15:49:55,040 --> 15:49:59,080
that file but I don't want to use FR

25115
15:49:56,956 --> 15:50:01,080
printf and percent s and all of that

25116
15:49:59,080 --> 15:50:03,480
stuff that we might have had in the past

25117
15:50:01,080 --> 15:50:05,756
and now I just want to close the file

25118
15:50:03,480 --> 15:50:08,756
let me reopen my ter teral let me run

25119
15:50:05,756 --> 15:50:11,200
python of phone book. and let me type in

25120
15:50:08,756 --> 15:50:15,400
how about David and then +1

25121
15:50:11,200 --> 15:50:18,320
949468 2750 and hold crossing my fingers

25122
15:50:15,400 --> 15:50:20,636
watching the actual CSV at top left my

25123
15:50:18,320 --> 15:50:22,040
code has just added me to the file and

25124
15:50:20,636 --> 15:50:24,840
if I were to run it again for instance

25125
15:50:22,040 --> 15:50:27,240
with Carter in plus1 617495 1000

25126
15:50:24,840 --> 15:50:29,159
crossing my fingers again we've updated

25127
15:50:27,240 --> 15:50:30,916
the file and it turns out there's code

25128
15:50:29,160 --> 15:50:32,880
now via which I can even read that file

25129
15:50:30,916 --> 15:50:34,795
but I can first tighten this up just so

25130
15:50:32,880 --> 15:50:36,795
you've seen it it turns out into python

25131
15:50:34,796 --> 15:50:38,720
it's so common to open files and close

25132
15:50:36,796 --> 15:50:40,720
them you know humans make mistakes and

25133
15:50:38,720 --> 15:50:42,160
they often forget to close files which

25134
15:50:40,720 --> 15:50:44,560
might then end up using more memory than

25135
15:50:42,160 --> 15:50:45,956
you intend so you can alternatively do

25136
15:50:44,560 --> 15:50:48,560
this in Python so that you don't have to

25137
15:50:45,956 --> 15:50:52,159
worry about closing files you can use

25138
15:50:48,560 --> 15:50:54,399
this keyword instead you can say with

25139
15:50:52,160 --> 15:50:57,080
the opening of this file as a variable

25140
15:50:54,400 --> 15:50:59,436
called file do all of the following

25141
15:50:57,080 --> 15:51:01,680
underneath so I'm indenting most of my

25142
15:50:59,436 --> 15:51:03,880
code I'm using this new python specific

25143
15:51:01,680 --> 15:51:05,796
keyword called wi and this is just a

25144
15:51:03,880 --> 15:51:07,719
matter of saying with the following

25145
15:51:05,796 --> 15:51:09,436
opening of the file do those next four

25146
15:51:07,720 --> 15:51:11,520
lines of code and then automatically

25147
15:51:09,436 --> 15:51:13,436
close it for me at the end of the

25148
15:51:11,520 --> 15:51:15,636
indentation it's a minor optimization

25149
15:51:13,436 --> 15:51:18,680
but this again is sort of the pythonic

25150
15:51:15,636 --> 15:51:21,560
way to do things instead how else might

25151
15:51:18,680 --> 15:51:23,596
I do this too well it turns out that the

25152
15:51:21,560 --> 15:51:25,479
code I've written here on line n

25153
15:51:23,596 --> 15:51:27,636
especially is a little fragile right if

25154
15:51:25,480 --> 15:51:30,000
any human opens the spreadsheet the CSV

25155
15:51:27,636 --> 15:51:32,000
file in Excel Google spreadsheets Apple

25156
15:51:30,000 --> 15:51:33,400
numbers and maybe like moves the columns

25157
15:51:32,000 --> 15:51:34,796
around just because maybe they're

25158
15:51:33,400 --> 15:51:36,400
fussing they SA it and they don't

25159
15:51:34,796 --> 15:51:38,680
realize they've now changed my

25160
15:51:36,400 --> 15:51:40,756
assumptions I don't want to necessarily

25161
15:51:38,680 --> 15:51:42,320
write name and number always in that

25162
15:51:40,756 --> 15:51:44,240
order CU what if someone screws up and

25163
15:51:42,320 --> 15:51:46,560
flips those two columns by literally

25164
15:51:44,240 --> 15:51:48,360
dragging and dropping so it turns out

25165
15:51:46,560 --> 15:51:50,636
that instead of using a list here we can

25166
15:51:48,360 --> 15:51:53,756
use another feature of this Library as

25167
15:51:50,636 --> 15:51:55,159
follows instead of using a writer

25168
15:51:53,756 --> 15:51:57,080
there's something called a dictionary

25169
15:51:55,160 --> 15:51:59,400
writer or dict writer that takes the

25170
15:51:57,080 --> 15:52:02,160
same argument as input the file that's

25171
15:51:59,400 --> 15:52:03,840
opened but now the one difference here

25172
15:52:02,160 --> 15:52:04,720
is that you need to tell this dictionary

25173
15:52:03,840 --> 15:52:09,000
writer

25174
15:52:04,720 --> 15:52:11,956
that your field names are name and

25175
15:52:09,000 --> 15:52:13,636
number and let me close the CSV here

25176
15:52:11,956 --> 15:52:16,880
name and number are the names of the

25177
15:52:13,636 --> 15:52:18,916
fields The Columns in this CSV file and

25178
15:52:16,880 --> 15:52:20,276
when it comes time to write a new row

25179
15:52:18,916 --> 15:52:22,636
the syntax here is going to be a little

25180
15:52:20,276 --> 15:52:24,596
uglier but it's just a dictionary the

25181
15:52:22,636 --> 15:52:25,956
name I want to write to the dictionary

25182
15:52:24,596 --> 15:52:28,795
is going to be whatever name the human

25183
15:52:25,956 --> 15:52:30,680
typed in the number that I want to write

25184
15:52:28,796 --> 15:52:33,240
to the the CSV file is going to be

25185
15:52:30,680 --> 15:52:34,916
whatever the number the human typed in

25186
15:52:33,240 --> 15:52:37,636
but what's different next about this

25187
15:52:34,916 --> 15:52:39,755
code is by simply using a dictionary

25188
15:52:37,636 --> 15:52:42,400
writer here instead of the generic

25189
15:52:39,756 --> 15:52:46,000
writer now the columns can be in this

25190
15:52:42,400 --> 15:52:47,720
order or this order or any order and the

25191
15:52:46,000 --> 15:52:49,560
dictionary writer is going to figure out

25192
15:52:47,720 --> 15:52:51,840
based on the first line of text in that

25193
15:52:49,560 --> 15:52:53,479
CSV where to put name where to put

25194
15:52:51,840 --> 15:52:55,079
number so if you flip them no big deal

25195
15:52:53,480 --> 15:52:57,480
it's going to notice oh wait the columns

25196
15:52:55,080 --> 15:52:59,680
changed and it's going to insert the

25197
15:52:57,480 --> 15:53:01,080
columns correctly so just again another

25198
15:52:59,680 --> 15:53:02,160
more powerful feature that lets you

25199
15:53:01,080 --> 15:53:04,956
focus

25200
15:53:02,160 --> 15:53:07,916
on lets you focus on real work as

25201
15:53:04,956 --> 15:53:10,956
opposed to actually uh getting tied up

25202
15:53:07,916 --> 15:53:15,040
in the weeds of writing code like this

25203
15:53:10,956 --> 15:53:17,436
otherwise questions on this one as well

25204
15:53:15,040 --> 15:53:19,956
but what we will do now is come full

25205
15:53:17,436 --> 15:53:21,680
circle to some of the more uh

25206
15:53:19,956 --> 15:53:23,680
sophisticated examples with which we

25207
15:53:21,680 --> 15:53:26,596
began and I'm going to go back over to

25208
15:53:23,680 --> 15:53:28,756
my own Mac laptop here where I've got my

25209
15:53:26,596 --> 15:53:30,040
own terminal window up and running and I

25210
15:53:28,756 --> 15:53:31,840
was just going to introduce a couple of

25211
15:53:30,040 --> 15:53:34,480
final libraries that really speak to

25212
15:53:31,840 --> 15:53:36,159
just how powerful python can can be and

25213
15:53:34,480 --> 15:53:38,240
how quickly you can get up and running

25214
15:53:36,160 --> 15:53:39,840
to be fair can't necessarily do all of

25215
15:53:38,240 --> 15:53:41,276
these things in the cloud like in code

25216
15:53:39,840 --> 15:53:43,159
spaces because you need access to your

25217
15:53:41,276 --> 15:53:45,200
own speakers or microphone or the like

25218
15:53:43,160 --> 15:53:48,040
so that's why I'm doing it on my own Mac

25219
15:53:45,200 --> 15:53:49,479
here but let me go ahead and open up a

25220
15:53:48,040 --> 15:53:51,796
program called

25221
15:53:49,480 --> 15:53:53,480
speech. and I'm not using VSS code here

25222
15:53:51,796 --> 15:53:55,160
I'm using a program called VI that's

25223
15:53:53,480 --> 15:53:57,200
entirely terminal window based but it's

25224
15:53:55,160 --> 15:53:59,796
going to allow me for instance to import

25225
15:53:57,200 --> 15:54:01,596
the python text to speech version three

25226
15:53:59,796 --> 15:54:03,436
Library I'm going to give myself a

25227
15:54:01,596 --> 15:54:05,880
variable called engine that's going to

25228
15:54:03,436 --> 15:54:09,080
be set equal to the python text to

25229
15:54:05,880 --> 15:54:10,755
speech 3 libraries init method which is

25230
15:54:09,080 --> 15:54:12,916
just going to initialize this library

25231
15:54:10,756 --> 15:54:16,360
that relates to text to speech I'm going

25232
15:54:12,916 --> 15:54:19,360
to then use the engines say function to

25233
15:54:16,360 --> 15:54:21,320
say something like how about hello comma

25234
15:54:19,360 --> 15:54:24,680
world and then as my last line I'm going

25235
15:54:21,320 --> 15:54:27,360
to say engine. runand wait capitalized

25236
15:54:24,680 --> 15:54:29,636
as such to tell my program now to run

25237
15:54:27,360 --> 15:54:31,320
that speech and wait until it's done all

25238
15:54:29,636 --> 15:54:34,000
right I'm going to save this file I'm

25239
15:54:31,320 --> 15:54:35,956
going to run python of speech. py and

25240
15:54:34,000 --> 15:54:39,720
I'm going to cross my fingers as always

25241
15:54:35,956 --> 15:54:41,596
and hello world all right so now I have

25242
15:54:39,720 --> 15:54:43,796
a program that's actually synthesizing

25243
15:54:41,596 --> 15:54:45,560
speech using a library like this how can

25244
15:54:43,796 --> 15:54:47,436
I now modify this to be a little more

25245
15:54:45,560 --> 15:54:49,000
interesting well how about this let me

25246
15:54:47,436 --> 15:54:51,160
go ahead and prompt the user for their

25247
15:54:49,000 --> 15:54:53,400
name like we've done several times here

25248
15:54:51,160 --> 15:54:55,240
using Python's built-in name function

25249
15:54:53,400 --> 15:54:57,276
and now let me go ahead and use a format

25250
15:54:55,240 --> 15:54:59,840
string in conjunction with this Library

25251
15:54:57,276 --> 15:55:01,795
interpolating the value of name there

25252
15:54:59,840 --> 15:55:03,320
and at least if my name is somewhat

25253
15:55:01,796 --> 15:55:05,240
phonetically pronounceable let's go

25254
15:55:03,320 --> 15:55:09,840
ahead and run python ofp

25255
15:55:05,240 --> 15:55:11,276
speech. type in my name and hello David

25256
15:55:09,840 --> 15:55:12,560
okay it's a sort of weird choice of

25257
15:55:11,276 --> 15:55:14,436
inflection but we're starting to

25258
15:55:12,560 --> 15:55:16,680
synthesize voice not unlike Siri or

25259
15:55:14,436 --> 15:55:18,520
Google assistant or Alexa or the like

25260
15:55:16,680 --> 15:55:21,400
now we can maybe do something a little

25261
15:55:18,520 --> 15:55:24,320
more advanced too in addition to

25262
15:55:21,400 --> 15:55:27,000
synthesizing speech in this way we could

25263
15:55:24,320 --> 15:55:29,240
synthesize for instance uh an actual

25264
15:55:27,000 --> 15:55:30,840
graphic let me go ahead now and do

25265
15:55:29,240 --> 15:55:32,360
something like this let me create a

25266
15:55:30,840 --> 15:55:35,000
program called

25267
15:55:32,360 --> 15:55:37,000
qr. I'm going to go ahead and import a

25268
15:55:35,000 --> 15:55:38,520
library called OS which gives you access

25269
15:55:37,000 --> 15:55:40,240
to operating system related

25270
15:55:38,520 --> 15:55:41,840
functionality in Python I'm going to

25271
15:55:40,240 --> 15:55:43,159
import a library I've pre-installed

25272
15:55:41,840 --> 15:55:44,479
called QR code which is a

25273
15:55:43,160 --> 15:55:46,160
two-dimensional barcode that you might

25274
15:55:44,480 --> 15:55:48,040
have seen in the real world I'm going to

25275
15:55:46,160 --> 15:55:50,636
go ahead and create an image variable

25276
15:55:48,040 --> 15:55:52,720
using this QR code library's make

25277
15:55:50,636 --> 15:55:54,560
function which per its documentation

25278
15:55:52,720 --> 15:55:58,436
takes a URL like one of cs50's own

25279
15:55:54,560 --> 15:56:02,720
videos so we'll do this with YouTube uh

25280
15:55:58,436 --> 15:56:02,720
/xv f

25281
15:56:02,796 --> 15:56:08,636
zj5

25282
15:56:04,720 --> 15:56:11,200
p g g0 so hopefully that's the right

25283
15:56:08,636 --> 15:56:12,756
lecture and now we've got image. saave

25284
15:56:11,200 --> 15:56:15,560
which is going to allow me to create a

25285
15:56:12,756 --> 15:56:17,276
file called qr. ping think back now on

25286
15:56:15,560 --> 15:56:18,756
problem set 4 and how painful it was to

25287
15:56:17,276 --> 15:56:21,040
save files we'll just use the save

25288
15:56:18,756 --> 15:56:23,276
function now in Python and save this as

25289
15:56:21,040 --> 15:56:25,756
a ping file portable Network graphic and

25290
15:56:23,276 --> 15:56:28,276
then lastly let's just go ahead and open

25291
15:56:25,756 --> 15:56:29,680
uh the with the command open qr. ping on

25292
15:56:28,276 --> 15:56:31,520
my Mac so that hopefully this just

25293
15:56:29,680 --> 15:56:33,320
automatically opens all right I'm going

25294
15:56:31,520 --> 15:56:35,079
to go ahead and just double check my

25295
15:56:33,320 --> 15:56:37,276
syntax here so that I haven't made any

25296
15:56:35,080 --> 15:56:41,680
mistakes I'm going to go ahead and run

25297
15:56:37,276 --> 15:56:43,159
python of qr. enter that opens up this

25298
15:56:41,680 --> 15:56:46,040
let me go ahead and zoom in if you've

25299
15:56:43,160 --> 15:56:47,360
got a phone handy and you'd like to scan

25300
15:56:46,040 --> 15:56:51,080
this code

25301
15:56:47,360 --> 15:56:55,240
here whether in person or

25302
15:56:51,080 --> 15:57:00,116
online I apologize you won't appreciate

25303
15:56:55,240 --> 15:57:03,200
it amazing okay and lastly let me go

25304
15:57:00,116 --> 15:57:05,480
back into our speech example here uh

25305
15:57:03,200 --> 15:57:06,956
create a final ending here on our final

25306
15:57:05,480 --> 15:57:10,596
moments and how about we just say

25307
15:57:06,956 --> 15:57:12,000
something like this was cs50 like this

25308
15:57:10,596 --> 15:57:13,840
let's go ahead here fix my

25309
15:57:12,000 --> 15:57:15,560
capitalization just for tidiness get rid

25310
15:57:13,840 --> 15:57:18,000
of the name and now with our final

25311
15:57:15,560 --> 15:57:21,479
flourish and your introduction to python

25312
15:57:18,000 --> 15:57:22,700
equipped here we go this was cs50 all

25313
15:57:21,480 --> 15:57:27,660
right we'll see you next

25314
15:57:22,700 --> 15:57:27,659
[Applause]

25315
15:57:32,720 --> 15:57:35,720
time

25316
15:57:36,270 --> 15:57:43,030
[Music]

25317
15:58:05,410 --> 15:58:22,629
[Music]

25318
15:58:28,550 --> 15:58:31,619
[Music]

25319
15:58:37,900 --> 15:58:41,010
[Music]

25320
15:58:47,830 --> 15:59:01,200
[Music]

25321
15:59:15,276 --> 15:59:20,276
all right this is cs50 and this is

25322
15:59:18,200 --> 15:59:22,560
already week seven and this is the week

25323
15:59:20,276 --> 15:59:24,115
where we'll continue where we left off

25324
15:59:22,560 --> 15:59:25,636
with python introducing you to a bit

25325
15:59:24,116 --> 15:59:26,880
more syntax and capabilities of the

25326
15:59:25,636 --> 15:59:28,636
language so you can solve like

25327
15:59:26,880 --> 15:59:29,916
interesting problems but a lot of those

25328
15:59:28,636 --> 15:59:32,000
problems increasingly are now going to

25329
15:59:29,916 --> 15:59:34,360
involve data in some form after all if

25330
15:59:32,000 --> 15:59:37,636
you think of most any website or mobile

25331
15:59:34,360 --> 15:59:39,040
app uh or uh process nowadays that

25332
15:59:37,636 --> 15:59:40,720
involves solving problems it almost

25333
15:59:39,040 --> 15:59:42,680
always involves some amount of data and

25334
15:59:40,720 --> 15:59:43,756
often data at scale lots and lots of

25335
15:59:42,680 --> 15:59:45,756
data and so what we're going to see

25336
15:59:43,756 --> 15:59:47,796
first today is that yes you can use

25337
15:59:45,756 --> 15:59:49,560
Python to solve all the problems past

25338
15:59:47,796 --> 15:59:50,916
that we've seen and also some data

25339
15:59:49,560 --> 15:59:52,115
specific ones but sometimes it's just

25340
15:59:50,916 --> 15:59:53,360
going to be annoying it's going to be a

25341
15:59:52,116 --> 15:59:55,200
little painful it's just going to be

25342
15:59:53,360 --> 15:59:57,040
more work than you might like to just

25343
15:59:55,200 --> 15:59:59,276
get to some answer and so today we'll

25344
15:59:57,040 --> 16:00:01,880
too introduce you to a new language

25345
15:59:59,276 --> 16:00:04,400
called SQL structured query language and

25346
16:00:01,880 --> 16:00:06,880
this is a language that wur is actually

25347
16:00:04,400 --> 16:00:09,000
much smaller relatively speaking than C

25348
16:00:06,880 --> 16:00:11,159
and python it sort of does less but it

25349
16:00:09,000 --> 16:00:13,400
does it really well and it's a language

25350
16:00:11,160 --> 16:00:15,276
for querying databases storing data in

25351
16:00:13,400 --> 16:00:17,160
it updating it inserting it deleting it

25352
16:00:15,276 --> 16:00:18,880
and so much more and it's the kind of

25353
16:00:17,160 --> 16:00:21,040
Technology that's used nowadays in

25354
16:00:18,880 --> 16:00:23,159
indeed web apps and mobile apps data

25355
16:00:21,040 --> 16:00:24,956
science analytics and and so much more

25356
16:00:23,160 --> 16:00:27,240
it's really good at storing lots and

25357
16:00:24,956 --> 16:00:29,240
lots of data now this is yet another

25358
16:00:27,240 --> 16:00:31,240
language and believe it or not next week

25359
16:00:29,240 --> 16:00:33,840
we'll introduce you to three more

25360
16:00:31,240 --> 16:00:35,240
languages HTML and CSS which are not

25361
16:00:33,840 --> 16:00:37,000
technically programming languages

25362
16:00:35,240 --> 16:00:39,320
they're all about Aesthetics and markup

25363
16:00:37,000 --> 16:00:41,276
of information but also JavaScript which

25364
16:00:39,320 --> 16:00:43,916
is in fact a programming language but

25365
16:00:41,276 --> 16:00:45,840
the goals here in cs50 really are going

25366
16:00:43,916 --> 16:00:47,115
to be to empower you to program more

25367
16:00:45,840 --> 16:00:48,520
generally and indeed when you're out

25368
16:00:47,116 --> 16:00:50,240
there in the real world some years from

25369
16:00:48,520 --> 16:00:53,000
now invariably there's going to be some

25370
16:00:50,240 --> 16:00:54,916
new other popular language out there and

25371
16:00:53,000 --> 16:00:56,596
hopefully in this week and next week and

25372
16:00:54,916 --> 16:00:58,200
Beyond among the goals is not just to

25373
16:00:56,596 --> 16:01:00,040
teach you these languages specifically

25374
16:00:58,200 --> 16:01:01,680
but again like how to teach yourself the

25375
16:01:00,040 --> 16:01:04,320
future languages that we've not even

25376
16:01:01,680 --> 16:01:06,680
heard about just yet so with that said

25377
16:01:04,320 --> 16:01:09,360
let's begin with a survey of sorts if

25378
16:01:06,680 --> 16:01:13,596
you go to this URL on your phone or

25379
16:01:09,360 --> 16:01:15,840
laptop cs50. l/f favorites a very simple

25380
16:01:13,596 --> 16:01:18,000
Google form awaits you that's just going

25381
16:01:15,840 --> 16:01:21,880
to ask you a couple of multiple choice

25382
16:01:18,000 --> 16:01:25,840
questions so go to cs50.

25383
16:01:21,880 --> 16:01:27,636
l/f favorites and that should lead you

25384
16:01:25,840 --> 16:01:30,115
to a Google form that looks a little

25385
16:01:27,636 --> 16:01:31,840
something like this asking you first as

25386
16:01:30,116 --> 16:01:34,080
of now in week seven what is your

25387
16:01:31,840 --> 16:01:36,240
favorite language among those options

25388
16:01:34,080 --> 16:01:37,796
here and then further down one more

25389
16:01:36,240 --> 16:01:41,880
question if you think back on problem

25390
16:01:37,796 --> 16:01:45,240
sets 0 through six what was if any your

25391
16:01:41,880 --> 16:01:48,680
favorite uh problem set problem be it in

25392
16:01:45,240 --> 16:01:50,360
scratch or C or python so answer those

25393
16:01:48,680 --> 16:01:52,956
two

25394
16:01:50,360 --> 16:01:55,436
questions and in a moment I'll flip over

25395
16:01:52,956 --> 16:01:58,116
to my screen here where you'll see and

25396
16:01:55,436 --> 16:01:59,880
anyone who's used Google forms knows the

25397
16:01:58,116 --> 16:02:02,276
spreadsheet that's collecting now this

25398
16:01:59,880 --> 16:02:03,680
data um Microsoft Office 365 can do the

25399
16:02:02,276 --> 16:02:05,240
same if you use one of those forms and

25400
16:02:03,680 --> 16:02:08,040
what you see here now is a spreadsheet

25401
16:02:05,240 --> 16:02:10,079
in Google Sheets enumerating all of the

25402
16:02:08,040 --> 16:02:12,796
audience's questions language is in

25403
16:02:10,080 --> 16:02:14,560
column B problem is in column C and each

25404
16:02:12,796 --> 16:02:16,796
row represents one student who has

25405
16:02:14,560 --> 16:02:19,000
responded uh a few of you were super

25406
16:02:16,796 --> 16:02:22,080
eager for class today at 8:33 a.m.

25407
16:02:19,000 --> 16:02:23,756
eastern time 10:32 11:10 okay so now

25408
16:02:22,080 --> 16:02:25,956
we're getting into the actual class time

25409
16:02:23,756 --> 16:02:28,720
here and if I scroll down we'll probably

25410
16:02:25,956 --> 16:02:30,916
see few dozen couple hundred Answers by

25411
16:02:28,720 --> 16:02:32,480
now and yeah so we're getting a whole

25412
16:02:30,916 --> 16:02:33,636
lot of answers here and I'm seeing some

25413
16:02:32,480 --> 16:02:35,680
patterns emerge but but it's not

25414
16:02:33,636 --> 16:02:37,116
necessarily obvious to the human eyes

25415
16:02:35,680 --> 16:02:39,040
what those patterns are now of course

25416
16:02:37,116 --> 16:02:40,756
you can use Google spreadsheets you can

25417
16:02:39,040 --> 16:02:42,916
like highlight the data and you can

25418
16:02:40,756 --> 16:02:44,436
create charts magically out of it but

25419
16:02:42,916 --> 16:02:45,560
you can only do what Google lets you do

25420
16:02:44,436 --> 16:02:47,956
with the data and same thing for

25421
16:02:45,560 --> 16:02:49,115
Microsoft Excel or apple numbers but

25422
16:02:47,956 --> 16:02:51,116
wouldn't it be nice to just be able to

25423
16:02:49,116 --> 16:02:53,000
manipulate the raw data relatively

25424
16:02:51,116 --> 16:02:54,796
simple though it is to just answer

25425
16:02:53,000 --> 16:02:56,840
questions about the data Maybe long-term

25426
16:02:54,796 --> 16:02:58,636
create your own charts customize it just

25427
16:02:56,840 --> 16:03:00,840
the way you want rather than be holding

25428
16:02:58,636 --> 16:03:03,436
to like software that's off the shelf

25429
16:03:00,840 --> 16:03:06,039
like this well how could we go about

25430
16:03:03,436 --> 16:03:08,160
doing this well let me propose that we

25431
16:03:06,040 --> 16:03:10,520
treat this data set now as what we're

25432
16:03:08,160 --> 16:03:12,080
going to call for now a flat file

25433
16:03:10,520 --> 16:03:13,795
database we'll see today that there's

25434
16:03:12,080 --> 16:03:15,560
fancier databases but the simplest

25435
16:03:13,796 --> 16:03:18,360
database in the world is really just

25436
16:03:15,560 --> 16:03:20,596
like a CSV file and we saw that a couple

25437
16:03:18,360 --> 16:03:23,680
of weeks ago in C we wrote a bit of C

25438
16:03:20,596 --> 16:03:26,200
code that used F printf to write data to

25439
16:03:23,680 --> 16:03:27,916
a file using commas as the separator we

25440
16:03:26,200 --> 16:03:28,956
didn't really do much more with csvs at

25441
16:03:27,916 --> 16:03:31,399
the time though because it's really

25442
16:03:28,956 --> 16:03:33,520
annoying painful timec consuming not fun

25443
16:03:31,400 --> 16:03:35,480
to use see for something like that

25444
16:03:33,520 --> 16:03:36,956
because of malok and memory and all that

25445
16:03:35,480 --> 16:03:39,560
stuff but with python it's going to be

25446
16:03:36,956 --> 16:03:41,000
much easier and so anytime you have

25447
16:03:39,560 --> 16:03:42,720
access to some data set where you can

25448
16:03:41,000 --> 16:03:44,840
just like download it to your own Mac or

25449
16:03:42,720 --> 16:03:47,560
PC or your Cloud environment it's sort

25450
16:03:44,840 --> 16:03:49,560
of a candidate for now writing code to

25451
16:03:47,560 --> 16:03:51,795
do something with the data Maybe analyze

25452
16:03:49,560 --> 16:03:53,320
it right away if it's been human inputed

25453
16:03:51,796 --> 16:03:55,116
manually maybe you have to clean it up

25454
16:03:53,320 --> 16:03:56,756
by doing a lot of find and replace but

25455
16:03:55,116 --> 16:03:58,596
not with your keyboard but rather with

25456
16:03:56,756 --> 16:04:01,560
code and so let me go ahead and do this

25457
16:03:58,596 --> 16:04:03,320
let me go back to my uh Google sheet

25458
16:04:01,560 --> 16:04:06,435
here that has all of the data that's

25459
16:04:03,320 --> 16:04:10,000
come in now and let me go ahead and

25460
16:04:06,436 --> 16:04:13,040
download this via uh the file menu

25461
16:04:10,000 --> 16:04:14,880
here and let's see download and you can

25462
16:04:13,040 --> 16:04:16,400
see a whole bunch of options of most

25463
16:04:14,880 --> 16:04:18,240
formats might be familiar but today

25464
16:04:16,400 --> 16:04:20,596
we'll focus just on this one comma

25465
16:04:18,240 --> 16:04:22,115
separated values or CSV that's going to

25466
16:04:20,596 --> 16:04:23,795
go ahead and download it on my Mac here

25467
16:04:22,116 --> 16:04:25,360
into my own downloads folder and now I'm

25468
16:04:23,796 --> 16:04:27,360
going to go ahead and do this let me go

25469
16:04:25,360 --> 16:04:28,796
ahead and pull up VSS code in the cloud

25470
16:04:27,360 --> 16:04:30,320
here and if you've never done this

25471
16:04:28,796 --> 16:04:32,200
before there's a couple of ways to do it

25472
16:04:30,320 --> 16:04:33,956
but the simplest way to upload a file to

25473
16:04:32,200 --> 16:04:35,956
your codes space so to speak is just a

25474
16:04:33,956 --> 16:04:38,520
sort of drag and drop that's going to

25475
16:04:35,956 --> 16:04:40,756
magically upload it to the server there

25476
16:04:38,520 --> 16:04:42,680
and we'll see that one it has a very

25477
16:04:40,756 --> 16:04:43,720
long file name which I'm I'm actually

25478
16:04:42,680 --> 16:04:45,796
going to clean this up because that's

25479
16:04:43,720 --> 16:04:48,436
going to be very tedious to type in my

25480
16:04:45,796 --> 16:04:50,116
code so I could either rightclick of of

25481
16:04:48,436 --> 16:04:52,160
course up here but I'm going to use my

25482
16:04:50,116 --> 16:04:54,720
Linux command so let's move this file

25483
16:04:52,160 --> 16:04:55,796
called cs50 2022 something or other and

25484
16:04:54,720 --> 16:04:58,240
let's just name it more simply

25485
16:04:55,796 --> 16:05:01,480
favorites. CSV so all lowercase no

25486
16:04:58,240 --> 16:05:03,720
spaces sort of good Basics and let me go

25487
16:05:01,480 --> 16:05:06,680
ahead now and open up this file with

25488
16:05:03,720 --> 16:05:08,596
code favorites. CSV I'll close my file

25489
16:05:06,680 --> 16:05:10,916
explorer and we'll see exactly the same

25490
16:05:08,596 --> 16:05:12,756
data as before but not quite as pretty

25491
16:05:10,916 --> 16:05:14,956
as Google Sheets makes it be rather we

25492
16:05:12,756 --> 16:05:17,240
see here that I still have three columns

25493
16:05:14,956 --> 16:05:18,880
timestamp language problem and then all

25494
16:05:17,240 --> 16:05:21,079
of the values down below including the

25495
16:05:18,880 --> 16:05:22,956
timestamps and the answers therefore but

25496
16:05:21,080 --> 16:05:25,200
it doesn't have proper columns it just

25497
16:05:22,956 --> 16:05:27,636
has commas separating them now we could

25498
16:05:25,200 --> 16:05:31,039
very easily write python code just like

25499
16:05:27,636 --> 16:05:33,000
we wrote code to manipulate files like

25500
16:05:31,040 --> 16:05:34,436
this either to write or read but in

25501
16:05:33,000 --> 16:05:36,080
instead let's do something that's a

25502
16:05:34,436 --> 16:05:37,880
little more pleasant which is indeed in

25503
16:05:36,080 --> 16:05:40,956
the form of python so python actually

25504
16:05:37,880 --> 16:05:43,399
comes with Native support for csvs it

25505
16:05:40,956 --> 16:05:44,916
has indeed a package called CSV that

25506
16:05:43,400 --> 16:05:46,276
just lets you read and write and do a

25507
16:05:44,916 --> 16:05:48,320
whole bunch of useful stuff when it

25508
16:05:46,276 --> 16:05:50,040
comes to CSV files so let's go ahead and

25509
16:05:48,320 --> 16:05:52,880
do something with this file let me go

25510
16:05:50,040 --> 16:05:55,000
back here to VSS code I'm going to close

25511
16:05:52,880 --> 16:05:56,956
favorites. CSV for now but just remember

25512
16:05:55,000 --> 16:05:59,160
in your mind that timestamp was the

25513
16:05:56,956 --> 16:06:01,240
first column language was the second

25514
16:05:59,160 --> 16:06:02,680
column and problem was the third and

25515
16:06:01,240 --> 16:06:04,479
notice because we're using commas they

25516
16:06:02,680 --> 16:06:06,080
don't again line up perfectly but that's

25517
16:06:04,480 --> 16:06:08,116
not a problem there are two commas in

25518
16:06:06,080 --> 16:06:09,840
every line presumably and I'm going to

25519
16:06:08,116 --> 16:06:12,636
go ahead and now create a file called

25520
16:06:09,840 --> 16:06:13,795
how about uh favorites. piy so that I

25521
16:06:12,636 --> 16:06:15,159
can start writing some code to

25522
16:06:13,796 --> 16:06:16,636
manipulate this data and let's do

25523
16:06:15,160 --> 16:06:18,880
something simple let's just write a

25524
16:06:16,636 --> 16:06:21,636
simple program in Python that opens this

25525
16:06:18,880 --> 16:06:23,240
file reads it and prints something out

25526
16:06:21,636 --> 16:06:24,276
just as like a safety check that I know

25527
16:06:23,240 --> 16:06:26,520
what I'm doing even though it's not

25528
16:06:24,276 --> 16:06:29,560
going to be useful so in Python if you

25529
16:06:26,520 --> 16:06:31,520
want CSV support you import CSV and that

25530
16:06:29,560 --> 16:06:33,756
gives you access to all the magical

25531
16:06:31,520 --> 16:06:36,115
capabilities thereof let me now go ahead

25532
16:06:33,756 --> 16:06:38,916
and use this technique to open a file in

25533
16:06:36,116 --> 16:06:40,720
Python which is similar in C but with

25534
16:06:38,916 --> 16:06:43,240
python I'm going to do this the keyword

25535
16:06:40,720 --> 16:06:45,320
with I'm going to open a file called

25536
16:06:43,240 --> 16:06:47,680
favorites. CSV which was the shorter

25537
16:06:45,320 --> 16:06:49,720
name I gave it this is optional but just

25538
16:06:47,680 --> 16:06:52,436
for explicitness I'm going to open it in

25539
16:06:49,720 --> 16:06:54,320
read mode explicitly just like f open

25540
16:06:52,436 --> 16:06:56,200
took a second argument as well and I'm

25541
16:06:54,320 --> 16:06:57,520
going to name this file once open quite

25542
16:06:56,200 --> 16:07:00,636
simply file though I could call it

25543
16:06:57,520 --> 16:07:02,916
anything I want and now it's just an

25544
16:07:00,636 --> 16:07:05,400
open file so far as python knows at this

25545
16:07:02,916 --> 16:07:07,840
moment it's just text or better yet it's

25546
16:07:05,400 --> 16:07:10,680
just zeros and ones if you want this

25547
16:07:07,840 --> 16:07:12,115
python package called CSV to actually do

25548
16:07:10,680 --> 16:07:14,956
something useful with it you have to

25549
16:07:12,116 --> 16:07:16,520
load this file now into the library and

25550
16:07:14,956 --> 16:07:18,520
the simplest way to do this is to give

25551
16:07:16,520 --> 16:07:20,079
myself like a variable called reader

25552
16:07:18,520 --> 16:07:22,000
because I want to read this file though

25553
16:07:20,080 --> 16:07:23,360
this too I could call anything else I'm

25554
16:07:22,000 --> 16:07:26,436
going to then set that equal to the

25555
16:07:23,360 --> 16:07:28,720
return value of a function called CSV do

25556
16:07:26,436 --> 16:07:31,276
reader and I pass to that per the

25557
16:07:28,720 --> 16:07:32,880
documentation the open file so step one

25558
16:07:31,276 --> 16:07:35,240
I open the file and this just gives me

25559
16:07:32,880 --> 16:07:38,360
me access to the bytes there in step two

25560
16:07:35,240 --> 16:07:40,756
now with csvreader tells the python

25561
16:07:38,360 --> 16:07:42,756
package called CSV to do something

25562
16:07:40,756 --> 16:07:45,520
useful with it and start analyzing the

25563
16:07:42,756 --> 16:07:47,560
commas and uh allow me to uh parse it

25564
16:07:45,520 --> 16:07:50,636
further so let's go ahead and do this

25565
16:07:47,560 --> 16:07:52,916
let me go ahead now and within this Loop

25566
16:07:50,636 --> 16:07:57,560
let's say this with sorry within this

25567
16:07:52,916 --> 16:08:01,276
open file let's do this for every row if

25568
16:07:57,560 --> 16:08:03,756
you will or line in the file AKA reader

25569
16:08:01,276 --> 16:08:07,880
let's go ahead and print out now just

25570
16:08:03,756 --> 16:08:09,240
how about Row Bracket one now what's

25571
16:08:07,880 --> 16:08:10,956
going on here well it turns out if you

25572
16:08:09,240 --> 16:08:13,200
read the documentation for the CSV

25573
16:08:10,956 --> 16:08:16,159
reader function what it hands you back

25574
16:08:13,200 --> 16:08:18,596
is essentially this special object so to

25575
16:08:16,160 --> 16:08:20,720
speak that allows you to treat it as

25576
16:08:18,596 --> 16:08:23,560
though it's just a really big list of

25577
16:08:20,720 --> 16:08:26,636
lines from the file AKA reader so by

25578
16:08:23,560 --> 16:08:29,240
saying for Row in reader this is a way

25579
16:08:26,636 --> 16:08:31,200
more succinct way of saying uh give me

25580
16:08:29,240 --> 16:08:32,840
the first line in the file plus plus

25581
16:08:31,200 --> 16:08:33,956
give me the second line in the file Plus

25582
16:08:32,840 --> 16:08:36,000
plus and so forth that we would have

25583
16:08:33,956 --> 16:08:38,040
done what much more mechanically in C

25584
16:08:36,000 --> 16:08:40,520
this is just much more pythonic and

25585
16:08:38,040 --> 16:08:43,400
English friendly if you will so in every

25586
16:08:40,520 --> 16:08:45,240
iteration of this Loop row is going to

25587
16:08:43,400 --> 16:08:47,360
contain all of the data from the current

25588
16:08:45,240 --> 16:08:49,560
row but better yet what the reader

25589
16:08:47,360 --> 16:08:52,840
function does for me is it hands me each

25590
16:08:49,560 --> 16:08:55,240
row not just as a big string or Stir of

25591
16:08:52,840 --> 16:08:58,000
text in Python it gives me what

25592
16:08:55,240 --> 16:09:01,795
apparently based on the syntax on line

25593
16:08:58,000 --> 16:09:03,840
six any Instinct yeah it's giving me

25594
16:09:01,796 --> 16:09:05,320
back indeed a list and I'm I presume the

25595
16:09:03,840 --> 16:09:06,795
visual clue for you was the fact that

25596
16:09:05,320 --> 16:09:09,520
we're using square brackets here and

25597
16:09:06,796 --> 16:09:11,596
indeed Row Bracket one is going to be

25598
16:09:09,520 --> 16:09:13,956
not the first but the second element in

25599
16:09:11,596 --> 16:09:16,079
that list and so just take a guess when

25600
16:09:13,956 --> 16:09:18,200
I run this code in a moment What's going

25601
16:09:16,080 --> 16:09:21,080
to get printed the timestamp the

25602
16:09:18,200 --> 16:09:21,079
language or the

25603
16:09:21,160 --> 16:09:27,276
problem the yeah oh the language the

25604
16:09:25,116 --> 16:09:29,636
language because it's the second column

25605
16:09:27,276 --> 16:09:31,200
that is in the file delimited by those

25606
16:09:29,636 --> 16:09:32,680
those commas so let me go ahead and do

25607
16:09:31,200 --> 16:09:35,079
this let me clear my terminal down here

25608
16:09:32,680 --> 16:09:37,320
here let me run python of favorites.i

25609
16:09:35,080 --> 16:09:38,916
and enter and there's everything it was

25610
16:09:37,320 --> 16:09:41,080
super fast but there's a really long

25611
16:09:38,916 --> 16:09:43,276
list here and in fact if I increase the

25612
16:09:41,080 --> 16:09:45,400
size of my terminal and start scrolling

25613
16:09:43,276 --> 16:09:47,115
up you'll just see all of the raw data

25614
16:09:45,400 --> 16:09:48,956
now this isn't that useful yet I could

25615
16:09:47,116 --> 16:09:51,880
have just glanced at the CSV but clearly

25616
16:09:48,956 --> 16:09:53,840
now I have the ability to open the file

25617
16:09:51,880 --> 16:09:55,719
parse it so to speak that is break it up

25618
16:09:53,840 --> 16:09:59,000
into its constituent parts and do

25619
16:09:55,720 --> 16:10:00,480
something with specific Parts therein

25620
16:09:59,000 --> 16:10:02,400
all right so if I want to do this a

25621
16:10:00,480 --> 16:10:04,240
little more pleasantly though let me at

25622
16:10:02,400 --> 16:10:05,436
least least make this semantically a

25623
16:10:04,240 --> 16:10:07,560
little cleaner and you know what just

25624
16:10:05,436 --> 16:10:10,240
for clarity let me just give myself a

25625
16:10:07,560 --> 16:10:13,720
variable it's not strictly necessary but

25626
16:10:10,240 --> 16:10:15,880
I know that this is the favorite uh for

25627
16:10:13,720 --> 16:10:18,360
instance uh language so let's just call

25628
16:10:15,880 --> 16:10:20,719
it favorite set it equal to Row Bracket

25629
16:10:18,360 --> 16:10:22,480
1 and now just to be more explicit in my

25630
16:10:20,720 --> 16:10:24,200
code even though again we don't need the

25631
16:10:22,480 --> 16:10:25,400
variable per se this codee's of course

25632
16:10:24,200 --> 16:10:26,880
going to do the same thing it's just

25633
16:10:25,400 --> 16:10:30,000
using an additional variable called

25634
16:10:26,880 --> 16:10:31,795
favorite if I go down here scroll up run

25635
16:10:30,000 --> 16:10:33,840
the program again I get back the exact

25636
16:10:31,796 --> 16:10:36,200
same data but this is a stepping stone

25637
16:10:33,840 --> 16:10:38,520
to something that's even more powerful

25638
16:10:36,200 --> 16:10:40,719
about python support for CSV files is

25639
16:10:38,520 --> 16:10:45,200
that you don't have to just treat the

25640
16:10:40,720 --> 16:10:47,680
return value as a list with zero and one

25641
16:10:45,200 --> 16:10:50,399
and two so just thinking intuitively

25642
16:10:47,680 --> 16:10:52,636
here why is this maybe not the best

25643
16:10:50,400 --> 16:10:55,320
design to hand you the programmer back

25644
16:10:52,636 --> 16:10:57,040
the data in a list that's numerically

25645
16:10:55,320 --> 16:11:02,159
indexed with

25646
16:10:57,040 --> 16:11:04,400
012 it clearly works but critique this

25647
16:11:02,160 --> 16:11:06,636
what could go wrong what's a little

25648
16:11:04,400 --> 16:11:09,240
poorly designed yeah you have to always

25649
16:11:06,636 --> 16:11:12,240
remember what

25650
16:11:09,240 --> 16:11:12,240
are

25651
16:11:12,720 --> 16:11:18,276
yeah exactly so if yeah so it's up to

25652
16:11:15,916 --> 16:11:20,755
you to repeat it's up to you to remember

25653
16:11:18,276 --> 16:11:22,400
like what column the data is actually in

25654
16:11:20,756 --> 16:11:23,636
and you know God forbid you're you're

25655
16:11:22,400 --> 16:11:25,360
collaborating with someone else on the

25656
16:11:23,636 --> 16:11:26,796
spreadsheet you know you've if you've

25657
16:11:25,360 --> 16:11:28,000
used Google spreadsheets you can move

25658
16:11:26,796 --> 16:11:29,560
columns around maybe just because you

25659
16:11:28,000 --> 16:11:31,200
want to visually reorganize things and

25660
16:11:29,560 --> 16:11:33,115
if you do this and then someone else

25661
16:11:31,200 --> 16:11:34,596
downloads that same data all of their

25662
16:11:33,116 --> 16:11:36,796
code is going to break so that's just

25663
16:11:34,596 --> 16:11:38,435
really bad design it's fragile just

25664
16:11:36,796 --> 16:11:40,680
because it's you're sort of on the honor

25665
16:11:38,436 --> 16:11:42,116
System that one means the data that you

25666
16:11:40,680 --> 16:11:44,520
want so wouldn't it be nice if we could

25667
16:11:42,116 --> 16:11:48,116
be a little more explicit well recall

25668
16:11:44,520 --> 16:11:50,956
that the very first line in this file is

25669
16:11:48,116 --> 16:11:52,560
actually this and I paused the output

25670
16:11:50,956 --> 16:11:55,240
this time so that we can see more

25671
16:11:52,560 --> 16:11:56,720
optionally I just reran favorites St pi

25672
16:11:55,240 --> 16:11:58,756
and notice one of these things is not

25673
16:11:56,720 --> 16:12:00,756
like the other every output was either

25674
16:11:58,756 --> 16:12:02,560
scratch or C or python except for this

25675
16:12:00,756 --> 16:12:05,040
first one why am I seeing the word

25676
16:12:02,560 --> 16:12:05,040
language

25677
16:12:05,116 --> 16:12:10,520
here where did language come from you

25678
16:12:08,360 --> 16:12:13,400
didn't have the ability to manual input

25679
16:12:10,520 --> 16:12:16,079
oh no where did it come from

25680
16:12:13,400 --> 16:12:17,680
yeah yeah the header the very first row

25681
16:12:16,080 --> 16:12:19,680
in the file which by human convention

25682
16:12:17,680 --> 16:12:21,400
generally just defines what the columns

25683
16:12:19,680 --> 16:12:23,796
represent so that there's some human

25684
16:12:21,400 --> 16:12:26,080
useful information there now that's not

25685
16:12:23,796 --> 16:12:27,880
really intended to be part of my output

25686
16:12:26,080 --> 16:12:30,200
at the moment so there is a way to skip

25687
16:12:27,880 --> 16:12:31,636
this if you want to skip the first row

25688
16:12:30,200 --> 16:12:33,596
you can actually do something like this

25689
16:12:31,636 --> 16:12:35,756
you can say next row and that will just

25690
16:12:33,596 --> 16:12:38,115
ignore that row so that I'm starting

25691
16:12:35,756 --> 16:12:40,116
really with the every row thereafter but

25692
16:12:38,116 --> 16:12:41,680
there's a better way to handle this than

25693
16:12:40,116 --> 16:12:43,680
that that will get rid of the row in the

25694
16:12:41,680 --> 16:12:45,636
output but let me go ahead and use a

25695
16:12:43,680 --> 16:12:46,680
different feature of the CSV package

25696
16:12:45,636 --> 16:12:48,360
that's just going to make this a little

25697
16:12:46,680 --> 16:12:50,596
cleaner Al together so let me clear my

25698
16:12:48,360 --> 16:12:52,796
terminal window here let me undo this

25699
16:12:50,596 --> 16:12:55,360
next thing that I just added and instead

25700
16:12:52,796 --> 16:12:57,916
of using a reader let me go ahead and

25701
16:12:55,360 --> 16:13:01,520
use a dictionary reader abbreviated dict

25702
16:12:57,916 --> 16:13:04,240
reader that's going to now return me the

25703
16:13:01,520 --> 16:13:06,115
equivalent of all of the rows one at a

25704
16:13:04,240 --> 16:13:09,320
time so I can still call it Reader just

25705
16:13:06,116 --> 16:13:11,320
as before but as the name implies what

25706
16:13:09,320 --> 16:13:13,480
this reader is going to return is not a

25707
16:13:11,320 --> 16:13:15,596
list after list after list but a

25708
16:13:13,480 --> 16:13:16,596
dictionary a dictionary a dictionary and

25709
16:13:15,596 --> 16:13:19,200
remember a dictionary is just a

25710
16:13:16,596 --> 16:13:20,880
collection of key value pairs so what

25711
16:13:19,200 --> 16:13:23,276
does that mean what are the keys what

25712
16:13:20,880 --> 16:13:25,840
are the values well now that I'm using a

25713
16:13:23,276 --> 16:13:27,840
dictionary reader I can actually do this

25714
16:13:25,840 --> 16:13:30,039
instead of sort of on the honor System

25715
16:13:27,840 --> 16:13:32,399
remembering that I want column one I can

25716
16:13:30,040 --> 16:13:34,520
treat row now not as a list but as a

25717
16:13:32,400 --> 16:13:36,880
dictionary and that means I can go in

25718
16:13:34,520 --> 16:13:39,115
here and say quote unquote language and

25719
16:13:36,880 --> 16:13:41,200
we saw that back in week six python

25720
16:13:39,116 --> 16:13:43,320
allows you to index into dictionaries

25721
16:13:41,200 --> 16:13:45,956
using square bracket notation in strings

25722
16:13:43,320 --> 16:13:48,796
or stirs on the inside just like lists

25723
16:13:45,956 --> 16:13:50,795
allow for numbers but this now I think

25724
16:13:48,796 --> 16:13:53,840
is going to be a little more robust if I

25725
16:13:50,796 --> 16:13:55,796
run this again python of favorites. py

25726
16:13:53,840 --> 16:13:57,755
all of that worked out fine and let me

25727
16:13:55,796 --> 16:14:00,200
pause the output to by using this

25728
16:13:57,756 --> 16:14:03,436
program called more now I don't even see

25729
16:14:00,200 --> 16:14:05,636
the header so now whoever works it uh

25730
16:14:03,436 --> 16:14:07,436
with python wrote the code for this

25731
16:14:05,636 --> 16:14:09,436
package to just analyze that first line

25732
16:14:07,436 --> 16:14:12,116
of code use the header as you just

25733
16:14:09,436 --> 16:14:13,756
called it as the keys and then every

25734
16:14:12,116 --> 16:14:15,796
time you iterate through this Loop it

25735
16:14:13,756 --> 16:14:19,160
updates the values the values the values

25736
16:14:15,796 --> 16:14:21,796
but the keys stay the same any questions

25737
16:14:19,160 --> 16:14:24,080
then on this

25738
16:14:21,796 --> 16:14:27,596
technique spiced to say this would be

25739
16:14:24,080 --> 16:14:27,596
painful in C

25740
16:14:31,200 --> 16:14:34,200
yes

25741
16:14:35,200 --> 16:14:39,435
Associated exactly so the keys are

25742
16:14:37,636 --> 16:14:42,520
always going to be quote unquote

25743
16:14:39,436 --> 16:14:45,040
timestamp uh Pro language and problem

25744
16:14:42,520 --> 16:14:46,840
but on each iteration of this Loop here

25745
16:14:45,040 --> 16:14:48,720
uh the row is going to contain a

25746
16:14:46,840 --> 16:14:50,039
different row of values different row

25747
16:14:48,720 --> 16:14:52,200
values different row values so you're

25748
16:14:50,040 --> 16:14:54,080
going to get back one dictionary for

25749
16:14:52,200 --> 16:14:56,000
every student who submitted the Google

25750
16:14:54,080 --> 16:14:58,560
form if you will while iterating through

25751
16:14:56,000 --> 16:15:01,200
it there all right so once we have this

25752
16:14:58,560 --> 16:15:02,880
ability here why don't we go ahead and

25753
16:15:01,200 --> 16:15:05,200
transition

25754
16:15:02,880 --> 16:15:07,079
into how about not just using that

25755
16:15:05,200 --> 16:15:08,916
dictionary reader which makes the code a

25756
16:15:07,080 --> 16:15:10,956
little more robust because now if you

25757
16:15:08,916 --> 16:15:13,000
move the columns around no big deal it

25758
16:15:10,956 --> 16:15:15,400
doesn't matter if the numeric indices

25759
16:15:13,000 --> 16:15:17,400
change you can still use those keywords

25760
16:15:15,400 --> 16:15:18,756
instead well let's actually analyze the

25761
16:15:17,400 --> 16:15:21,000
data now I'm just spitting it out which

25762
16:15:18,756 --> 16:15:23,040
is not solving any problems for anyone

25763
16:15:21,000 --> 16:15:25,276
so let's go ahead and and count the

25764
16:15:23,040 --> 16:15:28,040
popularity of scratch C and Python and

25765
16:15:25,276 --> 16:15:29,795
see what everyone's uh been thinking

25766
16:15:28,040 --> 16:15:32,520
here all right so how might I do this

25767
16:15:29,796 --> 16:15:34,720
well let me go ahead and do this up here

25768
16:15:32,520 --> 16:15:36,479
before I start iterating let me give

25769
16:15:34,720 --> 16:15:38,636
myself let's say three variables and to

25770
16:15:36,480 --> 16:15:41,000
keep things simple I'll say one variable

25771
16:15:38,636 --> 16:15:44,000
called scratch set it equal to zero for

25772
16:15:41,000 --> 16:15:46,596
zero students so far C is going to equal

25773
16:15:44,000 --> 16:15:48,400
zero and python is going to equal zero

25774
16:15:46,596 --> 16:15:49,636
there's a slightly prettier way of doing

25775
16:15:48,400 --> 16:15:51,080
this just because this is like three

25776
16:15:49,636 --> 16:15:54,400
lines of code to do something very

25777
16:15:51,080 --> 16:15:58,240
simple you could alternatively in Python

25778
16:15:54,400 --> 16:16:02,320
but not C do scratch comma C comma

25779
16:15:58,240 --> 16:16:03,840
python equals 0 comma 0 so kind of

25780
16:16:02,320 --> 16:16:05,520
slightly more elegant just to fit it all

25781
16:16:03,840 --> 16:16:07,359
into one line but now let's just do

25782
16:16:05,520 --> 16:16:08,956
something more interesting on line seven

25783
16:16:07,360 --> 16:16:11,276
I'm still going to figure out what the

25784
16:16:08,956 --> 16:16:14,276
current favorite language is and now I'm

25785
16:16:11,276 --> 16:16:17,320
just going to do some conditional checks

25786
16:16:14,276 --> 16:16:20,159
How about if that favorite equals equals

25787
16:16:17,320 --> 16:16:22,916
quote unquote scratch let's go ahead and

25788
16:16:20,160 --> 16:16:25,116
increment Scratch by one we can't do

25789
16:16:22,916 --> 16:16:28,276
plus plus in Python but we can do plus

25790
16:16:25,116 --> 16:16:32,636
equals 1 how about L if favorite equals

25791
16:16:28,276 --> 16:16:35,276
equals c then let's do C+ equal 1 L and

25792
16:16:32,636 --> 16:16:37,240
not we could do else this is actually a

25793
16:16:35,276 --> 16:16:43,916
good design question should I do else

25794
16:16:37,240 --> 16:16:43,916
should I do L if any instincts here

25795
16:16:48,320 --> 16:16:52,360
yeah yeah really good instincts just in

25796
16:16:50,840 --> 16:16:53,880
case someone goes and adds another

25797
16:16:52,360 --> 16:16:54,840
language to the form next week because

25798
16:16:53,880 --> 16:16:56,115
we're obviously going to introduce

25799
16:16:54,840 --> 16:16:57,956
another language today you don't want

25800
16:16:56,116 --> 16:17:00,240
your code to now artificially inflate

25801
16:16:57,956 --> 16:17:02,400
the scores for python just because

25802
16:17:00,240 --> 16:17:04,276
you're conflating multiple languages

25803
16:17:02,400 --> 16:17:06,200
together so the more defensive sort of

25804
16:17:04,276 --> 16:17:09,520
better way to write this code I agree

25805
16:17:06,200 --> 16:17:11,435
would be L if favorite equals equals

25806
16:17:09,520 --> 16:17:14,000
python then let's go ahead and increment

25807
16:17:11,436 --> 16:17:15,480
python plus equals 1 and if there's a

25808
16:17:14,000 --> 16:17:16,756
new language next week we're obviously

25809
16:17:15,480 --> 16:17:18,320
going to have to update the code but at

25810
16:17:16,756 --> 16:17:19,796
least we're not miscounting we're just

25811
16:17:18,320 --> 16:17:21,840
missing the new language so I think

25812
16:17:19,796 --> 16:17:23,480
that's slightly more robust all right

25813
16:17:21,840 --> 16:17:25,159
now at the very bottom of this program

25814
16:17:23,480 --> 16:17:27,756
and outside of the loop when I'm all

25815
16:17:25,160 --> 16:17:30,320
done counting let me go ahead and print

25816
16:17:27,756 --> 16:17:32,436
out using some f strings how about the

25817
16:17:30,320 --> 16:17:35,200
total number of people who uh whose

25818
16:17:32,436 --> 16:17:37,916
favorite is scratch so this is just uh

25819
16:17:35,200 --> 16:17:40,596
week six F string syntax let me go ahead

25820
16:17:37,916 --> 16:17:42,719
and print out another F string for C and

25821
16:17:40,596 --> 16:17:44,479
I'm of course putting the variables in

25822
16:17:42,720 --> 16:17:46,956
curly braces all lowercase but the

25823
16:17:44,480 --> 16:17:49,680
English words I'm doing capitalization

25824
16:17:46,956 --> 16:17:51,956
for Let's do an final one with f uh

25825
16:17:49,680 --> 16:17:54,436
python colon and then in curly braces

25826
16:17:51,956 --> 16:17:56,000
python close quote and I think I'm done

25827
16:17:54,436 --> 16:17:58,080
so let me just hide my terminal for a

25828
16:17:56,000 --> 16:18:01,636
second here's the total program same

25829
16:17:58,080 --> 16:18:04,000
stuff as before open favorites. CSV open

25830
16:18:01,636 --> 16:18:05,880
it further with the dictionary reader to

25831
16:18:04,000 --> 16:18:07,720
do that processing for us initialize

25832
16:18:05,880 --> 16:18:10,000
three variables to zero just so we have

25833
16:18:07,720 --> 16:18:12,040
something to count with and then iterate

25834
16:18:10,000 --> 16:18:13,880
over the file row by row and this is

25835
16:18:12,040 --> 16:18:15,636
just some sort of week one style

25836
16:18:13,880 --> 16:18:18,079
conditional logic albe it in Python

25837
16:18:15,636 --> 16:18:20,276
counting things all right so how can we

25838
16:18:18,080 --> 16:18:23,596
now execute this let me go back to my

25839
16:18:20,276 --> 16:18:26,560
terminal python of favorites.i and here

25840
16:18:23,596 --> 16:18:28,840
we go uh as of today everyone who's

25841
16:18:26,560 --> 16:18:32,795
reporting in live via the Google form

25842
16:18:28,840 --> 16:18:34,679
their favorite languages are

25843
16:18:32,796 --> 16:18:36,360
interesting that's pretty interesting

25844
16:18:34,680 --> 16:18:38,080
too after just one week of python no

25845
16:18:36,360 --> 16:18:39,796
less so but scratch is a healthy

25846
16:18:38,080 --> 16:18:42,400
Contender there a lot of C so a pretty

25847
16:18:39,796 --> 16:18:45,596
good mix here so is this going to be the

25848
16:18:42,400 --> 16:18:46,916
best way to write this program long term

25849
16:18:45,596 --> 16:18:48,596
well as you noted if there's a new

25850
16:18:46,916 --> 16:18:50,880
language next week this week we're going

25851
16:18:48,596 --> 16:18:52,560
to have to constantly update this and

25852
16:18:50,880 --> 16:18:54,159
here's where you should let your mind

25853
16:18:52,560 --> 16:18:56,435
wander to like the future like if we

25854
16:18:54,160 --> 16:18:59,916
have a fourth language fifth language

25855
16:18:56,436 --> 16:19:02,040
6th sth eth which aspect here might kind

25856
16:18:59,916 --> 16:19:04,520
of have some code smell to it like this

25857
16:19:02,040 --> 16:19:05,880
probably isn't the best design to set us

25858
16:19:04,520 --> 16:19:09,956
up for the

25859
16:19:05,880 --> 16:19:12,956
future what might be better than this

25860
16:19:09,956 --> 16:19:14,840
yeah add language line yeah we have to

25861
16:19:12,956 --> 16:19:16,080
keep adding a language to line five and

25862
16:19:14,840 --> 16:19:19,079
okay not a big deal we could add like

25863
16:19:16,080 --> 16:19:21,200
SQL today and maybe JavaScript next week

25864
16:19:19,080 --> 16:19:22,636
but you know anytime a a line of code a

25865
16:19:21,200 --> 16:19:24,399
line of logic is just going to kind of

25866
16:19:22,636 --> 16:19:25,756
grow out of control and we've had this

25867
16:19:24,400 --> 16:19:27,636
chat a couple of times with different

25868
16:19:25,756 --> 16:19:29,436
syntax there's probably a better way

25869
16:19:27,636 --> 16:19:31,360
than that so let's do that instead of

25870
16:19:29,436 --> 16:19:33,720
using these individual variables we

25871
16:19:31,360 --> 16:19:36,276
could make maybe use a list but a list

25872
16:19:33,720 --> 16:19:38,200
would be a little confusing because like

25873
16:19:36,276 --> 16:19:40,320
what does braet zero mean what is

25874
16:19:38,200 --> 16:19:42,520
bracket 1 bracket two but a dictionary

25875
16:19:40,320 --> 16:19:43,840
recall is like this Swiss army knife of

25876
16:19:42,520 --> 16:19:45,680
data structures whereby you can

25877
16:19:43,840 --> 16:19:48,520
associate anything with anything else

25878
16:19:45,680 --> 16:19:50,596
keys with values so I dare say a cleaner

25879
16:19:48,520 --> 16:19:52,956
way to solve this problem that sets us

25880
16:19:50,596 --> 16:19:54,636
up for Less work or confusion later

25881
16:19:52,956 --> 16:19:56,400
would be to create like a new variable

25882
16:19:54,636 --> 16:19:58,560
called counts if that's what we're doing

25883
16:19:56,400 --> 16:20:01,080
counting things up and just set it equal

25884
16:19:58,560 --> 16:20:02,956
to an empty dictionary and you can

25885
16:20:01,080 --> 16:20:04,756
literally say adct with the open

25886
16:20:02,956 --> 16:20:07,520
parenthesis closed parenthesis nothing

25887
16:20:04,756 --> 16:20:09,400
or the more pythonic just use open and

25888
16:20:07,520 --> 16:20:10,880
Clos curly braces with nothing inside

25889
16:20:09,400 --> 16:20:14,080
that gives me an empty dictionary just

25890
16:20:10,880 --> 16:20:15,795
like square brackets gives me a list now

25891
16:20:14,080 --> 16:20:17,916
my logic down here has to change a

25892
16:20:15,796 --> 16:20:21,520
little bit but what's nice is I don't

25893
16:20:17,916 --> 16:20:22,755
need one conditional for every language

25894
16:20:21,520 --> 16:20:25,039
because again if we have a fourth a

25895
16:20:22,756 --> 16:20:27,080
fifth a sixth that chunk of code is also

25896
16:20:25,040 --> 16:20:29,436
going to grow a bit out of control too

25897
16:20:27,080 --> 16:20:31,680
so I can get rid of this here and what I

25898
16:20:29,436 --> 16:20:33,320
think I'm going to do is say this

25899
16:20:31,680 --> 16:20:35,400
whatever the current favorite is from

25900
16:20:33,320 --> 16:20:40,796
the current Row in the file why don't we

25901
16:20:35,400 --> 16:20:42,756
go into our counts variable at that key

25902
16:20:40,796 --> 16:20:44,596
and again favorite is a variable it's

25903
16:20:42,756 --> 16:20:47,680
not quote unquote favorite it's going to

25904
16:20:44,596 --> 16:20:49,360
be scratch or C or Python and then why

25905
16:20:47,680 --> 16:20:52,480
don't we go ahead and just increment

25906
16:20:49,360 --> 16:20:55,880
whatever the value of that count is at

25907
16:20:52,480 --> 16:20:58,596
that key now this is technically bugy

25908
16:20:55,880 --> 16:21:01,240
we're really close but there is a

25909
16:20:58,596 --> 16:21:04,840
bug does anyone want to conjecture what

25910
16:21:01,240 --> 16:21:04,840
the bug is

25911
16:21:09,840 --> 16:21:15,115
yeah a good question that answers my

25912
16:21:12,520 --> 16:21:16,636
question in uh nonetheless so no like

25913
16:21:15,116 --> 16:21:18,796
the magic you describe will not happen

25914
16:21:16,636 --> 16:21:22,840
and to repeat the the hypothesis will

25915
16:21:18,796 --> 16:21:25,360
this automatically create a key for

25916
16:21:22,840 --> 16:21:27,079
every uh language that we try plugging

25917
16:21:25,360 --> 16:21:29,080
into those square brackets short answer

25918
16:21:27,080 --> 16:21:31,000
no odds are this is going to create a

25919
16:21:29,080 --> 16:21:32,400
key error one of those traceback error

25920
16:21:31,000 --> 16:21:34,520
messages that you've probably seen by

25921
16:21:32,400 --> 16:21:37,320
now either in class or in problem sets

25922
16:21:34,520 --> 16:21:39,520
whereby if scratch hasn't appeared in

25923
16:21:37,320 --> 16:21:41,680
the dictionary before or C or python

25924
16:21:39,520 --> 16:21:43,520
like then the dictionary has no clue

25925
16:21:41,680 --> 16:21:44,880
what you're talking about so I think we

25926
16:21:43,520 --> 16:21:46,636
actually still need some conditional

25927
16:21:44,880 --> 16:21:48,320
logic but not that's going to grow

25928
16:21:46,636 --> 16:21:49,756
longer and longer with each language

25929
16:21:48,320 --> 16:21:53,596
what I think we probably want to do is

25930
16:21:49,756 --> 16:21:55,520
this if the current favorite is in the

25931
16:21:53,596 --> 16:21:57,636
counts dictionary and this is the

25932
16:21:55,520 --> 16:22:00,479
pythonic way of just saying is this key

25933
16:21:57,636 --> 16:22:04,560
in this dictionary then go ahead and

25934
16:22:00,480 --> 16:22:07,080
safely do count favorite plus equals 1

25935
16:22:04,560 --> 16:22:09,435
else to your conjecture now else what do

25936
16:22:07,080 --> 16:22:11,080
I want to do counts

25937
16:22:09,436 --> 16:22:14,560
favorite

25938
16:22:11,080 --> 16:22:16,796
equals yeah one so initialize a brand

25939
16:22:14,560 --> 16:22:18,360
new key to a brand new value of one

25940
16:22:16,796 --> 16:22:21,040
because I'm obviously just seen this

25941
16:22:18,360 --> 16:22:22,796
language otherwise increment again and

25942
16:22:21,040 --> 16:22:25,116
again and now down here I just need to

25943
16:22:22,796 --> 16:22:27,360
tweak my syntax a little bit I don't

25944
16:22:25,116 --> 16:22:29,436
need to print out all of these things

25945
16:22:27,360 --> 16:22:31,680
one at a time manually I can actually

25946
16:22:29,436 --> 16:22:33,680
get away I think with another loop at

25947
16:22:31,680 --> 16:22:36,756
the very bottom here so how about I do

25948
16:22:33,680 --> 16:22:38,360
this for each favorite in those counts

25949
16:22:36,756 --> 16:22:40,916
and this is again the pythonic way to

25950
16:22:38,360 --> 16:22:43,320
iterate over all of the keys in a

25951
16:22:40,916 --> 16:22:46,755
dictionary go ahead and print out using

25952
16:22:43,320 --> 16:22:50,200
an F string whatever the current

25953
16:22:46,756 --> 16:22:53,520
favorite is scratch or C or Python and

25954
16:22:50,200 --> 16:22:55,435
then a colon and then figure out what

25955
16:22:53,520 --> 16:22:57,560
its count is and you can do that by

25956
16:22:55,436 --> 16:23:00,720
going into the counts dictionary looking

25957
16:22:57,560 --> 16:23:02,916
at the favorite key and get back its

25958
16:23:00,720 --> 16:23:04,276
value so close my curly braces I close

25959
16:23:02,916 --> 16:23:06,560
my quotes and even though this looks

25960
16:23:04,276 --> 16:23:08,636
ugly at the moment now this is much more

25961
16:23:06,560 --> 16:23:10,479
dynamic because if we go and add SQL to

25962
16:23:08,636 --> 16:23:13,116
the CSV file tomorrow where we add

25963
16:23:10,480 --> 16:23:15,080
JavaScript next week this will just work

25964
16:23:13,116 --> 16:23:16,756
it will keep working now automatically

25965
16:23:15,080 --> 16:23:18,840
all I change is the Google form not my

25966
16:23:16,756 --> 16:23:21,160
actual code all right let's try python

25967
16:23:18,840 --> 16:23:24,636
of favorites.i cross my fingers as

25968
16:23:21,160 --> 16:23:29,796
always and there now is the data as of

25969
16:23:24,636 --> 16:23:29,796
now questions on this code here

25970
16:23:30,000 --> 16:23:34,400
yeah really good good question what if

25971
16:23:32,000 --> 16:23:37,116
you wanted to print it in a particular

25972
16:23:34,400 --> 16:23:38,480
order uh well I could give you a couple

25973
16:23:37,116 --> 16:23:42,040
of solutions like if you want to print

25974
16:23:38,480 --> 16:23:43,916
it out in it's already coincidentally in

25975
16:23:42,040 --> 16:23:46,116
alphabetical order so you got that for

25976
16:23:43,916 --> 16:23:47,916
free although that's just by chance here

25977
16:23:46,116 --> 16:23:49,796
but there is a way to do this and let me

25978
16:23:47,916 --> 16:23:51,360
propose that we go down here to my Loop

25979
16:23:49,796 --> 16:23:52,840
and I explicitly use a function you

25980
16:23:51,360 --> 16:23:54,560
might not have seen in Python yet but

25981
16:23:52,840 --> 16:23:56,276
it's literally called sorted which is

25982
16:23:54,560 --> 16:23:58,840
going to take either a list or in this

25983
16:23:56,276 --> 16:24:01,956
case a dictionary and by default sort it

25984
16:23:58,840 --> 16:24:03,399
by key alphabetically now if my

25985
16:24:01,956 --> 16:24:04,916
intuition is correct this is not going

25986
16:24:03,400 --> 16:24:06,560
to change the output because it's

25987
16:24:04,916 --> 16:24:08,479
already alphabetical but if you read the

25988
16:24:06,560 --> 16:24:10,680
documentation for the sorted function it

25989
16:24:08,480 --> 16:24:12,596
takes multiple parameters potentially

25990
16:24:10,680 --> 16:24:14,560
some of which are named parameters and

25991
16:24:12,596 --> 16:24:16,079
so you can actually do this if you want

25992
16:24:14,560 --> 16:24:18,040
to sort the counts but you want to

25993
16:24:16,080 --> 16:24:19,880
reverse the order for whatever reason

25994
16:24:18,040 --> 16:24:21,916
here so that it's reverse alphabetical

25995
16:24:19,880 --> 16:24:23,240
order now let me go ahead and rerun this

25996
16:24:21,916 --> 16:24:27,159
and I'll keep the previous output on the

25997
16:24:23,240 --> 16:24:29,756
screen enter and now it's backwards uh

25998
16:24:27,160 --> 16:24:33,276
alphabetically if you will other

25999
16:24:29,756 --> 16:24:37,720
questions on this here

26000
16:24:33,276 --> 16:24:39,560
here no how about then how about then we

26001
16:24:37,720 --> 16:24:42,636
transition

26002
16:24:39,560 --> 16:24:44,200
to changing sorting by value and let me

26003
16:24:42,636 --> 16:24:45,840
this is going to escalate a little

26004
16:24:44,200 --> 16:24:48,159
quickly briefly but then we'll we'll

26005
16:24:45,840 --> 16:24:50,560
tone it down again notice that right now

26006
16:24:48,160 --> 16:24:51,916
this is indeed sorting by key what if

26007
16:24:50,560 --> 16:24:53,840
especially if I have lots of data it'd

26008
16:24:51,916 --> 16:24:55,560
be nice to make like a top 10 list or in

26009
16:24:53,840 --> 16:24:59,840
this case a top three list and actually

26010
16:24:55,560 --> 16:25:01,636
see in order of the counts the values uh

26011
16:24:59,840 --> 16:25:03,916
what these popular ones are so it's not

26012
16:25:01,636 --> 16:25:07,240
C python scratch it should ideally be

26013
16:25:03,916 --> 16:25:09,320
python then C then scratch because of

26014
16:25:07,240 --> 16:25:11,115
the values and the magnitude thereof so

26015
16:25:09,320 --> 16:25:14,320
how can I do this well it turns out

26016
16:25:11,116 --> 16:25:17,796
there's another key another uh parameter

26017
16:25:14,320 --> 16:25:19,680
that you can pass to the sorted function

26018
16:25:17,796 --> 16:25:21,240
that is typically implemented as a

26019
16:25:19,680 --> 16:25:22,160
function itself and so I'm going to go

26020
16:25:21,240 --> 16:25:24,680
ahead and do this I'm going to

26021
16:25:22,160 --> 16:25:27,000
temporarily Define a function called get

26022
16:25:24,680 --> 16:25:29,636
value just to make my life easier and

26023
16:25:27,000 --> 16:25:32,116
this get value function is going to take

26024
16:25:29,636 --> 16:25:34,636
I'll say a language par parameter and

26025
16:25:32,116 --> 16:25:37,756
then all I'm going to do is return

26026
16:25:34,636 --> 16:25:39,400
whatever the count is of that language

26027
16:25:37,756 --> 16:25:41,000
so out of context this is just a super

26028
16:25:39,400 --> 16:25:43,680
simple function that you hand it a

26029
16:25:41,000 --> 16:25:44,680
language like scratch or C or python

26030
16:25:43,680 --> 16:25:47,400
it's just going to tell you what the

26031
16:25:44,680 --> 16:25:49,480
count is thereof in that uh in that

26032
16:25:47,400 --> 16:25:51,720
dictionary called counts but what I can

26033
16:25:49,480 --> 16:25:55,596
do now down here in my newly introduced

26034
16:25:51,720 --> 16:25:57,840
call to sorted is I can tell it what to

26035
16:25:55,596 --> 16:26:00,680
use as its key instead of using

26036
16:25:57,840 --> 16:26:02,755
literally the key scratch C python I can

26037
16:26:00,680 --> 16:26:05,436
sort of override that behavior and say

26038
16:26:02,756 --> 16:26:08,200
you know what to figure out what to sort

26039
16:26:05,436 --> 16:26:11,596
by go ahead and call this function

26040
16:26:08,200 --> 16:26:13,795
called get value notice that I have not

26041
16:26:11,596 --> 16:26:16,040
put parentheses after get value because

26042
16:26:13,796 --> 16:26:18,880
I don't want to call get value right

26043
16:26:16,040 --> 16:26:22,636
then and there I want to pass the get

26044
16:26:18,880 --> 16:26:24,320
value function as itself in argument to

26045
16:26:22,636 --> 16:26:25,916
the sorted function so that the sorted

26046
16:26:24,320 --> 16:26:28,520
function written years ago by the people

26047
16:26:25,916 --> 16:26:30,520
at python can call my version of get

26048
16:26:28,520 --> 16:26:32,880
value again and again and again when

26049
16:26:30,520 --> 16:26:36,560
they try to sort sort this actual data

26050
16:26:32,880 --> 16:26:38,840
so now if I add that and I leave reverse

26051
16:26:36,560 --> 16:26:42,115
equals true let's see what happens

26052
16:26:38,840 --> 16:26:44,435
python of favorites. py enter and now I

26053
16:26:42,116 --> 16:26:46,160
get my top 10 or in this case top three

26054
16:26:44,436 --> 16:26:48,200
list and if I had more sophisticated

26055
16:26:46,160 --> 16:26:50,000
data with like more columns Al together

26056
16:26:48,200 --> 16:26:53,560
that I actually care about I could even

26057
16:26:50,000 --> 16:26:54,880
sort this more uh powerfully as well but

26058
16:26:53,560 --> 16:26:56,115
let me clean this up a little bit just

26059
16:26:54,880 --> 16:26:58,840
so you've seen it even though we won't

26060
16:26:56,116 --> 16:27:01,360
use these that often in cs50 until the

26061
16:26:58,840 --> 16:27:03,276
end of the class will they come up again

26062
16:27:01,360 --> 16:27:05,080
technically this is a little bit H this

26063
16:27:03,276 --> 16:27:06,560
isn't necessarily the best design to

26064
16:27:05,080 --> 16:27:08,720
spend all this time implementing a

26065
16:27:06,560 --> 16:27:11,435
function and then only use it in one

26066
16:27:08,720 --> 16:27:12,956
place in general we've argued that H you

26067
16:27:11,436 --> 16:27:14,320
don't necessarily need a variable if

26068
16:27:12,956 --> 16:27:15,400
you're only going to use it in one place

26069
16:27:14,320 --> 16:27:16,796
you don't really need a function if

26070
16:27:15,400 --> 16:27:18,436
you're only going to use it in one place

26071
16:27:16,796 --> 16:27:20,400
and here we kind of have a good

26072
16:27:18,436 --> 16:27:22,720
candidate for that and so it turns out

26073
16:27:20,400 --> 16:27:25,756
in Python if you don't want to bother

26074
16:27:22,720 --> 16:27:27,160
creating a function just to use it once

26075
16:27:25,756 --> 16:27:30,560
you can create what's called an

26076
16:27:27,160 --> 16:27:32,480
anonymous function AKA a Lambda function

26077
16:27:30,560 --> 16:27:34,596
like the lamb Lambda symbol familiar and

26078
16:27:32,480 --> 16:27:37,040
a Lambda function the syntax is a little

26079
16:27:34,596 --> 16:27:39,320
strange looking but you say this you

26080
16:27:37,040 --> 16:27:41,400
literally say Lambda you literally then

26081
16:27:39,320 --> 16:27:43,520
say the name of the argument that you

26082
16:27:41,400 --> 16:27:47,116
want this Anonymous function with no

26083
16:27:43,520 --> 16:27:49,320
name to take then you have a colon and

26084
16:27:47,116 --> 16:27:51,840
then quite simply you write what you

26085
16:27:49,320 --> 16:27:53,480
want the return value of this function

26086
16:27:51,840 --> 16:27:55,320
to be you don't even say return

26087
16:27:53,480 --> 16:27:59,116
literally these Lambda functions are

26088
16:27:55,320 --> 16:28:02,720
meant to be used super turly so that you

26089
16:27:59,116 --> 16:28:04,840
can in one line Express something like

26090
16:28:02,720 --> 16:28:06,200
this and I admit this looks more cryptic

26091
16:28:04,840 --> 16:28:07,636
I think than the previous version but as

26092
16:28:06,200 --> 16:28:08,956
you get more comfortable with python or

26093
16:28:07,636 --> 16:28:11,436
other languages that support this

26094
16:28:08,956 --> 16:28:13,560
feature it allows you to not bother with

26095
16:28:11,436 --> 16:28:15,956
lines of code like that and just tighten

26096
16:28:13,560 --> 16:28:18,435
up your code a little bit so this line

26097
16:28:15,956 --> 16:28:21,596
here lamba language colon counts

26098
16:28:18,436 --> 16:28:22,636
language is the oneline version of this

26099
16:28:21,596 --> 16:28:24,320
and you don't even need to bother

26100
16:28:22,636 --> 16:28:26,436
picking a name for it Lambda tells

26101
16:28:24,320 --> 16:28:27,916
python I didn't waste any time thinking

26102
16:28:26,436 --> 16:28:30,596
of a name for this

26103
16:28:27,916 --> 16:28:33,040
function so questions then on this

26104
16:28:30,596 --> 16:28:36,680
technique technique of using python to

26105
16:28:33,040 --> 16:28:39,080
analyze data like

26106
16:28:36,680 --> 16:28:43,596
this any

26107
16:28:39,080 --> 16:28:46,956
questions we're almost done with python

26108
16:28:43,596 --> 16:28:48,276
questions no okay so why don't we make

26109
16:28:46,956 --> 16:28:50,596
things a little more interesting because

26110
16:28:48,276 --> 16:28:52,079
we had a much juicier data set with the

26111
16:28:50,596 --> 16:28:54,320
problems that we've assigned over the

26112
16:28:52,080 --> 16:28:57,636
past several weeks why don't we go ahead

26113
16:28:54,320 --> 16:28:59,840
and quite simply you know I think we

26114
16:28:57,636 --> 16:29:03,400
wrote pretty darn good code here so I

26115
16:28:59,840 --> 16:29:05,636
think we can pretty much just change a

26116
16:29:03,400 --> 16:29:08,560
bit of it to say let's see if I don't

26117
16:29:05,636 --> 16:29:12,080
want language I want problem and if I

26118
16:29:08,560 --> 16:29:14,000
want to sort by not language but problem

26119
16:29:12,080 --> 16:29:16,240
I think that's it I think if I didn't

26120
16:29:14,000 --> 16:29:18,320
Overlook something here just by changing

26121
16:29:16,240 --> 16:29:20,159
what column I'm reading the data from

26122
16:29:18,320 --> 16:29:21,680
and then just to be consistent renaming

26123
16:29:20,160 --> 16:29:24,636
my variables just so I know what I'm

26124
16:29:21,680 --> 16:29:26,956
looking at what will this program now do

26125
16:29:24,636 --> 16:29:29,840
after those minor

26126
16:29:26,956 --> 16:29:32,276
changes what will I see when I run

26127
16:29:29,840 --> 16:29:33,596
this

26128
16:29:32,276 --> 16:29:36,000
what would be the first thing I see when

26129
16:29:33,596 --> 16:29:36,000
I run

26130
16:29:36,320 --> 16:29:42,840
this tough crowd today yes problem yeah

26131
16:29:40,240 --> 16:29:45,040
the problem this the top problem so the

26132
16:29:42,840 --> 16:29:46,276
most popular problem which I'm a little

26133
16:29:45,040 --> 16:29:47,756
worried it might be hello or just

26134
16:29:46,276 --> 16:29:49,636
scratch but let's go ahead and see so

26135
16:29:47,756 --> 16:29:51,680
let me go ahead and open my terminal

26136
16:29:49,636 --> 16:29:53,560
window I'll even maximize my terminal

26137
16:29:51,680 --> 16:29:56,796
window so we can see a lot let me go

26138
16:29:53,560 --> 16:29:58,399
ahead and run python of favorites. py

26139
16:29:56,796 --> 16:29:59,680
I'm going to go ahead now and cross my

26140
16:29:58,400 --> 16:30:03,756
fingers that I didn't mess up and hit

26141
16:29:59,680 --> 16:30:05,880
enter and okay great we peaked early so

26142
16:30:03,756 --> 16:30:07,956
scratch was the most popular program

26143
16:30:05,880 --> 16:30:10,040
according to the data at the time I

26144
16:30:07,956 --> 16:30:13,200
downloaded it I'm sure other votes have

26145
16:30:10,040 --> 16:30:16,520
come in since filter uh in week four was

26146
16:30:13,200 --> 16:30:19,079
tied then with tan as well Mario is a

26147
16:30:16,520 --> 16:30:21,359
close third there and so forth so this

26148
16:30:19,080 --> 16:30:23,040
is helpful for us on staff that uh not

26149
16:30:21,360 --> 16:30:25,360
so much love down here at the bottom of

26150
16:30:23,040 --> 16:30:26,720
the list so it was a bunch of code to

26151
16:30:25,360 --> 16:30:28,796
write but now that we've written it in

26152
16:30:26,720 --> 16:30:30,400
this very versatile Dynamic way it's

26153
16:30:28,796 --> 16:30:32,636
pretty good for just like crunching data

26154
16:30:30,400 --> 16:30:34,916
and doing some analytics but it's still

26155
16:30:32,636 --> 16:30:37,520
a decent number of lines to have had to

26156
16:30:34,916 --> 16:30:39,795
write manually and this is where

26157
16:30:37,520 --> 16:30:44,159
sometimes it isn't necessarily the right

26158
16:30:39,796 --> 16:30:45,756
tool for the job but rather the job that

26159
16:30:44,160 --> 16:30:47,636
uh but rather a candidate for using some

26160
16:30:45,756 --> 16:30:49,400
other language alog together especially

26161
16:30:47,636 --> 16:30:50,636
when it's not just a one-time program

26162
16:30:49,400 --> 16:30:52,400
that you run and you want to see the

26163
16:30:50,636 --> 16:30:54,360
answer what if you want to take input

26164
16:30:52,400 --> 16:30:56,360
from the user and ask uh answer

26165
16:30:54,360 --> 16:30:57,596
questions dynamically like a mobile app

26166
16:30:56,360 --> 16:30:59,680
would like a website would like

26167
16:30:57,596 --> 16:31:01,320
Microsoft Excel or apple numbers or

26168
16:30:59,680 --> 16:31:03,240
Google Sheets would for for you well

26169
16:31:01,320 --> 16:31:05,680
let's make one final change for now to

26170
16:31:03,240 --> 16:31:08,276
this version of the program and actually

26171
16:31:05,680 --> 16:31:10,680
take in some user input so besides just

26172
16:31:08,276 --> 16:31:14,200
loading all of the data into memory

26173
16:31:10,680 --> 16:31:16,200
let's go ahead and down below here not

26174
16:31:14,200 --> 16:31:18,596
just print out the top 10 list if you

26175
16:31:16,200 --> 16:31:19,956
will but prompt the user for their

26176
16:31:18,596 --> 16:31:21,240
favorite so I'm going to use Python's

26177
16:31:19,956 --> 16:31:23,520
input function and I'm just going to

26178
16:31:21,240 --> 16:31:25,840
prompt them with favorite quote unquote

26179
16:31:23,520 --> 16:31:29,596
like tell me what your favorite problem

26180
16:31:25,840 --> 16:31:32,475
what problem uh rather uh you interested

26181
16:31:29,596 --> 16:31:35,880
in and now let me go ahead and say if

26182
16:31:32,476 --> 16:31:37,360
that favorite is in the counts variable

26183
16:31:35,880 --> 16:31:38,880
so you didn't type in something random

26184
16:31:37,360 --> 16:31:40,880
that we didn't actually assign as a

26185
16:31:38,880 --> 16:31:43,916
problem then let me go ahead and print

26186
16:31:40,880 --> 16:31:46,840
with a format string whatever that

26187
16:31:43,916 --> 16:31:49,360
favorite is of yours and show you the

26188
16:31:46,840 --> 16:31:52,359
actual popularity thereof by indexing

26189
16:31:49,360 --> 16:31:54,320
into counts using that favorite as the

26190
16:31:52,360 --> 16:31:55,840
key and printing this so now it's a

26191
16:31:54,320 --> 16:31:57,636
dynamic program it doesn't dump all of

26192
16:31:55,840 --> 16:31:59,596
the data and all of the summations

26193
16:31:57,636 --> 16:32:01,680
rather it's going to allow me to see

26194
16:31:59,596 --> 16:32:04,680
what my choice of favorite is and I'm

26195
16:32:01,680 --> 16:32:07,636
going to go ahead and say uh let's see

26196
16:32:04,680 --> 16:32:09,160
I'm a fan of Mario here so enter and

26197
16:32:07,636 --> 16:32:11,680
indeed we see the same value we saw a

26198
16:32:09,160 --> 16:32:13,796
moment ago but just for Mario but the

26199
16:32:11,680 --> 16:32:16,436
point now is that one all of this is

26200
16:32:13,796 --> 16:32:18,040
possible two it's way easier and more

26201
16:32:16,436 --> 16:32:19,756
pleasant than this would have been in C

26202
16:32:18,040 --> 16:32:21,756
this is still only 15 lines of code and

26203
16:32:19,756 --> 16:32:23,116
in C again there's the memory management

26204
16:32:21,756 --> 16:32:24,520
there's the iterating over the strings

26205
16:32:23,116 --> 16:32:27,080
trying to find the commas there's just a

26206
16:32:24,520 --> 16:32:28,840
lot more work but honestly even when you

26207
16:32:27,080 --> 16:32:30,956
just want to answer a question like this

26208
16:32:28,840 --> 16:32:31,840
in Excel in Apple Numbers Google sheets

26209
16:32:30,956 --> 16:32:33,240
you know generally you can just

26210
16:32:31,840 --> 16:32:34,596
highlight things you can click a button

26211
16:32:33,240 --> 16:32:37,475
and boom you get your answer for

26212
16:32:34,596 --> 16:32:39,560
summation or Max or Min or any of those

26213
16:32:37,476 --> 16:32:41,040
sort of Basics wouldn't it be nice if we

26214
16:32:39,560 --> 16:32:42,435
weren't taking a step backwards as

26215
16:32:41,040 --> 16:32:44,360
programmers and being sort of more

26216
16:32:42,436 --> 16:32:47,200
powerful and yet we now have to do more

26217
16:32:44,360 --> 16:32:50,000
of the work so maybe sometimes Python's

26218
16:32:47,200 --> 16:32:51,596
not or any language is not the best tool

26219
16:32:50,000 --> 16:32:54,000
for the job and that's going to now

26220
16:32:51,596 --> 16:32:56,079
allow us to introduce more generally

26221
16:32:54,000 --> 16:32:58,756
something called a relational database

26222
16:32:56,080 --> 16:33:00,756
graduating from Mere flat file databases

26223
16:32:58,756 --> 16:33:02,360
like text files or binary files in which

26224
16:33:00,756 --> 16:33:05,720
all of your data is stored to something

26225
16:33:02,360 --> 16:33:05,720
more proper but first

26226
16:33:14,956 --> 16:33:19,520
questions really good question to

26227
16:33:17,276 --> 16:33:21,956
reiterate if I were to is this case

26228
16:33:19,520 --> 16:33:24,159
sensitive so if I were to type in Mario

26229
16:33:21,956 --> 16:33:26,320
in all lowercase and hit enter I

26230
16:33:24,160 --> 16:33:27,720
actually get no such response now that

26231
16:33:26,320 --> 16:33:29,240
might be acceptable because the problem

26232
16:33:27,720 --> 16:33:31,680
technically what is a capital M but

26233
16:33:29,240 --> 16:33:34,720
that's a little uh ridiculous to be that

26234
16:33:31,680 --> 16:33:35,840
pedantic about the input so how could we

26235
16:33:34,720 --> 16:33:38,720
solve

26236
16:33:35,840 --> 16:33:41,475
this any tips for how we can make this a

26237
16:33:38,720 --> 16:33:41,476
little more robust

26238
16:33:47,756 --> 16:33:51,040
yeah okay

26239
16:33:51,116 --> 16:33:54,160
yeah yeah so we could use a few

26240
16:33:53,116 --> 16:33:55,840
different functions one of which is

26241
16:33:54,160 --> 16:33:58,116
called title which will change it to

26242
16:33:55,840 --> 16:33:59,956
title case where it capitalizes like in

26243
16:33:58,116 --> 16:34:02,200
most English sentences the first letter

26244
16:33:59,956 --> 16:34:04,520
of that sentence we could use capitalize

26245
16:34:02,200 --> 16:34:06,360
we could use upper we could use lower

26246
16:34:04,520 --> 16:34:08,956
but indeed we could just decide how we

26247
16:34:06,360 --> 16:34:10,360
want to standardize the capitalization

26248
16:34:08,956 --> 16:34:12,040
either uppercase lowercase or some

26249
16:34:10,360 --> 16:34:14,200
combination thereof and just make sure

26250
16:34:12,040 --> 16:34:15,636
that you change the counts themselves

26251
16:34:14,200 --> 16:34:17,636
make sure that you do the same to

26252
16:34:15,636 --> 16:34:19,240
favorite and make sure that maybe you

26253
16:34:17,636 --> 16:34:21,240
keep a backup of the data if you want to

26254
16:34:19,240 --> 16:34:23,956
show the original version that came from

26255
16:34:21,240 --> 16:34:25,916
the CSV without presuming to just

26256
16:34:23,956 --> 16:34:27,276
capitalize everything for the user but

26257
16:34:25,916 --> 16:34:28,795
indeed that would be the most common

26258
16:34:27,276 --> 16:34:31,079
scenario you just make things case

26259
16:34:28,796 --> 16:34:34,680
insensitive when doing those matches

26260
16:34:31,080 --> 16:34:38,400
other questions now on python before we

26261
16:34:34,680 --> 16:34:40,916
leave it behind for the coming

26262
16:34:38,400 --> 16:34:43,116
week all right well then let's introduce

26263
16:34:40,916 --> 16:34:46,159
these relational databases so relational

26264
16:34:43,116 --> 16:34:48,116
database is what like every is a super

26265
16:34:46,160 --> 16:34:49,596
popular way of storing lots of data like

26266
16:34:48,116 --> 16:34:51,160
this is what the Twitter's of the world

26267
16:34:49,596 --> 16:34:53,795
the Googles of the world the metas of

26268
16:34:51,160 --> 16:34:56,400
the world use to store some of their

26269
16:34:53,796 --> 16:34:58,520
data at scale there are alternatives to

26270
16:34:56,400 --> 16:35:00,040
relational databases um indeed today

26271
16:34:58,520 --> 16:35:01,719
we'll talk about a language called SQL

26272
16:35:00,040 --> 16:35:03,636
there's so a movement if you will or an

26273
16:35:01,720 --> 16:35:05,080
alternative generally called No SQL

26274
16:35:03,636 --> 16:35:06,436
which is just the opposite you don't use

26275
16:35:05,080 --> 16:35:08,436
SQL there are things called

26276
16:35:06,436 --> 16:35:10,400
objectoriented databases and the like

26277
16:35:08,436 --> 16:35:14,160
but if you've ever heard of MySQL or

26278
16:35:10,400 --> 16:35:17,160
postgress SQL or uh Microsoft SQL server

26279
16:35:14,160 --> 16:35:19,796
or Oracle or Maria DB or a bunch of

26280
16:35:17,160 --> 16:35:21,276
other products both free and Commercial

26281
16:35:19,796 --> 16:35:23,080
this is what they're talking about

26282
16:35:21,276 --> 16:35:24,680
databases that are designed to store

26283
16:35:23,080 --> 16:35:26,680
lots of data and what's nice about

26284
16:35:24,680 --> 16:35:28,636
relational databases is that they're

26285
16:35:26,680 --> 16:35:30,436
really similar to the spreadsheets with

26286
16:35:28,636 --> 16:35:33,400
which you were presumably familiar long

26287
16:35:30,436 --> 16:35:35,636
before today's class so a relational

26288
16:35:33,400 --> 16:35:38,080
database is going to store as you'll see

26289
16:35:35,636 --> 16:35:39,636
all of the data in rows and columns now

26290
16:35:38,080 --> 16:35:40,840
the terminology will thereafter be a

26291
16:35:39,636 --> 16:35:43,159
little different instead of having

26292
16:35:40,840 --> 16:35:44,560
sheets you're going to have tables but

26293
16:35:43,160 --> 16:35:45,916
those tables are still going to have

26294
16:35:44,560 --> 16:35:47,956
rows and columns and you're going to

26295
16:35:45,916 --> 16:35:51,115
have even more control over the

26296
16:35:47,956 --> 16:35:53,795
performance of your data when you start

26297
16:35:51,116 --> 16:35:56,320
to access it using this structured query

26298
16:35:53,796 --> 16:35:58,880
language or SQL this is a language you

26299
16:35:56,320 --> 16:36:00,596
can use for web apps mobile apps uh a

26300
16:35:58,880 --> 16:36:02,840
lot of analysts would sit down and their

26301
16:36:00,596 --> 16:36:04,560
Mac or PC and actually ask questions of

26302
16:36:02,840 --> 16:36:06,200
data to get back the answer and

26303
16:36:04,560 --> 16:36:08,399
wonderfully even though there will be

26304
16:36:06,200 --> 16:36:11,000
some new syntax today SQL really just

26305
16:36:08,400 --> 16:36:13,596
does four basic things crud is the sort

26306
16:36:11,000 --> 16:36:16,360
of crude acronym here crud is a way of

26307
16:36:13,596 --> 16:36:18,956
remembering that a relational database

26308
16:36:16,360 --> 16:36:22,276
supports ultimately creating data

26309
16:36:18,956 --> 16:36:24,475
reading data updating data and deleting

26310
16:36:22,276 --> 16:36:25,916
data so even if you're feeling like wow

26311
16:36:24,476 --> 16:36:28,160
this is a lot of new syntax which it

26312
16:36:25,916 --> 16:36:29,636
isn't relative to our past languages the

26313
16:36:28,160 --> 16:36:32,080
only things you're doing really are

26314
16:36:29,636 --> 16:36:34,080
creating dat data reading data updating

26315
16:36:32,080 --> 16:36:37,400
and deleting the same now a little

26316
16:36:34,080 --> 16:36:40,956
confusingly in SQL the corresponding

26317
16:36:37,400 --> 16:36:43,796
functions or commands that exist that

26318
16:36:40,956 --> 16:36:45,240
map to crud are actually this so it's

26319
16:36:43,796 --> 16:36:48,400
still create but there's another one

26320
16:36:45,240 --> 16:36:50,200
called insert uh it's not read which is

26321
16:36:48,400 --> 16:36:52,116
more of the computer scientist way of

26322
16:36:50,200 --> 16:36:53,880
saying it but select which is a little

26323
16:36:52,116 --> 16:36:56,160
more explicit like select data you care

26324
16:36:53,880 --> 16:36:57,636
about update is still update delete is

26325
16:36:56,160 --> 16:36:59,796
still delete but there's another command

26326
16:36:57,636 --> 16:37:03,520
called drop which lets you drop that is

26327
16:36:59,796 --> 16:37:05,720
delete entire tables as well so you can

26328
16:37:03,520 --> 16:37:08,079
create tables using syntax that's

26329
16:37:05,720 --> 16:37:10,680
generally going to look like this you'll

26330
16:37:08,080 --> 16:37:12,596
say create table you'll give the name of

26331
16:37:10,680 --> 16:37:14,320
the table uh which you can call almost

26332
16:37:12,596 --> 16:37:17,115
anything you want but generally all

26333
16:37:14,320 --> 16:37:19,000
lowercase no spaces is best then in

26334
16:37:17,116 --> 16:37:21,240
parentheses you can specify a comma

26335
16:37:19,000 --> 16:37:24,160
separated list of the columns that you

26336
16:37:21,240 --> 16:37:26,636
might want in this table so this is the

26337
16:37:24,160 --> 16:37:28,476
code equivalent in the SQL language of

26338
16:37:26,636 --> 16:37:30,560
like manually opening Google Sheets or

26339
16:37:28,476 --> 16:37:32,320
Excel or numbers and like clicking in

26340
16:37:30,560 --> 16:37:34,276
the top left cell and like typing

26341
16:37:32,320 --> 16:37:36,159
timestamp and then in the next typing

26342
16:37:34,276 --> 16:37:37,596
language and then in the third typing

26343
16:37:36,160 --> 16:37:40,160
problem this is the way to sort of

26344
16:37:37,596 --> 16:37:41,680
Define what your headers are if you will

26345
16:37:40,160 --> 16:37:43,680
in a spreadsheet but now it's called a

26346
16:37:41,680 --> 16:37:45,160
table now we won't use this command

26347
16:37:43,680 --> 16:37:47,400
manually first let's do something a

26348
16:37:45,160 --> 16:37:49,956
little simpler we're going to start off

26349
16:37:47,400 --> 16:37:51,636
by just importing this data ourselves

26350
16:37:49,956 --> 16:37:53,880
and I'm going to go ahead and do this

26351
16:37:51,636 --> 16:37:56,560
let me go back to vs code here I'm going

26352
16:37:53,880 --> 16:37:57,840
to leave behind favorites. py for now

26353
16:37:56,560 --> 16:38:00,636
because now we're going to transition to

26354
16:37:57,840 --> 16:38:04,679
this other language called SQL and to do

26355
16:38:00,636 --> 16:38:06,360
this I am going to create a new database

26356
16:38:04,680 --> 16:38:09,720
file and I'm going to do so using a

26357
16:38:06,360 --> 16:38:11,596
command called SQL light 3 which is just

26358
16:38:09,720 --> 16:38:13,360
the third version thereof and I'm going

26359
16:38:11,596 --> 16:38:15,399
to give the database a name of

26360
16:38:13,360 --> 16:38:16,796
favorites. DB there's different

26361
16:38:15,400 --> 16:38:18,720
conventions but this is one of the most

26362
16:38:16,796 --> 16:38:21,000
common when I hit enter this is going to

26363
16:38:18,720 --> 16:38:22,956
create for me a new empty database just

26364
16:38:21,000 --> 16:38:25,680
like opening an Untitled spreadsheet in

26365
16:38:22,956 --> 16:38:27,159
Excel Google Sheets or Apple Numbers I'm

26366
16:38:25,680 --> 16:38:30,040
being prompted do I want to create

26367
16:38:27,160 --> 16:38:31,636
favorites. DB I'll hit y for yes okay

26368
16:38:30,040 --> 16:38:34,040
we're up and running now you're going to

26369
16:38:31,636 --> 16:38:35,956
notice a different prompt I'm not in my

26370
16:38:34,040 --> 16:38:38,000
Linux prompt per se which is always the

26371
16:38:35,956 --> 16:38:39,795
dollar sign I'm now inside of the

26372
16:38:38,000 --> 16:38:42,596
program called SQL light and we're going

26373
16:38:39,796 --> 16:38:44,796
to use SQL light SQL light 3 as just an

26374
16:38:42,596 --> 16:38:47,520
interactive way for now of playing with

26375
16:38:44,796 --> 16:38:51,116
SQL code at the end of today we'll show

26376
16:38:47,520 --> 16:38:52,636
you how you can use SQL in Python code

26377
16:38:51,116 --> 16:38:54,240
so that you still write python code to

26378
16:38:52,636 --> 16:38:56,000
do whatever you want but you can talk to

26379
16:38:54,240 --> 16:38:58,079
databases using Python and this is

26380
16:38:56,000 --> 16:39:00,476
exactly how web apps mobile apps work

26381
16:38:58,080 --> 16:39:02,320
for instance on iOS uh and an i phone an

26382
16:39:00,476 --> 16:39:04,756
iPad or the like if you want to store

26383
16:39:02,320 --> 16:39:07,116
data it's very often stored in a SQL

26384
16:39:04,756 --> 16:39:09,000
database as we're about to do um but you

26385
16:39:07,116 --> 16:39:10,956
might use a language called Swift or

26386
16:39:09,000 --> 16:39:13,560
objective c and same exists in the world

26387
16:39:10,956 --> 16:39:15,159
of Android using Java or cotlin or

26388
16:39:13,560 --> 16:39:17,399
something else to query the database so

26389
16:39:15,160 --> 16:39:18,916
we're going to see SQL in isolation for

26390
16:39:17,400 --> 16:39:20,596
now like an analyst might just use at

26391
16:39:18,916 --> 16:39:23,795
their Mac or PC but we're going to tie

26392
16:39:20,596 --> 16:39:27,115
it together by Day end so at this

26393
16:39:23,796 --> 16:39:30,720
terminal uh SQL light let me go ahead

26394
16:39:27,116 --> 16:39:32,596
and execute uh this command first I'm

26395
16:39:30,720 --> 16:39:33,520
going to first put SQL light into CSV

26396
16:39:32,596 --> 16:39:35,360
mode because I'm going to cut some

26397
16:39:33,520 --> 16:39:37,795
Corners initially and I'm just going to

26398
16:39:35,360 --> 16:39:39,880
automatically import all of the data

26399
16:39:37,796 --> 16:39:42,680
that was submitted via that Google form

26400
16:39:39,880 --> 16:39:44,520
which I exported as a CSV and uploaded

26401
16:39:42,680 --> 16:39:46,880
to my code space and I'm just going to

26402
16:39:44,520 --> 16:39:49,596
automatically say turn this CSV file

26403
16:39:46,880 --> 16:39:50,680
into a SQL database for me just so I

26404
16:39:49,596 --> 16:39:52,795
don't have to figure out what those

26405
16:39:50,680 --> 16:39:56,116
create table commands are so to do this

26406
16:39:52,796 --> 16:39:58,720
I'm going to say mode CSV so that SQL

26407
16:39:56,116 --> 16:40:00,476
light knows that this is the command uh

26408
16:39:58,720 --> 16:40:02,840
knows that this is a CSV file it's

26409
16:40:00,476 --> 16:40:04,720
literally mode so the dot comes before

26410
16:40:02,840 --> 16:40:07,636
the keyword there and now I'm going to

26411
16:40:04,720 --> 16:40:08,916
say do import and then the name of the

26412
16:40:07,636 --> 16:40:12,720
file I want to import which is

26413
16:40:08,916 --> 16:40:14,719
favorites. CSV and now the name of the

26414
16:40:12,720 --> 16:40:16,436
table that I want to create with that

26415
16:40:14,720 --> 16:40:17,956
data and just for consistency I'm going

26416
16:40:16,436 --> 16:40:19,796
to call it favorites I could change

26417
16:40:17,956 --> 16:40:22,276
these things to be anything I want but

26418
16:40:19,796 --> 16:40:24,200
I'm going to do that and voila nothing

26419
16:40:22,276 --> 16:40:26,436
seems to have happened but just like in

26420
16:40:24,200 --> 16:40:27,755
C and in Python in Linux when nothing

26421
16:40:26,436 --> 16:40:30,520
seems to happen that's usually a good

26422
16:40:27,756 --> 16:40:32,400
thing it means I didn't mess up so if I

26423
16:40:30,520 --> 16:40:34,435
want to see what just happened there's

26424
16:40:32,400 --> 16:40:37,116
this other command and these commands

26425
16:40:34,436 --> 16:40:38,880
that start with dots these are SQL light

26426
16:40:37,116 --> 16:40:41,520
specific which is indeed a lightweight

26427
16:40:38,880 --> 16:40:43,320
version of SQL they're not SQL per se so

26428
16:40:41,520 --> 16:40:44,475
if you're using Oracle or something else

26429
16:40:43,320 --> 16:40:46,276
like that you're not going to use these

26430
16:40:44,476 --> 16:40:48,320
exact commands you'll see the ones we

26431
16:40:46,276 --> 16:40:51,720
use in just a moment and here's the

26432
16:40:48,320 --> 16:40:53,560
first when I type schema the schema of a

26433
16:40:51,720 --> 16:40:55,436
database is the design of the database

26434
16:40:53,560 --> 16:40:57,680
what are the tables what are the columns

26435
16:40:55,436 --> 16:41:00,040
and all of that so when I type schema

26436
16:40:57,680 --> 16:41:02,160
this actually in this case shows me that

26437
16:41:00,040 --> 16:41:05,040
create table command that was

26438
16:41:02,160 --> 16:41:06,756
automatically run for me by just doing

26439
16:41:05,040 --> 16:41:08,680
this import line once I get more

26440
16:41:06,756 --> 16:41:10,596
comfortable with SQL I could literally

26441
16:41:08,680 --> 16:41:12,476
type this out myself or use some program

26442
16:41:10,596 --> 16:41:15,115
to generate that as well but what it's

26443
16:41:12,476 --> 16:41:16,916
creating for me is this create table if

26444
16:41:15,116 --> 16:41:19,400
it doesn't exist even though it's more

26445
16:41:16,916 --> 16:41:21,840
tur than that I want to create a table

26446
16:41:19,400 --> 16:41:24,360
called favorites and then the columns

26447
16:41:21,840 --> 16:41:27,320
for that table are going to be timestamp

26448
16:41:24,360 --> 16:41:29,320
which is going to be text comma language

26449
16:41:27,320 --> 16:41:31,040
which is also going to be text comma

26450
16:41:29,320 --> 16:41:33,916
problem which is also going to be text

26451
16:41:31,040 --> 16:41:36,720
that was just inferred very trivially by

26452
16:41:33,916 --> 16:41:38,520
the do import command to just figure out

26453
16:41:36,720 --> 16:41:41,636
that yes just give me a three column

26454
16:41:38,520 --> 16:41:44,359
database table based on the Google

26455
16:41:41,636 --> 16:41:46,040
form okay questions on this these are

26456
16:41:44,360 --> 16:41:48,080
commands you run once to get up and

26457
16:41:46,040 --> 16:41:50,360
running you don't run these commands

26458
16:41:48,080 --> 16:41:52,596
frequently but we have them on the slide

26459
16:41:50,360 --> 16:41:53,840
just for reference all right so now

26460
16:41:52,596 --> 16:41:55,596
let's do something a little more

26461
16:41:53,840 --> 16:41:57,276
interesting I'm going to clear my SQL

26462
16:41:55,596 --> 16:41:59,360
light terminal here but I'm still in SQL

26463
16:41:57,276 --> 16:42:02,756
light I'm going to now use some of my

26464
16:41:59,360 --> 16:42:06,476
first SQL commands which recall were uh

26465
16:42:02,756 --> 16:42:08,720
were among them uh select so crud c r UD

26466
16:42:06,476 --> 16:42:10,160
D the r was select this is maybe the

26467
16:42:08,720 --> 16:42:12,240
most common the most useful the most

26468
16:42:10,160 --> 16:42:14,160
powerful thing to use with a SQL

26469
16:42:12,240 --> 16:42:15,475
database selecting data to answer

26470
16:42:14,160 --> 16:42:17,840
questions akin to the ones we were

26471
16:42:15,476 --> 16:42:19,360
trying to answer with python this is the

26472
16:42:17,840 --> 16:42:21,039
general syntax anytime you want to

26473
16:42:19,360 --> 16:42:23,360
select data from a SQL database you

26474
16:42:21,040 --> 16:42:25,596
literally say select you then specify

26475
16:42:23,360 --> 16:42:28,200
the column or columns that you want to

26476
16:42:25,596 --> 16:42:30,159
select data from you literally write the

26477
16:42:28,200 --> 16:42:32,159
word from and then you specify the name

26478
16:42:30,160 --> 16:42:34,916
of the table you want to get that data

26479
16:42:32,160 --> 16:42:37,040
from semicolon in this case everything

26480
16:42:34,916 --> 16:42:38,880
that's in capitals here is a sequel

26481
16:42:37,040 --> 16:42:40,756
keyword strictly speaking you don't have

26482
16:42:38,880 --> 16:42:42,755
to capitalize things but we would

26483
16:42:40,756 --> 16:42:44,320
encourage you to do so stylistically and

26484
16:42:42,756 --> 16:42:46,240
especially as you're learning and even

26485
16:42:44,320 --> 16:42:48,840
as you're writing it it just helps to

26486
16:42:46,240 --> 16:42:50,756
distinguish SQL from like words you

26487
16:42:48,840 --> 16:42:53,636
chose like the names of the columns and

26488
16:42:50,756 --> 16:42:55,840
the data there're in so uh do adopt

26489
16:42:53,636 --> 16:42:58,720
early on this convention so let me go

26490
16:42:55,840 --> 16:43:00,359
back now to my code space here I'm

26491
16:42:58,720 --> 16:43:02,320
running my terminal window with SQL

26492
16:43:00,360 --> 16:43:04,080
light 3 inside of it suppose that I just

26493
16:43:02,320 --> 16:43:06,596
want to get all of the data from the

26494
16:43:04,080 --> 16:43:09,240
favorites table which was automatically

26495
16:43:06,596 --> 16:43:13,240
imported let's do this select I want

26496
16:43:09,240 --> 16:43:16,240
everything well I can do timestamp comma

26497
16:43:13,240 --> 16:43:18,520
language comma problem but you know what

26498
16:43:16,240 --> 16:43:20,475
here's a uh convenience already if you

26499
16:43:18,520 --> 16:43:22,359
want everything there's what's called a

26500
16:43:20,476 --> 16:43:24,520
wild card character in SQL which is just

26501
16:43:22,360 --> 16:43:26,560
a star in asterisk which means give me

26502
16:43:24,520 --> 16:43:28,276
every column without my knowing even

26503
16:43:26,560 --> 16:43:31,040
what they're called let me go ahead now

26504
16:43:28,276 --> 16:43:33,840
and say from favorite it's semicolon and

26505
16:43:31,040 --> 16:43:35,916
this is the SQL way of opening the

26506
16:43:33,840 --> 16:43:37,795
database iterating over every row

26507
16:43:35,916 --> 16:43:40,079
they're in printing out every row

26508
16:43:37,796 --> 16:43:42,116
therein done so those three steps which

26509
16:43:40,080 --> 16:43:45,200
was like nine lines of python code give

26510
16:43:42,116 --> 16:43:49,160
or take earlier is now one line of SQL I

26511
16:43:45,200 --> 16:43:51,435
hit enter there is all of the data so I

26512
16:43:49,160 --> 16:43:54,320
see now all of the data just outputed as

26513
16:43:51,436 --> 16:43:55,880
a CSV here but it's not the CSV file

26514
16:43:54,320 --> 16:43:57,916
it's now actually the table and in fact

26515
16:43:55,880 --> 16:43:59,159
just for good measure let me do this CU

26516
16:43:57,916 --> 16:44:01,079
you'll see the behavior a little

26517
16:43:59,160 --> 16:44:03,320
different the next time we open the file

26518
16:44:01,080 --> 16:44:04,880
I've just exited out of SQL light 3 I'm

26519
16:44:03,320 --> 16:44:06,680
going to rerun it but I'm not going to

26520
16:44:04,880 --> 16:44:08,956
reimport the data or do anything like

26521
16:44:06,680 --> 16:44:10,916
that because my file now exists in fact

26522
16:44:08,956 --> 16:44:13,240
let me take one step back if I type LS

26523
16:44:10,916 --> 16:44:15,680
at my Linux prompt there's my favorites.

26524
16:44:13,240 --> 16:44:17,596
py from before there's my favorites. CSV

26525
16:44:15,680 --> 16:44:20,916
from before and here's a third file that

26526
16:44:17,596 --> 16:44:22,916
I did create a moment ago when I first

26527
16:44:20,916 --> 16:44:25,475
ran SQL light 3 so the data is

26528
16:44:22,916 --> 16:44:27,636
persistent it's not using Ram or memory

26529
16:44:25,476 --> 16:44:29,240
anything I do now is save there so let's

26530
16:44:27,636 --> 16:44:31,200
go ahead and rerun SQL light 3 with the

26531
16:44:29,240 --> 16:44:32,400
same file but I'm not going to I don't

26532
16:44:31,200 --> 16:44:34,276
have to reort everything because the

26533
16:44:32,400 --> 16:44:36,956
file already exists let me now do that

26534
16:44:34,276 --> 16:44:39,000
same thing again select star from

26535
16:44:36,956 --> 16:44:40,956
favorites to get all of the data and

26536
16:44:39,000 --> 16:44:42,956
what you'll see now is the same data but

26537
16:44:40,956 --> 16:44:46,240
it's a little prettier now because I

26538
16:44:42,956 --> 16:44:48,240
reran it I effectively disabled CSV mode

26539
16:44:46,240 --> 16:44:52,840
this time and what I'm now seeing is the

26540
16:44:48,240 --> 16:44:54,795
entire contents of this database table

26541
16:44:52,840 --> 16:44:56,560
called favorit now there's nothing new

26542
16:44:54,796 --> 16:44:58,560
here but you're just seeing now like an

26543
16:44:56,560 --> 16:45:00,756
asky or Unicode version of all of the

26544
16:44:58,560 --> 16:45:02,159
same data from that database well

26545
16:45:00,756 --> 16:45:03,596
suppose I want to get a subset of the

26546
16:45:02,160 --> 16:45:05,320
data well let me clear my screen and

26547
16:45:03,596 --> 16:45:07,040
just like in Linux I can hit contrl L

26548
16:45:05,320 --> 16:45:08,840
just to clean things up aesthetically

26549
16:45:07,040 --> 16:45:11,276
suppose I want to get just the languages

26550
16:45:08,840 --> 16:45:13,399
so I could do select language from

26551
16:45:11,276 --> 16:45:16,360
favorites and this will now select not

26552
16:45:13,400 --> 16:45:18,720
all three columns AKA star this will

26553
16:45:16,360 --> 16:45:21,000
only select the language column and all

26554
16:45:18,720 --> 16:45:24,080
of the data they're in if I hit enter

26555
16:45:21,000 --> 16:45:26,520
voila now I just see those there no time

26556
16:45:24,080 --> 16:45:28,596
Stamps no problems it's just a slice of

26557
16:45:26,520 --> 16:45:30,596
the table if you will all right not that

26558
16:45:28,596 --> 16:45:33,115
interesting still still because it's

26559
16:45:30,596 --> 16:45:36,079
just a big column of data but now things

26560
16:45:33,116 --> 16:45:37,720
get more interesting it turns out in SQL

26561
16:45:36,080 --> 16:45:39,636
that there are functions that come with

26562
16:45:37,720 --> 16:45:42,636
this language just like C just like

26563
16:45:39,636 --> 16:45:44,596
python in SQL some of the more useful

26564
16:45:42,636 --> 16:45:47,000
ones some of the simpler ones are these

26565
16:45:44,596 --> 16:45:49,756
here average count distinct lower Max

26566
16:45:47,000 --> 16:45:52,400
Min upper which pretty much uh do what

26567
16:45:49,756 --> 16:45:53,956
they say and count is a particularly

26568
16:45:52,400 --> 16:45:55,756
useful one let's start with that you

26569
16:45:53,956 --> 16:45:57,880
know it's a reasonable question to be

26570
16:45:55,756 --> 16:45:59,680
asked uh how many people submitted the

26571
16:45:57,880 --> 16:46:01,719
Google form by the time I actually

26572
16:45:59,680 --> 16:46:03,720
downloaded the CSV well why don't we go

26573
16:46:01,720 --> 16:46:05,680
ahead and do this let me go back to VSS

26574
16:46:03,720 --> 16:46:09,560
code here in my terminal window let me

26575
16:46:05,680 --> 16:46:12,080
select not star but the count of star so

26576
16:46:09,560 --> 16:46:14,916
give me the count of the rows that are

26577
16:46:12,080 --> 16:46:16,720
being returned from the database called

26578
16:46:14,916 --> 16:46:17,916
uh the database table called favorites

26579
16:46:16,720 --> 16:46:19,680
now when I hit enter I'm not going to

26580
16:46:17,916 --> 16:46:24,435
get all the data I'm just going to get

26581
16:46:19,680 --> 16:46:26,000
simply a number 430 rows came back so

26582
16:46:24,436 --> 16:46:28,000
that's pretty good I now know how much

26583
16:46:26,000 --> 16:46:30,240
data is in there well what languages

26584
16:46:28,000 --> 16:46:33,476
were in there well I could do select

26585
16:46:30,240 --> 16:46:34,795
language from favorit just as before but

26586
16:46:33,476 --> 16:46:36,436
that's not that useful especially if I'm

26587
16:46:34,796 --> 16:46:38,000
inheriting the data like I'm the analyst

26588
16:46:36,436 --> 16:46:39,160
who's been handed a data set by my boss

26589
16:46:38,000 --> 16:46:41,680
and they want me to like crunch some

26590
16:46:39,160 --> 16:46:44,000
numbers okay I could like load this into

26591
16:46:41,680 --> 16:46:46,200
Excel I could sort it but you can use

26592
16:46:44,000 --> 16:46:48,840
SQL now to answer pretty basic questions

26593
16:46:46,200 --> 16:46:50,475
too if you want to select the distinct

26594
16:46:48,840 --> 16:46:52,115
languages in the data set because you

26595
16:46:50,476 --> 16:46:55,276
didn't you weren't privy to the Google

26596
16:46:52,116 --> 16:46:58,756
form let me go ahead and select only the

26597
16:46:55,276 --> 16:47:01,240
distinct languages from the favorites

26598
16:46:58,756 --> 16:47:03,276
table and now I hit enter and I get back

26599
16:47:01,240 --> 16:47:05,115
a much more succinct answer just the

26600
16:47:03,276 --> 16:47:07,040
three languages in question not really

26601
16:47:05,116 --> 16:47:08,880
that useful since I created the Google

26602
16:47:07,040 --> 16:47:10,000
form but certainly if you're inheriting

26603
16:47:08,880 --> 16:47:11,840
data from someone else you've just

26604
16:47:10,000 --> 16:47:13,796
downloaded a data set at least now I'm

26605
16:47:11,840 --> 16:47:16,359
arguably wrapping my mind around what's

26606
16:47:13,796 --> 16:47:18,360
going on now this is not necessary for

26607
16:47:16,360 --> 16:47:20,720
such a small data set but I can combine

26608
16:47:18,360 --> 16:47:23,680
these things select the count of the

26609
16:47:20,720 --> 16:47:25,400
distinct languages in this data set

26610
16:47:23,680 --> 16:47:26,680
called favorites and now I should get

26611
16:47:25,400 --> 16:47:29,320
back what

26612
16:47:26,680 --> 16:47:30,560
answer so hopefully indeed an answer

26613
16:47:29,320 --> 16:47:33,000
called three and what you're getting

26614
16:47:30,560 --> 16:47:36,520
back notice aesthetically too is like a

26615
16:47:33,000 --> 16:47:38,916
mini temporary table when I asked for uh

26616
16:47:36,520 --> 16:47:41,200
just the distinct languages what SQL

26617
16:47:38,916 --> 16:47:43,240
hands me back is this temporary table in

26618
16:47:41,200 --> 16:47:45,795
memory that has one column called

26619
16:47:43,240 --> 16:47:48,115
language and then two row uh three rows

26620
16:47:45,796 --> 16:47:50,200
now this is not saved anywhere it's just

26621
16:47:48,116 --> 16:47:51,956
executed ephemerally like this but

26622
16:47:50,200 --> 16:47:54,000
that's why it's depicted in this way

26623
16:47:51,956 --> 16:47:56,240
what you're getting is subsets of your

26624
16:47:54,000 --> 16:47:58,000
data smaller tables containing some of

26625
16:47:56,240 --> 16:47:59,756
your data and same thing down here this

26626
16:47:58,000 --> 16:48:01,840
is like a crazy long

26627
16:47:59,756 --> 16:48:04,840
uh column name you can rename it if you

26628
16:48:01,840 --> 16:48:06,679
really want uh but uh that's all we're

26629
16:48:04,840 --> 16:48:09,159
seeing there and in fact if that's a

26630
16:48:06,680 --> 16:48:12,040
little ugly we can actually Alias These

26631
16:48:09,160 --> 16:48:14,000
Things N is a common uh name for a

26632
16:48:12,040 --> 16:48:15,796
variable a number in any programming

26633
16:48:14,000 --> 16:48:19,000
language so I can actually alas this to

26634
16:48:15,796 --> 16:48:21,116
be a column called n hit enter and now

26635
16:48:19,000 --> 16:48:23,756
I'm getting a tiny tiny table whose

26636
16:48:21,116 --> 16:48:24,720
column is called n that just has the one

26637
16:48:23,756 --> 16:48:28,116
value

26638
16:48:24,720 --> 16:48:32,636
there all right questions on

26639
16:48:28,116 --> 16:48:32,636
these application of these functions

26640
16:48:32,880 --> 16:48:40,880
here no questions

26641
16:48:36,436 --> 16:48:43,320
yeah say a little louder as oh as as

26642
16:48:40,880 --> 16:48:45,475
literally in English so name this column

26643
16:48:43,320 --> 16:48:47,956
rename this column as this technically

26644
16:48:45,476 --> 16:48:50,436
it creates an alias for the column so

26645
16:48:47,956 --> 16:48:50,436
that's all

26646
16:48:51,680 --> 16:48:56,080
yeah exactly distinct will operate on

26647
16:48:54,320 --> 16:48:57,720
whatever you handed in parentheses and

26648
16:48:56,080 --> 16:48:59,956
get rid of all of the duplicates giving

26649
16:48:57,720 --> 16:49:04,200
you back just the unique

26650
16:48:59,956 --> 16:49:04,200
correct other questions here

26651
16:49:08,840 --> 16:49:13,115
yeah good question when you define an

26652
16:49:11,116 --> 16:49:14,596
alias like n which I just did does it

26653
16:49:13,116 --> 16:49:16,956
become like a variable you can reuse

26654
16:49:14,596 --> 16:49:19,360
short answer no in this case but you can

26655
16:49:16,956 --> 16:49:21,400
reuse it within your same query even

26656
16:49:19,360 --> 16:49:23,880
though these these queries are getting a

26657
16:49:21,400 --> 16:49:27,000
little longer admittedly statements that

26658
16:49:23,880 --> 16:49:29,560
they are uh you can actually reuse n in

26659
16:49:27,000 --> 16:49:30,916
even longer queries so later in your

26660
16:49:29,560 --> 16:49:32,956
query and we'll see a few that are start

26661
16:49:30,916 --> 16:49:35,040
to going to start to grow in length so

26662
16:49:32,956 --> 16:49:36,795
it's a a nice way of nicknaming things

26663
16:49:35,040 --> 16:49:39,240
just to be a little more tur in your

26664
16:49:36,796 --> 16:49:41,080
query so we can transition to some of

26665
16:49:39,240 --> 16:49:43,200
these more sophisticated queries because

26666
16:49:41,080 --> 16:49:45,200
it turns out there's some other uh

26667
16:49:43,200 --> 16:49:47,360
techniques we can introduce as well here

26668
16:49:45,200 --> 16:49:49,079
are some other keywords in SQL and again

26669
16:49:47,360 --> 16:49:50,560
even though like this is another list of

26670
16:49:49,080 --> 16:49:51,956
things there's only four things

26671
16:49:50,560 --> 16:49:54,159
fundamentally we're doing creating

26672
16:49:51,956 --> 16:49:56,276
reading updating and deleting data these

26673
16:49:54,160 --> 16:49:59,240
are just allowing us to like fine-tune

26674
16:49:56,276 --> 16:50:00,916
how we do it exactly so where is going

26675
16:49:59,240 --> 16:50:03,040
to allow us to filter data as we'll do

26676
16:50:00,916 --> 16:50:06,560
in just a moment like select data where

26677
16:50:03,040 --> 16:50:08,276
this conditional is true uh like is

26678
16:50:06,560 --> 16:50:10,435
going to be an alternative to an equal

26679
16:50:08,276 --> 16:50:13,636
sign so instead of looking for exactly

26680
16:50:10,436 --> 16:50:15,956
scratch or exactly python or exactly C

26681
16:50:13,636 --> 16:50:17,276
you can look for something like dot dot

26682
16:50:15,956 --> 16:50:19,560
dot and it can be a little bit of a

26683
16:50:17,276 --> 16:50:21,276
fuzzier match if you will uh with other

26684
16:50:19,560 --> 16:50:23,399
characters as well order by is going to

26685
16:50:21,276 --> 16:50:25,200
deal with sorting limit is going to just

26686
16:50:23,400 --> 16:50:28,116
let me limit the total number of rows

26687
16:50:25,200 --> 16:50:29,956
that come back to one or 10 or finite if

26688
16:50:28,116 --> 16:50:31,080
I don't want to see all 400 plus rows

26689
16:50:29,956 --> 16:50:33,520
all at once because I'm just trying to

26690
16:50:31,080 --> 16:50:35,320
wrap my mind around it and group by is

26691
16:50:33,520 --> 16:50:37,039
best shown by example so let's play with

26692
16:50:35,320 --> 16:50:39,116
just a couple of these as well let me go

26693
16:50:37,040 --> 16:50:41,040
back to vs code here I'll clear my

26694
16:50:39,116 --> 16:50:43,520
screen I'm still in the same SQL light

26695
16:50:41,040 --> 16:50:45,956
instance and let's count how many of you

26696
16:50:43,520 --> 16:50:48,240
likeed C without writing python code as

26697
16:50:45,956 --> 16:50:53,240
before so let me go ahead and select the

26698
16:50:48,240 --> 16:50:57,040
count of the rows from favorites where

26699
16:50:53,240 --> 16:50:58,916
the language in each row equals c and

26700
16:50:57,040 --> 16:51:01,560
the convention in SQL light is to use

26701
16:50:58,916 --> 16:51:03,435
single quotes anytime you're surrounding

26702
16:51:01,560 --> 16:51:06,596
a string that's meant to represent a

26703
16:51:03,436 --> 16:51:08,240
literal piece of text uh as opposed to C

26704
16:51:06,596 --> 16:51:10,360
which was double quotes or python which

26705
16:51:08,240 --> 16:51:13,436
was either so this is selecting the

26706
16:51:10,360 --> 16:51:16,400
count of rows from favorites table where

26707
16:51:13,436 --> 16:51:19,240
the language in question is C enter and

26708
16:51:16,400 --> 16:51:22,000
this gives me 98 notice though if I omit

26709
16:51:19,240 --> 16:51:25,320
that predicate like we did before you'll

26710
16:51:22,000 --> 16:51:27,360
get back the total number of rows that

26711
16:51:25,320 --> 16:51:28,680
were in the table so where is what's

26712
16:51:27,360 --> 16:51:30,720
called a predicate that just allows me

26713
16:51:28,680 --> 16:51:32,520
to filter things just like an if

26714
16:51:30,720 --> 16:51:34,200
condition or the like in a language that

26715
16:51:32,520 --> 16:51:36,039
we've seen before you can be a little

26716
16:51:34,200 --> 16:51:40,159
more specific like how many people

26717
16:51:36,040 --> 16:51:42,636
really liked C and the Mario program uh

26718
16:51:40,160 --> 16:51:44,796
problem specifically well let's do this

26719
16:51:42,636 --> 16:51:48,320
uh let's go ahead and do select the

26720
16:51:44,796 --> 16:51:53,320
number of rows from the favorites table

26721
16:51:48,320 --> 16:51:55,116
where the language is C and so it's uh

26722
16:51:53,320 --> 16:51:58,240
still literally the word ands and or

26723
16:51:55,116 --> 16:51:59,276
just like in Python but not like in C uh

26724
16:51:58,240 --> 16:52:01,115
and

26725
16:51:59,276 --> 16:52:04,040
equals Mario so let's see if there's any

26726
16:52:01,116 --> 16:52:06,520
fans of both C and the Mario problem and

26727
16:52:04,040 --> 16:52:08,520
three of us really like those two things

26728
16:52:06,520 --> 16:52:10,596
together in this case all right what

26729
16:52:08,520 --> 16:52:12,795
else can we do well more compelling

26730
16:52:10,596 --> 16:52:14,596
might be to see kind of like in Python

26731
16:52:12,796 --> 16:52:16,956
for each language what was the

26732
16:52:14,596 --> 16:52:18,720
popularity thereof and at the moment we

26733
16:52:16,956 --> 16:52:20,320
don't really have a way of doing that

26734
16:52:18,720 --> 16:52:21,476
except in Python where we had the loop

26735
16:52:20,320 --> 16:52:22,916
and we had those variables with the

26736
16:52:21,476 --> 16:52:24,880
dictionary that did all that counting

26737
16:52:22,916 --> 16:52:26,399
for us you know totally doable but

26738
16:52:24,880 --> 16:52:28,755
tedious especially if your job is to

26739
16:52:26,400 --> 16:52:30,520
analyze data my God like even writing 15

26740
16:52:28,756 --> 16:52:33,200
lines of code to answer simple questions

26741
16:52:30,520 --> 16:52:36,000
is kind of ridiculous SQL can do better

26742
16:52:33,200 --> 16:52:38,560
for us so let me go ahead and do this

26743
16:52:36,000 --> 16:52:43,436
let me go ahead and select every

26744
16:52:38,560 --> 16:52:47,200
language and the count thereof from the

26745
16:52:43,436 --> 16:52:50,116
favorites table but this time Group by

26746
16:52:47,200 --> 16:52:52,115
language so this was another one of the

26747
16:52:50,116 --> 16:52:54,200
keywords that we can use in this

26748
16:52:52,116 --> 16:52:56,956
abbreviated list of extra features of

26749
16:52:54,200 --> 16:52:58,320
SQL and this one's a little takes a

26750
16:52:56,956 --> 16:53:00,560
moment to wrap your mind around but this

26751
16:52:58,320 --> 16:53:02,476
is going to give me a two column

26752
16:53:00,560 --> 16:53:04,560
temporary table where the First Column

26753
16:53:02,476 --> 16:53:08,080
is a language and the second column is

26754
16:53:04,560 --> 16:53:10,880
the count thereof from this data set and

26755
16:53:08,080 --> 16:53:13,596
group by language just means that only

26756
16:53:10,880 --> 16:53:15,520
show me scratch once only show me c once

26757
16:53:13,596 --> 16:53:18,840
only show me python once that is group

26758
16:53:15,520 --> 16:53:21,795
all of the identical values together but

26759
16:53:18,840 --> 16:53:25,956
keep track of how many of them there are

26760
16:53:21,796 --> 16:53:29,596
and so now if I go over to SQL light and

26761
16:53:25,956 --> 16:53:31,680
I hit enter now I have in SQL version

26762
16:53:29,596 --> 16:53:34,000
the exact same output that I had from

26763
16:53:31,680 --> 16:53:36,436
python that took me what 15 plus lines

26764
16:53:34,000 --> 16:53:38,400
before now we're down to just one

26765
16:53:36,436 --> 16:53:40,560
because SQL structured query language is

26766
16:53:38,400 --> 16:53:43,240
all about constructing queries like this

26767
16:53:40,560 --> 16:53:44,916
to answer questions and get back answers

26768
16:53:43,240 --> 16:53:46,276
quickly if we want to clean this up a

26769
16:53:44,916 --> 16:53:48,520
little bit you asked earlier about

26770
16:53:46,276 --> 16:53:50,916
sorting order well we can do that too

26771
16:53:48,520 --> 16:53:54,475
there's another uh key phrase we can use

26772
16:53:50,916 --> 16:53:57,755
here we can order by the count of those

26773
16:53:54,476 --> 16:53:59,320
rows and then run that query here so now

26774
16:53:57,756 --> 16:54:01,520
unfortunately they're from smallest to

26775
16:53:59,320 --> 16:54:03,000
biggest but we can reverse that it turns

26776
16:54:01,520 --> 16:54:05,039
out and my query is starting to wrap

26777
16:54:03,000 --> 16:54:08,000
here I'll I'll zoom out for a moment if

26778
16:54:05,040 --> 16:54:11,160
you want to order by count the default

26779
16:54:08,000 --> 16:54:13,360
is in ascending order abbreviated ASC if

26780
16:54:11,160 --> 16:54:15,200
you want to reverse the sort in SQL

26781
16:54:13,360 --> 16:54:17,880
instead of using reverse equals true

26782
16:54:15,200 --> 16:54:19,636
like we did in Python you say DC for

26783
16:54:17,880 --> 16:54:22,040
descending order and now we get almost

26784
16:54:19,636 --> 16:54:23,560
the same output but flipped in Reverse

26785
16:54:22,040 --> 16:54:24,916
so it's just a lot faster to answer

26786
16:54:23,560 --> 16:54:27,200
questions once of course you get some

26787
16:54:24,916 --> 16:54:28,956
muscle memory and some comfort with it

26788
16:54:27,200 --> 16:54:30,956
well what else can I do you know what if

26789
16:54:28,956 --> 16:54:32,560
I just care about the most popular

26790
16:54:30,956 --> 16:54:34,116
language I don't care about the second

26791
16:54:32,560 --> 16:54:36,320
place or the third place languages or

26792
16:54:34,116 --> 16:54:39,360
anything else well let me add one more

26793
16:54:36,320 --> 16:54:41,276
Clause here limit the answer to one and

26794
16:54:39,360 --> 16:54:43,636
no matter how many rows should come back

26795
16:54:41,276 --> 16:54:46,320
now I just get the number one language

26796
16:54:43,636 --> 16:54:49,520
as of the data set we collected with 27

26797
16:54:46,320 --> 16:54:51,360
uh 270 votes for

26798
16:54:49,520 --> 16:54:53,435
it

26799
16:54:51,360 --> 16:54:56,880
questions on

26800
16:54:53,436 --> 16:54:59,560
this any questions

26801
16:54:56,880 --> 16:55:01,399
here no well what if uh you know we're

26802
16:54:59,560 --> 16:55:03,435
starting to introduce SQL and it was

26803
16:55:01,400 --> 16:55:05,200
kind of too late to make it into the

26804
16:55:03,436 --> 16:55:07,436
this the Google form so it turns out

26805
16:55:05,200 --> 16:55:08,916
there Syntax for this too you can create

26806
16:55:07,436 --> 16:55:10,720
data of course not just the tables but

26807
16:55:08,916 --> 16:55:13,040
the data they're in and here's like the

26808
16:55:10,720 --> 16:55:15,276
typical Syntax for inserting data into a

26809
16:55:13,040 --> 16:55:17,840
SQL database you literally say insert

26810
16:55:15,276 --> 16:55:20,040
into the name of the table and then in

26811
16:55:17,840 --> 16:55:22,276
parentheses you specify one or more

26812
16:55:20,040 --> 16:55:24,000
columns for which you have values that

26813
16:55:22,276 --> 16:55:26,475
you want to insert this is to say you

26814
16:55:24,000 --> 16:55:28,880
don't have to give values for every

26815
16:55:26,476 --> 16:55:30,560
column in the given row if you only have

26816
16:55:28,880 --> 16:55:32,596
answers to some of those questions you

26817
16:55:30,560 --> 16:55:34,159
can enumerate them here like this but

26818
16:55:32,596 --> 16:55:35,720
the values you insert are going to be

26819
16:55:34,160 --> 16:55:38,520
these so you literally say after the

26820
16:55:35,720 --> 16:55:40,436
closed parenthesis values and then in a

26821
16:55:38,520 --> 16:55:42,916
second set of parentheses with the same

26822
16:55:40,436 --> 16:55:44,756
length comma separated list you specify

26823
16:55:42,916 --> 16:55:47,399
what values do you want to insert so

26824
16:55:44,756 --> 16:55:48,720
it's a little verbose and frankly longer

26825
16:55:47,400 --> 16:55:50,400
term you're going to use like python

26826
16:55:48,720 --> 16:55:52,000
code to automatically do these kinds of

26827
16:55:50,400 --> 16:55:55,040
insertions but let's go ahead and try

26828
16:55:52,000 --> 16:55:59,476
this right now if I do select

26829
16:55:55,040 --> 16:56:01,916
distinct uh language from favorites

26830
16:55:59,476 --> 16:56:03,560
again we see this just these three

26831
16:56:01,916 --> 16:56:06,795
candidates but we've now taught you a

26832
16:56:03,560 --> 16:56:10,240
bit of sequel so let's do insert into

26833
16:56:06,796 --> 16:56:13,080
favorites the column called

26834
16:56:10,240 --> 16:56:15,240
language uh and you know what let's I'm

26835
16:56:13,080 --> 16:56:16,956
going to give a problem here the values

26836
16:56:15,240 --> 16:56:19,040
for which and let me Zoom back out are

26837
16:56:16,956 --> 16:56:21,560
going to be quote unquote SQL and quote

26838
16:56:19,040 --> 16:56:24,520
unquote 50v you'll see soon see what

26839
16:56:21,560 --> 16:56:26,475
that's all about semicolon nothing seems

26840
16:56:24,520 --> 16:56:28,399
to happen but that's usually a good

26841
16:56:26,476 --> 16:56:29,956
thing and now if I scroll back up in my

26842
16:56:28,400 --> 16:56:32,276
my queries in SQL light three you can

26843
16:56:29,956 --> 16:56:35,080
scroll back and forth in time and uh to

26844
16:56:32,276 --> 16:56:38,079
avoid retyping things now I should see

26845
16:56:35,080 --> 16:56:39,636
indeed four candidate languages here now

26846
16:56:38,080 --> 16:56:41,596
suppose that you were never really a fan

26847
16:56:39,636 --> 16:56:43,436
of c and maybe you uh programmed a

26848
16:56:41,596 --> 16:56:46,276
little bit in high school or in the real

26849
16:56:43,436 --> 16:56:50,080
world and you liked C++ well there's a

26850
16:56:46,276 --> 16:56:54,436
whole lot of answers for C so select

26851
16:56:50,080 --> 16:56:56,476
star from favorites where language

26852
16:56:54,436 --> 16:56:59,360
equals quote unquote C so here's

26853
16:56:56,476 --> 16:57:00,840
everyone who submitted the answer for C

26854
16:56:59,360 --> 16:57:02,720
let's presume that no they didn't really

26855
16:57:00,840 --> 16:57:04,320
want C they wanted C++ which is not a

26856
16:57:02,720 --> 16:57:07,040
language we teach in the class but I

26857
16:57:04,320 --> 16:57:09,476
could also now do this you can use the

26858
16:57:07,040 --> 16:57:11,756
update command to set a column or

26859
16:57:09,476 --> 16:57:14,000
columns to different values where some

26860
16:57:11,756 --> 16:57:17,796
condition is met so if I do update table

26861
16:57:14,000 --> 16:57:20,560
name set column name equal to some value

26862
16:57:17,796 --> 16:57:22,796
filtering it perhaps by where some

26863
16:57:20,560 --> 16:57:25,475
condition is true so suppose I've

26864
16:57:22,796 --> 16:57:27,000
changed my mind or you know what let's

26865
16:57:25,476 --> 16:57:31,200
go ahead and do

26866
16:57:27,000 --> 16:57:36,596
update uh favorites set language equal

26867
16:57:31,200 --> 16:57:38,240
to maybe C++ where language equals c now

26868
16:57:36,596 --> 16:57:39,520
this is destructive so you generally

26869
16:57:38,240 --> 16:57:41,475
don't want to do this unless you have a

26870
16:57:39,520 --> 16:57:43,240
backup of your data too overriding what

26871
16:57:41,476 --> 16:57:44,476
people's answers are this seems to have

26872
16:57:43,240 --> 16:57:46,596
been successful because no error

26873
16:57:44,476 --> 16:57:48,276
messages and if I rerun the previous

26874
16:57:46,596 --> 16:57:50,560
select that gives me all of the

26875
16:57:48,276 --> 16:57:53,475
favorites where language equals c now

26876
16:57:50,560 --> 16:57:56,320
indeed I get none but if I search for

26877
16:57:53,476 --> 16:57:57,840
C++ now I get a lot and if I get rid of

26878
16:57:56,320 --> 16:58:00,200
that wear Clause altogether and just

26879
16:57:57,840 --> 16:58:02,560
look at the contents of my database now

26880
16:58:00,200 --> 16:58:04,200
you see that indeed C++ is comingled

26881
16:58:02,560 --> 16:58:06,276
with all the other data this is not what

26882
16:58:04,200 --> 16:58:08,115
you all intended of course so I can undo

26883
16:58:06,276 --> 16:58:10,756
this let me go ahead and undo what I

26884
16:58:08,116 --> 16:58:15,000
just did let me set my favorite language

26885
16:58:10,756 --> 16:58:17,636
to C where language equals C plus plus

26886
16:58:15,000 --> 16:58:20,000
but the predicate is important this I'm

26887
16:58:17,636 --> 16:58:22,840
not going to do what if I accidentally

26888
16:58:20,000 --> 16:58:26,720
omitted this predicate the wear Clause

26889
16:58:22,840 --> 16:58:26,719
how would that screw things up might you

26890
16:58:27,240 --> 16:58:34,000
think uh yeah I'm

26891
16:58:30,596 --> 16:58:36,636
back it would set Every Rose language to

26892
16:58:34,000 --> 16:58:38,360
indeed see and this is dangerous and if

26893
16:58:36,636 --> 16:58:40,796
you start googling around for like

26894
16:58:38,360 --> 16:58:43,000
sequel mistakes or the like people in

26895
16:58:40,796 --> 16:58:44,916
the real world have accidentally run

26896
16:58:43,000 --> 16:58:46,476
commands like this and without naming

26897
16:58:44,916 --> 16:58:48,916
names a former member of our teaching

26898
16:58:46,476 --> 16:58:50,520
staff at one point accidentally re ran a

26899
16:58:48,916 --> 16:58:53,276
command like this and changed every

26900
16:58:50,520 --> 16:58:55,435
student's name in our database to Bobby

26901
16:58:53,276 --> 16:58:57,079
I think it was the same name for every

26902
16:58:55,436 --> 16:58:59,240
row because they simply forgot a

26903
16:58:57,080 --> 16:59:01,360
predicate so here to two like there's

26904
16:58:59,240 --> 16:59:03,636
dangers in code and you should adopt The

26905
16:59:01,360 --> 16:59:05,756
Habit quite quickly of always one

26906
16:59:03,636 --> 16:59:08,000
backing up your data like with CP for

26907
16:59:05,756 --> 16:59:11,240
instance in Linux or any other technique

26908
16:59:08,000 --> 16:59:12,956
or just making sure before you hit enter

26909
16:59:11,240 --> 16:59:14,756
that yes this is indeed the query I want

26910
16:59:12,956 --> 16:59:16,276
to execute and generally speaking in the

26911
16:59:14,756 --> 16:59:18,116
real world there should be process

26912
16:59:16,276 --> 16:59:19,756
controls in place like the intern should

26913
16:59:18,116 --> 16:59:21,400
not have access to the datab the

26914
16:59:19,756 --> 16:59:23,360
production database the live database

26915
16:59:21,400 --> 16:59:24,636
and the like but you have a lot of power

26916
16:59:23,360 --> 16:59:26,956
now with these queries so just be all

26917
16:59:24,636 --> 16:59:29,956
the more careful cuz very easily can you

26918
16:59:26,956 --> 16:59:33,320
do bad things so let me undo this where

26919
16:59:29,956 --> 16:59:35,756
language equals quote unquote C++ and

26920
16:59:33,320 --> 16:59:37,956
I'll Zoom back out enter and now I think

26921
16:59:35,756 --> 16:59:40,680
we're back in business C is among the

26922
16:59:37,956 --> 16:59:40,680
answers

26923
16:59:44,200 --> 16:59:48,680
yeah is essentially doing what at the

26924
16:59:46,436 --> 16:59:50,596
end replace it's essentially find and

26925
16:59:48,680 --> 16:59:52,680
replace yes in like lay person's terms

26926
16:59:50,596 --> 16:59:55,159
this is find and replace implemented

26927
16:59:52,680 --> 16:59:58,200
with SQL and in fact the authors of

26928
16:59:55,160 --> 17:00:00,680
Microsoft Word or Google Docs might very

26929
16:59:58,200 --> 17:00:02,276
well be using language like this sequel

26930
17:00:00,680 --> 17:00:04,520
when you go to the nice graphical

26931
17:00:02,276 --> 17:00:06,079
userfriendly find and replace box this

26932
17:00:04,520 --> 17:00:07,475
may very well be what they're doing

26933
17:00:06,080 --> 17:00:09,276
underneath the hood or of course they

26934
17:00:07,476 --> 17:00:12,240
could be using some other language

26935
17:00:09,276 --> 17:00:13,840
altogether there's one last uh syntax

26936
17:00:12,240 --> 17:00:15,320
that's worth knowing delete which for

26937
17:00:13,840 --> 17:00:17,240
better for worse is even more

26938
17:00:15,320 --> 17:00:19,436
destructive whereby it allows you to

26939
17:00:17,240 --> 17:00:21,880
delete rows from tables it's distinct

26940
17:00:19,436 --> 17:00:24,680
from drop which lets you delete tables

26941
17:00:21,880 --> 17:00:28,200
themselves this focuses on rows so

26942
17:00:24,680 --> 17:00:30,796
suppose that you really really didn't

26943
17:00:28,200 --> 17:00:32,719
like let's say uh tedin was a little

26944
17:00:30,796 --> 17:00:34,756
challenging if you adopt if you tackle

26945
17:00:32,720 --> 17:00:36,560
that more comfortable problem so if you

26946
17:00:34,756 --> 17:00:39,320
really don't want to even think about t

26947
17:00:36,560 --> 17:00:42,320
in anymore so why don't we do uh delete

26948
17:00:39,320 --> 17:00:45,080
from favorites where problem equals and

26949
17:00:42,320 --> 17:00:46,880
I won't execute it for real tiamin this

26950
17:00:45,080 --> 17:00:48,796
would have the effect of deleting every

26951
17:00:46,880 --> 17:00:51,040
row including the language therein and

26952
17:00:48,796 --> 17:00:55,520
the time stamp where the student

26953
17:00:51,040 --> 17:00:59,956
answered tiamin worse than this would be

26954
17:00:55,520 --> 17:00:59,956
this why might this be bad

26955
17:01:01,040 --> 17:01:04,840
okay chuckling because like there's no

26956
17:01:02,840 --> 17:01:07,000
predicate there's no filter which means

26957
17:01:04,840 --> 17:01:08,679
literally this would delete all of the

26958
17:01:07,000 --> 17:01:10,796
data so again with great power here

26959
17:01:08,680 --> 17:01:13,276
comes great responsibility now this has

26960
17:01:10,796 --> 17:01:15,400
just been a data set of what 430 rows by

26961
17:01:13,276 --> 17:01:17,360
us dynamically created there's of course

26962
17:01:15,400 --> 17:01:18,560
some really juicy data sets in the real

26963
17:01:17,360 --> 17:01:20,240
world and one website you might have

26964
17:01:18,560 --> 17:01:22,320
heard or an app you might have used is

26965
17:01:20,240 --> 17:01:24,276
IMDb the internet movie database which

26966
17:01:22,320 --> 17:01:26,796
wonderfully makes some of their data

26967
17:01:24,276 --> 17:01:29,436
available for download as CSV files or

26968
17:01:26,796 --> 17:01:31,000
technically tsv files tab separated

26969
17:01:29,436 --> 17:01:33,596
values but what we did in advance of

26970
17:01:31,000 --> 17:01:35,520
class was download some of that data for

26971
17:01:33,596 --> 17:01:36,840
both TV shows in the real world and

26972
17:01:35,520 --> 17:01:38,359
movies in the real world and what's

26973
17:01:36,840 --> 17:01:41,079
wonderful about this data set is it's

26974
17:01:38,360 --> 17:01:43,320
not just dozens or hundreds or even

26975
17:01:41,080 --> 17:01:46,596
thousands of lines there are millions of

26976
17:01:43,320 --> 17:01:48,000
rows of Juicy data TV shows and movies

26977
17:01:46,596 --> 17:01:49,880
with which most folks are probably

26978
17:01:48,000 --> 17:01:52,360
familiar at least with the subset and

26979
17:01:49,880 --> 17:01:55,159
we'll see in just a little bit that this

26980
17:01:52,360 --> 17:01:56,956
data comes in the form of now six

26981
17:01:55,160 --> 17:01:58,636
different tables that we've given you

26982
17:01:56,956 --> 17:02:00,560
and the tables and question for today

26983
17:01:58,636 --> 17:02:02,796
are going to be the people in the TV

26984
17:02:00,560 --> 17:02:04,360
business the Stars they in the shows

26985
17:02:02,796 --> 17:02:06,916
that people are producing and the like

26986
17:02:04,360 --> 17:02:08,240
this is a picture we'll revisit to let

26987
17:02:06,916 --> 17:02:10,475
enable you to wrap your minds around

26988
17:02:08,240 --> 17:02:12,956
what the actual data is this feels like

26989
17:02:10,476 --> 17:02:14,080
a good opportunity though for a snack in

26990
17:02:12,956 --> 17:02:15,596
fact in just a moment we have a whole

26991
17:02:14,080 --> 17:02:17,956
lot of Rice Krispie treats out in the

26992
17:02:15,596 --> 17:02:20,560
lobby but if folks could perhaps

26993
17:02:17,956 --> 17:02:22,680
acknowledge uh this mini wedding cake

26994
17:02:20,560 --> 17:02:26,880
here cs50 own Carter zeni is getting

26995
17:02:22,680 --> 17:02:28,956
married this week so congratulations to

26996
17:02:26,880 --> 17:02:30,159
Carter

26997
17:02:28,956 --> 17:02:32,000
as

26998
17:02:30,160 --> 17:02:35,520
well

26999
17:02:32,000 --> 17:02:35,520
congrats all right there's

27000
17:02:39,560 --> 17:02:43,475
only okay there's only one piece of cake

27001
17:02:41,956 --> 17:02:44,795
in that box but a lot of Rice Krispy

27002
17:02:43,476 --> 17:02:46,276
Treats in the transip let's take 10

27003
17:02:44,796 --> 17:02:49,320
minutes and we'll be back with Internet

27004
17:02:46,276 --> 17:02:50,636
Movie Database in 10 all right we are

27005
17:02:49,320 --> 17:02:53,320
back so if you've never been like you

27006
17:02:50,636 --> 17:02:55,080
can actually go to I imdb.com right now

27007
17:02:53,320 --> 17:02:57,000
and play around or download the mobile

27008
17:02:55,080 --> 17:03:00,080
app and it's just big database of a lot

27009
17:02:57,000 --> 17:03:02,116
of TV show and movies and actors and the

27010
17:03:00,080 --> 17:03:03,680
like but what indeed is nice is you can

27011
17:03:02,116 --> 17:03:05,360
download some of that data and that's in

27012
17:03:03,680 --> 17:03:07,680
what I've done in advance and what we've

27013
17:03:05,360 --> 17:03:10,116
done is we wrote some python code to

27014
17:03:07,680 --> 17:03:12,040
convert some of the uh flat file

27015
17:03:10,116 --> 17:03:15,276
databases that they let you download and

27016
17:03:12,040 --> 17:03:18,400
we converted it into a SQL database with

27017
17:03:15,276 --> 17:03:20,680
six tables so not just one but six that

27018
17:03:18,400 --> 17:03:22,116
ultimately are these here and let me

27019
17:03:20,680 --> 17:03:24,520
just help you wrap your minds around

27020
17:03:22,116 --> 17:03:26,436
what this picture is which is a entity

27021
17:03:24,520 --> 17:03:28,399
relationship diagram which is just to

27022
17:03:26,436 --> 17:03:30,680
say each of these boxes on the screen

27023
17:03:28,400 --> 17:03:32,756
represents a table and each of the

27024
17:03:30,680 --> 17:03:34,680
arrows or edges represents some kind of

27025
17:03:32,756 --> 17:03:36,720
relationship across the tables because

27026
17:03:34,680 --> 17:03:38,360
up until now the only data we had were

27027
17:03:36,720 --> 17:03:40,040
those three columns in the favorites

27028
17:03:38,360 --> 17:03:42,320
table but what's gets really useful

27029
17:03:40,040 --> 17:03:44,476
about SQL databases just like a Google

27030
17:03:42,320 --> 17:03:46,476
spreadsheet or an Excel file is you can

27031
17:03:44,476 --> 17:03:48,956
have multiple sheets or in a database

27032
17:03:46,476 --> 17:03:51,476
multiple tables and so what we're about

27033
17:03:48,956 --> 17:03:53,560
to see is that in this IMDb database for

27034
17:03:51,476 --> 17:03:55,636
TV shows there's going to be a dedicated

27035
17:03:53,560 --> 17:03:57,840
table for all the people in the TV

27036
17:03:55,636 --> 17:03:59,756
business there's going to be a dedicated

27037
17:03:57,840 --> 17:04:01,636
table for all of the TV shows that are

27038
17:03:59,756 --> 17:04:03,520
in their database as of right now

27039
17:04:01,636 --> 17:04:06,436
there's going to be a dedicated table

27040
17:04:03,520 --> 17:04:09,880
for writers in that industry for the

27041
17:04:06,436 --> 17:04:12,040
ratings of uh shows for the genres to

27042
17:04:09,880 --> 17:04:14,079
which shows belong comedy and the like

27043
17:04:12,040 --> 17:04:15,956
and then lastly there's going to be this

27044
17:04:14,080 --> 17:04:18,916
table which somehow

27045
17:04:15,956 --> 17:04:22,475
Associates people with the TV shows that

27046
17:04:18,916 --> 17:04:24,240
they star in and vice versa and so let's

27047
17:04:22,476 --> 17:04:25,520
consider first what this looks like in

27048
17:04:24,240 --> 17:04:27,840
code and we'll see that it's going to

27049
17:04:25,520 --> 17:04:29,320
overwhelm intentionally at first but I'm

27050
17:04:27,840 --> 17:04:30,755
going to do this I'm going to go back to

27051
17:04:29,320 --> 17:04:32,720
my terminal window and during the break

27052
17:04:30,756 --> 17:04:35,276
I downloaded from the course's website a

27053
17:04:32,720 --> 17:04:37,840
file called shows. DB which we made in

27054
17:04:35,276 --> 17:04:39,400
advance for you and if I type LS I'll

27055
17:04:37,840 --> 17:04:42,000
see all of my favorites files from

27056
17:04:39,400 --> 17:04:45,320
before the CSV the DB and the python

27057
17:04:42,000 --> 17:04:47,000
file but now there's shows. DB so I'm

27058
17:04:45,320 --> 17:04:48,680
going to go ahead in my full screen

27059
17:04:47,000 --> 17:04:50,840
terminal window here I'm not using

27060
17:04:48,680 --> 17:04:53,596
actual tabs or code files now I'm going

27061
17:04:50,840 --> 17:04:55,880
to run SQL light3 on the file called

27062
17:04:53,596 --> 17:04:58,040
shows. DB and I'm just going to see this

27063
17:04:55,880 --> 17:04:59,795
version information here let me clear my

27064
17:04:58,040 --> 17:05:02,080
screen and run the one command I ran

27065
17:04:59,796 --> 17:05:04,520
earlier to show us the schema of the

27066
17:05:02,080 --> 17:05:06,796
favorites database now we'll see the

27067
17:05:04,520 --> 17:05:08,079
schema for the shows database and

27068
17:05:06,796 --> 17:05:09,796
there's a lot going on here but let me

27069
17:05:08,080 --> 17:05:13,796
scroll back up to the very top the

27070
17:05:09,796 --> 17:05:18,596
beginning and we see this here so when I

27071
17:05:13,796 --> 17:05:20,956
run. schema we see a dump really of all

27072
17:05:18,596 --> 17:05:22,720
of the SQL create table commands that

27073
17:05:20,956 --> 17:05:24,636
were run in order to create this

27074
17:05:22,720 --> 17:05:26,840
database for you and one of those tables

27075
17:05:24,636 --> 17:05:30,240
is called genres and another people

27076
17:05:26,840 --> 17:05:31,719
ratings shows stars and so forth and the

27077
17:05:30,240 --> 17:05:33,276
columns therein even though it's

27078
17:05:31,720 --> 17:05:35,276
formatted a little more prettily than

27079
17:05:33,276 --> 17:05:37,360
the automatically generated create table

27080
17:05:35,276 --> 17:05:41,520
statement for favorites whereby we have

27081
17:05:37,360 --> 17:05:43,840
one column per line of output here uh in

27082
17:05:41,520 --> 17:05:45,840
the for instance people table there's

27083
17:05:43,840 --> 17:05:48,596
going to be an ID column like unique

27084
17:05:45,840 --> 17:05:51,200
identifier like a Harvard ID a Yale ID

27085
17:05:48,596 --> 17:05:53,435
or the like uh a name column a birth

27086
17:05:51,200 --> 17:05:55,840
year and then some other stuff if I

27087
17:05:53,436 --> 17:05:58,040
scroll down to shows every show in the

27088
17:05:55,840 --> 17:06:00,636
world is going to have a unique ID as

27089
17:05:58,040 --> 17:06:02,240
well a title of course the year in which

27090
17:06:00,636 --> 17:06:04,116
it debuted and the total number of

27091
17:06:02,240 --> 17:06:06,596
episodes as of the time we downloaded

27092
17:06:04,116 --> 17:06:08,400
the data and then what else is there

27093
17:06:06,596 --> 17:06:12,079
some of these are a little less obvious

27094
17:06:08,400 --> 17:06:14,436
like ratings here so ratings don't have

27095
17:06:12,080 --> 17:06:16,956
an ID column but they have a show ID

27096
17:06:14,436 --> 17:06:18,636
column and a rating like a fivepoint

27097
17:06:16,956 --> 17:06:19,956
scale or 10o scale or the like and then

27098
17:06:18,636 --> 17:06:21,756
the total number of votes that were

27099
17:06:19,956 --> 17:06:23,560
collected to contribute to that rating

27100
17:06:21,756 --> 17:06:25,596
IMDb allows people to like up vote and

27101
17:06:23,560 --> 17:06:28,040
down vote uh shows and movies and the

27102
17:06:25,596 --> 17:06:30,596
like and then similarly is genre

27103
17:06:28,040 --> 17:06:32,116
structured there's a show ID and then

27104
17:06:30,596 --> 17:06:34,000
there's a genre which is going to be

27105
17:06:32,116 --> 17:06:36,360
like an English word like comedy or

27106
17:06:34,000 --> 17:06:37,956
drama or something else and then what

27107
17:06:36,360 --> 17:06:41,160
else let's go a little further at the

27108
17:06:37,956 --> 17:06:43,720
bottom here for stars and writers if we

27109
17:06:41,160 --> 17:06:46,080
go to the very bottom here stars and

27110
17:06:43,720 --> 17:06:49,636
writers are similarly structured too

27111
17:06:46,080 --> 17:06:52,436
they have a show ID and a person ID so

27112
17:06:49,636 --> 17:06:55,040
show and person and then this writer's

27113
17:06:52,436 --> 17:06:56,240
table has a show ID and a person ID and

27114
17:06:55,040 --> 17:06:58,360
there's a whole lot of other words that

27115
17:06:56,240 --> 17:07:00,560
we'll come to in just a moment but what

27116
17:06:58,360 --> 17:07:02,276
are the what is this code hinting at

27117
17:07:00,560 --> 17:07:05,159
well if I go back to the picture from

27118
17:07:02,276 --> 17:07:08,159
earlier here you'll see that this

27119
17:07:05,160 --> 17:07:11,160
picture captures the relationships among

27120
17:07:08,160 --> 17:07:13,720
these various tables so for instance if

27121
17:07:11,160 --> 17:07:16,596
we focus on shows for just a moment a

27122
17:07:13,720 --> 17:07:18,160
show again has a unique ID a title a

27123
17:07:16,596 --> 17:07:20,240
year in which it debuted and a total

27124
17:07:18,160 --> 17:07:25,080
number of episodes if you want to figure

27125
17:07:20,240 --> 17:07:26,840
out what genre or genr a show belongs to

27126
17:07:25,080 --> 17:07:28,720
cuz some shows are just comedies some

27127
17:07:26,840 --> 17:07:30,840
shows are just just dramas but you know

27128
17:07:28,720 --> 17:07:32,636
some shows are arguably comedies and

27129
17:07:30,840 --> 17:07:34,276
dramas depending on the episode or the

27130
17:07:32,636 --> 17:07:36,596
like so you can imagine wanting to

27131
17:07:34,276 --> 17:07:39,720
associate two or three or even more

27132
17:07:36,596 --> 17:07:42,475
genres with a show this line here in

27133
17:07:39,720 --> 17:07:45,560
this second table allows us to do that

27134
17:07:42,476 --> 17:07:49,636
every Row in the genres table we'll see

27135
17:07:45,560 --> 17:07:52,435
has uh two items a show ID which relates

27136
17:07:49,636 --> 17:07:55,040
to the ID of a show and that's why these

27137
17:07:52,436 --> 17:07:58,000
lines literally line up with that

27138
17:07:55,040 --> 17:07:59,360
specific column name and genre which is

27139
17:07:58,000 --> 17:08:01,756
going to be like quote unquote comedy

27140
17:07:59,360 --> 17:08:05,400
quote unquote drama or something else

27141
17:08:01,756 --> 17:08:08,160
now with that said design question why

27142
17:08:05,400 --> 17:08:10,476
have we deliberately not just gotten rid

27143
17:08:08,160 --> 17:08:14,560
of this genre's table and made our lives

27144
17:08:10,476 --> 17:08:16,956
simpler by just adding a genre column to

27145
17:08:14,560 --> 17:08:19,596
this shows table and again a table is

27146
17:08:16,956 --> 17:08:21,360
just like a sheet with rows and columns

27147
17:08:19,596 --> 17:08:24,040
at the moment shows only have four

27148
17:08:21,360 --> 17:08:27,596
columns ID title year episodes why not

27149
17:08:24,040 --> 17:08:30,476
just add a fifth column called genre and

27150
17:08:27,596 --> 17:08:33,680
put the show genre

27151
17:08:30,476 --> 17:08:37,116
there any intuition

27152
17:08:33,680 --> 17:08:39,756
here why not just keep things simple

27153
17:08:37,116 --> 17:08:39,756
like yeah and

27154
17:08:43,680 --> 17:08:50,080
back exactly if you add a fifth column

27155
17:08:47,560 --> 17:08:52,680
here and call it genre then you have to

27156
17:08:50,080 --> 17:08:56,040
pick a genre specifically you have to

27157
17:08:52,680 --> 17:08:59,116
put in that cell presumably comedy or

27158
17:08:56,040 --> 17:09:00,720
drama or music or something else now you

27159
17:08:59,116 --> 17:09:01,956
could write multiple words in the cell

27160
17:09:00,720 --> 17:09:04,320
but generally speaking that would be

27161
17:09:01,956 --> 17:09:05,560
sloppy bad design like every cell just

27162
17:09:04,320 --> 17:09:07,320
like in a spreadsheet should really have

27163
17:09:05,560 --> 17:09:09,159
one value it might have multiple words

27164
17:09:07,320 --> 17:09:10,956
but it shouldn't be like a weirdly comma

27165
17:09:09,160 --> 17:09:12,116
separated list of multiple things it

27166
17:09:10,956 --> 17:09:14,276
should just be in a different cell in

27167
17:09:12,116 --> 17:09:15,880
that case so if you instead were to

27168
17:09:14,276 --> 17:09:18,159
design this with just a single column

27169
17:09:15,880 --> 17:09:20,956
called genre you're imposing what a

27170
17:09:18,160 --> 17:09:24,200
computer scientist would call a on toone

27171
17:09:20,956 --> 17:09:26,116
relationship every show has one genre

27172
17:09:24,200 --> 17:09:28,159
and that's not necessarily a good thing

27173
17:09:26,116 --> 17:09:29,720
or strictly speaking it would be a many

27174
17:09:28,160 --> 17:09:31,756
to one because the same genre could

27175
17:09:29,720 --> 17:09:34,116
belong to multiple shows but each show

27176
17:09:31,756 --> 17:09:35,956
could only have one genre in that case

27177
17:09:34,116 --> 17:09:37,476
what a relational database allows you to

27178
17:09:35,956 --> 17:09:39,560
do and relational is indeed the

27179
17:09:37,476 --> 17:09:42,080
operative word it allows you to factor

27180
17:09:39,560 --> 17:09:45,475
out some of your information and then

27181
17:09:42,080 --> 17:09:47,596
have maybe one show here in one row but

27182
17:09:45,476 --> 17:09:50,040
then in this genres table you could have

27183
17:09:47,596 --> 17:09:52,680
one row for that one show genre or you

27184
17:09:50,040 --> 17:09:55,400
could have two rows in the genres table

27185
17:09:52,680 --> 17:09:56,956
for comedy and for drama or if it has a

27186
17:09:55,400 --> 17:10:00,680
third genre you could just add another

27187
17:09:56,956 --> 17:10:02,840
row here so you still have one row for

27188
17:10:00,680 --> 17:10:05,596
the show itself with all the juiciest

27189
17:10:02,840 --> 17:10:07,636
details but a variable number of rows by

27190
17:10:05,596 --> 17:10:10,720
having this relationship with another

27191
17:10:07,636 --> 17:10:14,040
table meanwhile ratings work the same

27192
17:10:10,720 --> 17:10:15,680
way at least in this case a show has ID

27193
17:10:14,040 --> 17:10:17,360
title year and episodes but if you want

27194
17:10:15,680 --> 17:10:18,916
to figure out its rating you have to

27195
17:10:17,360 --> 17:10:21,240
kind of Follow the arrow here so to

27196
17:10:18,916 --> 17:10:23,596
speak and look up the corresponding show

27197
17:10:21,240 --> 17:10:26,200
ID in this table find the rating of that

27198
17:10:23,596 --> 17:10:27,756
show and the total number of ratings so

27199
17:10:26,200 --> 17:10:30,115
that's been factored out Two For Better

27200
17:10:27,756 --> 17:10:33,276
or For Worse um now let's consider

27201
17:10:30,116 --> 17:10:35,560
people people have just three columns ID

27202
17:10:33,276 --> 17:10:37,795
name and birth but there's no mention of

27203
17:10:35,560 --> 17:10:39,956
the TV show in which people have starred

27204
17:10:37,796 --> 17:10:41,916
or the TV shows that a person has

27205
17:10:39,956 --> 17:10:44,400
written well why is that well if you

27206
17:10:41,916 --> 17:10:46,755
just had a fourth column here called

27207
17:10:44,400 --> 17:10:48,476
show well you would have to decide what

27208
17:10:46,756 --> 17:10:50,080
show is that person in and no one could

27209
17:10:48,476 --> 17:10:51,880
ever act again in another show because

27210
17:10:50,080 --> 17:10:54,200
there's no room to store the data but if

27211
17:10:51,880 --> 17:10:57,200
someone of course a popular actor can St

27212
17:10:54,200 --> 17:10:59,636
star in multiple shows well we could

27213
17:10:57,200 --> 17:11:01,276
have one ID for that person one name one

27214
17:10:59,636 --> 17:11:03,560
birth year obviously like there's only

27215
17:11:01,276 --> 17:11:06,276
one Steve Carell as an actor in the

27216
17:11:03,560 --> 17:11:09,000
world of people but Steve Carell in this

27217
17:11:06,276 --> 17:11:10,680
example could have his person ID

27218
17:11:09,000 --> 17:11:12,956
whatever his Harvard ID equivalent Yale

27219
17:11:10,680 --> 17:11:14,756
ID equivalent is appear in multiple rows

27220
17:11:12,956 --> 17:11:17,240
in this table so that it can be

27221
17:11:14,756 --> 17:11:19,560
associated with multiple shows and this

27222
17:11:17,240 --> 17:11:22,079
allows you to create what's called a one

27223
17:11:19,560 --> 17:11:24,079
to many relationship or technically it's

27224
17:11:22,080 --> 17:11:26,680
bidirectional it's a many to many

27225
17:11:24,080 --> 17:11:28,476
relationship why well one show can

27226
17:11:26,680 --> 17:11:30,320
certain certainly have multiple people

27227
17:11:28,476 --> 17:11:32,796
in it and multiple people writing for it

27228
17:11:30,320 --> 17:11:35,560
just in the real world but conversely

27229
17:11:32,796 --> 17:11:37,636
one uh person could certainly act in

27230
17:11:35,560 --> 17:11:39,916
multiple shows or write multiple shows

27231
17:11:37,636 --> 17:11:42,436
so this is what you get with relational

27232
17:11:39,916 --> 17:11:44,560
databases you put your sort of canonical

27233
17:11:42,436 --> 17:11:46,880
data for people in one place for for

27234
17:11:44,560 --> 17:11:50,040
shows in another place and then you use

27235
17:11:46,880 --> 17:11:52,200
these additional tables to relate one

27236
17:11:50,040 --> 17:11:54,200
thing to another so we won't dwell on

27237
17:11:52,200 --> 17:11:55,755
the pictures that's just if you sort of

27238
17:11:54,200 --> 17:11:57,560
uh can wrap your mind around the data

27239
17:11:55,756 --> 17:11:59,436
set better that way that's one way of

27240
17:11:57,560 --> 17:12:01,795
thinking about it but recall that the

27241
17:11:59,436 --> 17:12:03,200
code we just saw for the schema again

27242
17:12:01,796 --> 17:12:05,040
escalated quickly like there's a lot of

27243
17:12:03,200 --> 17:12:06,719
keywords I haven't mentioned yet but

27244
17:12:05,040 --> 17:12:09,000
some of these are perhaps familiar

27245
17:12:06,720 --> 17:12:11,276
they're capitalized differently here but

27246
17:12:09,000 --> 17:12:13,400
integer is on the list here null is on

27247
17:12:11,276 --> 17:12:14,795
the list albeit technically not null so

27248
17:12:13,400 --> 17:12:16,276
let's tease apart some of these key

27249
17:12:14,796 --> 17:12:17,956
words and consider what they're actually

27250
17:12:16,276 --> 17:12:20,560
doing for your database because now

27251
17:12:17,956 --> 17:12:23,596
we're in exploring features that do not

27252
17:12:20,560 --> 17:12:25,916
exist in the world of spreadsheets alone

27253
17:12:23,596 --> 17:12:27,756
so it turns out in a SQL database

27254
17:12:25,916 --> 17:12:30,000
specifically SQL light which is the

27255
17:12:27,756 --> 17:12:32,080
version of SQL we use in cs50 and which

27256
17:12:30,000 --> 17:12:33,680
is commonly used for things like mobile

27257
17:12:32,080 --> 17:12:35,636
applications nowadays it's like a

27258
17:12:33,680 --> 17:12:37,520
lightweight version of SQL it's when you

27259
17:12:35,636 --> 17:12:39,000
aren't trying to run Twitter and have

27260
17:12:37,520 --> 17:12:40,475
billions and billions of rows

27261
17:12:39,000 --> 17:12:42,276
necessarily you've got hundreds

27262
17:12:40,476 --> 17:12:45,636
thousands tens of thousands maybe even a

27263
17:12:42,276 --> 17:12:47,720
few million but not crazy uh numbers uh

27264
17:12:45,636 --> 17:12:50,080
crazy amounts of data in the world of

27265
17:12:47,720 --> 17:12:52,796
SQL light specifically there's these

27266
17:12:50,080 --> 17:12:55,756
five data types so just like in C we had

27267
17:12:52,796 --> 17:12:57,956
int and Char and the like in SQL we have

27268
17:12:55,756 --> 17:12:59,840
these uh BL which is kind of funny but

27269
17:12:57,956 --> 17:13:01,680
it just means binary large object so

27270
17:12:59,840 --> 17:13:04,039
it's like a binary data type zeros and

27271
17:13:01,680 --> 17:13:06,040
ones that aren't necessarily uh fitting

27272
17:13:04,040 --> 17:13:07,840
into the other categories integer which

27273
17:13:06,040 --> 17:13:10,240
of course is an integer as we know it

27274
17:13:07,840 --> 17:13:12,475
numeric which is kind of a catchall for

27275
17:13:10,240 --> 17:13:15,240
numbers that are formatted specially so

27276
17:13:12,476 --> 17:13:18,880
like a date uh would be like year year

27277
17:13:15,240 --> 17:13:20,436
year year-month month Dash day day um

27278
17:13:18,880 --> 17:13:21,916
and this is actually a wonderful thing

27279
17:13:20,436 --> 17:13:23,400
depending on the country you're from you

27280
17:13:21,916 --> 17:13:25,435
might think your date system in your

27281
17:13:23,400 --> 17:13:28,520
country is great or it's horrible the US

27282
17:13:25,436 --> 17:13:31,116
system is horrible because we have month

27283
17:13:28,520 --> 17:13:33,636
day and then year which is impossible to

27284
17:13:31,116 --> 17:13:35,636
sort it is the wrong way objectively to

27285
17:13:33,636 --> 17:13:37,000
store data and yet here we are using

27286
17:13:35,636 --> 17:13:39,320
this at scale other countries have

27287
17:13:37,000 --> 17:13:41,436
gotten this better numeric and SQL

27288
17:13:39,320 --> 17:13:42,596
itself standardizes that stuff so it

27289
17:13:41,436 --> 17:13:44,116
doesn't matter what country you're from

27290
17:13:42,596 --> 17:13:46,320
you're storing your data in this

27291
17:13:44,116 --> 17:13:48,080
particular way for instance times are

27292
17:13:46,320 --> 17:13:50,560
standardized and other types of numeric

27293
17:13:48,080 --> 17:13:52,276
data as well real is synonymous with

27294
17:13:50,560 --> 17:13:54,956
float so something with a decimal point

27295
17:13:52,276 --> 17:13:57,475
and some number of uh digits thereafter

27296
17:13:54,956 --> 17:13:59,475
and then text is just uh for strings and

27297
17:13:57,476 --> 17:14:02,160
the like with other even fancier

27298
17:13:59,476 --> 17:14:04,240
databases like MySQL postgress SQL

27299
17:14:02,160 --> 17:14:06,200
Oracle and other products you might have

27300
17:14:04,240 --> 17:14:07,680
heard of there's even more data types

27301
17:14:06,200 --> 17:14:09,636
where you have to make even finer grain

27302
17:14:07,680 --> 17:14:11,520
decisions but for SQL light it's indeed

27303
17:14:09,636 --> 17:14:13,276
pretty lightweight and you or we just

27304
17:14:11,520 --> 17:14:15,240
have to decide the data types for each

27305
17:14:13,276 --> 17:14:16,840
column in a table but there's these

27306
17:14:15,240 --> 17:14:20,436
additional constraints in the world of

27307
17:14:16,840 --> 17:14:23,840
SQL you can additionally say that cells

27308
17:14:20,436 --> 17:14:25,756
in this column may or may not be null so

27309
17:14:23,840 --> 17:14:27,200
if you want to protect yourself from

27310
17:14:25,756 --> 17:14:29,476
yourself so you don't screw up and

27311
17:14:27,200 --> 17:14:31,840
insert a null that is a blank value you

27312
17:14:29,476 --> 17:14:34,116
can explicitly design a table to have a

27313
17:14:31,840 --> 17:14:35,636
column that cannot be null and so in

27314
17:14:34,116 --> 17:14:38,080
fact someone came up during the break to

27315
17:14:35,636 --> 17:14:40,880
ask me about my having manually inserted

27316
17:14:38,080 --> 17:14:42,560
SQL quote unquote SQL into our favorites

27317
17:14:40,880 --> 17:14:45,360
database you might recall that I kind of

27318
17:14:42,560 --> 17:14:47,399
cheated I just inserted uh SQL quote

27319
17:14:45,360 --> 17:14:49,240
unquote and 50v the name of a new

27320
17:14:47,400 --> 17:14:50,596
problem quote unquote but what did I not

27321
17:14:49,240 --> 17:14:53,320
insert into the

27322
17:14:50,596 --> 17:14:54,680
database a Tim stamp and I could have I

27323
17:14:53,320 --> 17:14:56,956
could have put like the current day in

27324
17:14:54,680 --> 17:14:58,720
time a few minutes ago but I didn't and

27325
17:14:56,956 --> 17:15:00,400
that's fine if it's uh if it's

27326
17:14:58,720 --> 17:15:02,636
acceptable to you and the product you're

27327
17:15:00,400 --> 17:15:05,160
building but I could have prevented that

27328
17:15:02,636 --> 17:15:07,520
if we had defined the table to have a

27329
17:15:05,160 --> 17:15:10,160
timestamp column that isn't just text

27330
17:15:07,520 --> 17:15:11,755
but it's text that's not null SQL would

27331
17:15:10,160 --> 17:15:13,360
have complained and would not have let

27332
17:15:11,756 --> 17:15:15,000
me complete that insertion so there's

27333
17:15:13,360 --> 17:15:16,276
these kinds of built-in defenses that

27334
17:15:15,000 --> 17:15:18,680
you don't necessarily get with a

27335
17:15:16,276 --> 17:15:20,560
spreadsheet alone and unique means

27336
17:15:18,680 --> 17:15:23,560
exactly that if you want to make sure

27337
17:15:20,560 --> 17:15:25,880
that every Row in that column is unique

27338
17:15:23,560 --> 17:15:27,916
maybe for email addresses or in the US

27339
17:15:25,880 --> 17:15:30,000
Social Security numbers or anything that

27340
17:15:27,916 --> 17:15:31,916
you want to make sure you don't have two

27341
17:15:30,000 --> 17:15:33,476
versions of you can specify that the

27342
17:15:31,916 --> 17:15:35,320
column is unique and there's other such

27343
17:15:33,476 --> 17:15:37,560
constraints as well but again this is

27344
17:15:35,320 --> 17:15:39,720
just a list of features that you get

27345
17:15:37,560 --> 17:15:41,756
from a proper relational database but

27346
17:15:39,720 --> 17:15:43,240
perhaps the most intellectually

27347
17:15:41,756 --> 17:15:46,436
interesting one and the most powerful

27348
17:15:43,240 --> 17:15:48,756
one is what's called here a primary key

27349
17:15:46,436 --> 17:15:52,080
and a foreign key and let me go back now

27350
17:15:48,756 --> 17:15:55,320
to this output if we look at shows

27351
17:15:52,080 --> 17:15:57,680
you'll see that a show again has an ID a

27352
17:15:55,320 --> 17:15:59,596
title a year and a number of episodes

27353
17:15:57,680 --> 17:16:01,320
and now the data types might make sense

27354
17:15:59,596 --> 17:16:03,399
the ID it turns out just like a Harvard

27355
17:16:01,320 --> 17:16:05,436
ID a Yale ID is going to be an integer

27356
17:16:03,400 --> 17:16:07,080
so a simple number the title of course

27357
17:16:05,436 --> 17:16:09,680
is going to be text but not null like it

27358
17:16:07,080 --> 17:16:11,320
would be weird if a TV show had no name

27359
17:16:09,680 --> 17:16:13,000
like that can't be like every the whole

27360
17:16:11,320 --> 17:16:14,636
world would break or your TV gu and

27361
17:16:13,000 --> 17:16:17,400
whatnot so that makes sense there to say

27362
17:16:14,636 --> 17:16:19,840
not null uh year is numeric so it's a

27363
17:16:17,400 --> 17:16:21,040
standardized form episodes is an integer

27364
17:16:19,840 --> 17:16:23,636
like how many episodes have been

27365
17:16:21,040 --> 17:16:26,000
produced and then lastly notice this the

27366
17:16:23,636 --> 17:16:28,680
primary key of the show's table is

27367
17:16:26,000 --> 17:16:30,840
apparently the column called ID

27368
17:16:28,680 --> 17:16:34,880
mentioned a few lines earlier this just

27369
17:16:30,840 --> 17:16:37,359
means that the database will use the ID

27370
17:16:34,880 --> 17:16:39,240
column as the unique identifier so it's

27371
17:16:37,360 --> 17:16:41,116
similar to the unique keyword but

27372
17:16:39,240 --> 17:16:42,756
primary key just means the database is

27373
17:16:41,116 --> 17:16:44,320
going to treat it as special too and

27374
17:16:42,756 --> 17:16:46,436
make sure that it is uniquely

27375
17:16:44,320 --> 17:16:48,840
identifying your data but what's

27376
17:16:46,436 --> 17:16:51,520
interesting is this notice if I scroll

27377
17:16:48,840 --> 17:16:53,200
back up to people people were sort of

27378
17:16:51,520 --> 17:16:56,359
similarly structured but with different

27379
17:16:53,200 --> 17:16:59,956
attributes like up here we had a person

27380
17:16:56,360 --> 17:17:02,916
has an ID a name a birth year and a

27381
17:16:59,956 --> 17:17:05,596
primary key of ID so a ID is again

27382
17:17:02,916 --> 17:17:06,719
integer name is text but not null

27383
17:17:05,596 --> 17:17:09,240
because it'd be weird to have a human

27384
17:17:06,720 --> 17:17:11,000
with absolutely no name textually birth

27385
17:17:09,240 --> 17:17:14,756
is going to be numeric but the primary

27386
17:17:11,000 --> 17:17:16,520
key of people is ID as well so those are

27387
17:17:14,756 --> 17:17:18,840
the unique columns that the database

27388
17:17:16,520 --> 17:17:21,435
will just treat special why well we just

27389
17:17:18,840 --> 17:17:24,000
looked at shows we just looked at people

27390
17:17:21,436 --> 17:17:27,000
let's focus now on this one down here

27391
17:17:24,000 --> 17:17:29,116
Stars how do you determine who star in a

27392
17:17:27,000 --> 17:17:31,560
TV show well we had two columns the show

27393
17:17:29,116 --> 17:17:32,880
ID and the person ID this is the ex the

27394
17:17:31,560 --> 17:17:34,475
Incarnation of a many to- many

27395
17:17:32,880 --> 17:17:36,240
relationship one person could be in many

27396
17:17:34,476 --> 17:17:38,520
shows one show could certainly have many

27397
17:17:36,240 --> 17:17:41,680
people in it or writing for it but

27398
17:17:38,520 --> 17:17:43,880
notice this within this table of two

27399
17:17:41,680 --> 17:17:46,116
columns show ID and person ID there's

27400
17:17:43,880 --> 17:17:50,000
what's going to be called a foreign key

27401
17:17:46,116 --> 17:17:52,436
called show ID that references the shows

27402
17:17:50,000 --> 17:17:54,436
tables ID column and then another

27403
17:17:52,436 --> 17:17:55,796
foreign key called person ID though I

27404
17:17:54,436 --> 17:17:58,080
could call these things in parentheses

27405
17:17:55,796 --> 17:18:00,636
anything I want that references the

27406
17:17:58,080 --> 17:18:02,160
people tables ID column now you're not

27407
17:18:00,636 --> 17:18:03,956
going to often have to type commands

27408
17:18:02,160 --> 17:18:05,840
like this again you set the database up

27409
17:18:03,956 --> 17:18:07,636
once in the beginning typically maybe

27410
17:18:05,840 --> 17:18:09,159
with some help from a TF maybe with help

27411
17:18:07,636 --> 17:18:11,159
of Google or the like but once your

27412
17:18:09,160 --> 17:18:13,116
database is designed it's back to the

27413
17:18:11,160 --> 17:18:14,596
crud like create read update delete the

27414
17:18:13,116 --> 17:18:17,276
selects the inserts the deletions and

27415
17:18:14,596 --> 17:18:19,435
the like but what's this implying these

27416
17:18:17,276 --> 17:18:23,040
keywords like primary key and foreign

27417
17:18:19,436 --> 17:18:26,000
key are what are doing in code what this

27418
17:18:23,040 --> 17:18:28,476
picture was painting a moment ago these

27419
17:18:26,000 --> 17:18:30,080
lines here are drawn literally to line

27420
17:18:28,476 --> 17:18:33,200
up with the corresponding things

27421
17:18:30,080 --> 17:18:37,200
people's ID lines up with person ID

27422
17:18:33,200 --> 17:18:39,115
Show's ID lines up with show ID and so

27423
17:18:37,200 --> 17:18:41,596
you're just seeing graphical version

27424
17:18:39,116 --> 17:18:45,436
code version graphical code that creates

27425
17:18:41,596 --> 17:18:47,435
these relationships now given that let's

27426
17:18:45,436 --> 17:18:49,880
actually see what these things look like

27427
17:18:47,436 --> 17:18:51,680
so let me go back to vs code here let me

27428
17:18:49,880 --> 17:18:54,520
clear my screen I'm still within SQL

27429
17:18:51,680 --> 17:18:56,040
light with shows. DB let me go ahead and

27430
17:18:54,520 --> 17:18:57,399
do what I do with like any new database

27431
17:18:56,040 --> 17:18:59,240
if I ever download something or I'm

27432
17:18:57,400 --> 17:19:00,560
trying to wrap my mind around a problem

27433
17:18:59,240 --> 17:19:02,756
you know usually it doesn't come with a

27434
17:19:00,560 --> 17:19:04,240
pretty picture or uh you know a

27435
17:19:02,756 --> 17:19:06,520
three-hour lecture to explain what the

27436
17:19:04,240 --> 17:19:08,916
data set is rather you just have the

27437
17:19:06,520 --> 17:19:11,320
data set in your own knowledge of SQL so

27438
17:19:08,916 --> 17:19:13,040
let me play around so schema shows me

27439
17:19:11,320 --> 17:19:14,956
all the tables that might be a starting

27440
17:19:13,040 --> 17:19:17,880
point okay this is interesting I know PE

27441
17:19:14,956 --> 17:19:20,840
what people are let's go ahead and show

27442
17:19:17,880 --> 17:19:22,240
me all the people so select star from

27443
17:19:20,840 --> 17:19:23,916
people I'm just trying to wrap my mind

27444
17:19:22,240 --> 17:19:27,475
around what this data set looks like in

27445
17:19:23,916 --> 17:19:29,596
a more userfriendly way okay okay that's

27446
17:19:27,476 --> 17:19:31,160
already a lot of people as you see the

27447
17:19:29,596 --> 17:19:32,756
years flying by there's been a lot of

27448
17:19:31,160 --> 17:19:35,116
people in the TV

27449
17:19:32,756 --> 17:19:36,956
business so this was maybe not the best

27450
17:19:35,116 --> 17:19:40,436
query to run but this is indicative of

27451
17:19:36,956 --> 17:19:43,159
just how large this data set is from

27452
17:19:40,436 --> 17:19:44,476
IMDb okay when in doubt and when

27453
17:19:43,160 --> 17:19:46,796
whenever you lose control over your

27454
17:19:44,476 --> 17:19:48,880
computer control C is your friend to

27455
17:19:46,796 --> 17:19:50,160
interrupt what would have been better

27456
17:19:48,880 --> 17:19:52,755
because I don't think I need to know all

27457
17:19:50,160 --> 17:19:54,880
the million people in the world I could

27458
17:19:52,756 --> 17:19:57,160
do like limit me to 10 people all right

27459
17:19:54,880 --> 17:19:59,840
and that's enough now to get us sense of

27460
17:19:57,160 --> 17:20:02,956
like Fred a stair has an IDE of one

27461
17:19:59,840 --> 17:20:05,679
first person ever um birth year of 1899

27462
17:20:02,956 --> 17:20:07,916
Lauren ball and all of these other uh

27463
17:20:05,680 --> 17:20:09,596
people from yesterday year you see that

27464
17:20:07,916 --> 17:20:11,040
they are the first 10 people in the

27465
17:20:09,596 --> 17:20:12,520
database so there's an example of some

27466
17:20:11,040 --> 17:20:14,360
of the data now if I want to rep my mind

27467
17:20:12,520 --> 17:20:16,240
around what a show is you know I know it

27468
17:20:14,360 --> 17:20:17,956
technically I know it from the picture

27469
17:20:16,240 --> 17:20:19,475
but let's just look at some raw data so

27470
17:20:17,956 --> 17:20:21,240
instead of saying select star from

27471
17:20:19,476 --> 17:20:25,956
people let me go ahead and select star

27472
17:20:21,240 --> 17:20:28,596
from shows limit 10 and okay I've only

27473
17:20:25,956 --> 17:20:30,596
heard heard of or seen a couple of these

27474
17:20:28,596 --> 17:20:32,795
but these are older shows at that but I

27475
17:20:30,596 --> 17:20:34,520
see that every show has an ID a title a

27476
17:20:32,796 --> 17:20:37,000
year in which it debuted and a number of

27477
17:20:34,520 --> 17:20:40,435
episodes but perhaps most opaque is

27478
17:20:37,000 --> 17:20:42,756
going to be this select star from

27479
17:20:40,436 --> 17:20:44,956
Stars where this is the table that

27480
17:20:42,756 --> 17:20:49,840
Associates people with shows am I going

27481
17:20:44,956 --> 17:20:51,360
to see any names or show titles here not

27482
17:20:49,840 --> 17:20:52,840
according to the definition we saw

27483
17:20:51,360 --> 17:20:54,680
earlier oh I should have done my limit

27484
17:20:52,840 --> 17:20:56,840
let me interrupt that let me do that

27485
17:20:54,680 --> 17:20:59,240
again limit 10

27486
17:20:56,840 --> 17:21:00,840
no and this is where now you're

27487
17:20:59,240 --> 17:21:02,079
definitely in the programmer world

27488
17:21:00,840 --> 17:21:03,840
because like this would be the most

27489
17:21:02,080 --> 17:21:06,000
annoying spreadsheet to use on your Mac

27490
17:21:03,840 --> 17:21:07,240
or PC ever if you just had like a sheet

27491
17:21:06,000 --> 17:21:08,596
with all of these numbers that

27492
17:21:07,240 --> 17:21:10,276
Associates one thing with the other like

27493
17:21:08,596 --> 17:21:11,840
my God how do you figure out who this is

27494
17:21:10,276 --> 17:21:14,360
or what this is you have to like

27495
17:21:11,840 --> 17:21:16,719
manually control F or command F looking

27496
17:21:14,360 --> 17:21:19,080
for the data but a database doesn't care

27497
17:21:16,720 --> 17:21:20,880
once you know SQL you can sort of Stitch

27498
17:21:19,080 --> 17:21:23,880
these things back together so what

27499
17:21:20,880 --> 17:21:26,200
you're seeing here are foreign Keys

27500
17:21:23,880 --> 17:21:28,680
foreign Keys why because show ID

27501
17:21:26,200 --> 17:21:31,000
corresponds to the same numbers from

27502
17:21:28,680 --> 17:21:33,880
that other table called shows that has

27503
17:21:31,000 --> 17:21:35,756
an proper primary key called ID person

27504
17:21:33,880 --> 17:21:37,560
ID is a foreign key in this context

27505
17:21:35,756 --> 17:21:41,116
because it refers to numbers that belong

27506
17:21:37,560 --> 17:21:42,720
to really the people table and its ID

27507
17:21:41,116 --> 17:21:44,240
column so this is just a way of somehow

27508
17:21:42,720 --> 17:21:45,756
linking them and so if you think of I

27509
17:21:44,240 --> 17:21:47,436
always like think of um this in my

27510
17:21:45,756 --> 17:21:50,560
mind's eye is this if this is like the

27511
17:21:47,436 --> 17:21:53,000
people table this is the shows table and

27512
17:21:50,560 --> 17:21:55,159
there's this middle table in between the

27513
17:21:53,000 --> 17:21:57,560
Stars table there's some way of like

27514
17:21:55,160 --> 17:21:59,680
stitching those two together by lining

27515
17:21:57,560 --> 17:22:01,680
up the idas of one with the other and

27516
17:21:59,680 --> 17:22:04,320
getting back some more data so let's

27517
17:22:01,680 --> 17:22:06,436
actually play with some of this data how

27518
17:22:04,320 --> 17:22:08,720
about we start where we emphasized

27519
17:22:06,436 --> 17:22:10,116
earlier genres so let me go ahead and

27520
17:22:08,720 --> 17:22:12,400
take a quick look at all of the genres

27521
17:22:10,116 --> 17:22:14,276
in this database so select star from

27522
17:22:12,400 --> 17:22:16,360
genres star is usually going to be a

27523
17:22:14,276 --> 17:22:18,040
little overwhelming but it just gives me

27524
17:22:16,360 --> 17:22:21,080
a sense of what the data is but let's

27525
17:22:18,040 --> 17:22:23,400
actually look at um uh let's go look at

27526
17:22:21,080 --> 17:22:26,360
all of them there okay that's a lot

27527
17:22:23,400 --> 17:22:28,560
these are all official genres from IMDb

27528
17:22:26,360 --> 17:22:31,436
let me oh okay it went okay it wasn't

27529
17:22:28,560 --> 17:22:36,079
terribly long let me filter that down so

27530
17:22:31,436 --> 17:22:37,796
from genres where genre equals comedy uh

27531
17:22:36,080 --> 17:22:40,956
Capital C just based on the data I'm

27532
17:22:37,796 --> 17:22:43,000
seeing okay so what am I seeing now and

27533
17:22:40,956 --> 17:22:44,560
in fact let me limit this arbitrarily to

27534
17:22:43,000 --> 17:22:48,636
10 though I could limit it to anything I

27535
17:22:44,560 --> 17:22:50,360
want here are 10 comedies what are they

27536
17:22:48,636 --> 17:22:52,756
well who the heck knows like all I know

27537
17:22:50,360 --> 17:22:54,360
are the 10 show IDs now I could do

27538
17:22:52,756 --> 17:22:56,756
something like this as we've seen before

27539
17:22:54,360 --> 17:22:58,956
with SQL I could do all right well let's

27540
17:22:56,756 --> 17:23:03,680
figure out what this show idea is Select

27541
17:22:58,956 --> 17:23:08,436
star from shows where the IDE of the

27542
17:23:03,680 --> 17:23:10,476
show I'm looking for equals what 62 614

27543
17:23:08,436 --> 17:23:12,276
semicolon so I could like manually look

27544
17:23:10,476 --> 17:23:14,840
it up by cross referencing the other

27545
17:23:12,276 --> 17:23:16,436
table okay so that was the show in

27546
17:23:14,840 --> 17:23:18,755
question there the first comedy in the

27547
17:23:16,436 --> 17:23:23,276
data set let me look up the second one

27548
17:23:18,756 --> 17:23:25,276
so instead of that let's do 6 3881 enter

27549
17:23:23,276 --> 17:23:27,795
okay so that's that show and let's do

27550
17:23:25,276 --> 17:23:29,880
one more and suffice it to say this is

27551
17:23:27,796 --> 17:23:32,560
just getting tedious and vulnerable to

27552
17:23:29,880 --> 17:23:34,475
mistakes quickly this is not this surely

27553
17:23:32,560 --> 17:23:36,040
can't be the way to do this and indeed

27554
17:23:34,476 --> 17:23:39,200
SQL is going to let us do this a little

27555
17:23:36,040 --> 17:23:40,840
more powerfully instead let's do this

27556
17:23:39,200 --> 17:23:42,636
instead of getting this table

27557
17:23:40,840 --> 17:23:44,916
temporarily with all these show IDs and

27558
17:23:42,636 --> 17:23:49,080
all these genres let's refine the query

27559
17:23:44,916 --> 17:23:52,276
so let's just select the show ID from

27560
17:23:49,080 --> 17:23:56,276
the genres table where the genre equals

27561
17:23:52,276 --> 17:23:59,079
quote unquote comedy now I have a big b

27562
17:23:56,276 --> 17:24:00,840
list of show IDs all of which are comedy

27563
17:23:59,080 --> 17:24:02,520
how many well I can combine ideas from

27564
17:24:00,840 --> 17:24:05,475
earlier I can just count all of those

27565
17:24:02,520 --> 17:24:06,880
show IDs and or Star if I want to just

27566
17:24:05,476 --> 17:24:08,360
do that too but I can count all those

27567
17:24:06,880 --> 17:24:11,680
show IDs

27568
17:24:08,360 --> 17:24:14,276
4876 comedies and IMDB's database for TV

27569
17:24:11,680 --> 17:24:16,360
shows so feels like a lot but how can I

27570
17:24:14,276 --> 17:24:18,916
now use that information and get back

27571
17:24:16,360 --> 17:24:21,636
the titles of comedies in the database

27572
17:24:18,916 --> 17:24:23,636
without doing it manually well let's do

27573
17:24:21,636 --> 17:24:27,240
this I have a moment ago this query

27574
17:24:23,636 --> 17:24:30,240
select the show ID from genres where the

27575
17:24:27,240 --> 17:24:33,000
current genre is quote unquote

27576
17:24:30,240 --> 17:24:34,596
comedy um what if I kind of Nest these

27577
17:24:33,000 --> 17:24:36,840
queries kind of like grade school math

27578
17:24:34,596 --> 17:24:39,000
in parenthesis what if I combine this

27579
17:24:36,840 --> 17:24:40,840
whole thing in parenthesis and now let

27580
17:24:39,000 --> 17:24:45,400
me select what I really want let me go

27581
17:24:40,840 --> 17:24:50,755
ahead and select how about uh the title

27582
17:24:45,400 --> 17:24:53,956
of all shows where the idea of the show

27583
17:24:50,756 --> 17:24:59,756
is in this list of show

27584
17:24:53,956 --> 17:25:01,795
IDs so if you agree that the shows table

27585
17:24:59,756 --> 17:25:03,636
has an ID column which is its otherwise

27586
17:25:01,796 --> 17:25:05,080
known as its primary key the unique ID

27587
17:25:03,636 --> 17:25:07,916
that identifies it just like our Harvard

27588
17:25:05,080 --> 17:25:10,476
IDs our Yale IDs and you agree that per

27589
17:25:07,916 --> 17:25:13,680
a moment ago this shorter query will

27590
17:25:10,476 --> 17:25:16,636
give me back just the show IDs of all of

27591
17:25:13,680 --> 17:25:19,360
the comedies in the database you can

27592
17:25:16,636 --> 17:25:21,475
actually combine or Nest these queries

27593
17:25:19,360 --> 17:25:22,636
together uh it's going to respect SQL

27594
17:25:21,476 --> 17:25:24,200
light order of operations with

27595
17:25:22,636 --> 17:25:25,796
parentheses just like grade school math

27596
17:25:24,200 --> 17:25:27,360
so the thing in parentheses will be

27597
17:25:25,796 --> 17:25:30,360
executed first that gives it back a list

27598
17:25:27,360 --> 17:25:32,880
of IDs like what 48,000 IDs and then

27599
17:25:30,360 --> 17:25:34,520
this query the outer query is going to

27600
17:25:32,880 --> 17:25:37,115
get the title from all of the shows

27601
17:25:34,520 --> 17:25:40,596
where the ID of the show is in that big

27602
17:25:37,116 --> 17:25:42,320
list of 48,000 so if I now execute these

27603
17:25:40,596 --> 17:25:43,916
together I think the list is still going

27604
17:25:42,320 --> 17:25:47,560
to be a little long but let me execute

27605
17:25:43,916 --> 17:25:49,680
it together now I see this long list of

27606
17:25:47,560 --> 17:25:53,360
outputs a little overwhelming let's go

27607
17:25:49,680 --> 17:25:56,116
ahead and maybe limit it to just 10 as

27608
17:25:53,360 --> 17:25:58,796
before for discussion sake and now I see

27609
17:25:56,116 --> 17:26:00,360
10 comedies ordered arbitrarily from

27610
17:25:58,796 --> 17:26:03,320
however they're in the database that

27611
17:26:00,360 --> 17:26:05,160
happen to indeed be have comedy as their

27612
17:26:03,320 --> 17:26:07,916
genre if I want to do this a little more

27613
17:26:05,160 --> 17:26:10,916
cleanly I could do this let's see uh why

27614
17:26:07,916 --> 17:26:12,636
don't I order by title ascending order

27615
17:26:10,916 --> 17:26:16,755
which is alphabetically or the default

27616
17:26:12,636 --> 17:26:19,916
is also uh ascending limit 10 now I see

27617
17:26:16,756 --> 17:26:21,596
the top 10 I mean weirdly named things

27618
17:26:19,916 --> 17:26:23,040
with hash symbols presumably to get

27619
17:26:21,596 --> 17:26:25,360
their titles up to the beginning or

27620
17:26:23,040 --> 17:26:27,436
maybe these are hashtags uh here now we

27621
17:26:25,360 --> 17:26:29,160
have alphabetically the top first 10

27622
17:26:27,436 --> 17:26:33,320
shows that are

27623
17:26:29,160 --> 17:26:35,476
comedies any questions on these kinds of

27624
17:26:33,320 --> 17:26:36,956
queries it's kind of a lot but at the

27625
17:26:35,476 --> 17:26:39,680
same time it's just like composing the

27626
17:26:36,956 --> 17:26:41,436
smaller ideas from before into slightly

27627
17:26:39,680 --> 17:26:44,436
more useful

27628
17:26:41,436 --> 17:26:44,436
queries

27629
17:26:48,276 --> 17:26:52,880
yeah do for Keys have to set the

27630
17:26:50,596 --> 17:26:54,276
relationship when you create the table

27631
17:26:52,880 --> 17:26:56,040
the programmer or the database

27632
17:26:54,276 --> 17:26:57,720
administrator would create that

27633
17:26:56,040 --> 17:26:59,916
relationship by using those keywords

27634
17:26:57,720 --> 17:27:01,560
primary key and foreign key that create

27635
17:26:59,916 --> 17:27:04,040
that teaches the database what is

27636
17:27:01,560 --> 17:27:07,435
related to what per the picture so you

27637
17:27:04,040 --> 17:27:09,000
do that once and now I being the sort of

27638
17:27:07,436 --> 17:27:12,276
programmer who's familiar with the

27639
17:27:09,000 --> 17:27:14,596
database I am just using these foreign

27640
17:27:12,276 --> 17:27:16,680
keys in a way in a manner consistent

27641
17:27:14,596 --> 17:27:18,435
with their design but and this is where

27642
17:27:16,680 --> 17:27:20,400
it's useful at some point even if you no

27643
17:27:18,436 --> 17:27:21,680
one hands you a picture to make sure you

27644
17:27:20,400 --> 17:27:23,796
understand the database because that's

27645
17:27:21,680 --> 17:27:25,680
going to inform literally what you type

27646
17:27:23,796 --> 17:27:27,360
in SQL to get the data you care about

27647
17:27:25,680 --> 17:27:29,756
about well let's do something a little

27648
17:27:27,360 --> 17:27:31,276
more precise how about very reasonable

27649
17:27:29,756 --> 17:27:33,680
question and honestly this is exactly

27650
17:27:31,276 --> 17:27:35,000
what imdb.com in the app are for what if

27651
17:27:33,680 --> 17:27:37,360
you want to find all of the shows that

27652
17:27:35,000 --> 17:27:38,916
Steve Carell is in like kind of a

27653
17:27:37,360 --> 17:27:40,636
reasonable query like literally

27654
17:27:38,916 --> 17:27:43,079
something someone might type into Google

27655
17:27:40,636 --> 17:27:44,916
or more specifically IMDb it's not

27656
17:27:43,080 --> 17:27:46,756
really obvious at first glance how to do

27657
17:27:44,916 --> 17:27:48,636
that though because right like from my

27658
17:27:46,756 --> 17:27:50,160
database if these are my six tables well

27659
17:27:48,636 --> 17:27:52,159
I can pretty easily get Steve Carell

27660
17:27:50,160 --> 17:27:54,000
from here but I can really only get his

27661
17:27:52,160 --> 17:27:55,720
ID number whatever that is his name

27662
17:27:54,000 --> 17:27:57,320
which I know already and his birth year

27663
17:27:55,720 --> 17:27:59,400
okay interesting but has nothing to do

27664
17:27:57,320 --> 17:28:02,000
with the shows that he's in I can look

27665
17:27:59,400 --> 17:28:03,436
at shows over here but there's no

27666
17:28:02,000 --> 17:28:05,796
mention of Steve Carell right because

27667
17:28:03,436 --> 17:28:07,400
there's no person ID here where is that

27668
17:28:05,796 --> 17:28:09,956
relationship implemented well it's

27669
17:28:07,400 --> 17:28:11,916
implemented down here so how do we do

27670
17:28:09,956 --> 17:28:13,320
this well here's the perfect example of

27671
17:28:11,916 --> 17:28:15,360
a a lesson we've trying been trying to

27672
17:28:13,320 --> 17:28:17,436
emphasize for weeks of taking these baby

27673
17:28:15,360 --> 17:28:19,400
steps like break larger problems down

27674
17:28:17,436 --> 17:28:21,240
into smaller ones and let's do something

27675
17:28:19,400 --> 17:28:22,680
like this let's just get everything I

27676
17:28:21,240 --> 17:28:25,240
know about Steve Carell from the

27677
17:28:22,680 --> 17:28:27,476
database let's select star from people

27678
17:28:25,240 --> 17:28:30,040
where the name of the person is quote

27679
17:28:27,476 --> 17:28:31,956
unquote Steve Carell I just want to see

27680
17:28:30,040 --> 17:28:34,160
what data we've got and here's what we

27681
17:28:31,956 --> 17:28:37,360
have okay there's only one Steve Carell

27682
17:28:34,160 --> 17:28:40,080
born in 1962 and his unique ID is 136

27683
17:28:37,360 --> 17:28:43,436
797 according to IMDb this isn't some

27684
17:28:40,080 --> 17:28:45,276
like Global uh actor identifier per se

27685
17:28:43,436 --> 17:28:47,680
all right well how do I get now all of

27686
17:28:45,276 --> 17:28:49,276
the shows that Steve Carell is in well I

27687
17:28:47,680 --> 17:28:53,240
could do this

27688
17:28:49,276 --> 17:28:54,795
select star from Stars not to confuse

27689
17:28:53,240 --> 17:29:00,956
the two one's the symbol one's the table

27690
17:28:54,796 --> 17:29:04,040
name uh where person ID equals 13

27691
17:29:00,956 --> 17:29:05,560
6797 so I think this will now give me

27692
17:29:04,040 --> 17:29:07,756
everything from the Stars table that

27693
17:29:05,560 --> 17:29:09,320
relates to Steve Carell okay and you'll

27694
17:29:07,756 --> 17:29:10,476
see person ID is the same because I'm

27695
17:29:09,320 --> 17:29:13,040
literally searching for just Steve

27696
17:29:10,476 --> 17:29:15,400
Carell but there are what like 20 or so

27697
17:29:13,040 --> 17:29:16,796
shows that he's been in all right well

27698
17:29:15,400 --> 17:29:18,320
here's where things would get tedious

27699
17:29:16,796 --> 17:29:22,916
what are those shows well I could do

27700
17:29:18,320 --> 17:29:25,080
Select Title from shows where the ID of

27701
17:29:22,916 --> 17:29:26,719
the show equals and here's you know

27702
17:29:25,080 --> 17:29:29,080
whenever you copy paste you're probably

27703
17:29:26,720 --> 17:29:31,160
doing something wrong okay he's was in

27704
17:29:29,080 --> 17:29:32,796
The Dana Carvey Show familiar with that

27705
17:29:31,160 --> 17:29:37,080
let's do another one we'll copy paste

27706
17:29:32,796 --> 17:29:38,520
this uh where ID equals this over the

27707
17:29:37,080 --> 17:29:40,000
top another and if we keep digging we'll

27708
17:29:38,520 --> 17:29:41,636
probably find the office but my God like

27709
17:29:40,000 --> 17:29:43,720
that's going to take forever to do 20

27710
17:29:41,636 --> 17:29:45,320
queries manually it's not very Dynamic

27711
17:29:43,720 --> 17:29:47,040
but what if we just Nest these queries a

27712
17:29:45,320 --> 17:29:48,916
little more dynamically so let me start

27713
17:29:47,040 --> 17:29:51,400
from the beginning again what if we go

27714
17:29:48,916 --> 17:29:55,956
ahead and select everything we want we

27715
17:29:51,400 --> 17:29:57,200
know about uh people whose name

27716
17:29:55,956 --> 17:30:00,080
equals

27717
17:29:57,200 --> 17:30:01,956
Steve Carell that gave us earlier this

27718
17:30:00,080 --> 17:30:03,160
data I don't need all of that data I

27719
17:30:01,956 --> 17:30:05,276
know his name I don't care about his

27720
17:30:03,160 --> 17:30:07,796
birth year so let's change this to just

27721
17:30:05,276 --> 17:30:09,795
be give me the ID of Steve Carell and

27722
17:30:07,796 --> 17:30:11,796
that gives me back now this smaller

27723
17:30:09,796 --> 17:30:12,680
temporary data set all right can I now

27724
17:30:11,796 --> 17:30:15,200
use

27725
17:30:12,680 --> 17:30:16,680
this uh inside of another query well let

27726
17:30:15,200 --> 17:30:19,916
me wrap the whole thing with parentheses

27727
17:30:16,680 --> 17:30:24,636
and now let me say select star from the

27728
17:30:19,916 --> 17:30:26,435
Stars table where the person ID equals

27729
17:30:24,636 --> 17:30:27,796
this so I'm Del liely not using in

27730
17:30:26,436 --> 17:30:29,436
because I'm assuming there's indeed only

27731
17:30:27,796 --> 17:30:30,956
one Steve Carell in the world so I'm not

27732
17:30:29,436 --> 17:30:32,720
getting back a list of Steve Carell I'm

27733
17:30:30,956 --> 17:30:34,756
getting back the one and only in this

27734
17:30:32,720 --> 17:30:37,320
case so equal is fine in is when you

27735
17:30:34,756 --> 17:30:39,040
have multiple equal is when you have one

27736
17:30:37,320 --> 17:30:40,320
let me go ahead and hit enter now okay

27737
17:30:39,040 --> 17:30:42,080
that's more data than I need I don't

27738
17:30:40,320 --> 17:30:44,400
need like 20 copies of Steve Carell's

27739
17:30:42,080 --> 17:30:47,840
person ID so let me hit up let me go

27740
17:30:44,400 --> 17:30:50,400
back and let me just get show ID from

27741
17:30:47,840 --> 17:30:53,755
Steve Carell and now I have a list of

27742
17:30:50,400 --> 17:30:56,000
just the 20 or so show IDs that he has

27743
17:30:53,756 --> 17:30:57,956
been in all right how can I now use this

27744
17:30:56,000 --> 17:31:00,200
well let me hit up let me put the whole

27745
17:30:57,956 --> 17:31:02,720
thing in parentheses and now let me

27746
17:31:00,200 --> 17:31:06,680
select what I really want Select Title

27747
17:31:02,720 --> 17:31:10,956
from shows where and here's the final

27748
17:31:06,680 --> 17:31:14,240
flourish the shows table has an ID has a

27749
17:31:10,956 --> 17:31:17,159
title has a year and has an episode and

27750
17:31:14,240 --> 17:31:18,795
what I really want though is to check

27751
17:31:17,160 --> 17:31:24,360
which

27752
17:31:18,796 --> 17:31:26,956
shows have ID that is what anyone want

27753
17:31:24,360 --> 17:31:29,880
to finish the thought

27754
17:31:26,956 --> 17:31:29,880
I just want to

27755
17:31:30,116 --> 17:31:34,796
yeah exactly ID in this and this is

27756
17:31:33,320 --> 17:31:36,400
getting ugly and when you actually write

27757
17:31:34,796 --> 17:31:38,240
your queries in like a text file you can

27758
17:31:36,400 --> 17:31:39,636
format them nicely and indent them my

27759
17:31:38,240 --> 17:31:41,200
font is just getting I don't want to

27760
17:31:39,636 --> 17:31:43,240
make it too small to fit everything but

27761
17:31:41,200 --> 17:31:44,956
now we have three queries one is in

27762
17:31:43,240 --> 17:31:46,560
doubly nested parenthesis then there's

27763
17:31:44,956 --> 17:31:48,320
the middle one then there's the outer

27764
17:31:46,560 --> 17:31:50,399
one so this last query is going to get

27765
17:31:48,320 --> 17:31:53,159
me the title from shows where the ID of

27766
17:31:50,400 --> 17:31:54,916
the show is in this big list of 20 or so

27767
17:31:53,160 --> 17:31:57,080
show IDs that Steve Carell is in and I

27768
17:31:54,916 --> 17:31:58,596
knew that because I looked up his name

27769
17:31:57,080 --> 17:32:00,276
here and notice what I did not do this

27770
17:31:58,596 --> 17:32:02,320
time is I didn't manually hardcode his

27771
17:32:00,276 --> 17:32:04,596
ID number there's no need that would be

27772
17:32:02,320 --> 17:32:06,040
kind of a bad way to implement a website

27773
17:32:04,596 --> 17:32:08,956
uh if you're using a database underneath

27774
17:32:06,040 --> 17:32:10,796
the hood you want the IMDb for real to

27775
17:32:08,956 --> 17:32:12,040
search for whatever the human typed in

27776
17:32:10,796 --> 17:32:14,916
and no one's going to know Steve

27777
17:32:12,040 --> 17:32:17,320
Carell's person ID or anything else so

27778
17:32:14,916 --> 17:32:20,360
here we've done this all dynamically and

27779
17:32:17,320 --> 17:32:22,276
now if I hit enter I think I get all of

27780
17:32:20,360 --> 17:32:24,680
his shows let's go ahead and order this

27781
17:32:22,276 --> 17:32:26,680
by title just to make it tidy and you

27782
17:32:24,680 --> 17:32:28,116
probably will see at least one or more

27783
17:32:26,680 --> 17:32:32,040
shows that you know and probably the

27784
17:32:28,116 --> 17:32:34,200
most popular is dot dot dot the office

27785
17:32:32,040 --> 17:32:36,160
so this is literally the kind of query

27786
17:32:34,200 --> 17:32:38,520
that's being executed underneath the

27787
17:32:36,160 --> 17:32:41,680
hood when you go to uh websites or apps

27788
17:32:38,520 --> 17:32:44,435
like IMDb your textual query is probably

27789
17:32:41,680 --> 17:32:46,840
being plugged into a longer SQL query

27790
17:32:44,436 --> 17:32:48,720
like this where some programmer at IMDb

27791
17:32:46,840 --> 17:32:51,039
probably wrote this whole query in

27792
17:32:48,720 --> 17:32:53,476
advance weeks months years ago and

27793
17:32:51,040 --> 17:32:55,476
they're just somehow plugging in the

27794
17:32:53,476 --> 17:32:59,756
value that you the human type into the

27795
17:32:55,476 --> 17:33:04,596
search box or the like questions

27796
17:32:59,756 --> 17:33:08,840
now on finding this data or any

27797
17:33:04,596 --> 17:33:11,435
other no okay so where else could we go

27798
17:33:08,840 --> 17:33:15,115
with this well let's

27799
17:33:11,436 --> 17:33:17,520
consider how else we might combine data

27800
17:33:15,116 --> 17:33:19,476
suppose that the next question actually

27801
17:33:17,520 --> 17:33:21,596
perhaps appropriately would be focusing

27802
17:33:19,476 --> 17:33:23,636
in on not just like people and shows and

27803
17:33:21,596 --> 17:33:25,720
these stars but how do we kind of like

27804
17:33:23,636 --> 17:33:27,159
gather more information about the shows

27805
17:33:25,720 --> 17:33:28,916
themselves like the genres the ratings

27806
17:33:27,160 --> 17:33:31,040
or the like so indeed let's focus on

27807
17:33:28,916 --> 17:33:33,159
just these two tables here recall that

27808
17:33:31,040 --> 17:33:35,476
every show has an ID a title a year and

27809
17:33:33,160 --> 17:33:37,276
episodes but it also might have one or

27810
17:33:35,476 --> 17:33:39,080
more relationships with rose and this

27811
17:33:37,276 --> 17:33:41,240
other table is called genres and this is

27812
17:33:39,080 --> 17:33:43,520
so that a show can be a comedy can be a

27813
17:33:41,240 --> 17:33:45,795
drama can be any number of other things

27814
17:33:43,520 --> 17:33:48,399
one row per so you would see the same

27815
17:33:45,796 --> 17:33:51,400
show ID again and again and again with a

27816
17:33:48,400 --> 17:33:53,916
different genre written in English like

27817
17:33:51,400 --> 17:33:56,400
comma comedy drama or the like well how

27818
17:33:53,916 --> 17:33:58,079
do I kind of Recon subtitute that data

27819
17:33:56,400 --> 17:34:00,436
Well turns out there's a few different

27820
17:33:58,080 --> 17:34:03,520
ways to do this and let me propose that

27821
17:34:00,436 --> 17:34:05,956
we introduce this keyword here join and

27822
17:34:03,520 --> 17:34:08,359
this is really the most powerful of the

27823
17:34:05,956 --> 17:34:10,636
keywords in SQL itself it doesn't have

27824
17:34:08,360 --> 17:34:12,436
to be used we've seen with uh nested

27825
17:34:10,636 --> 17:34:14,596
queries that you can still select data

27826
17:34:12,436 --> 17:34:17,476
across multiple tables but here is

27827
17:34:14,596 --> 17:34:21,276
another way so let me do this let me go

27828
17:34:17,476 --> 17:34:25,200
back to my SQL light database and let me

27829
17:34:21,276 --> 17:34:29,436
select sort of in one uh breath exactly

27830
17:34:25,200 --> 17:34:31,200
the data I want select star from shows

27831
17:34:29,436 --> 17:34:33,436
and let's just limit this initially to

27832
17:34:31,200 --> 17:34:35,795
10 to see what it looks like all right

27833
17:34:33,436 --> 17:34:38,520
that's again the shows data select star

27834
17:34:35,796 --> 17:34:40,756
from genres let's limit that to 102 just

27835
17:34:38,520 --> 17:34:44,000
to wrap our minds around it and now this

27836
17:34:40,756 --> 17:34:46,796
is not that useful however the data in

27837
17:34:44,000 --> 17:34:48,240
the leftmost column here is the primary

27838
17:34:46,796 --> 17:34:51,636
key in the shows table these are just

27839
17:34:48,240 --> 17:34:53,840
unique IDs the data here in the genres

27840
17:34:51,636 --> 17:34:55,680
table recall show ID is the foreign key

27841
17:34:53,840 --> 17:34:57,359
so it's the same numbers but just copied

27842
17:34:55,680 --> 17:34:59,680
into another table so that we can have

27843
17:34:57,360 --> 17:35:02,040
this relationship across them how do I

27844
17:34:59,680 --> 17:35:04,276
kind of line up these numbers with these

27845
17:35:02,040 --> 17:35:08,000
numbers to get back like a wider table

27846
17:35:04,276 --> 17:35:10,240
that has title and year and episodes and

27847
17:35:08,000 --> 17:35:12,596
genre and heck ratings and all of that

27848
17:35:10,240 --> 17:35:14,276
too if we want well you can join these

27849
17:35:12,596 --> 17:35:17,200
Tables by just telling the database what

27850
17:35:14,276 --> 17:35:22,000
to join on what so let me do this select

27851
17:35:17,200 --> 17:35:24,636
star from shows join that table though

27852
17:35:22,000 --> 17:35:27,116
on the genres table well how do you want

27853
17:35:24,636 --> 17:35:28,796
to join those two tables and again the

27854
17:35:27,116 --> 17:35:30,400
two tables from the picture looked like

27855
17:35:28,796 --> 17:35:32,200
this how do you tell SQL

27856
17:35:30,400 --> 17:35:33,840
programmatically to sort of you know put

27857
17:35:32,200 --> 17:35:35,520
one of them right next to the other line

27858
17:35:33,840 --> 17:35:38,000
up all of the ID so that you just get

27859
17:35:35,520 --> 17:35:40,840
one larger data set well we can use

27860
17:35:38,000 --> 17:35:43,880
indeed this this query this uh syntax

27861
17:35:40,840 --> 17:35:45,840
called join so back to VSS code here and

27862
17:35:43,880 --> 17:35:51,000
let me join these two

27863
17:35:45,840 --> 17:35:54,435
tables sorry typo here join genres on

27864
17:35:51,000 --> 17:35:58,720
the shows tables ID column AKA it's

27865
17:35:54,436 --> 17:36:01,916
primary key equaling the genres tables

27866
17:35:58,720 --> 17:36:03,476
show ID column aka the foreign key so in

27867
17:36:01,916 --> 17:36:05,755
other words it looks a little cryptic

27868
17:36:03,476 --> 17:36:07,720
but I'm just telling SQL how to line up

27869
17:36:05,756 --> 17:36:10,000
these two tables and what column to

27870
17:36:07,720 --> 17:36:12,240
match with the other so that the numbers

27871
17:36:10,000 --> 17:36:15,880
line up and I get essentially a wider

27872
17:36:12,240 --> 17:36:18,115
table let me go ahead and hit uh

27873
17:36:15,880 --> 17:36:19,956
semicolon and enter and this is now

27874
17:36:18,116 --> 17:36:21,880
going to give me a lot of data we might

27875
17:36:19,956 --> 17:36:24,400
have to interrupt it but notice even at

27876
17:36:21,880 --> 17:36:26,435
a glance we're getting the ID the title

27877
17:36:24,400 --> 17:36:28,320
the year the number of episodes the ID

27878
17:36:26,436 --> 17:36:30,436
again redundantly but that's to be

27879
17:36:28,320 --> 17:36:31,956
expected if I'm joining them and the

27880
17:36:30,436 --> 17:36:34,596
genre all the way on the right let me

27881
17:36:31,956 --> 17:36:37,560
hit contrl C to interrupt let me just

27882
17:36:34,596 --> 17:36:39,079
limit this to the office so where title

27883
17:36:37,560 --> 17:36:42,276
equals quote unquote the office so we

27884
17:36:39,080 --> 17:36:45,000
can focus on just one sample uh datum

27885
17:36:42,276 --> 17:36:47,360
and here fun fact there's been more than

27886
17:36:45,000 --> 17:36:49,680
one office the one that you all probably

27887
17:36:47,360 --> 17:36:53,276
like is this one that started in 2005

27888
17:36:49,680 --> 17:36:56,436
with 188 episodes its ID in the shows

27889
17:36:53,276 --> 17:36:58,636
table is 3866 76 that's confirmed over

27890
17:36:56,436 --> 17:37:01,276
here too so again we've just joined the

27891
17:36:58,636 --> 17:37:03,080
two tables how by lining up those fields

27892
17:37:01,276 --> 17:37:04,795
but now that we can see that almost all

27893
17:37:03,080 --> 17:37:07,360
of the offices produced over the decades

27894
17:37:04,796 --> 17:37:09,400
are comedies except for this one there

27895
17:37:07,360 --> 17:37:11,720
was a version of the office produced in

27896
17:37:09,400 --> 17:37:13,880
2001 that was considered more of uh a

27897
17:37:11,720 --> 17:37:16,320
drama no unsure if it's related to the

27898
17:37:13,880 --> 17:37:18,399
other how can we Link in other data well

27899
17:37:16,320 --> 17:37:20,436
let's go ahead and Link in ratings too

27900
17:37:18,400 --> 17:37:23,276
or instead so instead of joining this

27901
17:37:20,436 --> 17:37:28,240
with genres let me go ahead and Rewind

27902
17:37:23,276 --> 17:37:31,320
here and join shows on ratings on shows.

27903
17:37:28,240 --> 17:37:33,040
ID equals ratings. show ID and let's

27904
17:37:31,320 --> 17:37:35,796
limit it to the office 2 for discussion

27905
17:37:33,040 --> 17:37:39,796
sake where uh title equals quote unquote

27906
17:37:35,796 --> 17:37:42,956
the office semicolon and now you can see

27907
17:37:39,796 --> 17:37:44,840
that among the various offices it looks

27908
17:37:42,956 --> 17:37:47,116
like the one that most of us probably

27909
17:37:44,840 --> 17:37:51,159
know and love is the highest rated also

27910
17:37:47,116 --> 17:37:53,000
with a 9.0 with like 585,000 people

27911
17:37:51,160 --> 17:37:54,240
having cast votes for whereas these

27912
17:37:53,000 --> 17:37:55,796
other shows seem to have been less

27913
17:37:54,240 --> 17:37:59,000
popular perhaps that's why indeed you

27914
17:37:55,796 --> 17:38:00,080
see fewer episodes for them as well so

27915
17:37:59,000 --> 17:38:01,756
even though we've put the data in

27916
17:38:00,080 --> 17:38:04,596
multiple places you can still kind of

27917
17:38:01,756 --> 17:38:07,596
reconstitute it by lining things up in

27918
17:38:04,596 --> 17:38:10,399
this way and rejoining the tables

27919
17:38:07,596 --> 17:38:13,159
questions now on

27920
17:38:10,400 --> 17:38:16,040
this like this is the heart of what SQL

27921
17:38:13,160 --> 17:38:18,116
does and what relational databases do

27922
17:38:16,040 --> 17:38:19,636
for

27923
17:38:18,116 --> 17:38:22,596
you

27924
17:38:19,636 --> 17:38:24,840
questions all right a few final features

27925
17:38:22,596 --> 17:38:26,079
like there's not all that much that uh

27926
17:38:24,840 --> 17:38:27,840
you know SQL takes practice like

27927
17:38:26,080 --> 17:38:29,240
anything else but in terms of syntax and

27928
17:38:27,840 --> 17:38:31,956
capabilities let's just introduce you to

27929
17:38:29,240 --> 17:38:33,720
a couple of final features here and how

27930
17:38:31,956 --> 17:38:37,159
and problems that arise and how we might

27931
17:38:33,720 --> 17:38:39,476
solve them let's do this uh as well so

27932
17:38:37,160 --> 17:38:42,520
let me go back into VSS code here and

27933
17:38:39,476 --> 17:38:44,000
let's just find out um Steve Carell's

27934
17:38:42,520 --> 17:38:46,320
information again last time we did it

27935
17:38:44,000 --> 17:38:48,360
with this nested nested query by getting

27936
17:38:46,320 --> 17:38:50,680
his ID and then the show IDs and then

27937
17:38:48,360 --> 17:38:51,956
the titles for those show IDs with join

27938
17:38:50,680 --> 17:38:53,916
you can do it a little differently and

27939
17:38:51,956 --> 17:38:55,560
any of these ways are fine one might

27940
17:38:53,916 --> 17:38:57,159
become EAS easier to you mentally than

27941
17:38:55,560 --> 17:39:01,435
another let's go ahead and select the

27942
17:38:57,160 --> 17:39:04,880
titles from what let's select the title

27943
17:39:01,436 --> 17:39:06,116
from uh the people table but and I'm

27944
17:39:04,880 --> 17:39:08,040
going to hit enter and when you're using

27945
17:39:06,116 --> 17:39:09,916
SQL light 3 interactively if you ever

27946
17:39:08,040 --> 17:39:12,200
find yourself with a prompt that says

27947
17:39:09,916 --> 17:39:13,840
dot dot dot angle bracket it means

27948
17:39:12,200 --> 17:39:15,755
you're continuing your thought onto the

27949
17:39:13,840 --> 17:39:17,840
next line if you didn't intend that you

27950
17:39:15,756 --> 17:39:19,560
can sometimes hit uh semicolon to just

27951
17:39:17,840 --> 17:39:21,320
end the thought and hit enter and just

27952
17:39:19,560 --> 17:39:23,040
even if it triggers an error but this is

27953
17:39:21,320 --> 17:39:24,276
one way of formatting my queries now a

27954
17:39:23,040 --> 17:39:25,720
little more nicely I'm just going to add

27955
17:39:24,276 --> 17:39:28,079
some wh space so that it's a little

27956
17:39:25,720 --> 17:39:30,720
easier to read what do I want to select

27957
17:39:28,080 --> 17:39:34,240
well I want to select the title of shows

27958
17:39:30,720 --> 17:39:37,796
from the people table joined with the

27959
17:39:34,240 --> 17:39:41,916
Stars table on the people tables ID

27960
17:39:37,796 --> 17:39:44,200
column equaling the Stars tables person

27961
17:39:41,916 --> 17:39:46,200
ID column so in other words if you think

27962
17:39:44,200 --> 17:39:48,475
back to what people are and what stars

27963
17:39:46,200 --> 17:39:50,636
are one has an ID one has a person ID

27964
17:39:48,476 --> 17:39:53,000
I'm just now connecting those two tables

27965
17:39:50,636 --> 17:39:55,916
I'm joining those two but I want to do

27966
17:39:53,000 --> 17:39:58,080
this as well with with another table let

27967
17:39:55,916 --> 17:39:59,475
me additionally join in so now I only

27968
17:39:58,080 --> 17:40:02,476
have two hands but now I'm putting a

27969
17:39:59,476 --> 17:40:08,400
third table joined in together here join

27970
17:40:02,476 --> 17:40:10,320
shows on stars. show ID equals shows. ID

27971
17:40:08,400 --> 17:40:12,116
so this is now linking three tables

27972
17:40:10,320 --> 17:40:14,116
together but I only care about this for

27973
17:40:12,116 --> 17:40:17,240
one person so where the name of the

27974
17:40:14,116 --> 17:40:19,880
person equals quote unquote Steve Carell

27975
17:40:17,240 --> 17:40:21,520
so more cryptic to be to be sure but

27976
17:40:19,880 --> 17:40:23,360
what we're doing with this query is just

27977
17:40:21,520 --> 17:40:25,079
taking all three tables that we care

27978
17:40:23,360 --> 17:40:27,000
about and we're joining them them all

27979
17:40:25,080 --> 17:40:29,360
together at once using this new join

27980
17:40:27,000 --> 17:40:31,680
syntax literally telling the database

27981
17:40:29,360 --> 17:40:33,200
what columns to line up with what and

27982
17:40:31,680 --> 17:40:36,360
then we filter at the very end just like

27983
17:40:33,200 --> 17:40:38,240
before to get back if I hit enter the

27984
17:40:36,360 --> 17:40:40,240
answer we want which in this case is a

27985
17:40:38,240 --> 17:40:43,276
little slower at the moment but that

27986
17:40:40,240 --> 17:40:45,159
same list of uh 20 or so shows that he's

27987
17:40:43,276 --> 17:40:47,200
been in there's one other way to do this

27988
17:40:45,160 --> 17:40:48,636
and again uh these are all in the slides

27989
17:40:47,200 --> 17:40:50,000
online so you can repeat them without

27990
17:40:48,636 --> 17:40:51,680
having to jot down everything and we'll

27991
17:40:50,000 --> 17:40:53,956
put them in the notes too but there's

27992
17:40:51,680 --> 17:40:56,320
another way to do this I could also use

27993
17:40:53,956 --> 17:40:57,720
an implicit join so that was an explicit

27994
17:40:56,320 --> 17:41:00,116
join because I literally typed the word

27995
17:40:57,720 --> 17:41:02,560
join multiple times at that but let me

27996
17:41:00,116 --> 17:41:05,560
go ahead and select the title from these

27997
17:41:02,560 --> 17:41:06,795
three tables people stars and shows and

27998
17:41:05,560 --> 17:41:08,115
this might just be nicer because if you

27999
17:41:06,796 --> 17:41:10,080
know what tables you want to select data

28000
17:41:08,116 --> 17:41:11,636
from just enumerate them separated by

28001
17:41:10,080 --> 17:41:16,360
commas which you might prefer in your

28002
17:41:11,636 --> 17:41:18,475
mind where the people ID equals the

28003
17:41:16,360 --> 17:41:23,200
Stars person

28004
17:41:18,476 --> 17:41:26,520
ID and the Stars show ID equals the

28005
17:41:23,200 --> 17:41:28,636
shows ID and the name of the person

28006
17:41:26,520 --> 17:41:30,560
equals Steve Carell so this is an

28007
17:41:28,636 --> 17:41:31,720
implicit joint and honestly I constantly

28008
17:41:30,560 --> 17:41:33,040
reference my notes for some of this

28009
17:41:31,720 --> 17:41:34,160
stuff too it's not the kind of thing

28010
17:41:33,040 --> 17:41:36,276
that's going to come like this to you

28011
17:41:34,160 --> 17:41:37,680
after just one day but it's just a

28012
17:41:36,276 --> 17:41:39,276
different way of expressing the same

28013
17:41:37,680 --> 17:41:42,160
thing I want to select data from three

28014
17:41:39,276 --> 17:41:45,159
different tables and hey SQL here is how

28015
17:41:42,160 --> 17:41:47,116
I want you to line those tables up so

28016
17:41:45,160 --> 17:41:49,756
that I can get like related data for

28017
17:41:47,116 --> 17:41:53,276
Steve Carell and this now will achieve

28018
17:41:49,756 --> 17:41:55,680
the same results ultimately let me hit

28019
17:41:53,276 --> 17:41:58,560
enter

28020
17:41:55,680 --> 17:42:00,276
H and there we go so a little slower and

28021
17:41:58,560 --> 17:42:02,435
performance might vary based on computer

28022
17:42:00,276 --> 17:42:03,880
based on uh implementation of SQL but I

28023
17:42:02,436 --> 17:42:05,840
think I still have the same answers now

28024
17:42:03,880 --> 17:42:07,680
suppose as I'm often do and I had to

28025
17:42:05,840 --> 17:42:09,916
look it up again last time suppose you

28026
17:42:07,680 --> 17:42:12,160
forget what uh how to spell Steve

28027
17:42:09,916 --> 17:42:14,079
Carell's name is it two RS two L's or

28028
17:42:12,160 --> 17:42:16,276
the like well I could also do something

28029
17:42:14,080 --> 17:42:18,596
like this select well let's just keep

28030
17:42:16,276 --> 17:42:20,436
this simple select star from people

28031
17:42:18,596 --> 17:42:22,079
where name equals I've been deliberately

28032
17:42:20,436 --> 17:42:23,720
getting it right so as to not embarrass

28033
17:42:22,080 --> 17:42:26,520
myself that's the Steve Carell I keep

28034
17:42:23,720 --> 17:42:29,436
querying if you forget well you could

28035
17:42:26,520 --> 17:42:30,840
try searching for just Steves but there

28036
17:42:29,436 --> 17:42:33,240
interestingly there's a bunch of Steves

28037
17:42:30,840 --> 17:42:35,435
we don't know when they were born uh but

28038
17:42:33,240 --> 17:42:38,040
that's probably not the Steve Carell we

28039
17:42:35,436 --> 17:42:39,840
want if we don't have his last name so I

28040
17:42:38,040 --> 17:42:42,000
could alternatively do well it's Steve

28041
17:42:39,840 --> 17:42:43,719
and then it's starts with a C I think

28042
17:42:42,000 --> 17:42:45,796
well it turns out there's another wild

28043
17:42:43,720 --> 17:42:48,596
card you can use in SQL we used the

28044
17:42:45,796 --> 17:42:51,560
asterisk to select all of the columns

28045
17:42:48,596 --> 17:42:54,560
you can in quotes use a percent sign to

28046
17:42:51,560 --> 17:42:57,000
say see something so there's some zero

28047
17:42:54,560 --> 17:42:59,756
or more characters after the letter c

28048
17:42:57,000 --> 17:43:01,880
and now this doesn't work cuz now I

28049
17:42:59,756 --> 17:43:05,360
would be literally looking for Steve

28050
17:43:01,880 --> 17:43:07,435
space c something but recall earlier I

28051
17:43:05,360 --> 17:43:09,160
mentioned that one other keyword which

28052
17:43:07,436 --> 17:43:10,756
is for fuzzier matching so to speak

28053
17:43:09,160 --> 17:43:12,276
where it's like not exactly what you're

28054
17:43:10,756 --> 17:43:14,160
looking for but it's like what you're

28055
17:43:12,276 --> 17:43:17,560
looking for if you instead say where his

28056
17:43:14,160 --> 17:43:19,596
name is like Steve space c something now

28057
17:43:17,560 --> 17:43:21,159
we'll get back a whole bunch of Steves

28058
17:43:19,596 --> 17:43:22,520
but I think now I could probably find

28059
17:43:21,160 --> 17:43:23,680
the one I'm actually looking for if I

28060
17:43:22,520 --> 17:43:25,320
don't remember his name you can use

28061
17:43:23,680 --> 17:43:26,840
multiple percent signs if you forget

28062
17:43:25,320 --> 17:43:29,400
what his first name is you could reverse

28063
17:43:26,840 --> 17:43:32,679
the order but that too is a uh very

28064
17:43:29,400 --> 17:43:37,116
powerful sequel feature at that

28065
17:43:32,680 --> 17:43:40,116
questions on these queries here

28066
17:43:37,116 --> 17:43:40,116
yeah

28067
17:43:40,240 --> 17:43:46,840
sorry what about

28068
17:43:42,476 --> 17:43:49,240
it oh yeah sure so the query I used here

28069
17:43:46,840 --> 17:43:52,719
there's a lot of Steves whose last name

28070
17:43:49,240 --> 17:43:55,880
starts with C oops too far uh the last

28071
17:43:52,720 --> 17:43:57,520
query I executed was this one here so

28072
17:43:55,880 --> 17:43:59,956
where the name is like quote unquote

28073
17:43:57,520 --> 17:44:02,680
Steve C percent sign so that's just

28074
17:43:59,956 --> 17:44:03,956
another tool for your toolkit here but

28075
17:44:02,680 --> 17:44:06,200
you'll you'll perhaps have noticed that

28076
17:44:03,956 --> 17:44:07,840
those two the prior to that query the

28077
17:44:06,200 --> 17:44:09,596
joins I did were sort of slow and

28078
17:44:07,840 --> 17:44:11,840
honestly this database isn't even that

28079
17:44:09,596 --> 17:44:13,720
big like yes it has tens of thousands of

28080
17:44:11,840 --> 17:44:15,520
rows in it but like in the real world

28081
17:44:13,720 --> 17:44:17,160
and most of the apps you and I use a lot

28082
17:44:15,520 --> 17:44:19,520
every day or websites like there's

28083
17:44:17,160 --> 17:44:21,840
Millions even billions of rows of data

28084
17:44:19,520 --> 17:44:23,755
and like if I had to wait on like my

28085
17:44:21,840 --> 17:44:25,679
computer here or my code space like a

28086
17:44:23,756 --> 17:44:27,240
second or two to get the data like

28087
17:44:25,680 --> 17:44:29,916
that's not going to work for millions of

28088
17:44:27,240 --> 17:44:32,159
users or customers certainly so how can

28089
17:44:29,916 --> 17:44:35,079
we actually improve things well it turns

28090
17:44:32,160 --> 17:44:38,200
out another upside of a proper

28091
17:44:35,080 --> 17:44:39,880
relational database is that it's not

28092
17:44:38,200 --> 17:44:41,680
just a spreadsheet where the onus is on

28093
17:44:39,880 --> 17:44:43,596
like you to like find the data you're

28094
17:44:41,680 --> 17:44:46,436
looking for you can also tell the

28095
17:44:43,596 --> 17:44:49,840
database to index the data for you an

28096
17:44:46,436 --> 17:44:51,916
index is an an efficient uh cheat sheet

28097
17:44:49,840 --> 17:44:54,240
for Finding data fast like books in the

28098
17:44:51,916 --> 17:44:55,840
real world often have indices at the end

28099
17:44:54,240 --> 17:44:57,159
of the at the end of the book where you

28100
17:44:55,840 --> 17:44:58,475
can look things up alphabetically and

28101
17:44:57,160 --> 17:45:00,596
then you can cross reference it for the

28102
17:44:58,476 --> 17:45:02,200
pages that that topic appears on same

28103
17:45:00,596 --> 17:45:03,956
idea in a database if you tell the

28104
17:45:02,200 --> 17:45:06,636
database in advance that you want to

28105
17:45:03,956 --> 17:45:08,636
search on a certain column frequently

28106
17:45:06,636 --> 17:45:10,080
you can tell it to build a fancy index

28107
17:45:08,636 --> 17:45:12,840
that will just allow you to search that

28108
17:45:10,080 --> 17:45:14,840
column Faster by default these columns

28109
17:45:12,840 --> 17:45:16,596
are going to be searched most likely via

28110
17:45:14,840 --> 17:45:17,719
linear search like not even binary

28111
17:45:16,596 --> 17:45:19,956
search because the data might not be

28112
17:45:17,720 --> 17:45:22,320
sorted because it came in in any order

28113
17:45:19,956 --> 17:45:23,360
but if you create an index you're

28114
17:45:22,320 --> 17:45:25,520
probably going to get something closer

28115
17:45:23,360 --> 17:45:27,796
to logar rmic than linear and that's

28116
17:45:25,520 --> 17:45:29,560
going to be a big plus overall so let me

28117
17:45:27,796 --> 17:45:31,720
do something simple here first let me

28118
17:45:29,560 --> 17:45:33,320
turn on a SQL light specific feature

28119
17:45:31,720 --> 17:45:35,880
that just is going to time all of my

28120
17:45:33,320 --> 17:45:39,000
queries by writing do timer on I just

28121
17:45:35,880 --> 17:45:40,636
want to keep track of uh how long each

28122
17:45:39,000 --> 17:45:42,116
of these commands takes this one is not

28123
17:45:40,636 --> 17:45:43,880
a slow command so this is just going to

28124
17:45:42,116 --> 17:45:45,840
be relative but let's just select

28125
17:45:43,880 --> 17:45:48,520
everything from the shows table where

28126
17:45:45,840 --> 17:45:50,200
the title thereof is the office let's

28127
17:45:48,520 --> 17:45:53,000
see how long this relatively simple

28128
17:45:50,200 --> 17:45:55,159
query takes all right not very long at

28129
17:45:53,000 --> 17:45:59,040
all in real terms like less than a

28130
17:45:55,160 --> 17:46:00,840
second .035 seconds so not slow by any

28131
17:45:59,040 --> 17:46:02,756
means but if you've got hundreds

28132
17:46:00,840 --> 17:46:04,399
thousands millions of users like every

28133
17:46:02,756 --> 17:46:07,436
one of those milliseconds could very

28134
17:46:04,400 --> 17:46:10,320
well add up so can we do better well we

28135
17:46:07,436 --> 17:46:12,520
can if I do this if I use syntax like

28136
17:46:10,320 --> 17:46:16,276
this once in the beginning of the design

28137
17:46:12,520 --> 17:46:19,276
of my database I create not a table but

28138
17:46:16,276 --> 17:46:21,756
an index with some name on a specific

28139
17:46:19,276 --> 17:46:23,720
table on one or more columns I can give

28140
17:46:21,756 --> 17:46:26,560
a clue a hint to the database in advance

28141
17:46:23,720 --> 17:46:29,160
saying please optimize with some Secret

28142
17:46:26,560 --> 17:46:31,159
Sauce searching or selecting on this

28143
17:46:29,160 --> 17:46:33,560
column in this table so that my searches

28144
17:46:31,160 --> 17:46:36,436
are faster so let me do this let me go

28145
17:46:33,560 --> 17:46:38,916
back to vs code here let me create an

28146
17:46:36,436 --> 17:46:40,400
index called how about title index I

28147
17:46:38,916 --> 17:46:42,880
could call it anything I want but I want

28148
17:46:40,400 --> 17:46:46,160
to search faster on titles so I'm going

28149
17:46:42,880 --> 17:46:48,360
to call this a title index where uh

28150
17:46:46,160 --> 17:46:50,720
rather uh title index on the table

28151
17:46:48,360 --> 17:46:53,240
called shows and then in parentheses is

28152
17:46:50,720 --> 17:46:55,080
the syntax the column called title so

28153
17:46:53,240 --> 17:46:57,115
again I've just borrowed this canonical

28154
17:46:55,080 --> 17:47:00,276
syntax and I've just translated into

28155
17:46:57,116 --> 17:47:02,596
something that's TV show specific all

28156
17:47:00,276 --> 17:47:04,636
right what is this going to do for me

28157
17:47:02,596 --> 17:47:06,720
once I hit enter this is going to create

28158
17:47:04,636 --> 17:47:08,360
in the computer's memory the database's

28159
17:47:06,720 --> 17:47:11,956
memory something called a b tree it's

28160
17:47:08,360 --> 17:47:13,636
not a binary tree a b tree is actually a

28161
17:47:11,956 --> 17:47:14,956
potentially more efficient data

28162
17:47:13,636 --> 17:47:16,796
structure that we didn't talk about a

28163
17:47:14,956 --> 17:47:18,200
few weeks back in week five but it looks

28164
17:47:16,796 --> 17:47:20,840
a little something like this which looks

28165
17:47:18,200 --> 17:47:25,795
similar to a binary tree but does anyone

28166
17:47:20,840 --> 17:47:25,795
notice what makes this not a binary tree

28167
17:47:29,116 --> 17:47:34,240
exactly binary tree by implying two has

28168
17:47:31,436 --> 17:47:35,956
no more than two children per node but

28169
17:47:34,240 --> 17:47:37,400
here's a perfect example one two three

28170
17:47:35,956 --> 17:47:39,240
and there could be four children five

28171
17:47:37,400 --> 17:47:41,520
children or more but the effect of that

28172
17:47:39,240 --> 17:47:43,200
if you have a very wide tree the upside

28173
17:47:41,520 --> 17:47:45,399
is that it's like very short like it

28174
17:47:43,200 --> 17:47:47,560
pulls the data higher up closer to the

28175
17:47:45,400 --> 17:47:49,320
node to the root node and recall that

28176
17:47:47,560 --> 17:47:50,880
the root node is where we began our

28177
17:47:49,320 --> 17:47:53,916
searches in the past whether it was a

28178
17:47:50,880 --> 17:47:55,435
BST a binary search tree even a try or

28179
17:47:53,916 --> 17:47:57,636
data structures we always began at the

28180
17:47:55,436 --> 17:47:59,240
top so the higher up you can pull the

28181
17:47:57,636 --> 17:48:01,000
data even if it makes the data structure

28182
17:47:59,240 --> 17:48:03,079
very wide you're going to be able to do

28183
17:48:01,000 --> 17:48:05,276
boom boom boom look up queries look up

28184
17:48:03,080 --> 17:48:07,400
data probably much faster certainly than

28185
17:48:05,276 --> 17:48:10,756
if it's just a very long list like a

28186
17:48:07,400 --> 17:48:13,040
column by default so with that said let

28187
17:48:10,756 --> 17:48:14,436
me go back to vs code I didn't create

28188
17:48:13,040 --> 17:48:16,400
the index yet let me go ahead and hit

28189
17:48:14,436 --> 17:48:18,200
enter and create it all right it took a

28190
17:48:16,400 --> 17:48:20,400
minute a moment it took like half a

28191
17:48:18,200 --> 17:48:22,079
second which obviously is not that slow

28192
17:48:20,400 --> 17:48:24,240
but with more data that could have been

28193
17:48:22,080 --> 17:48:27,796
even slower but it's a onetime operation

28194
17:48:24,240 --> 17:48:30,436
as of now and now let me hit up and let

28195
17:48:27,796 --> 17:48:33,116
me select the same data from shows where

28196
17:48:30,436 --> 17:48:36,956
title equals the office last time just a

28197
17:48:33,116 --> 17:48:39,276
moment ago it took 0.035 seconds no not

28198
17:48:36,956 --> 17:48:41,720
slow but also that's going to add up if

28199
17:48:39,276 --> 17:48:43,520
I have lots of users of IMDb let's go

28200
17:48:41,720 --> 17:48:46,040
ahead now and execute the same query

28201
17:48:43,520 --> 17:48:47,795
again how long did that

28202
17:48:46,040 --> 17:48:50,436
take

28203
17:48:47,796 --> 17:48:52,560
0.01 seconds now I mean practically

28204
17:48:50,436 --> 17:48:54,116
nothing and so that's the sort of

28205
17:48:52,560 --> 17:48:55,240
opportunity now when you've got lots of

28206
17:48:54,116 --> 17:48:56,756
data and you want to really speed up

28207
17:48:55,240 --> 17:48:59,079
these searches these indexes these

28208
17:48:56,756 --> 17:49:01,000
indices that just create for you these

28209
17:48:59,080 --> 17:49:02,796
magical data structures in the databases

28210
17:49:01,000 --> 17:49:04,720
memory it allows you to search on

28211
17:49:02,796 --> 17:49:06,720
columns that you are pretty sure you

28212
17:49:04,720 --> 17:49:08,320
want to search on more effectively Now

28213
17:49:06,720 --> 17:49:09,956
by contrast if you've ever used like

28214
17:49:08,320 --> 17:49:12,276
Google or Bing or some search engine

28215
17:49:09,956 --> 17:49:13,680
that has advanced search some of those

28216
17:49:12,276 --> 17:49:16,200
text boxes that you can search more

28217
17:49:13,680 --> 17:49:18,116
precisely in might very well be slower

28218
17:49:16,200 --> 17:49:20,520
why well probably you don't want to go

28219
17:49:18,116 --> 17:49:26,116
crazy and just index every column on

28220
17:49:20,520 --> 17:49:26,115
every table why well what might be the

28221
17:49:26,276 --> 17:49:30,880
intuition like if logically indexes

28222
17:49:28,680 --> 17:49:32,320
speed things up why not index everything

28223
17:49:30,880 --> 17:49:34,560
there's always going to be a tradeoff

28224
17:49:32,320 --> 17:49:36,956
here what might that

28225
17:49:34,560 --> 17:49:38,840
be

28226
17:49:36,956 --> 17:49:40,596
yeah yeah it's going to take a lot of

28227
17:49:38,840 --> 17:49:42,755
storage right this is just a slide on

28228
17:49:40,596 --> 17:49:44,840
the screen but like this has to go

28229
17:49:42,756 --> 17:49:46,520
somewhere like this needs space in the

28230
17:49:44,840 --> 17:49:48,435
computer's memory or on the hard drive

28231
17:49:46,520 --> 17:49:51,200
or the like and that's fine if you have

28232
17:49:48,436 --> 17:49:52,596
unlimited space but odds are like you

28233
17:49:51,200 --> 17:49:54,475
don't and that's going to get expensive

28234
17:49:52,596 --> 17:49:57,276
for different reasons so maybe you only

28235
17:49:54,476 --> 17:49:59,400
want to index certain columns and

28236
17:49:57,276 --> 17:50:00,916
certain tables and not all of them

28237
17:49:59,400 --> 17:50:02,956
because you know what even if a user

28238
17:50:00,916 --> 17:50:06,115
really wants to search maybe VI advanced

28239
17:50:02,956 --> 17:50:08,475
search on some other column or table

28240
17:50:06,116 --> 17:50:09,916
altogether fine if once in a while a

28241
17:50:08,476 --> 17:50:11,596
query is slow like we're probably

28242
17:50:09,916 --> 17:50:13,880
getting the bigger bang for our buck by

28243
17:50:11,596 --> 17:50:16,320
optimizing the common cases the more

28244
17:50:13,880 --> 17:50:17,596
popular queries that people actually

28245
17:50:16,320 --> 17:50:20,720
care about

28246
17:50:17,596 --> 17:50:24,079
too all right so let's come full circle

28247
17:50:20,720 --> 17:50:26,636
and bring this now back to uh how how we

28248
17:50:24,080 --> 17:50:28,360
actually began which was with some uh

28249
17:50:26,636 --> 17:50:30,560
python code so it turns out these are

28250
17:50:28,360 --> 17:50:32,796
not either or decisions it turns out in

28251
17:50:30,560 --> 17:50:35,880
the real world developers are constantly

28252
17:50:32,796 --> 17:50:38,240
using one two three languages at once in

28253
17:50:35,880 --> 17:50:39,840
fact next week I rattled off HTML CSS

28254
17:50:38,240 --> 17:50:41,596
and JavaScript one of which is a proper

28255
17:50:39,840 --> 17:50:44,320
programming language but those languages

28256
17:50:41,596 --> 17:50:47,956
are often used together totally normal

28257
17:50:44,320 --> 17:50:50,636
and common to use Python and SQL or Java

28258
17:50:47,956 --> 17:50:52,680
in SQL or Swift in SQL or any number of

28259
17:50:50,636 --> 17:50:54,000
different combinations with a database

28260
17:50:52,680 --> 17:50:55,796
language you might use use your

28261
17:50:54,000 --> 17:50:59,080
preferred programming language Java

28262
17:50:55,796 --> 17:51:01,796
python C++ to create the user interface

28263
17:50:59,080 --> 17:51:04,000
and the logic that builds the uh the

28264
17:51:01,796 --> 17:51:05,916
that implements the program itself but

28265
17:51:04,000 --> 17:51:07,680
for your data like SQL is a really good

28266
17:51:05,916 --> 17:51:09,115
candidates and indeed we've seen already

28267
17:51:07,680 --> 17:51:11,276
that SQL can just speed up certain

28268
17:51:09,116 --> 17:51:13,720
operations you can change you can uh

28269
17:51:11,276 --> 17:51:16,000
collapse 15 lines of code into just one

28270
17:51:13,720 --> 17:51:17,636
and you can use these things together so

28271
17:51:16,000 --> 17:51:19,880
let me come back to I'm going to quit

28272
17:51:17,636 --> 17:51:21,840
out of SQL light I'm going to minimize

28273
17:51:19,880 --> 17:51:24,916
my terminal window and here's where we

28274
17:51:21,840 --> 17:51:27,276
left off before with favorite .p with

28275
17:51:24,916 --> 17:51:30,916
favorites. everything was being stored

28276
17:51:27,276 --> 17:51:33,400
in uh favorites. CSV and recall that we

28277
17:51:30,916 --> 17:51:36,360
eventually imported that CSV file into

28278
17:51:33,400 --> 17:51:37,520
favorites. DB automatically with import

28279
17:51:36,360 --> 17:51:40,000
just so we could start playing around

28280
17:51:37,520 --> 17:51:42,039
with SQL but we can now tie these two

28281
17:51:40,000 --> 17:51:45,040
together and a way to do that is as

28282
17:51:42,040 --> 17:51:47,520
follows um cs50 has a library for python

28283
17:51:45,040 --> 17:51:50,116
you might recall having available uh get

28284
17:51:47,520 --> 17:51:51,755
string get int get float you don't

28285
17:51:50,116 --> 17:51:53,436
strictly need to use them in Python

28286
17:51:51,756 --> 17:51:55,840
because it's much easier to just use the

28287
17:51:53,436 --> 17:51:57,560
input function and then try accept and

28288
17:51:55,840 --> 17:52:00,795
convert things to int or float or the

28289
17:51:57,560 --> 17:52:02,880
like but it's a lot more work to use SQL

28290
17:52:00,796 --> 17:52:04,320
in Python without a third-party Library

28291
17:52:02,880 --> 17:52:06,240
a lot of the commercial options or

28292
17:52:04,320 --> 17:52:08,596
popular open source options are actually

28293
17:52:06,240 --> 17:52:10,756
just complicated to use so cs50 does

28294
17:52:08,596 --> 17:52:12,916
have a very useful function inside of

28295
17:52:10,756 --> 17:52:14,880
its library for python that you should

28296
17:52:12,916 --> 17:52:16,560
use and must use for the problem set

28297
17:52:14,880 --> 17:52:19,719
that just makes it easy to execute

28298
17:52:16,560 --> 17:52:22,399
python uh execute SQL inside of your

28299
17:52:19,720 --> 17:52:24,840
python code but it's built on top of a

28300
17:52:22,400 --> 17:52:26,796
very popular open source alternative so

28301
17:52:24,840 --> 17:52:28,475
you can use that too in the real world

28302
17:52:26,796 --> 17:52:30,080
so the documentation for that at this

28303
17:52:28,476 --> 17:52:32,880
URL here but I'll show you what we need

28304
17:52:30,080 --> 17:52:36,000
to know here by focusing back on

28305
17:52:32,880 --> 17:52:38,880
favorites.i so what I'm going to do here

28306
17:52:36,000 --> 17:52:42,636
as follows is this let me delete

28307
17:52:38,880 --> 17:52:47,435
everything from favorites. py except for

28308
17:52:42,636 --> 17:52:49,840
let's say uh this from cs50 import SQL

28309
17:52:47,436 --> 17:52:51,916
in all caps so that's importing a SQL

28310
17:52:49,840 --> 17:52:55,719
feature from cs50's library that's going

28311
17:52:51,916 --> 17:52:57,399
to allow me to open a DB file in code

28312
17:52:55,720 --> 17:52:59,200
how do I do that well let me create a

28313
17:52:57,400 --> 17:53:01,000
variable called DB for database though I

28314
17:52:59,200 --> 17:53:03,840
could call it anything I want let me

28315
17:53:01,000 --> 17:53:06,000
call this SQL function and pass in using

28316
17:53:03,840 --> 17:53:09,719
special syntax that's not cs50 specific

28317
17:53:06,000 --> 17:53:13,636
it's an industry thing SQL light colon

28318
17:53:09,720 --> 17:53:16,320
slash slash slash unlike every other URL

28319
17:53:13,636 --> 17:53:18,200
you type this one literally has three in

28320
17:53:16,320 --> 17:53:19,596
this context here and then the name of

28321
17:53:18,200 --> 17:53:22,115
the database which in this case is

28322
17:53:19,596 --> 17:53:24,880
favorites. DB so this is just a way of

28323
17:53:22,116 --> 17:53:26,596
telling this SQL library that we wrote

28324
17:53:24,880 --> 17:53:29,956
but that works exactly like third party

28325
17:53:26,596 --> 17:53:33,079
Alternatives openen favorites. DB using

28326
17:53:29,956 --> 17:53:34,840
the SQL light technology if you will all

28327
17:53:33,080 --> 17:53:38,680
right let's just ask the user a question

28328
17:53:34,840 --> 17:53:40,240
give me your favorite um uh problem so

28329
17:53:38,680 --> 17:53:41,720
we're going to use input instead of get

28330
17:53:40,240 --> 17:53:43,079
string but we could use get string but

28331
17:53:41,720 --> 17:53:44,916
they're pretty much the same for our

28332
17:53:43,080 --> 17:53:49,360
purposes let's ask the user for their

28333
17:53:44,916 --> 17:53:53,399
favorite and now in Python code let us

28334
17:53:49,360 --> 17:53:57,080
select from favorites. DB all of the

28335
17:53:53,400 --> 17:53:59,360
rows where students specify that problem

28336
17:53:57,080 --> 17:54:02,956
as their favorite so in SQL alone it

28337
17:53:59,360 --> 17:54:07,756
would be this select uh star from

28338
17:54:02,956 --> 17:54:10,400
favorites where problem equals and I'll

28339
17:54:07,756 --> 17:54:12,320
do um well whatever my favorite's going

28340
17:54:10,400 --> 17:54:14,160
to be like problem equals Mario for

28341
17:54:12,320 --> 17:54:15,476
instance so if I were just using SQL I

28342
17:54:14,160 --> 17:54:17,636
would literally write something like

28343
17:54:15,476 --> 17:54:19,916
that but I'm in a piy file now like I

28344
17:54:17,636 --> 17:54:22,520
have to use Python syntax but python

28345
17:54:19,916 --> 17:54:24,596
supports strings SQL is just text it's

28346
17:54:22,520 --> 17:54:27,636
just a string so I could certainly just

28347
17:54:24,596 --> 17:54:29,360
put my SQL code in a string perhaps and

28348
17:54:27,636 --> 17:54:31,520
then pass it to a python function and

28349
17:54:29,360 --> 17:54:33,560
here's the bridge between the two if you

28350
17:54:31,520 --> 17:54:35,560
just treat SQL as any old text we can

28351
17:54:33,560 --> 17:54:38,115
put it in a string and execute it so let

28352
17:54:35,560 --> 17:54:40,000
me actually do this let me go ahead and

28353
17:54:38,116 --> 17:54:41,200
create a variable called rows which is

28354
17:54:40,000 --> 17:54:45,400
eventually going to contain all the rows

28355
17:54:41,200 --> 17:54:48,956
from the database let me go ahead and uh

28356
17:54:45,400 --> 17:54:50,400
select db. execute this is the one

28357
17:54:48,956 --> 17:54:52,080
function you need to know about inside

28358
17:54:50,400 --> 17:54:54,520
of cs50's library and it literally

28359
17:54:52,080 --> 17:54:57,080
executes a SQL statement and then in

28360
17:54:54,520 --> 17:54:59,475
quotes you pass it literally what you

28361
17:54:57,080 --> 17:55:01,560
want to execute and let me go ahead and

28362
17:54:59,476 --> 17:55:03,956
close the parenthesis at the end there

28363
17:55:01,560 --> 17:55:05,840
and now let me just try this so for Row

28364
17:55:03,956 --> 17:55:10,720
in rows let's iterate over all of the

28365
17:55:05,840 --> 17:55:15,916
rows let me go ahead and print out how

28366
17:55:10,720 --> 17:55:19,436
about uh row quote unquote and what do I

28367
17:55:15,916 --> 17:55:22,680
want here uh let's print out the Tim

28368
17:55:19,436 --> 17:55:24,720
stamp of that person for kicks all right

28369
17:55:22,680 --> 17:55:26,916
let me open open my terminal window

28370
17:55:24,720 --> 17:55:29,200
python of favorites. Pi crossing my

28371
17:55:26,916 --> 17:55:31,475
fingers here for

28372
17:55:29,200 --> 17:55:34,840
sure

28373
17:55:31,476 --> 17:55:36,080
enter uh uh there we go favorit so I'll

28374
17:55:34,840 --> 17:55:39,276
type in

28375
17:55:36,080 --> 17:55:40,756
Mario okay so I got back it's not very

28376
17:55:39,276 --> 17:55:42,520
interesting but I got back all of the

28377
17:55:40,756 --> 17:55:44,040
timestamps of students who typed in

28378
17:55:42,520 --> 17:55:46,240
Mario that we imported into this

28379
17:55:44,040 --> 17:55:48,436
database well what I really care about

28380
17:55:46,240 --> 17:55:50,596
is how popular Mario is so let me change

28381
17:55:48,436 --> 17:55:53,956
this a little bit let me change this to

28382
17:55:50,596 --> 17:55:55,680
count the number of rows and let me keep

28383
17:55:53,956 --> 17:55:58,040
it simple let me give an alias like I

28384
17:55:55,680 --> 17:56:00,596
proposed earlier like as n where N is a

28385
17:55:58,040 --> 17:56:03,160
number so that now down here I can

28386
17:56:00,596 --> 17:56:05,956
actually just do this print out the

28387
17:56:03,160 --> 17:56:07,400
value of n all right let me go back to

28388
17:56:05,956 --> 17:56:10,596
my terminal window run python to

28389
17:56:07,400 --> 17:56:13,756
favorites. py let me type in Mario enter

28390
17:56:10,596 --> 17:56:16,240
okay 39 now technically I'm cheating

28391
17:56:13,756 --> 17:56:18,200
like honestly if I'm executing select

28392
17:56:16,240 --> 17:56:20,475
count we've seen before it only ever

28393
17:56:18,200 --> 17:56:22,159
returns one row not multiple so there's

28394
17:56:20,476 --> 17:56:23,560
really nothing to iterate over but it's

28395
17:56:22,160 --> 17:56:25,560
working fine it's just just iterating

28396
17:56:23,560 --> 17:56:27,240
once but I'm getting lucky so

28397
17:56:25,560 --> 17:56:29,916
technically what I should probably just

28398
17:56:27,240 --> 17:56:32,680
do is this I should probably give myself

28399
17:56:29,916 --> 17:56:36,276
like a variable called row set it equal

28400
17:56:32,680 --> 17:56:41,160
to the very first row and only row that

28401
17:56:36,276 --> 17:56:43,400
came back and now print out that rows n

28402
17:56:41,160 --> 17:56:45,636
column let me rerun the program I'll

28403
17:56:43,400 --> 17:56:46,796
type in Mario again enter and I still

28404
17:56:45,636 --> 17:56:49,916
see

28405
17:56:46,796 --> 17:56:51,476
39 so this of course I don't strictly

28406
17:56:49,916 --> 17:56:54,956
need to do this I don't really need a

28407
17:56:51,476 --> 17:56:56,636
variable I can do Row Bracket Z instead

28408
17:56:54,956 --> 17:56:59,520
but let me focus on what this library is

28409
17:56:56,636 --> 17:57:02,276
now doing so per the documentation what

28410
17:56:59,520 --> 17:57:06,755
the C what the cs-50 execute function

28411
17:57:02,276 --> 17:57:10,276
always does for you is it returns a list

28412
17:57:06,756 --> 17:57:12,476
of dictionaries so if your query returns

28413
17:57:10,276 --> 17:57:14,200
nothing like no matches you get back an

28414
17:57:12,476 --> 17:57:15,680
empty list like Open Bracket close

28415
17:57:14,200 --> 17:57:17,079
bracket nothing in it any Loop is not

28416
17:57:15,680 --> 17:57:19,276
going to execute anything useful because

28417
17:57:17,080 --> 17:57:21,560
there's nothing in it if though you get

28418
17:57:19,276 --> 17:57:23,756
back one row you're going to get back a

28419
17:57:21,560 --> 17:57:26,159
list of size one in inside of which is a

28420
17:57:23,756 --> 17:57:28,520
single dictionary that dictionary is

28421
17:57:26,160 --> 17:57:30,636
going to have keys that correspond to

28422
17:57:28,520 --> 17:57:32,795
whatever you selected be it the columns

28423
17:57:30,636 --> 17:57:34,320
or the count so when I selected star

28424
17:57:32,796 --> 17:57:35,596
before I could have like I would have

28425
17:57:34,320 --> 17:57:38,159
gotten all of the columns that's how I

28426
17:57:35,596 --> 17:57:39,795
was able to access timestamp here I'm

28427
17:57:38,160 --> 17:57:41,520
just selecting count and I don't want to

28428
17:57:39,796 --> 17:57:42,916
have to type this down here that would

28429
17:57:41,520 --> 17:57:44,435
just look kind of atrocious it would

28430
17:57:42,916 --> 17:57:47,115
work but it would look weird to just

28431
17:57:44,436 --> 17:57:49,320
keep retyping count peren star close pen

28432
17:57:47,116 --> 17:57:51,240
so I just created an alias called n just

28433
17:57:49,320 --> 17:57:54,916
to like make this my life easier or

28434
17:57:51,240 --> 17:57:57,360
cleaner down here so to be clear the SQL

28435
17:57:54,916 --> 17:58:00,040
the cs50 execute function returns a list

28436
17:57:57,360 --> 17:58:02,400
of dictionaries when you're using select

28437
17:58:00,040 --> 17:58:05,116
and that is how I can now get back the

28438
17:58:02,400 --> 17:58:09,916
first and only row and then print out

28439
17:58:05,116 --> 17:58:12,000
that Row's n value it is identical to

28440
17:58:09,916 --> 17:58:15,115
let me do this let me highlight this

28441
17:58:12,000 --> 17:58:17,160
whole line of text let me in my terminal

28442
17:58:15,116 --> 17:58:19,596
window run SQL light three of favorites.

28443
17:58:17,160 --> 17:58:23,080
DB like we did before break let me just

28444
17:58:19,596 --> 17:58:25,399
copy paste this query enter that that's

28445
17:58:23,080 --> 17:58:27,560
the table I got back earlier when we

28446
17:58:25,400 --> 17:58:29,320
played with SQL manually and so when I

28447
17:58:27,560 --> 17:58:32,200
get back this table here's the key

28448
17:58:29,320 --> 17:58:34,200
here's the value and I only have one row

28449
17:58:32,200 --> 17:58:36,039
which is why I'm just blindly indexing

28450
17:58:34,200 --> 17:58:37,039
into rows bracket zero because I know

28451
17:58:36,040 --> 17:58:38,520
there's always going to be an answer

28452
17:58:37,040 --> 17:58:40,276
there it's going to be zero or one or

28453
17:58:38,520 --> 17:58:43,115
more but I know now it's going to be

28454
17:58:40,276 --> 17:58:45,320
called n because of this here so what

28455
17:58:43,116 --> 17:58:46,796
have I just done well this is SQL down

28456
17:58:45,320 --> 17:58:48,520
here and this is just me being like a

28457
17:58:46,796 --> 17:58:50,400
data scientist asking questions about my

28458
17:58:48,520 --> 17:58:52,795
data just using like black and white SQL

28459
17:58:50,400 --> 17:58:54,360
queries this is me now being a python

28460
17:58:52,796 --> 17:58:56,756
programmer who wants to talk to a SQL

28461
17:58:54,360 --> 17:58:58,720
database using Python and The Bridge

28462
17:58:56,756 --> 17:59:00,360
we're using happens to be the cs-50

28463
17:58:58,720 --> 17:59:02,240
library but again there's third party

28464
17:59:00,360 --> 17:59:04,840
free libraries you can also use as well

28465
17:59:02,240 --> 17:59:06,560
ours is just very simple and indeed the

28466
17:59:04,840 --> 17:59:08,916
documentation will explain how execute

28467
17:59:06,560 --> 17:59:10,636
behaves a little differently for inserts

28468
17:59:08,916 --> 17:59:11,795
updates and deletes you don't get back a

28469
17:59:10,636 --> 17:59:14,680
list because you're not selecting

28470
17:59:11,796 --> 17:59:17,436
anything but you do get back some return

28471
17:59:14,680 --> 17:59:20,400
values questions on

28472
17:59:17,436 --> 17:59:24,956
this that's the last of our python code

28473
17:59:20,400 --> 17:59:27,956
that ties everything together in

28474
17:59:24,956 --> 17:59:27,956
spirit

28475
17:59:30,436 --> 17:59:37,520
yeah uh what this this one

28476
17:59:33,476 --> 17:59:40,720
here yes so db. execute by definition

28477
17:59:37,520 --> 17:59:42,320
returns a list of rows and each of those

28478
17:59:40,720 --> 17:59:45,160
rows happens to be a dictionary because

28479
17:59:42,320 --> 17:59:47,680
it's convenient key value pairs if I'm

28480
17:59:45,160 --> 17:59:49,720
selecting the count of rows I just know

28481
17:59:47,680 --> 17:59:51,520
from Having learned squel an hour ago

28482
17:59:49,720 --> 17:59:54,040
that this is always going to give me a

28483
17:59:51,520 --> 17:59:57,039
single row whose column in this case is

28484
17:59:54,040 --> 17:59:59,040
called n so if I know it's a single row

28485
17:59:57,040 --> 18:00:01,116
I can just blindly just like in C go

28486
17:59:59,040 --> 18:00:03,796
into that list or an array in C and go

28487
18:00:01,116 --> 18:00:05,680
to the first location and then treat

28488
18:00:03,796 --> 18:00:08,116
that as the single row what you don't

28489
18:00:05,680 --> 18:00:11,360
want to do is this even if you the human

28490
18:00:08,116 --> 18:00:13,080
know the query returns one row you can't

28491
18:00:11,360 --> 18:00:15,040
just magically change the variable name

28492
18:00:13,080 --> 18:00:17,560
to be singular and expect to have only

28493
18:00:15,040 --> 18:00:19,116
one value you will always have a list so

28494
18:00:17,560 --> 18:00:21,276
even if there is only one value in it

28495
18:00:19,116 --> 18:00:23,680
it's up to you to do something like this

28496
18:00:21,276 --> 18:00:25,720
to get at it or if you prefer more

28497
18:00:23,680 --> 18:00:28,116
succinctness you can do rose bracket I

28498
18:00:25,720 --> 18:00:31,840
bracket n that'll achieve the same thing

28499
18:00:28,116 --> 18:00:31,840
without a variable

28500
18:00:35,796 --> 18:00:41,276
yeah good so I have been misleading this

28501
18:00:38,680 --> 18:00:43,240
whole time and cheating because this is

28502
18:00:41,276 --> 18:00:45,320
only ever going to return Mario I'm

28503
18:00:43,240 --> 18:00:47,880
ignoring the favorite that the human

28504
18:00:45,320 --> 18:00:49,520
typed in here on line five so let me fix

28505
18:00:47,880 --> 18:00:51,399
that and that's going to lead us to some

28506
18:00:49,520 --> 18:00:53,755
of the problems that arise ultimately

28507
18:00:51,400 --> 18:00:55,400
with SQL the right way to solve that

28508
18:00:53,756 --> 18:00:57,680
problem let me get rid of my terminal

28509
18:00:55,400 --> 18:00:59,916
window here the right way to solve this

28510
18:00:57,680 --> 18:01:02,360
problem is not to use an F string like

28511
18:00:59,916 --> 18:01:04,320
we did in Python generally because SQL

28512
18:01:02,360 --> 18:01:07,840
queries as we'll see in a moment can be

28513
18:01:04,320 --> 18:01:10,116
dangerous when you want to plug in users

28514
18:01:07,840 --> 18:01:13,475
uh data into a query that you've written

28515
18:01:10,116 --> 18:01:16,276
most of in advance you should you must

28516
18:01:13,476 --> 18:01:19,040
you had better use a placeholder namely

28517
18:01:16,276 --> 18:01:20,880
a question mark in this case this is

28518
18:01:19,040 --> 18:01:22,360
somewhat specific to cs50's library but

28519
18:01:20,880 --> 18:01:24,475
we just borrowed the convention that

28520
18:01:22,360 --> 18:01:26,880
like every other Library uses too in the

28521
18:01:24,476 --> 18:01:29,080
world of SQL single question marks are

28522
18:01:26,880 --> 18:01:31,956
used as placeholders and the way you do

28523
18:01:29,080 --> 18:01:34,596
this is as follows if you want to plug

28524
18:01:31,956 --> 18:01:37,880
in a value for that question mark just

28525
18:01:34,596 --> 18:01:39,720
like in print F in C you specify as a

28526
18:01:37,880 --> 18:01:41,755
second or a third or fourth argument all

28527
18:01:39,720 --> 18:01:44,200
of the values you want plugged into this

28528
18:01:41,756 --> 18:01:47,796
so in C weeks ago we were using percent

28529
18:01:44,200 --> 18:01:50,240
s same exact idea in SQL it's a question

28530
18:01:47,796 --> 18:01:53,240
mark that you use instead this now if I

28531
18:01:50,240 --> 18:01:55,720
open back my terminal window and I run

28532
18:01:53,240 --> 18:01:58,840
uh python of favorites. type in Mario I

28533
18:01:55,720 --> 18:02:01,276
should still get 39 but now I can also

28534
18:01:58,840 --> 18:02:03,435
type in scratch perhaps and get 44 for

28535
18:02:01,276 --> 18:02:05,636
that very first piece at zero and that

28536
18:02:03,436 --> 18:02:08,240
one is even more popular here so this

28537
18:02:05,636 --> 18:02:10,880
now is correct it would work to use an F

28538
18:02:08,240 --> 18:02:13,040
string here and then plug in a value

28539
18:02:10,880 --> 18:02:14,560
like favorite here but you'll see in

28540
18:02:13,040 --> 18:02:17,000
just a moment don't do that you will

28541
18:02:14,560 --> 18:02:20,596
expose yourself to potential hack or

28542
18:02:17,000 --> 18:02:21,916
attacks um by trusting the user's input

28543
18:02:20,596 --> 18:02:23,399
and so in fact let's transition from

28544
18:02:21,916 --> 18:02:26,399
that to exact some of these kinds of

28545
18:02:23,400 --> 18:02:28,560
challenges namely two before we wrap up

28546
18:02:26,400 --> 18:02:30,276
so in the world of SQL especially when

28547
18:02:28,560 --> 18:02:32,320
it's used at scale at the Twitter and

28548
18:02:30,276 --> 18:02:34,115
the Googles of the world like a lot of

28549
18:02:32,320 --> 18:02:35,880
lots of data is probably coming into the

28550
18:02:34,116 --> 18:02:37,200
database all at once because multiple

28551
18:02:35,880 --> 18:02:38,755
people are opening their phones at the

28552
18:02:37,200 --> 18:02:40,200
same time around the world they're

28553
18:02:38,756 --> 18:02:41,840
clicking on the same links roughly at

28554
18:02:40,200 --> 18:02:43,719
the same time around the world when you

28555
18:02:41,840 --> 18:02:45,679
have thousands of people all using your

28556
18:02:43,720 --> 18:02:47,240
site at once like order of operations is

28557
18:02:45,680 --> 18:02:49,360
going to be important but unfortunately

28558
18:02:47,240 --> 18:02:51,040
in SQL and in other contexts of

28559
18:02:49,360 --> 18:02:52,796
computing there's this risk of what's

28560
18:02:51,040 --> 18:02:54,880
known as a race condition so for

28561
18:02:52,796 --> 18:02:57,916
instance has anyone ever seen or liked

28562
18:02:54,880 --> 18:02:59,916
this this is like yes the world record

28563
18:02:57,916 --> 18:03:01,320
egg or it's like this thing that was

28564
18:02:59,916 --> 18:03:03,159
very popular while back it's still kind

28565
18:03:01,320 --> 18:03:05,636
of going strong but if you go to the

28566
18:03:03,160 --> 18:03:07,596
Instagram profile for world record egg

28567
18:03:05,636 --> 18:03:09,436
uh the goal was to make the most most

28568
18:03:07,596 --> 18:03:12,000
liked Instagram post ever and they did

28569
18:03:09,436 --> 18:03:14,000
pretty well it's just this it's just a

28570
18:03:12,000 --> 18:03:15,276
picture of an egg now at the height of

28571
18:03:14,000 --> 18:03:17,116
the popularity like there might have

28572
18:03:15,276 --> 18:03:18,720
been hundreds thousands tens of

28573
18:03:17,116 --> 18:03:21,476
thousands of people clicking pretty much

28574
18:03:18,720 --> 18:03:23,200
at the same time on this egg so it

28575
18:03:21,476 --> 18:03:26,000
actually creates a potential problem

28576
18:03:23,200 --> 18:03:27,475
with the Integrity of Instagram's data

28577
18:03:26,000 --> 18:03:28,840
why well if you're have all these

28578
18:03:27,476 --> 18:03:30,636
requests coming in at once how do you

28579
18:03:28,840 --> 18:03:32,840
possibly keep track of all of them and

28580
18:03:30,636 --> 18:03:34,796
update your counter in a way that can

28581
18:03:32,840 --> 18:03:37,240
keep up with all of that traffic why

28582
18:03:34,796 --> 18:03:38,796
well let's just hypothesize what meta

28583
18:03:37,240 --> 18:03:40,680
formerly Facebook was doing underneath

28584
18:03:38,796 --> 18:03:42,360
the hood with Instagram if this were

28585
18:03:40,680 --> 18:03:44,436
their code so suppose for the sake of

28586
18:03:42,360 --> 18:03:47,320
discussion that Instagram servers are

28587
18:03:44,436 --> 18:03:48,880
using a mix of python and SQL probably

28588
18:03:47,320 --> 18:03:50,400
not using the cs50 library but they

28589
18:03:48,880 --> 18:03:53,360
could absolutely be using those two

28590
18:03:50,400 --> 18:03:55,400
languages or two others together um

28591
18:03:53,360 --> 18:03:58,000
suppose they do this in order to update

28592
18:03:55,400 --> 18:04:00,916
the number of likes for that post they

28593
18:03:58,000 --> 18:04:03,360
first execute a SQL query like select

28594
18:04:00,916 --> 18:04:06,000
the current number of likes from a table

28595
18:04:03,360 --> 18:04:08,400
called posts where the ID of the post

28596
18:04:06,000 --> 18:04:11,160
equals whatever the unique identifier is

28597
18:04:08,400 --> 18:04:13,040
for that spec specific egg in the table

28598
18:04:11,160 --> 18:04:15,276
and then they store the result in this

28599
18:04:13,040 --> 18:04:17,720
row variable just like I did and then

28600
18:04:15,276 --> 18:04:19,636
they do this they grab uh they create a

28601
18:04:17,720 --> 18:04:22,436
variable called likes they set it equal

28602
18:04:19,636 --> 18:04:24,680
to rows bracket Z so the very first row

28603
18:04:22,436 --> 18:04:26,520
in the result set and they get the likes

28604
18:04:24,680 --> 18:04:28,680
key so this is literally what I just did

28605
18:04:26,520 --> 18:04:30,435
with the count let me hypothesize that

28606
18:04:28,680 --> 18:04:32,080
Instagram does something similar with

28607
18:04:30,436 --> 18:04:34,116
the total number of likes why are they

28608
18:04:32,080 --> 18:04:36,200
doing this because they then want to

28609
18:04:34,116 --> 18:04:39,400
execute a third line of code that

28610
18:04:36,200 --> 18:04:42,719
executes update the posts table set the

28611
18:04:39,400 --> 18:04:44,916
new number of likes equal to something

28612
18:04:42,720 --> 18:04:46,880
where the ID of the post equals this

28613
18:04:44,916 --> 18:04:48,719
other thing now notice just like in

28614
18:04:46,880 --> 18:04:50,475
printf there's the comma separated list

28615
18:04:48,720 --> 18:04:52,476
of values they want to update the

28616
18:04:50,476 --> 18:04:54,476
current number of likes from the current

28617
18:04:52,476 --> 18:04:56,756
value to the current value plus one so

28618
18:04:54,476 --> 18:04:59,160
it's likes plus one and then we plug in

28619
18:04:56,756 --> 18:05:02,000
the ID for this so suppose this is what

28620
18:04:59,160 --> 18:05:04,400
Instagram's doing unfortunately whenever

28621
18:05:02,000 --> 18:05:06,756
you execute multiple lines of code

28622
18:05:04,400 --> 18:05:08,596
independently and you're so popular like

28623
18:05:06,756 --> 18:05:10,200
Instagram that you have thousands

28624
18:05:08,596 --> 18:05:12,435
hundreds of thousands of servers

28625
18:05:10,200 --> 18:05:13,795
potentially it is quite possible that if

28626
18:05:12,436 --> 18:05:15,796
you and I and everyone else in the room

28627
18:05:13,796 --> 18:05:17,400
clicks that egg at the same time it's

28628
18:05:15,796 --> 18:05:18,956
not going to be the case statistically

28629
18:05:17,400 --> 18:05:20,756
that like three lines of code are

28630
18:05:18,956 --> 18:05:22,000
executed for me and then three lines for

28631
18:05:20,756 --> 18:05:24,080
you and then three lines for you they're

28632
18:05:22,000 --> 18:05:25,796
probably going to get interspersed like

28633
18:05:24,080 --> 18:05:27,520
this gets executed for me and then this

28634
18:05:25,796 --> 18:05:29,400
gets executed for you and then they get

28635
18:05:27,520 --> 18:05:31,039
back to doing work for me and so forth

28636
18:05:29,400 --> 18:05:33,400
just to kind of multitask just like a

28637
18:05:31,040 --> 18:05:35,596
human might but at a super speed here

28638
18:05:33,400 --> 18:05:38,160
the problem though is if these lines of

28639
18:05:35,596 --> 18:05:39,636
code get interrupted what could go wrong

28640
18:05:38,160 --> 18:05:41,116
well suppose that Carter and I both

28641
18:05:39,636 --> 18:05:42,475
click the egg at the same time and

28642
18:05:41,116 --> 18:05:45,756
suppose the current number of likes back

28643
18:05:42,476 --> 18:05:48,116
in the day is 100 that stores in this

28644
18:05:45,756 --> 18:05:50,560
variable the value 100 but if we click

28645
18:05:48,116 --> 18:05:53,116
so close in time we might get back the

28646
18:05:50,560 --> 18:05:54,320
same answer to this select query as of

28647
18:05:53,116 --> 18:05:57,160
that moment in time when David and

28648
18:05:54,320 --> 18:05:58,880
Carter clicked it had a 100 likes but

28649
18:05:57,160 --> 18:06:01,360
then this last line of code is executed

28650
18:05:58,880 --> 18:06:04,115
for me and then maybe Carter because

28651
18:06:01,360 --> 18:06:07,596
that answer the state of the database

28652
18:06:04,116 --> 18:06:11,000
was stored in this variable then both

28653
18:06:07,596 --> 18:06:13,079
Carter and I will result in this line of

28654
18:06:11,000 --> 18:06:16,000
code being executed with the same value

28655
18:06:13,080 --> 18:06:17,520
update the post table setting the likes

28656
18:06:16,000 --> 18:06:21,320
equal to

28657
18:06:17,520 --> 18:06:22,840
101 for that post's ID why because again

28658
18:06:21,320 --> 18:06:25,756
if each of these lines of code running

28659
18:06:22,840 --> 18:06:28,115
on different servers are checking the

28660
18:06:25,756 --> 18:06:29,436
value of the current number of likes but

28661
18:06:28,116 --> 18:06:30,796
then getting interrupted because Carter

28662
18:06:29,436 --> 18:06:33,200
clicked the darn thing too and then

28663
18:06:30,796 --> 18:06:34,916
resuming their work on my behalf we

28664
18:06:33,200 --> 18:06:36,435
might have a race condition where the

28665
18:06:34,916 --> 18:06:38,079
code is sort of racing to finish but

28666
18:06:36,436 --> 18:06:40,636
getting interrupted by other users

28667
18:06:38,080 --> 18:06:42,796
clicks and the problem with that is that

28668
18:06:40,636 --> 18:06:45,276
if you are inspecting the value of some

28669
18:06:42,796 --> 18:06:47,000
variable or in this case a database cell

28670
18:06:45,276 --> 18:06:49,475
and making a decision based on it like

28671
18:06:47,000 --> 18:06:50,956
how to update it you might now lose data

28672
18:06:49,476 --> 18:06:52,680
and Instagram probably not good for

28673
18:06:50,956 --> 18:06:54,956
advertising if they're losing likes and

28674
18:06:52,680 --> 18:06:57,840
so that's probably a problem not to

28675
18:06:54,956 --> 18:07:00,320
retain the value 102 and instead insert

28676
18:06:57,840 --> 18:07:03,039
the number 101 twice it's actually

28677
18:07:00,320 --> 18:07:05,116
similar in spirit to a story that uh was

28678
18:07:03,040 --> 18:07:06,916
told in a databases course I took myself

28679
18:07:05,116 --> 18:07:10,240
years ago

28680
18:07:06,916 --> 18:07:11,596
whereby uh it's somewhat analogous to

28681
18:07:10,240 --> 18:07:12,795
kind of a contrived scenario involving

28682
18:07:11,596 --> 18:07:14,159
like a refrigerator and this is the

28683
18:07:12,796 --> 18:07:15,520
closest thing to a refrigerator we could

28684
18:07:14,160 --> 18:07:16,956
get on stage but imagine you've got like

28685
18:07:15,520 --> 18:07:19,159
one of these little dorm fridges in your

28686
18:07:16,956 --> 18:07:20,560
dorm 2 and your roommate and maybe both

28687
18:07:19,160 --> 18:07:22,560
of you as the story was told to me

28688
18:07:20,560 --> 18:07:23,880
really like milk and one of you is at

28689
18:07:22,560 --> 18:07:25,320
class but the other of you comes home

28690
18:07:23,880 --> 18:07:28,276
and you open your dorm fridge and you're

28691
18:07:25,320 --> 18:07:30,159
like oh darn it we're out of milk and so

28692
18:07:28,276 --> 18:07:32,276
you close the fridge you walk across the

28693
18:07:30,160 --> 18:07:33,840
street to CVS or some other store and

28694
18:07:32,276 --> 18:07:35,079
you get in line to buy some milk

28695
18:07:33,840 --> 18:07:36,560
Meanwhile your roommate gets out of

28696
18:07:35,080 --> 18:07:38,160
class they come back to your dorm room

28697
18:07:36,560 --> 18:07:40,000
they're really thirsty for some milk

28698
18:07:38,160 --> 18:07:42,116
they open up the fridge they say oh

28699
18:07:40,000 --> 18:07:44,276
we're out of milk and then they take a

28700
18:07:42,116 --> 18:07:46,040
different route perhaps to CVS or some

28701
18:07:44,276 --> 18:07:47,880
other store nearby get in line to buy

28702
18:07:46,040 --> 18:07:49,956
some milk fast forward some amount of

28703
18:07:47,880 --> 18:07:51,755
time in this very contrived story and

28704
18:07:49,956 --> 18:07:53,400
what happens oh damn it we now ended up

28705
18:07:51,756 --> 18:07:55,436
with two gallons of milk and there's no

28706
18:07:53,400 --> 18:07:57,680
way we can fit gallons of milk in there

28707
18:07:55,436 --> 18:08:00,840
let alone two of them so that's a

28708
18:07:57,680 --> 18:08:06,080
problem but what's the relationship to

28709
18:08:00,840 --> 18:08:06,079
this here well both of us yeah did

28710
18:08:18,240 --> 18:08:23,916
what

28711
18:08:20,916 --> 18:08:23,916
exactly

28712
18:08:25,756 --> 18:08:29,080
exactly so to summarize both of us had a

28713
18:08:27,720 --> 18:08:30,596
very similar thought process made a

28714
18:08:29,080 --> 18:08:32,680
similar decision based on the same

28715
18:08:30,596 --> 18:08:34,956
information not realizing that the

28716
18:08:32,680 --> 18:08:37,720
information the fridge was in the

28717
18:08:34,956 --> 18:08:39,520
process of being updated and of course

28718
18:08:37,720 --> 18:08:41,116
in the Instagram World happens like this

28719
18:08:39,520 --> 18:08:43,079
in the fridge World it might take a few

28720
18:08:41,116 --> 18:08:45,240
minutes but the problem is ultimately

28721
18:08:43,080 --> 18:08:47,596
the result of our having made a decision

28722
18:08:45,240 --> 18:08:49,756
about the state of the world and the

28723
18:08:47,596 --> 18:08:52,360
state of the world was in the middle of

28724
18:08:49,756 --> 18:08:54,000
being updated the queries got mingled

28725
18:08:52,360 --> 18:08:55,720
with others or in this case someone was

28726
18:08:54,000 --> 18:08:57,320
already on their way to the store so

28727
18:08:55,720 --> 18:08:58,956
what's the solution in the real world

28728
18:08:57,320 --> 18:09:00,720
well you could you know very simply like

28729
18:08:58,956 --> 18:09:02,840
take a Post-It note and put like gone

28730
18:09:00,720 --> 18:09:04,840
for milk so as to communicate to your

28731
18:09:02,840 --> 18:09:06,560
roommate that they should not inspect

28732
18:09:04,840 --> 18:09:08,880
the value of that variable and make a

28733
18:09:06,560 --> 18:09:11,159
decision on it why because it's not yet

28734
18:09:08,880 --> 18:09:12,560
consistent with the outcome that's about

28735
18:09:11,160 --> 18:09:14,320
to happen you could be more traumatic

28736
18:09:12,560 --> 18:09:16,240
and you could actually lock the fridge

28737
18:09:14,320 --> 18:09:18,200
somehow put a pad lock around it or the

28738
18:09:16,240 --> 18:09:19,756
like so they can't even get in there and

28739
18:09:18,200 --> 18:09:22,200
that would achieve the result uh the

28740
18:09:19,756 --> 18:09:23,956
same effect too and that is actually

28741
18:09:22,200 --> 18:09:25,956
pretty much the solution to this problem

28742
18:09:23,956 --> 18:09:28,240
in code too it's not safe it's not

28743
18:09:25,956 --> 18:09:30,636
sufficient to only execute three lines

28744
18:09:28,240 --> 18:09:33,400
of code like this rather what you

28745
18:09:30,636 --> 18:09:35,276
probably want to do is use additional

28746
18:09:33,400 --> 18:09:37,596
SQL keywords that we won't spend much

28747
18:09:35,276 --> 18:09:39,636
time on in the class itself but these

28748
18:09:37,596 --> 18:09:41,880
there are solutions to this problem you

28749
18:09:39,636 --> 18:09:44,796
can begin what's called a transaction

28750
18:09:41,880 --> 18:09:46,596
and you can more explicitly commit to

28751
18:09:44,796 --> 18:09:48,956
making a decision like updating the

28752
18:09:46,596 --> 18:09:51,320
database to 10 1001 or 10 1002 or if you

28753
18:09:48,956 --> 18:09:53,276
realize wait a minute Carter's query

28754
18:09:51,320 --> 18:09:55,916
inist interrupting mine let me roll back

28755
18:09:53,276 --> 18:09:58,756
to the previous state and just uh rewind

28756
18:09:55,916 --> 18:10:00,159
let me undo contrl Z if you will there's

28757
18:09:58,756 --> 18:10:02,080
also another keyword that's not so much

28758
18:10:00,160 --> 18:10:04,160
used anymore in SQL which is locking you

28759
18:10:02,080 --> 18:10:07,080
could literally back in the day lock the

28760
18:10:04,160 --> 18:10:09,200
entire database table preventing anyone

28761
18:10:07,080 --> 18:10:11,080
from updating it or making changes or

28762
18:10:09,200 --> 18:10:12,399
even reading it while someone else was

28763
18:10:11,080 --> 18:10:13,916
accessing it that was a very

28764
18:10:12,400 --> 18:10:15,476
heavy-handed solution because it slowed

28765
18:10:13,916 --> 18:10:18,200
everything down but in short

28766
18:10:15,476 --> 18:10:19,636
transactions are now a feature of SQL

28767
18:10:18,200 --> 18:10:22,000
that you won't necessarily need to use

28768
18:10:19,636 --> 18:10:24,320
yourselves that do solve this problem by

28769
18:10:22,000 --> 18:10:26,200
doing the equivalent of saying while

28770
18:10:24,320 --> 18:10:28,880
David's like counter is in the process

28771
18:10:26,200 --> 18:10:31,240
of being updated keep Carter at Bay

28772
18:10:28,880 --> 18:10:32,840
ideally briefly and then let his data go

28773
18:10:31,240 --> 18:10:34,720
through too it's equivalent too to

28774
18:10:32,840 --> 18:10:36,755
putting a note or a lock on the fridge

28775
18:10:34,720 --> 18:10:38,680
and indeed I mean lock litter they they

28776
18:10:36,756 --> 18:10:41,320
were Once Upon a Time called and still

28777
18:10:38,680 --> 18:10:44,276
are in some texts called locks on

28778
18:10:41,320 --> 18:10:46,159
databases 2 and the last Pro and the

28779
18:10:44,276 --> 18:10:49,400
code for which you might do this is

28780
18:10:46,160 --> 18:10:52,400
almost the same you simply wrap the

28781
18:10:49,400 --> 18:10:54,796
three queries uh with a transaction

28782
18:10:52,400 --> 18:10:57,360
statement and a uh commit and the term

28783
18:10:54,796 --> 18:11:01,040
of art here is that this makes your uh

28784
18:10:57,360 --> 18:11:03,080
your uh statements Atomic so Atomic

28785
18:11:01,040 --> 18:11:04,840
means they're either all executed or not

28786
18:11:03,080 --> 18:11:06,880
at all that is they're all very tightly

28787
18:11:04,840 --> 18:11:08,880
coupled together without interruption

28788
18:11:06,880 --> 18:11:11,520
transactions solves that problem and

28789
18:11:08,880 --> 18:11:13,159
avoid having two gallons of milk and the

28790
18:11:11,520 --> 18:11:15,719
last problem that arises that Is

28791
18:11:13,160 --> 18:11:17,796
tragically so darn common in the real

28792
18:11:15,720 --> 18:11:19,436
world today is what's called a SQL

28793
18:11:17,796 --> 18:11:21,160
injection attack and it's what I alluded

28794
18:11:19,436 --> 18:11:22,476
to earlier with the question mark So

28795
18:11:21,160 --> 18:11:25,000
suppose you're in the habit of logging

28796
18:11:22,476 --> 18:11:26,756
in uh to Yale websites with your net ID

28797
18:11:25,000 --> 18:11:28,916
or password or at Harvard your Harvard

28798
18:11:26,756 --> 18:11:30,680
key and password as well suppose for the

28799
18:11:28,916 --> 18:11:33,276
sake of discussion that the people that

28800
18:11:30,680 --> 18:11:34,840
implemented like Harvard key login allow

28801
18:11:33,276 --> 18:11:36,916
you to type in your email address of

28802
18:11:34,840 --> 18:11:39,159
course and your password but suppose

28803
18:11:36,916 --> 18:11:41,560
that they are using SQL underneath the

28804
18:11:39,160 --> 18:11:43,360
hood to check your username and password

28805
18:11:41,560 --> 18:11:46,040
to make sure that you are David menen or

28806
18:11:43,360 --> 18:11:48,276
Carter zeni or whoever you claim to be I

28807
18:11:46,040 --> 18:11:51,756
haven't shown you the syntax yet but it

28808
18:11:48,276 --> 18:11:53,840
turns out that in SQL Das Dash is a

28809
18:11:51,756 --> 18:11:55,596
special way of indicating a comment it

28810
18:11:53,840 --> 18:11:57,880
means ignore everything to the right so

28811
18:11:55,596 --> 18:12:00,040
it's just like SL slash and C or the

28812
18:11:57,880 --> 18:12:01,916
hash symbol in Python dash dash just

28813
18:12:00,040 --> 18:12:04,200
means ignore everything to the right and

28814
18:12:01,916 --> 18:12:07,159
we've of course seen single quotes So

28815
18:12:04,200 --> 18:12:10,039
one way to wage a SQL injection attack

28816
18:12:07,160 --> 18:12:11,520
is to try to inject malicious SQL code

28817
18:12:10,040 --> 18:12:13,520
into someone else's database without

28818
18:12:11,520 --> 18:12:15,876
them realizing it how do you do this

28819
18:12:13,520 --> 18:12:19,876
well suppose I log in as M harvard.edu

28820
18:12:15,876 --> 18:12:22,000
single quote Das Dash I'm not double

28821
18:12:19,876 --> 18:12:24,876
quoting anything clearly and there's

28822
18:12:22,000 --> 18:12:27,475
nothing to the right of the dash dash

28823
18:12:24,876 --> 18:12:29,244
anyway but it this imbalance is going to

28824
18:12:27,475 --> 18:12:31,196
be useful why because if I'm a hacker

28825
18:12:29,244 --> 18:12:33,360
and I'm presuming you know someone at

28826
18:12:31,196 --> 18:12:36,080
Harvard probably is using SQL uh single

28827
18:12:33,360 --> 18:12:38,680
quotes to wrap the user's email address

28828
18:12:36,080 --> 18:12:40,475
and wrap the user's password what if I

28829
18:12:38,679 --> 18:12:42,399
try to like complete their thought for

28830
18:12:40,475 --> 18:12:45,115
them and close one of those quotes for

28831
18:12:42,399 --> 18:12:46,920
them what might happen well we could do

28832
18:12:45,115 --> 18:12:48,360
this here for instance let me

28833
18:12:46,920 --> 18:12:50,516
hypothesize is the code that Harvard

28834
18:12:48,360 --> 18:12:52,436
wrote hopefully not underneath the hood

28835
18:12:50,516 --> 18:12:54,960
so they're using CS library and Python

28836
18:12:52,436 --> 18:12:57,320
and they're using SQL inside suppose

28837
18:12:54,960 --> 18:13:01,040
that they have a query like this select

28838
18:12:57,320 --> 18:13:03,116
star from users where username equals uh

28839
18:13:01,039 --> 18:13:04,755
question mark and password equals

28840
18:13:03,115 --> 18:13:06,399
question mark and then suppose they just

28841
18:13:04,755 --> 18:13:09,039
plug in whatever username and password

28842
18:13:06,399 --> 18:13:10,720
was typed in and then if they get back

28843
18:13:09,039 --> 18:13:12,719
some number of rows dot dot dot they

28844
18:13:10,720 --> 18:13:14,436
assume I am David they assume Carter is

28845
18:13:12,720 --> 18:13:16,360
Carter if both the username and password

28846
18:13:14,436 --> 18:13:19,080
are in the database just end of story

28847
18:13:16,360 --> 18:13:21,156
there this is good this has the question

28848
18:13:19,080 --> 18:13:23,320
mark placeholders we discussed earlier

28849
18:13:21,156 --> 18:13:24,835
but what if you don't quite remember

28850
18:13:23,320 --> 18:13:26,876
that you don't quite take that to heart

28851
18:13:24,835 --> 18:13:29,599
and you use your more familiar last week

28852
18:13:26,876 --> 18:13:31,836
F strings whereby we use these curly

28853
18:13:29,600 --> 18:13:33,516
braces to plug in values what if you do

28854
18:13:31,835 --> 18:13:36,115
this instead so it's almost the same

28855
18:13:33,516 --> 18:13:37,960
idea it's still DB execute but now it's

28856
18:13:36,115 --> 18:13:39,959
select star from users where username

28857
18:13:37,960 --> 18:13:42,000
equals and now notice I'm doing the

28858
18:13:39,960 --> 18:13:43,556
single quotes which is required by SQL

28859
18:13:42,000 --> 18:13:46,039
but I'm using F strings with the curly

28860
18:13:43,556 --> 18:13:48,475
braces and the password equals single

28861
18:13:46,039 --> 18:13:50,475
quote password and then close single

28862
18:13:48,475 --> 18:13:53,556
quote the problem is if you're just

28863
18:13:50,475 --> 18:13:56,196
blindly pasting equ effectively the

28864
18:13:53,556 --> 18:13:58,475
user's input into that web form into the

28865
18:13:56,196 --> 18:14:00,556
username field and the password field

28866
18:13:58,475 --> 18:14:03,080
there's nothing stopping a malicious

28867
18:14:00,556 --> 18:14:05,475
user student faculty staff from

28868
18:14:03,080 --> 18:14:08,280
including a single quote in their name

28869
18:14:05,475 --> 18:14:09,959
or maybe even an uh uh you know

28870
18:14:08,280 --> 18:14:11,679
benevolently if their name happens to

28871
18:14:09,960 --> 18:14:14,756
have a single quote as some last names

28872
18:14:11,679 --> 18:14:17,000
in particular do so this is very fragile

28873
18:14:14,755 --> 18:14:19,515
why well suppose that if we plug in my

28874
18:14:17,000 --> 18:14:22,156
malicious value Ma at harvard.edu single

28875
18:14:19,516 --> 18:14:25,640
quote-- notice what happens to username

28876
18:14:22,156 --> 18:14:28,960
here the username variable inside of the

28877
18:14:25,640 --> 18:14:30,960
curly quotes will get replaced with this

28878
18:14:28,960 --> 18:14:33,400
and notice single quote which the

28879
18:14:30,960 --> 18:14:37,600
Harvard programmer wrote M an

28880
18:14:33,399 --> 18:14:40,599
harvard.edu single quote which I wrote

28881
18:14:37,600 --> 18:14:42,556
dash dash which I wrote single quote

28882
18:14:40,600 --> 18:14:44,080
which Harvard wrote and whatever else

28883
18:14:42,556 --> 18:14:47,280
they want after that what's the

28884
18:14:44,080 --> 18:14:47,280
implication though of the dash

28885
18:14:47,796 --> 18:14:52,360
dash everything to the right is going to

28886
18:14:50,320 --> 18:14:55,116
be ignored so the password is never even

28887
18:14:52,360 --> 18:14:57,399
checked in this scenario I'm tricking

28888
18:14:55,115 --> 18:14:58,920
the server into ignoring everything

28889
18:14:57,399 --> 18:15:00,640
after the dash dash but I have

28890
18:14:58,920 --> 18:15:03,679
constructed very cleverly very

28891
18:15:00,640 --> 18:15:05,796
maliciously a syntactically valid query

28892
18:15:03,679 --> 18:15:07,515
why because I provided the single quote

28893
18:15:05,796 --> 18:15:09,960
that's going to finish the thought of

28894
18:15:07,516 --> 18:15:11,280
that first single quote and now I would

28895
18:15:09,960 --> 18:15:13,280
only know how to do this if I saw the

28896
18:15:11,280 --> 18:15:15,000
code or if I just randomly try putting

28897
18:15:13,280 --> 18:15:16,196
apostrophes into web forms and see if

28898
18:15:15,000 --> 18:15:18,156
things break that's often how

28899
18:15:16,196 --> 18:15:19,516
adversaries attack systems they type in

28900
18:15:18,156 --> 18:15:21,320
potentially dangerous characters hit

28901
18:15:19,516 --> 18:15:23,280
enter if something breaks they're not

28902
18:15:21,320 --> 18:15:25,080
necessarily into the system but they

28903
18:15:23,280 --> 18:15:26,244
know that there might be a vulnerability

28904
18:15:25,080 --> 18:15:28,244
and then they start trying more

28905
18:15:26,244 --> 18:15:29,756
methodically things like this so This

28906
18:15:28,244 --> 18:15:31,320
Then is going to be bad because it

28907
18:15:29,755 --> 18:15:34,039
effectively Grays out the rest of the

28908
18:15:31,320 --> 18:15:36,516
query and this query is surely going to

28909
18:15:34,039 --> 18:15:38,719
return some rows without even knowing my

28910
18:15:36,516 --> 18:15:41,000
password and so this logic here dot dot

28911
18:15:38,720 --> 18:15:42,876
dot means well if a data came back from

28912
18:15:41,000 --> 18:15:45,796
this query Harvard is presumably going

28913
18:15:42,876 --> 18:15:48,476
to assume that men logged in show them

28914
18:15:45,796 --> 18:15:50,796
uh show him like uh his account or

28915
18:15:48,475 --> 18:15:53,679
whatever is being protected here so in

28916
18:15:50,796 --> 18:15:56,600
short using F strings bad using any

28917
18:15:53,679 --> 18:15:58,556
equivalent like p uh percent s in C bad

28918
18:15:56,600 --> 18:16:00,960
when it comes to SQL using question

28919
18:15:58,556 --> 18:16:03,876
marks or whatever a thirdparty library

28920
18:16:00,960 --> 18:16:06,280
like cs50's prescribed is the way to

28921
18:16:03,876 --> 18:16:08,720
solve this why because libraries like

28922
18:16:06,280 --> 18:16:11,516
ours are designed to at least be smart

28923
18:16:08,720 --> 18:16:13,516
and be paranoid and what we will do is

28924
18:16:11,516 --> 18:16:17,040
this when you use the question marks and

28925
18:16:13,516 --> 18:16:19,116
the values are plugged in we will escape

28926
18:16:17,039 --> 18:16:21,515
any potentially dangerous characters

28927
18:16:19,115 --> 18:16:23,640
inside of those placeholders and so

28928
18:16:21,516 --> 18:16:25,156
effectively the single quote will no

28929
18:16:23,640 --> 18:16:27,080
longer be considered a grammatical

28930
18:16:25,156 --> 18:16:29,835
single quote it will just be literally a

28931
18:16:27,080 --> 18:16:32,475
character in the username or password so

28932
18:16:29,835 --> 18:16:33,835
the library takes care of this for you

28933
18:16:32,475 --> 18:16:36,080
because you're plugging in the username

28934
18:16:33,835 --> 18:16:38,515
and password as separate arguments and

28935
18:16:36,080 --> 18:16:41,000
then we or the third party you're using

28936
18:16:38,516 --> 18:16:43,000
actually sanitize that is uh clean up

28937
18:16:41,000 --> 18:16:44,755
the data and prevent those bad

28938
18:16:43,000 --> 18:16:46,244
characters now this is kind of an

28939
18:16:44,755 --> 18:16:48,875
internet meme that went around for a

28940
18:16:46,244 --> 18:16:50,280
while um if you've ever uh driven a car

28941
18:16:48,876 --> 18:16:52,680
been in a car where there's like the

28942
18:16:50,280 --> 18:16:54,080
automatic reader for tolls uh this

28943
18:16:52,679 --> 18:16:55,679
person thought it might be funny to try

28944
18:16:54,080 --> 18:16:58,320
doing something like this what are they

28945
18:16:55,679 --> 18:17:00,435
presumably doing the presumption here is

28946
18:16:58,320 --> 18:17:02,960
whether or not it worked as unclear is

28947
18:17:00,436 --> 18:17:04,436
that here's like the end of a actual

28948
18:17:02,960 --> 18:17:06,640
license plate number but here's an

28949
18:17:04,436 --> 18:17:07,960
interesting single quote and a semicolon

28950
18:17:06,640 --> 18:17:09,600
that's especially bad because it means

28951
18:17:07,960 --> 18:17:11,476
you can maybe execute a second query on

28952
18:17:09,600 --> 18:17:14,156
the database this is someone having fun

28953
18:17:11,475 --> 18:17:16,599
trying to drop the entire database table

28954
18:17:14,156 --> 18:17:18,756
for whatever municipality is scanning

28955
18:17:16,600 --> 18:17:20,556
through cameras uh their license plate

28956
18:17:18,755 --> 18:17:22,640
code and I would be remiss if we didn't

28957
18:17:20,556 --> 18:17:25,000
end on this note at least in computer

28958
18:17:22,640 --> 18:17:27,755
science circles um there is someone

28959
18:17:25,000 --> 18:17:30,080
named no relation to the TF name we put

28960
18:17:27,755 --> 18:17:33,155
in the database earlier um little Bobby

28961
18:17:30,080 --> 18:17:35,835
tables which ends with this XKCD

28962
18:17:33,156 --> 18:17:39,796
comic and if you chuckle if you laugh

28963
18:17:35,835 --> 18:17:39,796
you're now legit SQL

28964
18:17:40,556 --> 18:17:45,679
programmers nice

28965
18:17:43,244 --> 18:17:47,156
nice like every CS student out there

28966
18:17:45,679 --> 18:17:48,795
knows about little Bobby tables so if

28967
18:17:47,156 --> 18:17:50,876
you name drop little Bobby tables now

28968
18:17:48,796 --> 18:17:54,400
like you're in all right that's it

28969
18:17:50,876 --> 18:17:54,400
though for today we will see you next

28970
18:17:54,820 --> 18:18:02,929
[Music]

28971
18:18:08,920 --> 18:18:17,240
[Music]

28972
18:18:20,039 --> 18:18:23,039
time

28973
18:18:33,539 --> 18:18:50,729
[Music]

28974
18:18:56,679 --> 18:18:59,749
[Music]

28975
18:19:06,030 --> 18:19:09,140
[Music]

28976
18:19:15,960 --> 18:19:29,320
[Music]

28977
18:19:35,240 --> 18:19:57,659
[Music]

28978
18:19:54,570 --> 18:19:57,659
[Applause]

28979
18:20:00,020 --> 18:20:11,440
[Music]

28980
18:20:08,310 --> 18:20:11,440
[Applause]

28981
18:20:12,876 --> 18:20:15,280
all the way to the top and then you're

28982
18:20:14,080 --> 18:20:18,400
passing

28983
18:20:15,280 --> 18:20:22,244
down this is for you Yale we love you

28984
18:20:18,399 --> 18:20:24,435
Yale we're here to Har

28985
18:20:22,244 --> 18:20:24,436
go

28986
18:20:25,835 --> 18:20:28,835
har

28987
18:20:29,539 --> 18:20:32,909
[Applause]

28988
18:20:36,640 --> 18:20:43,000
down it's going to

28989
18:20:39,516 --> 18:20:45,360
happen it's actually going to happen I

28990
18:20:43,000 --> 18:20:49,280
can't believe this what do you think of

28991
18:20:45,360 --> 18:20:49,280
Y they don't think

28992
18:20:49,755 --> 18:20:54,000
good can't does everyone have it does

28993
18:20:52,475 --> 18:20:55,475
everyone have their stuff does everyone

28994
18:20:54,000 --> 18:20:58,640
have their stuff probably that it's

28995
18:20:55,475 --> 18:20:58,640
going to beable very

28996
18:21:00,080 --> 18:21:04,400
small I

28997
18:21:01,920 --> 18:21:08,640
know what

28998
18:21:04,399 --> 18:21:08,640
houses how many exra how many

28999
18:21:11,920 --> 18:21:18,243
EXT no F forer yeah just make sure

29000
18:21:16,920 --> 18:21:22,755
everyone

29001
18:21:18,244 --> 18:21:22,756
has pass all the car distributed

29002
18:21:22,920 --> 18:21:38,289
all right we can do it

29003
18:21:24,300 --> 18:21:41,389
[Applause]

29004
18:21:38,289 --> 18:21:41,389
[Music]

29005
18:21:49,679 --> 18:21:52,679
now

29006
18:21:53,835 --> 18:22:00,599
what do you think of Y

29007
18:21:55,600 --> 18:22:00,600
sir go go one more time one

29008
18:22:03,649 --> 18:22:08,020
[Applause]

29009
18:22:05,835 --> 18:22:19,679
more there goes

29010
18:22:08,020 --> 18:22:20,789
[Applause]

29011
18:22:19,679 --> 18:22:23,998
again

29012
18:22:20,789 --> 18:22:23,999
[Applause]

29013
18:22:25,876 --> 18:22:34,756
all right this is cs50 welcome to week 8

29014
18:22:31,196 --> 18:22:37,796
last week we learned how to create read

29015
18:22:34,755 --> 18:22:38,959
update and delete databases using squl

29016
18:22:37,796 --> 18:22:43,196
but this

29017
18:22:38,960 --> 18:22:43,196
week Adam everyone happy

29018
18:22:48,556 --> 18:22:54,599
Halloween all right so this is cs50 and

29019
18:22:52,244 --> 18:22:57,960
this is week eight already my thanks to

29020
18:22:54,600 --> 18:23:00,244
Adam on today this happy Halloween uh in

29021
18:22:57,960 --> 18:23:02,116
the coming moments we're going to learn

29022
18:23:00,244 --> 18:23:03,516
all about how the internet itself Works

29023
18:23:02,115 --> 18:23:05,556
which of course is a technology that

29024
18:23:03,516 --> 18:23:07,640
like we're all take we all use every day

29025
18:23:05,556 --> 18:23:09,196
probably using in some form right now

29026
18:23:07,640 --> 18:23:10,000
but we'll see that if you start to

29027
18:23:09,196 --> 18:23:12,000
understand some of the underlying

29028
18:23:10,000 --> 18:23:13,920
building blocks that power the internet

29029
18:23:12,000 --> 18:23:15,516
itself we can actually start to build

29030
18:23:13,920 --> 18:23:16,920
interesting things on top of it and a

29031
18:23:15,516 --> 18:23:18,640
lot of the apps the websites that you

29032
18:23:16,920 --> 18:23:20,556
all use every day should become all the

29033
18:23:18,640 --> 18:23:22,115
more familiar things that you yourself

29034
18:23:20,556 --> 18:23:23,475
VES can create and honestly when things

29035
18:23:22,115 --> 18:23:26,196
go wrong you'll have all the more of a

29036
18:23:23,475 --> 18:23:27,835
mental model for how things work or are

29037
18:23:26,196 --> 18:23:30,243
not in fact working so that you can

29038
18:23:27,835 --> 18:23:32,196
ultimately diagnose diagnose all the

29039
18:23:30,244 --> 18:23:34,000
more issues yourselves so if we take a

29040
18:23:32,196 --> 18:23:35,640
look at the internet in the early days

29041
18:23:34,000 --> 18:23:37,320
it pretty much was just this this

29042
18:23:35,640 --> 18:23:38,960
happens to be of course the geography of

29043
18:23:37,320 --> 18:23:41,836
the United States and just some of the

29044
18:23:38,960 --> 18:23:43,876
first uh points on the internet were

29045
18:23:41,835 --> 18:23:46,196
these here this was so-called arpanet

29046
18:23:43,876 --> 18:23:48,280
back in 1969 and indeed the internet had

29047
18:23:46,196 --> 18:23:50,755
its Origins here in the United States

29048
18:23:48,280 --> 18:23:53,319
with just a few computers interconnect

29049
18:23:50,755 --> 18:23:55,079
somehow initially that of course began

29050
18:23:53,320 --> 18:23:56,600
to grow over time such that we

29051
18:23:55,080 --> 18:23:58,640
eventually had the West Coast connected

29052
18:23:56,600 --> 18:24:00,680
to the east coast and nowadays what you

29053
18:23:58,640 --> 18:24:02,360
can think of these dots on the screen is

29054
18:24:00,679 --> 18:24:04,399
representing are these things called

29055
18:24:02,360 --> 18:24:06,796
routers sort of computers or really

29056
18:24:04,399 --> 18:24:08,835
servers that somehow have wires or maybe

29057
18:24:06,796 --> 18:24:11,244
wireless connections between them that

29058
18:24:08,835 --> 18:24:13,039
allow data to flow from point A to B to

29059
18:24:11,244 --> 18:24:15,556
C and then this of course has been now

29060
18:24:13,039 --> 18:24:17,515
magnified across the entire Globe um and

29061
18:24:15,556 --> 18:24:19,959
even above ground as well so that we can

29062
18:24:17,516 --> 18:24:22,836
connect all the more readily uh to

29063
18:24:19,960 --> 18:24:25,876
systems anywhere now in order to Route

29064
18:24:22,835 --> 18:24:27,875
the data from one router to another we

29065
18:24:25,876 --> 18:24:29,516
need to somehow make routing decisions

29066
18:24:27,876 --> 18:24:31,756
and this is the kind of thing that the

29067
18:24:29,516 --> 18:24:33,600
internet service providers the isps of

29068
18:24:31,755 --> 18:24:35,640
the world just handle for us you and I

29069
18:24:33,600 --> 18:24:37,516
plug our Macs our PCS into the network

29070
18:24:35,640 --> 18:24:40,000
here at Harvard or equivalently at Yale

29071
18:24:37,516 --> 18:24:41,556
or we somehow get online via Wi-Fi or

29072
18:24:40,000 --> 18:24:43,640
cellular technology and then some of

29073
18:24:41,556 --> 18:24:45,720
these larger entities these bigger

29074
18:24:43,640 --> 18:24:48,475
companies or countries handle most of

29075
18:24:45,720 --> 18:24:49,796
the data getting from point A to point B

29076
18:24:48,475 --> 18:24:51,436
and if you think about what these

29077
18:24:49,796 --> 18:24:53,556
routers present they're indeed just

29078
18:24:51,436 --> 18:24:55,720
servers somehow interconnected not

29079
18:24:53,556 --> 18:24:57,755
unlike this grid of tiles here for

29080
18:24:55,720 --> 18:24:59,835
instance back in the zoom days and in

29081
18:24:57,755 --> 18:25:01,679
fact here we have I claim a grid of

29082
18:24:59,835 --> 18:25:03,196
routers implemented here by the courses

29083
18:25:01,679 --> 18:25:05,795
teaching fellows and course assistants

29084
18:25:03,196 --> 18:25:08,000
and Tas and if the goal at hand for

29085
18:25:05,796 --> 18:25:10,000
instance is for Phyllis to Route some

29086
18:25:08,000 --> 18:25:11,516
piece of information maybe it's an email

29087
18:25:10,000 --> 18:25:13,360
maybe it's a request for a web page in

29088
18:25:11,516 --> 18:25:15,320
the bottom right hand corner all the way

29089
18:25:13,360 --> 18:25:17,680
up to say Brian here in the top left

29090
18:25:15,320 --> 18:25:19,876
hand corner suffice it to say each each

29091
18:25:17,679 --> 18:25:21,679
of these tiles represents a router a

29092
18:25:19,876 --> 18:25:23,876
server that can move the data back forth

29093
18:25:21,679 --> 18:25:25,475
left and right that packet of

29094
18:25:23,876 --> 18:25:27,876
information so to speak from Phyllis to

29095
18:25:25,475 --> 18:25:30,475
Brian could take any number of different

29096
18:25:27,876 --> 18:25:32,476
possible routes up down left right to go

29097
18:25:30,475 --> 18:25:34,475
from the one corner to another so let me

29098
18:25:32,475 --> 18:25:36,475
go ahead and hit play on this video here

29099
18:25:34,475 --> 18:25:37,830
we're in the teaching fellows play the

29100
18:25:36,475 --> 18:25:49,319
same

29101
18:25:37,830 --> 18:25:52,320
[Music]

29102
18:25:49,320 --> 18:25:52,320
role

29103
18:25:53,000 --> 18:25:56,796
all right so in this particular case the

29104
18:25:54,679 --> 18:25:58,679
data was routed pretty straightforwardly

29105
18:25:56,796 --> 18:26:00,556
up and then to the left but suppose that

29106
18:25:58,679 --> 18:26:02,835
one or more of the staff were a bit busy

29107
18:26:00,556 --> 18:26:04,360
maybe one of the routers is congested

29108
18:26:02,835 --> 18:26:06,080
that is to say just got way more

29109
18:26:04,360 --> 18:26:08,039
envelopes at a moment in time that it

29110
18:26:06,080 --> 18:26:09,835
can handle thankfully the design of the

29111
18:26:08,039 --> 18:26:11,399
internet is such that there's often

29112
18:26:09,835 --> 18:26:13,475
multiple ways that data can get from

29113
18:26:11,399 --> 18:26:15,755
point A to point B maybe going through

29114
18:26:13,475 --> 18:26:17,875
Point C or Point D instead and so

29115
18:26:15,755 --> 18:26:19,640
there's a resilience there even as some

29116
18:26:17,876 --> 18:26:21,476
of these servers themselves might go

29117
18:26:19,640 --> 18:26:23,960
down so allow me to propose that we use

29118
18:26:21,475 --> 18:26:26,039
the same grid of routers now to Route

29119
18:26:23,960 --> 18:26:27,539
the data in a slightly different way

29120
18:26:26,039 --> 18:26:39,709
this

29121
18:26:27,539 --> 18:26:41,090
[Music]

29122
18:26:39,710 --> 18:26:43,950
[Applause]

29123
18:26:41,090 --> 18:26:47,170
[Music]

29124
18:26:43,950 --> 18:26:47,170
[Applause]

29125
18:26:47,479 --> 18:26:52,244
[Music]

29126
18:26:49,244 --> 18:26:52,244
time

29127
18:26:54,796 --> 18:26:58,475
so success you'll see perhaps later just

29128
18:26:56,755 --> 18:27:00,280
how many takes it took us to actually

29129
18:26:58,475 --> 18:27:02,599
get that routing right but it does in

29130
18:27:00,280 --> 18:27:04,244
fact manifest that you can uh travel

29131
18:27:02,600 --> 18:27:06,320
different paths in order to get the data

29132
18:27:04,244 --> 18:27:07,640
from point A to point B so as we talk

29133
18:27:06,320 --> 18:27:09,600
about routers as you think of the

29134
18:27:07,640 --> 18:27:11,640
internet I mean think of those humans as

29135
18:27:09,600 --> 18:27:14,320
just representing these routers points a

29136
18:27:11,640 --> 18:27:16,876
to p and everywhere in between now how

29137
18:27:14,320 --> 18:27:19,360
did the teaching staff know to route

29138
18:27:16,876 --> 18:27:20,556
that packet up and then down or left and

29139
18:27:19,360 --> 18:27:22,280
right in order to get get to the

29140
18:27:20,556 --> 18:27:24,115
destination well all of them were

29141
18:27:22,280 --> 18:27:26,679
programmed so to speak to understand

29142
18:27:24,115 --> 18:27:28,959
protocols it's called TCP and IP

29143
18:27:26,679 --> 18:27:31,196
Otherwise Known together typically as

29144
18:27:28,960 --> 18:27:33,280
tcpip and you've probably seen these

29145
18:27:31,196 --> 18:27:35,115
acronyms at some point in the real world

29146
18:27:33,280 --> 18:27:36,640
on the internet on some kind of

29147
18:27:35,115 --> 18:27:38,360
documentation a text even if you haven't

29148
18:27:36,640 --> 18:27:39,679
really thought hard about it but IP is

29149
18:27:38,360 --> 18:27:42,000
certainly the more common of the two

29150
18:27:39,679 --> 18:27:44,755
perhaps in common culture so what does

29151
18:27:42,000 --> 18:27:46,920
TCP and IP do for us well really two

29152
18:27:44,755 --> 18:27:48,875
primary things any computer or any

29153
18:27:46,920 --> 18:27:51,399
teaching staff member who understands

29154
18:27:48,876 --> 18:27:53,516
tcpip knows how to get data from point A

29155
18:27:51,399 --> 18:27:56,280
to point B but how well let's break down

29156
18:27:53,516 --> 18:27:58,280
what that problem to be solved is IP

29157
18:27:56,280 --> 18:28:00,835
otherwise known as Internet Protocol is

29158
18:27:58,280 --> 18:28:02,755
a protocol that computers speak that

29159
18:28:00,835 --> 18:28:05,039
allow them to know how to address

29160
18:28:02,755 --> 18:28:06,959
computers on the internet and a protocol

29161
18:28:05,039 --> 18:28:08,755
is just a set of conventions that

29162
18:28:06,960 --> 18:28:10,600
computers adhere to so someone wrote

29163
18:28:08,755 --> 18:28:12,115
code that probably has a whole lot of

29164
18:28:10,600 --> 18:28:14,244
conditionals that tells the computer

29165
18:28:12,115 --> 18:28:16,515
what to do if something happens like if

29166
18:28:14,244 --> 18:28:18,280
I receive a packet then send it to the

29167
18:28:16,516 --> 18:28:20,360
next server or something like that in

29168
18:28:18,280 --> 18:28:22,280
the human world we have protocols too

29169
18:28:20,360 --> 18:28:23,796
you know pre in healthier times it was

29170
18:28:22,280 --> 18:28:25,835
quite common to sort of extend your hand

29171
18:28:23,796 --> 18:28:28,156
to another human in order to greet them

29172
18:28:25,835 --> 18:28:29,835
and if they're following human protocol

29173
18:28:28,156 --> 18:28:31,680
they would presumably grab your hand and

29174
18:28:29,835 --> 18:28:34,436
shake it at least in a a culture like

29175
18:28:31,679 --> 18:28:36,155
this one here on campus and now that is

29176
18:28:34,436 --> 18:28:38,244
a human protocol in that someone

29177
18:28:36,156 --> 18:28:39,680
initiates it someone responds to it and

29178
18:28:38,244 --> 18:28:41,244
you both sort of know what to do you're

29179
18:28:39,679 --> 18:28:43,435
programmed to know what to do so same

29180
18:28:41,244 --> 18:28:44,756
idea with Internet Protocol computers

29181
18:28:43,436 --> 18:28:46,720
just know what to do when they've been

29182
18:28:44,755 --> 18:28:50,079
programmed to do so so what does this

29183
18:28:46,720 --> 18:28:52,280
mean IP had decides that every compter

29184
18:28:50,080 --> 18:28:55,796
computer in the world will have a unique

29185
18:28:52,280 --> 18:28:57,360
address just like uh a the science

29186
18:28:55,796 --> 18:28:59,400
center around the corner might have a

29187
18:28:57,360 --> 18:29:03,156
unique address of one Oxford Street

29188
18:28:59,399 --> 18:29:04,599
Cambridge Massachusetts 02138 USA IP

29189
18:29:03,156 --> 18:29:06,640
dictates that every computer on the

29190
18:29:04,600 --> 18:29:08,280
internet have a unique address of this

29191
18:29:06,640 --> 18:29:09,640
form and this too is probably something

29192
18:29:08,280 --> 18:29:11,319
you've seen in the real world even if

29193
18:29:09,640 --> 18:29:13,360
you haven't thought too hard about it

29194
18:29:11,320 --> 18:29:15,244
it's a number and what's called dotted

29195
18:29:13,360 --> 18:29:17,320
decimal notation which means it's a

29196
18:29:15,244 --> 18:29:20,080
decimal number do something do something

29197
18:29:17,320 --> 18:29:21,960
do something so four digits separated by

29198
18:29:20,080 --> 18:29:23,720
convention by decimal points although

29199
18:29:21,960 --> 18:29:26,000
there are newer and bigger versions of

29200
18:29:23,720 --> 18:29:27,920
the same and these so-called IP

29201
18:29:26,000 --> 18:29:32,039
addresses that might be as simple as

29202
18:29:27,920 --> 18:29:34,080
1.2.3.4 uniquely identify a computer on

29203
18:29:32,039 --> 18:29:38,243
the internet uh the numbers have to

29204
18:29:34,080 --> 18:29:39,835
range from 0 to 255 each and that's a

29205
18:29:38,244 --> 18:29:41,516
bit of a hint just as you start to think

29206
18:29:39,835 --> 18:29:44,399
more computationally if each of these is

29207
18:29:41,516 --> 18:29:46,600
a number from 0 to 255 how many bits

29208
18:29:44,399 --> 18:29:48,959
does that suggest each number is

29209
18:29:46,600 --> 18:29:53,476
using feel free to shout it

29210
18:29:48,960 --> 18:29:55,360
out how many bits gives us 255 256 total

29211
18:29:53,475 --> 18:29:57,080
possibilities so eight bits that should

29212
18:29:55,360 --> 18:29:58,600
just be sort of a heuristic in your mind

29213
18:29:57,080 --> 18:30:02,244
anytime you hear something that's in the

29214
18:29:58,600 --> 18:30:03,876
range of 0 to 255 or 256 values total

29215
18:30:02,244 --> 18:30:05,640
think back to week zero which gives us

29216
18:30:03,876 --> 18:30:06,920
eight bits plus another eight bits

29217
18:30:05,640 --> 18:30:08,556
another eight bits and another eight

29218
18:30:06,920 --> 18:30:11,475
bits which is to say an IP address

29219
18:30:08,556 --> 18:30:13,080
typically is 32 bits in total now if we

29220
18:30:11,475 --> 18:30:15,039
do another bit of quick mental math or

29221
18:30:13,080 --> 18:30:17,436
think back to week zero if every IP

29222
18:30:15,039 --> 18:30:18,679
address is 32 bits how many computers

29223
18:30:17,436 --> 18:30:24,244
can we have on the

29224
18:30:18,679 --> 18:30:27,399
internet at once give or take

29225
18:30:24,244 --> 18:30:28,796
roughly 4 billion is the ballpark and we

29226
18:30:27,399 --> 18:30:31,079
don't need to be super precise for

29227
18:30:28,796 --> 18:30:32,876
discussion's sake but roughly 4 billion

29228
18:30:31,080 --> 18:30:35,000
is how high you can account assuming no

29229
18:30:32,876 --> 18:30:37,640
negative numbers if you have 32 bits in

29230
18:30:35,000 --> 18:30:39,755
total now that's not terribly uh many

29231
18:30:37,640 --> 18:30:41,000
number uh numbers of addresses

29232
18:30:39,755 --> 18:30:42,599
especially considering the number of

29233
18:30:41,000 --> 18:30:44,475
humans in the world the number of us

29234
18:30:42,600 --> 18:30:46,476
that do have laptops or desktops or

29235
18:30:44,475 --> 18:30:48,319
devices more generally phones in our

29236
18:30:46,475 --> 18:30:49,920
pockets and the like so let me just

29237
18:30:48,320 --> 18:30:51,720
stipulate for today's purposes that

29238
18:30:49,920 --> 18:30:53,959
there's even a newer and improved

29239
18:30:51,720 --> 18:30:56,556
version of Ip otherwise known as version

29240
18:30:53,960 --> 18:30:59,756
6 this is version four but still super

29241
18:30:56,556 --> 18:31:01,720
popular version six uses 128 bits which

29242
18:30:59,755 --> 18:31:03,556
is a huge number of possible

29243
18:31:01,720 --> 18:31:05,640
premutations I dare say I can't even

29244
18:31:03,556 --> 18:31:07,280
pronounce that number it's so big so

29245
18:31:05,640 --> 18:31:10,000
there are ways around even this

29246
18:31:07,280 --> 18:31:12,360
limitation already so every computer has

29247
18:31:10,000 --> 18:31:14,156
an address like this what does that

29248
18:31:12,360 --> 18:31:16,000
really mean well suppose that I was

29249
18:31:14,156 --> 18:31:17,556
Phyllis in the story told visually

29250
18:31:16,000 --> 18:31:19,835
earlier and I want to send a message to

29251
18:31:17,556 --> 18:31:22,475
Brian well both Phyllis and Brian have I

29252
18:31:19,835 --> 18:31:25,360
IP addresses and suppose that Brian's IP

29253
18:31:22,475 --> 18:31:27,875
address happens to be 1.2.3.4 in that

29254
18:31:25,360 --> 18:31:30,399
top left hand corner well phyllis's Mac

29255
18:31:27,876 --> 18:31:32,796
or PC or phone would essentially do the

29256
18:31:30,399 --> 18:31:35,196
equivalent on this human envelope by

29257
18:31:32,796 --> 18:31:37,080
writing the two address in the middle of

29258
18:31:35,196 --> 18:31:39,319
the envelope as is our human convention

29259
18:31:37,080 --> 18:31:41,280
like this so this is an envelope a piece

29260
18:31:39,320 --> 18:31:43,040
of information an email a text message

29261
18:31:41,280 --> 18:31:45,156
whatever destined for Brian and so she

29262
18:31:43,039 --> 18:31:47,360
would have her computer put Brian's IP

29263
18:31:45,156 --> 18:31:50,796
address in the middle her IP address is

29264
18:31:47,360 --> 18:31:53,080
Maybe 5.6.7 do8 so just like our human

29265
18:31:50,796 --> 18:31:56,680
convention I might write 5.

29266
18:31:53,080 --> 18:31:59,640
6.7.8 at the top of the envelope

29267
18:31:56,679 --> 18:32:01,196
5678 thereby indicating what the return

29268
18:31:59,640 --> 18:32:03,039
address is and this is helpful because

29269
18:32:01,196 --> 18:32:05,399
if Brian's computer needs to acknowledge

29270
18:32:03,039 --> 18:32:07,399
receipt if he needs to reply in some

29271
18:32:05,399 --> 18:32:09,155
form this way the envelope has all the

29272
18:32:07,399 --> 18:32:10,835
information we need but in the real

29273
18:32:09,156 --> 18:32:13,156
world servers do a lot of things

29274
18:32:10,835 --> 18:32:15,360
nowadays not just email but maybe chat

29275
18:32:13,156 --> 18:32:17,640
Maybe video conferencing maybe any

29276
18:32:15,360 --> 18:32:19,960
number of other services as well and so

29277
18:32:17,640 --> 18:32:21,960
it turns out that an address alone might

29278
18:32:19,960 --> 18:32:23,720
not be sufficient because how do how

29279
18:32:21,960 --> 18:32:25,516
does Brian's computer know when he opens

29280
18:32:23,720 --> 18:32:27,475
the envelope so to speak that this

29281
18:32:25,516 --> 18:32:29,116
should be interpreted as an email or

29282
18:32:27,475 --> 18:32:31,115
interpret it as a chat message or

29283
18:32:29,115 --> 18:32:33,039
interpret it as like a video attachment

29284
18:32:31,115 --> 18:32:35,115
that Phyllis has sent well we need some

29285
18:32:33,039 --> 18:32:37,360
other mechanism some other hint on this

29286
18:32:35,115 --> 18:32:39,640
envelope to distinguish one type of

29287
18:32:37,360 --> 18:32:42,436
Internet service from another and so

29288
18:32:39,640 --> 18:32:45,319
that's where the other acronym in TCI

29289
18:32:42,436 --> 18:32:47,876
pip comes in which is TCP so this stands

29290
18:32:45,320 --> 18:32:50,116
for transmission control protocol which

29291
18:32:47,876 --> 18:32:52,000
is just a different set of conventions

29292
18:32:50,115 --> 18:32:54,000
that computers adhere to in order to

29293
18:32:52,000 --> 18:32:56,399
solve a couple of different problems one

29294
18:32:54,000 --> 18:32:58,835
is this problem of distinguishing one

29295
18:32:56,399 --> 18:33:01,399
type of service from another now what

29296
18:32:58,835 --> 18:33:03,475
does that mean well humans decades ago

29297
18:33:01,399 --> 18:33:05,435
decided as they started inventing all of

29298
18:33:03,475 --> 18:33:07,835
these various internet services the web

29299
18:33:05,436 --> 18:33:09,000
being the first one how they might or

29300
18:33:07,835 --> 18:33:11,755
the web now being one of the most

29301
18:33:09,000 --> 18:33:13,720
popular ones they decided to assign

29302
18:33:11,755 --> 18:33:15,920
different services that can be used on

29303
18:33:13,720 --> 18:33:18,516
the internet unique numbers and so two

29304
18:33:15,920 --> 18:33:20,115
of the most common are these 80 is the

29305
18:33:18,516 --> 18:33:21,960
number that a bunch of humans decided

29306
18:33:20,115 --> 18:33:23,959
years ago will represent what you and I

29307
18:33:21,960 --> 18:33:26,400
know as HTTP and we'll talk more

29308
18:33:23,960 --> 18:33:28,000
technically in a bit about what HTTP is

29309
18:33:26,399 --> 18:33:30,640
but obviously it's the thing that's in

29310
18:33:28,000 --> 18:33:33,360
the beginning of every URL nowadays or

29311
18:33:30,640 --> 18:33:35,080
https which of course has the S added to

29312
18:33:33,360 --> 18:33:37,436
it and that has its own unique number

29313
18:33:35,080 --> 18:33:39,600
and for now the S just means secure one

29314
18:33:37,436 --> 18:33:41,080
is encrypted or scrambled somehow for

29315
18:33:39,600 --> 18:33:42,400
privacy sake and the other is

29316
18:33:41,080 --> 18:33:44,640
unencrypted it's a little more

29317
18:33:42,399 --> 18:33:46,795
vulnerable to interception so these two

29318
18:33:44,640 --> 18:33:50,080
numbers are what the world decided when

29319
18:33:46,796 --> 18:33:51,876
implementing TCP shall uniquely identify

29320
18:33:50,080 --> 18:33:53,516
those services so what does this mean

29321
18:33:51,876 --> 18:33:55,600
well this means that if Brian's computer

29322
18:33:53,516 --> 18:33:57,244
in the story from before is hosting not

29323
18:33:55,600 --> 18:33:58,796
like an email server but maybe he has a

29324
18:33:57,244 --> 18:34:01,400
website and Phyllis is requesting

29325
18:33:58,796 --> 18:34:04,320
Brian's homepage or something like that

29326
18:34:01,399 --> 18:34:07,243
she would have her Mac or PC or phone

29327
18:34:04,320 --> 18:34:09,436
not only write Brian's IP address in the

29328
18:34:07,244 --> 18:34:11,876
middle of the envelope but also the

29329
18:34:09,436 --> 18:34:13,920
number otherwise known as a port number

29330
18:34:11,876 --> 18:34:16,876
that she wants this envelope to be

29331
18:34:13,920 --> 18:34:20,556
routed to now 80 would be insecure

29332
18:34:16,876 --> 18:34:24,476
nowadays HTTP col is sort of p and we

29333
18:34:20,556 --> 18:34:26,115
almost always see https colon now so I'm

29334
18:34:24,475 --> 18:34:27,959
just going to go with best practice and

29335
18:34:26,115 --> 18:34:29,196
I'm going to add a colon and then the

29336
18:34:27,960 --> 18:34:32,280
number

29337
18:34:29,196 --> 18:34:34,516
443 at the end of Brian's IP address so

29338
18:34:32,280 --> 18:34:36,115
now I have an IP address for Brian the

29339
18:34:34,516 --> 18:34:37,756
port number for the service that this is

29340
18:34:36,115 --> 18:34:39,000
relevant to and I'm not going to bother

29341
18:34:37,755 --> 18:34:40,720
writing it but it turns out that

29342
18:34:39,000 --> 18:34:42,920
phyllis's computer would also choose a

29343
18:34:40,720 --> 18:34:45,280
port number maybe a random port number

29344
18:34:42,920 --> 18:34:47,640
so that Brian can conversely reply and

29345
18:34:45,280 --> 18:34:50,600
then the computer can know which

29346
18:34:47,640 --> 18:34:52,399
response is in uh coming back for which

29347
18:34:50,600 --> 18:34:54,360
request but the most important one is

29348
18:34:52,399 --> 18:34:56,155
this one in the two field whereby this

29349
18:34:54,360 --> 18:34:57,796
distinguishes this from like an email a

29350
18:34:56,156 --> 18:34:59,756
chat message a video conference session

29351
18:34:57,796 --> 18:35:01,156
or a zoom or whatnot from anything else

29352
18:34:59,755 --> 18:35:03,280
happening on Brian's computer at the

29353
18:35:01,156 --> 18:35:05,796
same time so all this time if you've

29354
18:35:03,280 --> 18:35:08,000
seen these terms TCP and IP those are

29355
18:35:05,796 --> 18:35:10,080
really two of the most important things

29356
18:35:08,000 --> 18:35:12,399
that they do but TCP does one other

29357
18:35:10,080 --> 18:35:15,000
thing that's super useful too it turns

29358
18:35:12,399 --> 18:35:17,720
out that it's

29359
18:35:15,000 --> 18:35:19,436
super common nowadays especially to

29360
18:35:17,720 --> 18:35:21,156
transmit a lot of media on the internet

29361
18:35:19,436 --> 18:35:22,720
internet whether it's an image or maybe

29362
18:35:21,156 --> 18:35:24,960
it's a movie file and it would be a

29363
18:35:22,720 --> 18:35:27,040
little obnoxious to say the least if

29364
18:35:24,960 --> 18:35:28,680
you're downloading a really big file

29365
18:35:27,039 --> 18:35:30,000
meant that no one else in your dorm room

29366
18:35:28,679 --> 18:35:31,679
or your household could actually

29367
18:35:30,000 --> 18:35:33,556
download anything until you're actually

29368
18:35:31,679 --> 18:35:35,515
done so of course multiple people

29369
18:35:33,556 --> 18:35:36,755
nowadays can be on the internet at once

29370
18:35:35,516 --> 18:35:38,436
even if all of the connections are a

29371
18:35:36,755 --> 18:35:40,556
little slower but like one person's

29372
18:35:38,436 --> 18:35:42,756
usage does not block someone else's now

29373
18:35:40,556 --> 18:35:45,039
how does this work well TCP in

29374
18:35:42,755 --> 18:35:46,920
conjunction with IP can also allow you

29375
18:35:45,039 --> 18:35:48,000
to take like a really big image of a cat

29376
18:35:46,920 --> 18:35:50,243
which is the internet of course is

29377
18:35:48,000 --> 18:35:53,000
filled with and take a big image of a

29378
18:35:50,244 --> 18:35:55,196
cat or a big video file of a cat and

29379
18:35:53,000 --> 18:35:57,156
fragment it into multiple pieces so I'm

29380
18:35:55,196 --> 18:35:58,599
just going to sort of roughly tear it

29381
18:35:57,156 --> 18:36:00,556
down the middle and then maybe tear it

29382
18:35:58,600 --> 18:36:02,516
down the middle again so now it's four

29383
18:36:00,556 --> 18:36:04,243
different fragments and I'm I'm sorry

29384
18:36:02,516 --> 18:36:06,876
but the computer will be reassembling

29385
18:36:04,244 --> 18:36:09,680
these for us and what phyllis's computer

29386
18:36:06,876 --> 18:36:11,400
could do now if she's like uploading

29387
18:36:09,679 --> 18:36:14,000
this picture of a cat to Brian's web

29388
18:36:11,399 --> 18:36:16,280
server well she could put one fragment

29389
18:36:14,000 --> 18:36:18,600
in this envelope and then have three

29390
18:36:16,280 --> 18:36:20,679
separate envelopes for the other three

29391
18:36:18,600 --> 18:36:22,680
fragments and what you could then do on

29392
18:36:20,679 --> 18:36:24,359
the outside of this envelope is just

29393
18:36:22,679 --> 18:36:26,835
kind of number them somehow and in fact

29394
18:36:24,360 --> 18:36:28,680
this is something else that TCP and IP

29395
18:36:26,835 --> 18:36:30,556
together would do for us this first

29396
18:36:28,679 --> 18:36:34,243
envelope now might say something like

29397
18:36:30,556 --> 18:36:37,080
one out of four in the memo field so to

29398
18:36:34,244 --> 18:36:38,476
speak of the uh metaphorical envelope

29399
18:36:37,080 --> 18:36:40,556
here now this should be enough

29400
18:36:38,475 --> 18:36:42,000
information because now if Brian gets

29401
18:36:40,556 --> 18:36:43,556
all four of these envelopes he

29402
18:36:42,000 --> 18:36:45,039
presumably knows how to reassemble the

29403
18:36:43,556 --> 18:36:46,720
picture of the cat in order top to

29404
18:36:45,039 --> 18:36:48,835
bottom left to right but more

29405
18:36:46,720 --> 18:36:51,156
importantly suppose that one of the

29406
18:36:48,835 --> 18:36:53,556
routers one of the TFS in the video is

29407
18:36:51,156 --> 18:36:55,556
sort of distracted and they sort of drop

29408
18:36:53,556 --> 18:36:57,080
one of the packets and that's a metaphor

29409
18:36:55,556 --> 18:36:58,876
actually in practice for when a router

29410
18:36:57,080 --> 18:37:00,835
gets really busy it's got way too much

29411
18:36:58,876 --> 18:37:02,516
data coming in it might metaphorically

29412
18:37:00,835 --> 18:37:04,000
drop packets what does that mean in

29413
18:37:02,516 --> 18:37:05,756
practice I mean it literally just

29414
18:37:04,000 --> 18:37:07,360
ignores the zeros and ones it doesn't

29415
18:37:05,755 --> 18:37:09,399
save them to its memory because there's

29416
18:37:07,360 --> 18:37:11,475
just no room left so it's equivalent to

29417
18:37:09,399 --> 18:37:14,360
sort of dropping the packet so suppose

29418
18:37:11,475 --> 18:37:16,515
now that Brian gets one of four three of

29419
18:37:14,360 --> 18:37:18,320
four and four of four what can his

29420
18:37:16,516 --> 18:37:21,796
computer infer

29421
18:37:18,320 --> 18:37:23,960
now after receiving those three packets

29422
18:37:21,796 --> 18:37:26,640
one of four three of four and four of

29423
18:37:23,960 --> 18:37:28,436
four what's the use there yeah I think

29424
18:37:26,640 --> 18:37:30,000
you're you're signaling with your

29425
18:37:28,436 --> 18:37:32,244
fingers which one did which one can I

29426
18:37:30,000 --> 18:37:33,835
call on you yeah so he's missing two out

29427
18:37:32,244 --> 18:37:35,476
of four the second of the packets and

29428
18:37:33,835 --> 18:37:37,039
this is useful now because you could

29429
18:37:35,475 --> 18:37:39,475
imagine he can send some message back to

29430
18:37:37,039 --> 18:37:41,556
Phyllis saying hey please retransmit

29431
18:37:39,475 --> 18:37:43,920
number two of four without having to

29432
18:37:41,556 --> 18:37:46,360
redownload the entirety of the cat so

29433
18:37:43,920 --> 18:37:49,920
there's there's an efficiency there as

29434
18:37:46,360 --> 18:37:52,196
well so tcpip allows data really to go

29435
18:37:49,920 --> 18:37:54,876
from point A to point B while solving a

29436
18:37:52,196 --> 18:37:56,556
bunch of these problems along the way so

29437
18:37:54,876 --> 18:37:59,436
nowadays if you ever see mention on your

29438
18:37:56,556 --> 18:38:02,080
Mac or PC of your so-called IP address

29439
18:37:59,436 --> 18:38:05,244
that is the sort of problem that's being

29440
18:38:02,080 --> 18:38:09,156
solved questions now on these protocols

29441
18:38:05,244 --> 18:38:11,516
these conventions called TCP and

29442
18:38:09,156 --> 18:38:12,756
IP that's the extent to which we'll need

29443
18:38:11,516 --> 18:38:14,244
to understand them won't have to

29444
18:38:12,755 --> 18:38:16,115
implement them per se we'll just take

29445
18:38:14,244 --> 18:38:18,876
them Hereafter for

29446
18:38:16,115 --> 18:38:20,599
granted any questions that you've ever

29447
18:38:18,876 --> 18:38:23,000
been wondering wondering about your home

29448
18:38:20,600 --> 18:38:23,000
network

29449
18:38:27,080 --> 18:38:32,832
yeah a really good question uh how does

29450
18:38:29,872 --> 18:38:35,872
TCP know that a user got a message

29451
18:38:32,832 --> 18:38:38,159
another aspect another feature of TCP is

29452
18:38:35,872 --> 18:38:40,160
that Brian's computer by design of this

29453
18:38:38,160 --> 18:38:41,600
protocol will also acknowledge the

29454
18:38:40,160 --> 18:38:43,480
packets that he's received and it will

29455
18:38:41,600 --> 18:38:45,440
do it efficiently if Brian receives all

29456
18:38:43,480 --> 18:38:47,080
four packets in a pretty narrow window

29457
18:38:45,440 --> 18:38:48,480
of time his computer will send to

29458
18:38:47,080 --> 18:38:50,920
phyllis's computer a quick message

29459
18:38:48,480 --> 18:38:52,440
saying essentially received all four

29460
18:38:50,920 --> 18:38:54,680
otherwise he'll say the opposite which

29461
18:38:52,440 --> 18:38:56,480
is that I'm missing for for instance two

29462
18:38:54,680 --> 18:38:57,959
out of four and that just ensures

29463
18:38:56,480 --> 18:39:00,080
ultimately that all of the data is

29464
18:38:57,960 --> 18:39:03,240
indeed uh arrived so that you're not

29465
18:39:00,080 --> 18:39:05,760
missing like uh a quarter a quadrant of

29466
18:39:03,240 --> 18:39:07,400
the cat in question all right but th

29467
18:39:05,760 --> 18:39:10,920
that's not the only problem that needs

29468
18:39:07,400 --> 18:39:13,552
to be solved ultimately we also need to

29469
18:39:10,920 --> 18:39:16,280
make the internet userfriendly if you

29470
18:39:13,552 --> 18:39:18,599
will and it would be really tedious if

29471
18:39:16,280 --> 18:39:21,160
you had to visit websites for instance

29472
18:39:18,600 --> 18:39:24,040
by way of of their IP addresses right

29473
18:39:21,160 --> 18:39:26,600
1.2.3.4 is pretty memorable but there's

29474
18:39:24,040 --> 18:39:28,511
like 4 billion other possible addresses

29475
18:39:26,600 --> 18:39:30,600
available and it would be super tedious

29476
18:39:28,512 --> 18:39:33,400
to remember those it would be bad

29477
18:39:30,600 --> 18:39:35,160
marketing to advertise those in fact

29478
18:39:33,400 --> 18:39:36,799
most of you probably don't even know the

29479
18:39:35,160 --> 18:39:38,480
phone numbers of your closest friends

29480
18:39:36,800 --> 18:39:40,000
and family members anymore because you

29481
18:39:38,480 --> 18:39:41,872
instead store them in your contacts

29482
18:39:40,000 --> 18:39:44,080
you're in your dress book associating

29483
18:39:41,872 --> 18:39:46,960
with numbers that are completely opaque

29484
18:39:44,080 --> 18:39:49,192
with actual names or strings if you will

29485
18:39:46,960 --> 18:39:50,832
the same is goes for the internet too

29486
18:39:49,192 --> 18:39:52,640
even though every computer does have and

29487
18:39:50,832 --> 18:39:54,959
must have a unique IP address

29488
18:39:52,640 --> 18:39:56,800
numerically why well routers or

29489
18:39:54,960 --> 18:39:58,600
computers computers just crunch numbers

29490
18:39:56,800 --> 18:40:01,240
very readily but we humans work better

29491
18:39:58,600 --> 18:40:03,720
with strings of text we need some system

29492
18:40:01,240 --> 18:40:07,720
for converting userfriendly strings like

29493
18:40:03,720 --> 18:40:09,760
harvard.edu or yale.edu or google.com to

29494
18:40:07,720 --> 18:40:12,160
the underlying IP addresses and that's

29495
18:40:09,760 --> 18:40:15,511
where the next acronym comes in today

29496
18:40:12,160 --> 18:40:17,040
which is DNS domain name system so this

29497
18:40:15,512 --> 18:40:19,320
is just another technology that's been

29498
18:40:17,040 --> 18:40:21,871
in use for some time now and it's a

29499
18:40:19,320 --> 18:40:24,000
collection of servers on the internet

29500
18:40:21,872 --> 18:40:26,640
that whose purpose in life is to convert

29501
18:40:24,000 --> 18:40:29,040
domain names to IP addresses and maybe

29502
18:40:26,640 --> 18:40:31,319
vice versa as well so let me stipulate

29503
18:40:29,040 --> 18:40:33,552
for today's purposes there are some root

29504
18:40:31,320 --> 18:40:36,120
DNS servers in the world that long story

29505
18:40:33,552 --> 18:40:38,640
short know about all of the Dooms all of

29506
18:40:36,120 --> 18:40:41,192
the edus all of the dot dot dot all of

29507
18:40:38,640 --> 18:40:43,440
the other top level domains around the

29508
18:40:41,192 --> 18:40:46,159
world as well as in the US and then

29509
18:40:43,440 --> 18:40:48,720
there are some smaller DNS servers owned

29510
18:40:46,160 --> 18:40:51,160
by companies owned by universities and

29511
18:40:48,720 --> 18:40:53,000
even in your apartments or homes most

29512
18:40:51,160 --> 18:40:54,960
likely indeed if you have a home router

29513
18:40:53,000 --> 18:40:56,800
plugged into the wall somewhere that's

29514
18:40:54,960 --> 18:40:59,240
not only routing your data in and out of

29515
18:40:56,800 --> 18:41:03,040
your apartment or home or dorm room it's

29516
18:40:59,240 --> 18:41:05,800
also typically serving as a local

29517
18:41:03,040 --> 18:41:07,439
therefore faster DNS server a cash if

29518
18:41:05,800 --> 18:41:09,440
you will it's sort of locally saving

29519
18:41:07,440 --> 18:41:11,320
your most frequently accessed websites

29520
18:41:09,440 --> 18:41:13,080
and their IP addresses just to avoid

29521
18:41:11,320 --> 18:41:15,192
bothering the bigger more expensive

29522
18:41:13,080 --> 18:41:17,400
busier servers all day long so there's

29523
18:41:15,192 --> 18:41:20,000
DNS servers all over if you poke around

29524
18:41:17,400 --> 18:41:23,120
your settings in Windows or Mac OS or

29525
18:41:20,000 --> 18:41:25,400
Android or iOS you'll see mention of DNS

29526
18:41:23,120 --> 18:41:27,040
and you'll probably see the IP addresses

29527
18:41:25,400 --> 18:41:28,640
of the servers whose purpose in life is

29528
18:41:27,040 --> 18:41:30,640
to do this conversion for you but this

29529
18:41:28,640 --> 18:41:32,832
is a requisite feature if we just want

29530
18:41:30,640 --> 18:41:35,680
the internet to be user friendly and

29531
18:41:32,832 --> 18:41:38,400
allow us to use words instead of numbers

29532
18:41:35,680 --> 18:41:40,159
alone what's inside of these DNS servers

29533
18:41:38,400 --> 18:41:41,959
you know it's essentially a spreadsheet

29534
18:41:40,160 --> 18:41:43,680
or if we can say it more geeky it's

29535
18:41:41,960 --> 18:41:46,192
essentially like a hash table of some

29536
18:41:43,680 --> 18:41:48,359
sort which it has keys and values like

29537
18:41:46,192 --> 18:41:51,400
the key is the domain name harvard.edu

29538
18:41:48,360 --> 18:41:53,640
gale. edug google.com and the value is

29539
18:41:51,400 --> 18:41:56,599
the corresponding IP address or in many

29540
18:41:53,640 --> 18:41:58,920
cases IP addresses plural of the

29541
18:41:56,600 --> 18:42:00,000
corresponding servers so here already

29542
18:41:58,920 --> 18:42:01,280
even though I've drawn it fairly

29543
18:42:00,000 --> 18:42:03,080
abstractly like you would on a

29544
18:42:01,280 --> 18:42:04,959
chalkboard it's really probably

29545
18:42:03,080 --> 18:42:07,080
implemented as some kind of table maybe

29546
18:42:04,960 --> 18:42:09,280
a hash table maybe a database table

29547
18:42:07,080 --> 18:42:11,280
maybe SQL or something like that or

29548
18:42:09,280 --> 18:42:13,720
maybe it's even just a link list or an

29549
18:42:11,280 --> 18:42:16,600
array we just have to somehow enable

29550
18:42:13,720 --> 18:42:19,400
this computer to convert one to the

29551
18:42:16,600 --> 18:42:21,120
other now just to be super precise

29552
18:42:19,400 --> 18:42:23,239
DNS servers actually convert what are

29553
18:42:21,120 --> 18:42:25,319
called fully qualified domain names

29554
18:42:23,240 --> 18:42:27,280
which is generally not just harvard.edu

29555
18:42:25,320 --> 18:42:29,280
but more verbosely

29556
18:42:27,280 --> 18:42:31,640
www.harvard.edu and

29557
18:42:29,280 --> 18:42:34,440
www.google.com so the whole thing that

29558
18:42:31,640 --> 18:42:36,640
you would see as a substring of the URL

29559
18:42:34,440 --> 18:42:38,832
so that's what DNS does and that's what

29560
18:42:36,640 --> 18:42:41,400
your University your company your home

29561
18:42:38,832 --> 18:42:44,920
router are doing for you let me pause

29562
18:42:41,400 --> 18:42:47,239
here to see if there are any

29563
18:42:44,920 --> 18:42:50,192
questions this to is just a technology

29564
18:42:47,240 --> 18:42:54,800
now we'll take for granted just

29565
18:42:50,192 --> 18:42:57,480
works questions at all all right so

29566
18:42:54,800 --> 18:42:59,080
let's now transition among our protocols

29567
18:42:57,480 --> 18:43:00,720
really to the last for today which will

29568
18:42:59,080 --> 18:43:02,240
set the stage for actually solving

29569
18:43:00,720 --> 18:43:05,120
problems with these and writing some

29570
18:43:02,240 --> 18:43:07,040
code ultimately um HTTP this is

29571
18:43:05,120 --> 18:43:08,280
something that you see or hear all day

29572
18:43:07,040 --> 18:43:10,159
long even though you rarely have to

29573
18:43:08,280 --> 18:43:13,360
bother typing it anymore odds are if you

29574
18:43:10,160 --> 18:43:15,920
go to harvard.edu yale.edu google.com

29575
18:43:13,360 --> 18:43:18,080
you don't bother typing HTTP let alone

29576
18:43:15,920 --> 18:43:19,552
https manually anymore why because your

29577
18:43:18,080 --> 18:43:21,760
browser Auto completes that kind of

29578
18:43:19,552 --> 18:43:24,040
thing just to make life easier but it is

29579
18:43:21,760 --> 18:43:27,192
officially at the beginning of every URL

29580
18:43:24,040 --> 18:43:30,120
you visit either HTTP or the more secure

29581
18:43:27,192 --> 18:43:32,920
https whenever you're using your browser

29582
18:43:30,120 --> 18:43:36,640
to access some website so

29583
18:43:32,920 --> 18:43:39,000
HTTP stands for hyper text transfer

29584
18:43:36,640 --> 18:43:40,872
protocol and it's uh easily one of the

29585
18:43:39,000 --> 18:43:42,320
most popular dare say one of the most

29586
18:43:40,872 --> 18:43:44,280
powerful features of the internet

29587
18:43:42,320 --> 18:43:46,680
nowadays but the mental model to have

29588
18:43:44,280 --> 18:43:48,800
here is that HTTP or the web more

29589
18:43:46,680 --> 18:43:51,760
generally is kind of a service that runs

29590
18:43:48,800 --> 18:43:53,760
on top of the internet and maybe Zoom or

29591
18:43:51,760 --> 18:43:56,599
Microsoft teams is another service that

29592
18:43:53,760 --> 18:43:57,920
runs on top of the internet an iMessage

29593
18:43:56,600 --> 18:43:59,640
and Technologies like it is another

29594
18:43:57,920 --> 18:44:01,319
service that runs on top of the internet

29595
18:43:59,640 --> 18:44:03,832
so the internet is really like the lower

29596
18:44:01,320 --> 18:44:05,192
level Plumbing the tcpip stuff the DNS

29597
18:44:03,832 --> 18:44:07,959
stuff that just gets data from point A

29598
18:44:05,192 --> 18:44:10,000
to point B but now and we're in a a

29599
18:44:07,960 --> 18:44:13,400
software development class ultimately

29600
18:44:10,000 --> 18:44:15,920
here in cs50 HTTP is the application

29601
18:44:13,400 --> 18:44:18,552
Level protocol it's sort of what

29602
18:44:15,920 --> 18:44:21,120
programmers use what companies use what

29603
18:44:18,552 --> 18:44:23,159
uh developers use ultimately to use the

29604
18:44:21,120 --> 18:44:25,832
underlying Plumbing to build interesting

29605
18:44:23,160 --> 18:44:28,480
and Powerful things so what does this

29606
18:44:25,832 --> 18:44:30,871
mean when it comes to accessing Services

29607
18:44:28,480 --> 18:44:34,360
via HTTP or the more secure

29608
18:44:30,872 --> 18:44:35,920
https well here is a representative URL

29609
18:44:34,360 --> 18:44:37,552
even though you might not type the whole

29610
18:44:35,920 --> 18:44:39,192
thing if you poke around your address

29611
18:44:37,552 --> 18:44:41,239
bar this is what's up there with that

29612
18:44:39,192 --> 18:44:43,599
said a lot of browsers nowadays are kind

29613
18:44:41,240 --> 18:44:45,872
of simplifying if not dumbing down what

29614
18:44:43,600 --> 18:44:47,832
you see with your human eyes just to

29615
18:44:45,872 --> 18:44:49,512
shorten the strings especially on mobile

29616
18:44:47,832 --> 18:44:51,799
devices but almost always if you click

29617
18:44:49,512 --> 18:44:53,720
the URL or highlight it then you see the

29618
18:44:51,800 --> 18:44:56,440
whole thing but on many browsers you

29619
18:44:53,720 --> 18:44:58,000
might only ever see example.com but all

29620
18:44:56,440 --> 18:45:00,320
of this information is there it's just

29621
18:44:58,000 --> 18:45:02,760
getting more and more hidden just for

29622
18:45:00,320 --> 18:45:04,960
user interfaces sake well it turns out

29623
18:45:02,760 --> 18:45:06,799
when you visit a URL by default

29624
18:45:04,960 --> 18:45:09,512
especially if you type nothing after the

29625
18:45:06,800 --> 18:45:11,600
do com in this case you're technically

29626
18:45:09,512 --> 18:45:14,360
implicitly adding a single slash so a

29627
18:45:11,600 --> 18:45:16,800
single slash denotes the root of the

29628
18:45:14,360 --> 18:45:19,040
server that is the default page or

29629
18:45:16,800 --> 18:45:20,832
folder in the server and the slash

29630
18:45:19,040 --> 18:45:22,511
whether or not you type it or not is

29631
18:45:20,832 --> 18:45:23,799
implicitly going to be there and that

29632
18:45:22,512 --> 18:45:27,240
just means give me the default whatever

29633
18:45:23,800 --> 18:45:29,640
is at www.example.com give me that page

29634
18:45:27,240 --> 18:45:32,120
or that folder but URLs can be longer

29635
18:45:29,640 --> 18:45:34,192
than this and more generally there can

29636
18:45:32,120 --> 18:45:37,159
be a path so to speak and this is a term

29637
18:45:34,192 --> 18:45:40,480
of art a path is some sequence of folder

29638
18:45:37,160 --> 18:45:42,192
Andor file names after a URL like this

29639
18:45:40,480 --> 18:45:44,800
and so you might see more specifically

29640
18:45:42,192 --> 18:45:47,552
that a URL contains a very specific file

29641
18:45:44,800 --> 18:45:49,360
this isn't as common nowadays anymore

29642
18:45:47,552 --> 18:45:51,480
though we will begin to today by using

29643
18:45:49,360 --> 18:45:54,280
this technique but if there is a file

29644
18:45:51,480 --> 18:45:56,440
called literally file. HTML or something

29645
18:45:54,280 --> 18:45:59,080
else on the server that file is going to

29646
18:45:56,440 --> 18:46:01,512
be what this URL pulls up on the

29647
18:45:59,080 --> 18:46:03,400
computer meanwhile you might have slash

29648
18:46:01,512 --> 18:46:05,240
folder slash which just means show me

29649
18:46:03,400 --> 18:46:08,192
whatever is inside of this folder or you

29650
18:46:05,240 --> 18:46:10,920
might have more verbosely folder file.

29651
18:46:08,192 --> 18:46:13,192
HTML which will show you that file in

29652
18:46:10,920 --> 18:46:14,959
that folder and meanwhile just to give

29653
18:46:13,192 --> 18:46:17,640
some other terms of art this is the

29654
18:46:14,960 --> 18:46:19,240
so-called fully qualified domain name

29655
18:46:17,640 --> 18:46:20,760
and again these vocab don't matter all

29656
18:46:19,240 --> 18:46:23,400
that much but you'll hear or see them

29657
18:46:20,760 --> 18:46:26,480
over time we generally colloquially just

29658
18:46:23,400 --> 18:46:28,120
refer to this as the domain name which

29659
18:46:26,480 --> 18:46:30,552
is a little less precise but gets the

29660
18:46:28,120 --> 18:46:32,959
job done certainly in conversation and

29661
18:46:30,552 --> 18:46:36,400
this part here I described briefly

29662
18:46:32,960 --> 18:46:38,000
earlier what's the name for this suffix

29663
18:46:36,400 --> 18:46:39,120
at the very end of the fully qualified

29664
18:46:38,000 --> 18:46:43,640
domain

29665
18:46:39,120 --> 18:46:45,400
name the yeah yeah top level domain or

29666
18:46:43,640 --> 18:46:47,720
TLD and this is just some form of

29667
18:46:45,400 --> 18:46:49,680
categorization of the URLs now the

29668
18:46:47,720 --> 18:46:51,040
internet in got it start within the

29669
18:46:49,680 --> 18:46:52,680
United States and a lot of the first

29670
18:46:51,040 --> 18:46:54,079
websites of course came from the US and

29671
18:46:52,680 --> 18:46:55,920
so For Better or For Worse the sort of

29672
18:46:54,080 --> 18:46:59,000
steak was planted in the ground so

29673
18:46:55,920 --> 18:47:00,552
generally do indicated at least early on

29674
18:46:59,000 --> 18:47:02,120
that it was some kind of commercial

29675
18:47:00,552 --> 18:47:05,040
Enterprise a business that owned a

29676
18:47:02,120 --> 18:47:06,832
domain name edu is a educational

29677
18:47:05,040 --> 18:47:09,439
institution net was some kind of

29678
18:47:06,832 --> 18:47:13,599
network. goov was the US government now

29679
18:47:09,440 --> 18:47:17,120
there are also country code tlds cctlds

29680
18:47:13,600 --> 18:47:21,552
like UK or JP every country in the world

29681
18:47:17,120 --> 18:47:23,280
has its own two letter uh TLD um that

29682
18:47:21,552 --> 18:47:25,480
might very well be restricted to only

29683
18:47:23,280 --> 18:47:27,552
servers or companies or people in that

29684
18:47:25,480 --> 18:47:29,760
uh in that country many of them can be

29685
18:47:27,552 --> 18:47:32,040
used by anyone you've used a lot of URLs

29686
18:47:29,760 --> 18:47:35,511
in this class ending in

29687
18:47:32,040 --> 18:47:37,959
cs50. that doesn't mean input output um

29688
18:47:35,512 --> 18:47:40,192
it actually is a TLD from another

29689
18:47:37,960 --> 18:47:42,760
country that lets anyone on the internet

29690
18:47:40,192 --> 18:47:45,440
um pay for and on an annual basis using

29691
18:47:42,760 --> 18:47:47,720
that domain. TV for instance you might

29692
18:47:45,440 --> 18:47:50,320
see in some cases like twitch.tv and the

29693
18:47:47,720 --> 18:47:51,960
like um that too is owned by another

29694
18:47:50,320 --> 18:47:53,280
country that allows others in the

29695
18:47:51,960 --> 18:47:55,160
English-speaking World in this case to

29696
18:47:53,280 --> 18:47:57,000
use it as though it connotes TV but

29697
18:47:55,160 --> 18:47:59,640
those are just different types of TLS

29698
18:47:57,000 --> 18:48:01,400
that roughly categorize where the domain

29699
18:47:59,640 --> 18:48:02,832
lives but it doesn't necessarily mean

29700
18:48:01,400 --> 18:48:05,640
it's commercial anymore it doesn't

29701
18:48:02,832 --> 18:48:07,871
necessarily mean it's a Network anymore

29702
18:48:05,640 --> 18:48:10,480
for the most part there are hundreds of

29703
18:48:07,872 --> 18:48:12,512
tlds now for better for worse most of

29704
18:48:10,480 --> 18:48:14,959
which are less common than these big

29705
18:48:12,512 --> 18:48:16,552
ones um but most anyone can buy most of

29706
18:48:14,960 --> 18:48:19,600
them with just some restrictions on

29707
18:48:16,552 --> 18:48:22,120
things like edu and goov that are still

29708
18:48:19,600 --> 18:48:24,832
very much regulated this meanwhile is

29709
18:48:22,120 --> 18:48:27,239
what we might call the host name www

29710
18:48:24,832 --> 18:48:29,871
it's obviously a super common convention

29711
18:48:27,240 --> 18:48:31,512
like almost every website uses www as

29712
18:48:29,872 --> 18:48:33,552
its host name but that's a human

29713
18:48:31,512 --> 18:48:35,320
convention it's not a requirement and

29714
18:48:33,552 --> 18:48:37,239
indeed some websites don't even bother

29715
18:48:35,320 --> 18:48:40,760
having a host name they just use their

29716
18:48:37,240 --> 18:48:42,920
domain to advertise their websites this

29717
18:48:40,760 --> 18:48:44,480
now is going to be the scheme or the

29718
18:48:42,920 --> 18:48:48,440
protocol and this is just going to

29719
18:48:44,480 --> 18:48:50,360
indicate via what protocol the computer

29720
18:48:48,440 --> 18:48:53,760
your Mac your PC your phone should use

29721
18:48:50,360 --> 18:48:55,600
when accessing content at that address

29722
18:48:53,760 --> 18:48:57,120
because indeed there are other protocols

29723
18:48:55,600 --> 18:48:59,512
you can use but for the most part

29724
18:48:57,120 --> 18:49:01,680
will'll only focus on HTTP or

29725
18:48:59,512 --> 18:49:04,160
equivalently

29726
18:49:01,680 --> 18:49:06,192
https all right any questions now on

29727
18:49:04,160 --> 18:49:08,240
those just definitions building blocks

29728
18:49:06,192 --> 18:49:10,440
of URLs just so we all sort of share a

29729
18:49:08,240 --> 18:49:13,440
common

29730
18:49:10,440 --> 18:49:15,640
vocabulary any questions at all yeah

29731
18:49:13,440 --> 18:49:17,720
what is the

29732
18:49:15,640 --> 18:49:19,552
local sure we'll come back to this

29733
18:49:17,720 --> 18:49:21,360
actually later today there's a a

29734
18:49:19,552 --> 18:49:23,552
technical term known as Local Host which

29735
18:49:21,360 --> 18:49:25,440
is a generic name for your computer your

29736
18:49:23,552 --> 18:49:27,480
Mac your PC your phone especially when

29737
18:49:25,440 --> 18:49:29,440
you're doing software development and by

29738
18:49:27,480 --> 18:49:31,192
convention your own computer has not

29739
18:49:29,440 --> 18:49:33,360
only whatever IP address you get from

29740
18:49:31,192 --> 18:49:35,799
your University or your internet service

29741
18:49:33,360 --> 18:49:37,480
provider it also has a reflexive IP

29742
18:49:35,800 --> 18:49:41,280
address one that just always refers to

29743
18:49:37,480 --> 18:49:43,080
itself which is 127.0.0.1 and that's

29744
18:49:41,280 --> 18:49:45,280
just a human convention humans decided

29745
18:49:43,080 --> 18:49:46,280
that shall refer always to your computer

29746
18:49:45,280 --> 18:49:47,872
and it's actually going to be useful

29747
18:49:46,280 --> 18:49:50,319
today and onward because we can use that

29748
18:49:47,872 --> 18:49:53,920
when development on our own computers

29749
18:49:50,320 --> 18:49:57,320
ultimately other questions on URLs IP

29750
18:49:53,920 --> 18:50:00,760
DNS or any of these building

29751
18:49:57,320 --> 18:50:03,552
blocks all right so what do we mean by

29752
18:50:00,760 --> 18:50:05,680
HTTP being a protocol when I extended my

29753
18:50:03,552 --> 18:50:07,280
hand earlier as a human handshake you

29754
18:50:05,680 --> 18:50:09,832
know a typical human in healthy times

29755
18:50:07,280 --> 18:50:12,552
would know to respond in turn well how

29756
18:50:09,832 --> 18:50:14,552
does Brian's computer know to respond to

29757
18:50:12,552 --> 18:50:16,552
phyllis's envelope whatever message is

29758
18:50:14,552 --> 18:50:18,440
they're in well assuming that Brian is

29759
18:50:16,552 --> 18:50:20,280
indeed still a web server in the store

29760
18:50:18,440 --> 18:50:22,960
and Phyllis was trying to upload a cat

29761
18:50:20,280 --> 18:50:25,680
or maybe download a cat from Brian's web

29762
18:50:22,960 --> 18:50:27,960
server inside of phyllis's envelope

29763
18:50:25,680 --> 18:50:30,680
would have been a message literally in

29764
18:50:27,960 --> 18:50:32,192
text and it's English for the most part

29765
18:50:30,680 --> 18:50:33,799
and it would contain at the beginning of

29766
18:50:32,192 --> 18:50:36,080
that message literally one of these

29767
18:50:33,800 --> 18:50:37,960
English verbs either get which means

29768
18:50:36,080 --> 18:50:39,552
just that get me the homepage get me a

29769
18:50:37,960 --> 18:50:43,000
picture of a cat get me a picture of a

29770
18:50:39,552 --> 18:50:46,720
dog or a video or anything else or post

29771
18:50:43,000 --> 18:50:49,080
which often means post that is um put

29772
18:50:46,720 --> 18:50:50,920
that is um upload a picture of a cat or

29773
18:50:49,080 --> 18:50:53,552
a dog or something else to the server

29774
18:50:50,920 --> 18:50:55,160
instead that's not strictly the only use

29775
18:50:53,552 --> 18:50:56,552
cases for these but you can generally

29776
18:50:55,160 --> 18:50:58,400
think them as one is just getting

29777
18:50:56,552 --> 18:51:00,440
information and the other is posting

29778
18:50:58,400 --> 18:51:02,552
from the client from Phyllis to the

29779
18:51:00,440 --> 18:51:04,192
server in this case Brian so those are

29780
18:51:02,552 --> 18:51:06,080
the two keywords that we might see and

29781
18:51:04,192 --> 18:51:08,871
why is this useful well it turns out we

29782
18:51:06,080 --> 18:51:10,872
can start to see in our own Mac or PC

29783
18:51:08,872 --> 18:51:14,400
some of these very same messages for

29784
18:51:10,872 --> 18:51:17,512
instance if Phyllis were visiting not

29785
18:51:14,400 --> 18:51:19,552
Brian's but example.com that web server

29786
18:51:17,512 --> 18:51:21,280
inside of her metaphorical envelope

29787
18:51:19,552 --> 18:51:24,440
there would be a textual message that

29788
18:51:21,280 --> 18:51:27,160
literally starts with get slash then the

29789
18:51:24,440 --> 18:51:29,680
word HTTP then the version she's using

29790
18:51:27,160 --> 18:51:31,760
1.1 is very common two and three are

29791
18:51:29,680 --> 18:51:34,871
becoming more common but HTTP generally

29792
18:51:31,760 --> 18:51:37,511
looks like this the next line of text in

29793
18:51:34,872 --> 18:51:39,800
her envelope would probably say host

29794
18:51:37,512 --> 18:51:41,640
colon then literally the fully qualified

29795
18:51:39,800 --> 18:51:43,360
domain name of the server she's

29796
18:51:41,640 --> 18:51:44,832
accessing just in case and this happens

29797
18:51:43,360 --> 18:51:47,240
super commonly especially on small

29798
18:51:44,832 --> 18:51:50,120
websites if one server is hosting

29799
18:51:47,240 --> 18:51:51,920
multiple domain names multiple websites

29800
18:51:50,120 --> 18:51:53,400
this just distinguishes which one she

29801
18:51:51,920 --> 18:51:55,400
actually wants and then there's usually

29802
18:51:53,400 --> 18:51:58,959
a whole bunch of other lines of text as

29803
18:51:55,400 --> 18:52:01,920
well so where can you actually see this

29804
18:51:58,960 --> 18:52:03,640
well let me actually go ahead and do

29805
18:52:01,920 --> 18:52:06,240
this give me just a moment and I'm going

29806
18:52:03,640 --> 18:52:08,600
to open up on my computer here uh an

29807
18:52:06,240 --> 18:52:10,240
empty Chrome window in incognito mode

29808
18:52:08,600 --> 18:52:12,000
generally speaking incognito mode or

29809
18:52:10,240 --> 18:52:13,320
private mode is used when you don't want

29810
18:52:12,000 --> 18:52:14,832
there to be left remnants of what

29811
18:52:13,320 --> 18:52:16,960
websites you visited and it has the

29812
18:52:14,832 --> 18:52:19,040
effect for software developers of just

29813
18:52:16,960 --> 18:52:20,512
forgetting any things you might have

29814
18:52:19,040 --> 18:52:22,280
tried already within your browser

29815
18:52:20,512 --> 18:52:24,600
including things called cookies more on

29816
18:52:22,280 --> 18:52:26,080
those another time uh your autocomplete

29817
18:52:24,600 --> 18:52:28,080
history and the like so for development

29818
18:52:26,080 --> 18:52:29,320
purposes incognito mode is especially

29819
18:52:28,080 --> 18:52:31,040
helpful because it's sort of like

29820
18:52:29,320 --> 18:52:33,360
starting with a clean slate every time

29821
18:52:31,040 --> 18:52:34,599
you open a new private or incognito mode

29822
18:52:33,360 --> 18:52:36,960
so there's not going to be like any

29823
18:52:34,600 --> 18:52:38,400
remnants of previous testing or code

29824
18:52:36,960 --> 18:52:39,552
that you've been playing with and I'm

29825
18:52:38,400 --> 18:52:42,439
going to go ahead and do this I'm going

29826
18:52:39,552 --> 18:52:44,440
to go ahead and uh right click or

29827
18:52:42,440 --> 18:52:46,600
control click on Chrome I'm going to

29828
18:52:44,440 --> 18:52:48,720
choose inspect and it's going to pull up

29829
18:52:46,600 --> 18:52:49,832
this window sometimes on the side

29830
18:52:48,720 --> 18:52:51,280
sometimes on the bottom I'm going to

29831
18:52:49,832 --> 18:52:52,959
move it to the bottom just so we can see

29832
18:52:51,280 --> 18:52:54,760
it a little more readily and I'm going

29833
18:52:52,960 --> 18:52:57,160
to zoom in and it's going to look a

29834
18:52:54,760 --> 18:52:59,120
little Arcane at first and I'm going to

29835
18:52:57,160 --> 18:53:01,040
just highlight a few of these tabs we'll

29836
18:52:59,120 --> 18:53:03,832
see here along the top that there's

29837
18:53:01,040 --> 18:53:05,400
elements console sources Network and

29838
18:53:03,832 --> 18:53:07,319
whole bunch of other things as well this

29839
18:53:05,400 --> 18:53:09,480
is sort of the advanced mode in Chrome

29840
18:53:07,320 --> 18:53:11,192
and Safari and Firefox and Edge have

29841
18:53:09,480 --> 18:53:12,920
their own equivalent of these features

29842
18:53:11,192 --> 18:53:14,680
they've always been there even if you've

29843
18:53:12,920 --> 18:53:16,160
never clicked the right button to enable

29844
18:53:14,680 --> 18:53:18,400
these features and I'm going to focus

29845
18:53:16,160 --> 18:53:20,120
for a moment on network like this

29846
18:53:18,400 --> 18:53:21,871
this is a feature of the browser that's

29847
18:53:20,120 --> 18:53:24,040
going to allow me the programmer in this

29848
18:53:21,872 --> 18:53:26,160
case so the the engineer to just kind of

29849
18:53:24,040 --> 18:53:28,511
look at what messages my browser is

29850
18:53:26,160 --> 18:53:30,872
actually sending to a server so let me

29851
18:53:28,512 --> 18:53:34,920
go ahead and do something like this let

29852
18:53:30,872 --> 18:53:36,192
me go ahead and visit uh for instance uh

29853
18:53:34,920 --> 18:53:37,640
in my browser here and I'm going to

29854
18:53:36,192 --> 18:53:41,552
shrink the window just a little bit so

29855
18:53:37,640 --> 18:53:44,319
we can see it exactly I'm going to visit

29856
18:53:41,552 --> 18:53:47,280
https uh

29857
18:53:44,320 --> 18:53:48,400
www.harvard.edu and now I'm going to hit

29858
18:53:47,280 --> 18:53:50,720
enter

29859
18:53:48,400 --> 18:53:52,480
and a whole bunch of stuff just happened

29860
18:53:50,720 --> 18:53:54,240
along the bottom of my screen and I'm

29861
18:53:52,480 --> 18:53:56,120
going to try to pull my window up just a

29862
18:53:54,240 --> 18:53:58,400
little bit so we can focus on a subset

29863
18:53:56,120 --> 18:54:00,400
of this let me pull this up covering up

29864
18:53:58,400 --> 18:54:03,640
really the content of the page focusing

29865
18:54:00,400 --> 18:54:06,760
on these lower level details down here

29866
18:54:03,640 --> 18:54:11,480
and what I want to see first

29867
18:54:06,760 --> 18:54:13,511
is let me oh sorry let me go ahead and

29868
18:54:11,480 --> 18:54:15,319
reload this page here after retaining

29869
18:54:13,512 --> 18:54:17,192
the log so that we can see absolutely

29870
18:54:15,320 --> 18:54:19,040
everything on the screen and to be clear

29871
18:54:17,192 --> 18:54:20,720
I just checked because I forgot earlier

29872
18:54:19,040 --> 18:54:22,319
preserve log because I wanted to

29873
18:54:20,720 --> 18:54:24,192
preserve everything on the screen I want

29874
18:54:22,320 --> 18:54:26,480
to see everything all at once and we'll

29875
18:54:24,192 --> 18:54:28,599
see this the very first line of output

29876
18:54:26,480 --> 18:54:30,920
is completely overwhelming with detail

29877
18:54:28,600 --> 18:54:33,640
at first glance but what you'll see here

29878
18:54:30,920 --> 18:54:36,360
if I start to scroll down and down and

29879
18:54:33,640 --> 18:54:38,760
down and down are the so-called request

29880
18:54:36,360 --> 18:54:41,120
headers and let me zoom in here and what

29881
18:54:38,760 --> 18:54:43,400
you're seeing inside of chrome inside of

29882
18:54:41,120 --> 18:54:45,280
its Network tab in its so-called

29883
18:54:43,400 --> 18:54:47,799
developer tools again this is just for

29884
18:54:45,280 --> 18:54:50,080
engineering types you'll see all of the

29885
18:54:47,800 --> 18:54:52,440
headers all of the lines of text that

29886
18:54:50,080 --> 18:54:55,360
magically were sent by my Mac to

29887
18:54:52,440 --> 18:54:58,080
harvard.edu much like from Phyllis to

29888
18:54:55,360 --> 18:55:00,360
Brian server in that story so I can see

29889
18:54:58,080 --> 18:55:01,760
exactly what messages are being sent and

29890
18:55:00,360 --> 18:55:04,192
a lot of this we haven't talked about

29891
18:55:01,760 --> 18:55:06,159
yet but we do see some mention of get

29892
18:55:04,192 --> 18:55:08,680
and we see some mention of Slash and a

29893
18:55:06,160 --> 18:55:10,720
bunch of other Arcane details but notice

29894
18:55:08,680 --> 18:55:12,959
they're all sort of key value pairs with

29895
18:55:10,720 --> 18:55:14,832
the here indicating what the

29896
18:55:12,960 --> 18:55:16,080
corresponding value is now most of this

29897
18:55:14,832 --> 18:55:17,480
is not going to be interesting and we're

29898
18:55:16,080 --> 18:55:19,552
not going to focus too much on the weeds

29899
18:55:17,480 --> 18:55:22,760
of of all of this but it indeed gives us

29900
18:55:19,552 --> 18:55:25,319
a sense of what's inside of that virtual

29901
18:55:22,760 --> 18:55:27,640
envelope now harvard.edu is one thing

29902
18:55:25,320 --> 18:55:30,040
but there's other uh websites we might

29903
18:55:27,640 --> 18:55:32,280
visit as well um and no matter what they

29904
18:55:30,040 --> 18:55:34,959
are we're going to expect ultimately an

29905
18:55:32,280 --> 18:55:36,832
HTTP response so in addition to a

29906
18:55:34,960 --> 18:55:39,192
computer like my Mac or phyllis's

29907
18:55:36,832 --> 18:55:41,959
computer sending a request containing

29908
18:55:39,192 --> 18:55:44,720
gets and host and those details too

29909
18:55:41,960 --> 18:55:47,120
you'll see here in my slide form just

29910
18:55:44,720 --> 18:55:49,040
representative response from the server

29911
18:55:47,120 --> 18:55:50,552
and notice that key here is that the

29912
18:55:49,040 --> 18:55:52,799
server is responding in the same version

29913
18:55:50,552 --> 18:55:54,800
of HTTP in this example it's sending

29914
18:55:52,800 --> 18:55:56,680
back this so-called status code just a

29915
18:55:54,800 --> 18:55:59,360
numeric code that indicates in this case

29916
18:55:56,680 --> 18:56:01,640
that everything's okay and it includes

29917
18:55:59,360 --> 18:56:03,680
this header this HTTP header which again

29918
18:56:01,640 --> 18:56:05,400
is just a key value pair saying that the

29919
18:56:03,680 --> 18:56:08,552
type of this content that's coming back

29920
18:56:05,400 --> 18:56:10,959
from the server is text/html more on

29921
18:56:08,552 --> 18:56:12,872
HTML in just a little bit but for our

29922
18:56:10,960 --> 18:56:14,960
purposes now this just means that

29923
18:56:12,872 --> 18:56:17,280
harvard.edu is sending me back a web

29924
18:56:14,960 --> 18:56:19,512
page and indeed if we hide all of this

29925
18:56:17,280 --> 18:56:20,959
techn techical stuff that's the web page

29926
18:56:19,512 --> 18:56:23,280
that we saw up here with all of the

29927
18:56:20,960 --> 18:56:26,192
usual imagery and the like and in fact I

29928
18:56:23,280 --> 18:56:29,680
can see this if I scroll back up not to

29929
18:56:26,192 --> 18:56:32,040
request headers but response headers

29930
18:56:29,680 --> 18:56:34,120
you'll see up here that we get back

29931
18:56:32,040 --> 18:56:36,719
responses including the date that the

29932
18:56:34,120 --> 18:56:38,799
server responded and a whole bunch of

29933
18:56:36,720 --> 18:56:40,240
other details as well and honestly this

29934
18:56:38,800 --> 18:56:41,872
has always been under your fingertips

29935
18:56:40,240 --> 18:56:44,360
and it will soon be useful as we start

29936
18:56:41,872 --> 18:56:46,280
making web-based applications ultimately

29937
18:56:44,360 --> 18:56:48,440
but this very quickly gets overwhelming

29938
18:56:46,280 --> 18:56:50,120
quickly and so better in this might

29939
18:56:48,440 --> 18:56:52,440
actually be a tool that we can use

29940
18:56:50,120 --> 18:56:54,680
within our code space itself so let me

29941
18:56:52,440 --> 18:56:56,192
go back to vs code here I didn't open

29942
18:56:54,680 --> 18:56:57,832
any code tabs I'm just going to use my

29943
18:56:56,192 --> 18:56:59,280
terminal window for a moment and I'm

29944
18:56:57,832 --> 18:57:01,959
going to run a couple of commands that

29945
18:56:59,280 --> 18:57:04,040
are going to allow me to actually see

29946
18:57:01,960 --> 18:57:05,680
what is going on when I request one

29947
18:57:04,040 --> 18:57:09,000
website let me go ahead and use a

29948
18:57:05,680 --> 18:57:10,832
command called curl for connect URL and

29949
18:57:09,000 --> 18:57:12,680
this is like a command line black and

29950
18:57:10,832 --> 18:57:14,040
white program that's going to pretend to

29951
18:57:12,680 --> 18:57:16,439
be a browser and it's going to connect

29952
18:57:14,040 --> 18:57:17,799
to the URL show me the headers but it's

29953
18:57:16,440 --> 18:57:19,240
not going to show me the images are the

29954
18:57:17,800 --> 18:57:20,872
graphics which might very well be useful

29955
18:57:19,240 --> 18:57:23,080
to the humans but not to me right now as

29956
18:57:20,872 --> 18:57:25,240
the developer so I'm going to do curl

29957
18:57:23,080 --> 18:57:26,920
I'm going to do Dashi and then I'm going

29958
18:57:25,240 --> 18:57:31,040
to do

29959
18:57:26,920 --> 18:57:33,080
https www.harvard.edu as though I'm

29960
18:57:31,040 --> 18:57:35,640
pretending to be a browser requesting

29961
18:57:33,080 --> 18:57:38,480
the home page and what's nice about curl

29962
18:57:35,640 --> 18:57:40,720
is albeit overwhelming too you'll get

29963
18:57:38,480 --> 18:57:43,239
back a whole response from the server

29964
18:57:40,720 --> 18:57:45,552
containing only those header values the

29965
18:57:43,240 --> 18:57:47,640
key value pairs inside of the envelope

29966
18:57:45,552 --> 18:57:49,319
and we'll ignore almost all of these but

29967
18:57:47,640 --> 18:57:50,760
here is the response from the server it

29968
18:57:49,320 --> 18:57:53,600
responded using a new and improved

29969
18:57:50,760 --> 18:57:56,159
version of HTTP in this case version two

29970
18:57:53,600 --> 18:57:58,832
and it gave me back a 200 there's my

29971
18:57:56,160 --> 18:58:00,920
content type text/html and then this

29972
18:57:58,832 --> 18:58:03,192
Char set happens to do with the encoding

29973
18:58:00,920 --> 18:58:04,599
if it's Unicode or asky or something

29974
18:58:03,192 --> 18:58:06,720
else and then there's all this other

29975
18:58:04,600 --> 18:58:08,600
overwhelming detail for now but this is

29976
18:58:06,720 --> 18:58:10,000
the beginnings of my ability to just

29977
18:58:08,600 --> 18:58:13,720
kind of poke around and see how the

29978
18:58:10,000 --> 18:58:16,000
server works and it turns out too that

29979
18:58:13,720 --> 18:58:19,360
we'll be able to see other potential

29980
18:58:16,000 --> 18:58:23,160
responses as well so for instance uh

29981
18:58:19,360 --> 18:58:25,160
HTTP might not only return 100 what if I

29982
18:58:23,160 --> 18:58:27,480
do this instead let me go ahead and

29983
18:58:25,160 --> 18:58:29,360
visit c-i

29984
18:58:27,480 --> 18:58:32,920
HTTP

29985
18:58:29,360 --> 18:58:34,800
colon uh www.harvard.edu so notice I

29986
18:58:32,920 --> 18:58:36,800
deliberately use the insecure version of

29987
18:58:34,800 --> 18:58:38,800
the URL which maybe Harvard's

29988
18:58:36,800 --> 18:58:40,832
Administration system administration

29989
18:58:38,800 --> 18:58:44,000
doesn't like anymore well how can they

29990
18:58:40,832 --> 18:58:45,640
ensure that I the end user the student

29991
18:58:44,000 --> 18:58:48,400
nonetheless use

29992
18:58:45,640 --> 18:58:50,720
https even if I didn't type it myself

29993
18:58:48,400 --> 18:58:53,480
well let me run just that command with

29994
18:58:50,720 --> 18:58:55,480
just HTTP not https and you'll see that

29995
18:58:53,480 --> 18:58:58,400
everything is not okay it didn't come

29996
18:58:55,480 --> 18:58:59,959
back with a 200 it came back with 301 in

29997
18:58:58,400 --> 18:59:01,832
this message saying Harvard moved

29998
18:58:59,960 --> 18:59:04,360
permanently but here's where you can

29999
18:59:01,832 --> 18:59:06,000
look for another clue among all of these

30000
18:59:04,360 --> 18:59:09,192
lines most of which I don't care about

30001
18:59:06,000 --> 18:59:10,680
there's a location header colon that's a

30002
18:59:09,192 --> 18:59:12,680
little hint to me that says where

30003
18:59:10,680 --> 18:59:14,359
Harvard University has apparently moved

30004
18:59:12,680 --> 18:59:16,319
too on the web and what's different

30005
18:59:14,360 --> 18:59:19,552
about this URL just to be

30006
18:59:16,320 --> 18:59:21,640
clear it has the S included and what

30007
18:59:19,552 --> 18:59:23,480
your browser will do by default because

30008
18:59:21,640 --> 18:59:25,872
Google and Microsoft and Mozilla

30009
18:59:23,480 --> 18:59:29,040
programmed it this way whenever it sees

30010
18:59:25,872 --> 18:59:31,000
a 301 response instead of 200 it won't

30011
18:59:29,040 --> 18:59:33,832
show you any web page it will look for a

30012
18:59:31,000 --> 18:59:36,040
location header find that URL and then

30013
18:59:33,832 --> 18:59:38,000
automatically quote unquote redirect you

30014
18:59:36,040 --> 18:59:39,871
there to so this is why it doesn't

30015
18:59:38,000 --> 18:59:41,720
matter what we type in the browser

30016
18:59:39,872 --> 18:59:44,192
Harvard can have its server send these

30017
18:59:41,720 --> 18:59:46,400
semi-secret messages to our browsers and

30018
18:59:44,192 --> 18:59:48,599
then it will just visit a second URL all

30019
18:59:46,400 --> 18:59:51,439
automatically and you can do this with

30020
18:59:48,600 --> 18:59:53,720
host names as well suppose that Harvard

30021
18:59:51,440 --> 18:59:55,872
does not want to standardize on

30022
18:59:53,720 --> 18:59:58,040
harvard.edu why they just want it to

30023
18:59:55,872 --> 18:59:59,760
always be www maybe it's a branding

30024
18:59:58,040 --> 19:00:02,719
thing maybe it's a technical thing we

30025
18:59:59,760 --> 19:00:06,120
can see the exact same response here

30026
19:00:02,720 --> 19:00:08,760
this first tells me when I visit HTTP

30027
19:00:06,120 --> 19:00:10,920
harvard.edu with no www Harvard

30028
19:00:08,760 --> 19:00:14,192
minimally wants me to be using a secure

30029
19:00:10,920 --> 19:00:16,319
connection if I then okay fine cooperate

30030
19:00:14,192 --> 19:00:19,440
let me go ahead and clear my screen let

30031
19:00:16,320 --> 19:00:22,600
me add the s but not the www you can see

30032
19:00:19,440 --> 19:00:26,000
here that it again responded with 301 up

30033
19:00:22,600 --> 19:00:27,600
here and the location now adds the www

30034
19:00:26,000 --> 19:00:30,040
so it's just a way of bouncing users

30035
19:00:27,600 --> 19:00:32,960
from one place to another and this is

30036
19:00:30,040 --> 19:00:35,719
all thanks to http boiling down to

30037
19:00:32,960 --> 19:00:38,120
relatively simple messages inside of the

30038
19:00:35,720 --> 19:00:41,600
envelope that tell the computer the

30039
19:00:38,120 --> 19:00:44,871
browser in this case how to respond now

30040
19:00:41,600 --> 19:00:46,120
odds are you've seen others besides 301

30041
19:00:44,872 --> 19:00:47,832
even though you've probably never seen

30042
19:00:46,120 --> 19:00:49,480
that actual number unless you've done

30043
19:00:47,832 --> 19:00:51,120
this kind of thing before but there

30044
19:00:49,480 --> 19:00:52,680
probably is a number that like everyone

30045
19:00:51,120 --> 19:00:55,192
in this room has seen if if You' never

30046
19:00:52,680 --> 19:00:56,511
really wondered why is it that number I

30047
19:00:55,192 --> 19:01:01,040
think you're smiling what number are you

30048
19:00:56,512 --> 19:01:04,192
thinking of yeah so 404 why is 404 well

30049
19:01:01,040 --> 19:01:06,511
404 indicates by convention not found

30050
19:01:04,192 --> 19:01:08,959
and now why the world decided years ago

30051
19:01:06,512 --> 19:01:12,320
to show us normal humans on the internet

30052
19:01:08,960 --> 19:01:13,680
404 is anything significant is unclear

30053
19:01:12,320 --> 19:01:16,600
that's sort of like bad design like what

30054
19:01:13,680 --> 19:01:18,192
do I care if the status code is 404 but

30055
19:01:16,600 --> 19:01:20,320
it's common enough on the internet that

30056
19:01:18,192 --> 19:01:22,360
probably all of us have seen it but that

30057
19:01:20,320 --> 19:01:24,680
just means that some server when you

30058
19:01:22,360 --> 19:01:27,120
visit a URL that's incorrect maybe it's

30059
19:01:24,680 --> 19:01:30,159
outdated the URL has been changed if you

30060
19:01:27,120 --> 19:01:31,720
see a 404 it just means that the virtual

30061
19:01:30,160 --> 19:01:34,360
envelope that came from the server back

30062
19:01:31,720 --> 19:01:37,552
to your Mac or PC or phone contains not

30063
19:01:34,360 --> 19:01:40,040
200 okay not 301 moved permanently but

30064
19:01:37,552 --> 19:01:42,192
404 not found instead and it's usually

30065
19:01:40,040 --> 19:01:44,120
accompanied by a technical message maybe

30066
19:01:42,192 --> 19:01:45,640
a cute picture of a cat sort of hiding

30067
19:01:44,120 --> 19:01:47,720
because it means not found or something

30068
19:01:45,640 --> 19:01:50,000
like that the Aesthetics are entirely up

30069
19:01:47,720 --> 19:01:52,160
to the server but that's what the 404

30070
19:01:50,000 --> 19:01:53,872
means and there's other codes too a few

30071
19:01:52,160 --> 19:01:55,680
of which you'll use in the coming weeks

30072
19:01:53,872 --> 19:01:58,160
as we transition from commandline

30073
19:01:55,680 --> 19:02:00,040
programs in C and python to web-based

30074
19:01:58,160 --> 19:02:02,192
ones we've seen a few of these already

30075
19:02:00,040 --> 19:02:04,400
and several of them are kind of variants

30076
19:02:02,192 --> 19:02:07,080
of the same thing like these 300 ones

30077
19:02:04,400 --> 19:02:09,552
here but we'll see others like 403

30078
19:02:07,080 --> 19:02:11,720
Forbidden means like you probably forgot

30079
19:02:09,552 --> 19:02:14,159
to log in or you need to log in or

30080
19:02:11,720 --> 19:02:16,080
something like that uh internal server

30081
19:02:14,160 --> 19:02:18,920
error right now no in the coming weeks

30082
19:02:16,080 --> 19:02:20,832
you will absolutely encounter 500 errors

30083
19:02:18,920 --> 19:02:22,192
and they're always your fault it's going

30084
19:02:20,832 --> 19:02:25,040
to be the equivalent of like a

30085
19:02:22,192 --> 19:02:26,760
segmentation fault in C a 500 error

30086
19:02:25,040 --> 19:02:28,480
means like you or I screwed up when

30087
19:02:26,760 --> 19:02:29,511
writing some code so we're going to see

30088
19:02:28,480 --> 19:02:31,319
that but it's just going to be an

30089
19:02:29,512 --> 19:02:34,120
opportunity for us to fix it if a

30090
19:02:31,320 --> 19:02:35,552
server's overloaded you often see 503

30091
19:02:34,120 --> 19:02:38,080
like something's unavailable because

30092
19:02:35,552 --> 19:02:40,599
something's too popular uh or is maybe

30093
19:02:38,080 --> 19:02:43,720
worse getting attacked um this is an old

30094
19:02:40,600 --> 19:02:45,040
uh um April Fool's joke 418 is not

30095
19:02:43,720 --> 19:02:46,480
actually used in practice but someone

30096
19:02:45,040 --> 19:02:48,599
like took the time to write up an entire

30097
19:02:46,480 --> 19:02:50,400
formal text technical proposal so that

30098
19:02:48,600 --> 19:02:52,160
servers can respond saying I'm a teapot

30099
19:02:50,400 --> 19:02:53,920
so it's kind of part of Internet lore

30100
19:02:52,160 --> 19:02:56,440
and there's other ones of these status

30101
19:02:53,920 --> 19:02:59,192
codes as well but this is useful because

30102
19:02:56,440 --> 19:03:01,512
eventually we'll see in code you can use

30103
19:02:59,192 --> 19:03:04,360
this understanding uh high level as it

30104
19:03:01,512 --> 19:03:07,360
might be of HTTP to do some interesting

30105
19:03:04,360 --> 19:03:10,640
and Powerful things so for instance we

30106
19:03:07,360 --> 19:03:12,920
can even send fancier URLs to servers it

30107
19:03:10,640 --> 19:03:16,920
turns out as we'll soon see if you send

30108
19:03:12,920 --> 19:03:19,440
a message like this get/ search question

30109
19:03:16,920 --> 19:03:22,160
question mark Q equals cats and then

30110
19:03:19,440 --> 19:03:25,280
HTTP 1.1 or whatever version and you

30111
19:03:22,160 --> 19:03:27,800
send that message to Google server

30112
19:03:25,280 --> 19:03:30,192
www.google.com this is how you can

30113
19:03:27,800 --> 19:03:32,760
specify not just the path of a web page

30114
19:03:30,192 --> 19:03:34,239
that you want SL search in this case the

30115
19:03:32,760 --> 19:03:36,799
question mark it turns out is going to

30116
19:03:34,240 --> 19:03:40,000
be a convention in the internet in the

30117
19:03:36,800 --> 19:03:43,040
web specifically for passing hum human

30118
19:03:40,000 --> 19:03:44,512
uh user input to the server as well in

30119
19:03:43,040 --> 19:03:46,400
fact you've probably never paid close

30120
19:03:44,512 --> 19:03:48,080
attention to URLs but they very often

30121
19:03:46,400 --> 19:03:50,280
have question question marks they very

30122
19:03:48,080 --> 19:03:53,552
often have equal signs and indeed even

30123
19:03:50,280 --> 19:03:55,480
google.com supports a certain key Q in

30124
19:03:53,552 --> 19:03:57,440
this case for query and you can put

30125
19:03:55,480 --> 19:03:59,872
anything you want after that in order to

30126
19:03:57,440 --> 19:04:02,480
search for actual cats so if I actually

30127
19:03:59,872 --> 19:04:05,440
go back to Chrome itself here for a

30128
19:04:02,480 --> 19:04:08,552
moment let me pull back my uh pull back

30129
19:04:05,440 --> 19:04:10,720
open my Chrome browser here previously I

30130
19:04:08,552 --> 19:04:12,400
was using uh incognito mode for

30131
19:04:10,720 --> 19:04:13,720
harvard.edu I've gone ahead and Clos

30132
19:04:12,400 --> 19:04:15,680
that window and opened a new one so we

30133
19:04:13,720 --> 19:04:16,960
can start fresh by visiting Google

30134
19:04:15,680 --> 19:04:18,871
normally you and I are in the habit of

30135
19:04:16,960 --> 19:04:20,800
going to google.com and searching via

30136
19:04:18,872 --> 19:04:22,920
the form or nowadays you just type like

30137
19:04:20,800 --> 19:04:24,512
your search query in the browser itself

30138
19:04:22,920 --> 19:04:26,640
and it brings you automatically to

30139
19:04:24,512 --> 19:04:28,280
Google or Bing or something else but I

30140
19:04:26,640 --> 19:04:30,192
can really be pedantic here let me go

30141
19:04:28,280 --> 19:04:31,192
ahead and zoom in and I'll manually go

30142
19:04:30,192 --> 19:04:33,040
to

30143
19:04:31,192 --> 19:04:36,959
https

30144
19:04:33,040 --> 19:04:39,280
www.google.com search question mark Q

30145
19:04:36,960 --> 19:04:41,080
equals maybe cats now this would not be

30146
19:04:39,280 --> 19:04:42,600
a very userfriendly experience if all of

30147
19:04:41,080 --> 19:04:45,360
us had to manually type out something

30148
19:04:42,600 --> 19:04:47,760
crazy like that but that's what the form

30149
19:04:45,360 --> 19:04:50,480
is redirecting you to when you type in

30150
19:04:47,760 --> 19:04:53,319
more user friendly cats into like a text

30151
19:04:50,480 --> 19:04:55,080
box if I hit enter here we'll get back

30152
19:04:53,320 --> 19:04:57,920
indeed a whole bunch of search results

30153
19:04:55,080 --> 19:05:00,320
about cats if I zoom back in and maybe I

30154
19:04:57,920 --> 19:05:01,552
change it from cats to dogs that too is

30155
19:05:00,320 --> 19:05:03,720
going to change and notice it's

30156
19:05:01,552 --> 19:05:05,920
pre-populating the text box because

30157
19:05:03,720 --> 19:05:09,800
Google has written its code in order to

30158
19:05:05,920 --> 19:05:12,192
do so as well now appr propo of the

30159
19:05:09,800 --> 19:05:14,552
video with which we began today from

30160
19:05:12,192 --> 19:05:17,192
yester year one of the better uh Yale

30161
19:05:14,552 --> 19:05:19,360
pranks over the years um has anyone one

30162
19:05:17,192 --> 19:05:21,319
actually ever been to uh

30163
19:05:19,360 --> 19:05:23,920
safetyschool.org

30164
19:05:21,320 --> 19:05:27,000
and to our friends at Yale watching live

30165
19:05:23,920 --> 19:05:30,360
hi safetyschool.org so it's kind of fun

30166
19:05:27,000 --> 19:05:32,552
if you actually visit it uh depending on

30167
19:05:30,360 --> 19:05:34,760
who you are so if I open up a new window

30168
19:05:32,552 --> 19:05:36,640
here and I go to

30169
19:05:34,760 --> 19:05:39,120
https

30170
19:05:36,640 --> 19:05:44,920
safetyschool.org zooming

30171
19:05:39,120 --> 19:05:49,239
in enter my oh my look at where it goes

30172
19:05:44,920 --> 19:05:49,240
now how does that okay okay thank

30173
19:05:50,232 --> 19:05:54,960
you this is not a cs50 thing someone out

30174
19:05:53,360 --> 19:05:57,512
there who I don't know who they are for

30175
19:05:54,960 --> 19:06:00,320
like 20 years has been paying annually

30176
19:05:57,512 --> 19:06:03,120
for that domain safetyschool.org for

30177
19:06:00,320 --> 19:06:05,552
just this joke uh but if I now go back

30178
19:06:03,120 --> 19:06:07,080
into VSS code here in my terminal window

30179
19:06:05,552 --> 19:06:10,319
and a little more you know

30180
19:06:07,080 --> 19:06:12,192
sophisticatedly let me do curl dasi HTTP

30181
19:06:10,320 --> 19:06:14,080
col andsafety

30182
19:06:12,192 --> 19:06:15,871
school.org the browser of course

30183
19:06:14,080 --> 19:06:17,120
immediately redirected me to the website

30184
19:06:15,872 --> 19:06:19,120
but what's going on under underneath the

30185
19:06:17,120 --> 19:06:21,080
hood well 20 some years ago someone

30186
19:06:19,120 --> 19:06:24,120
bought the domain configured the server

30187
19:06:21,080 --> 19:06:26,040
quite simply to spit this out safety

30188
19:06:24,120 --> 19:06:28,599
school.org for years has moved

30189
19:06:26,040 --> 19:06:31,360
permanently to

30190
19:06:28,600 --> 19:06:32,920
www.yale.edu so just a little

30191
19:06:31,360 --> 19:06:34,320
demonstration of what you can do with

30192
19:06:32,920 --> 19:06:36,440
just a little bit of understanding of

30193
19:06:34,320 --> 19:06:37,800
HTTP that's been a lot already we've

30194
19:06:36,440 --> 19:06:39,232
laid the foundation for understanding

30195
19:06:37,800 --> 19:06:41,512
how the internet works now we're going

30196
19:06:39,232 --> 19:06:43,920
to use it with a language called HTML

30197
19:06:41,512 --> 19:06:46,320
hypertext markup language CSS cascading

30198
19:06:43,920 --> 19:06:48,400
stylesheets and JavaScript a proper

30199
19:06:46,320 --> 19:06:49,832
program in language but first it feels

30200
19:06:48,400 --> 19:06:51,439
opportune to take a 10-minute break we

30201
19:06:49,832 --> 19:06:52,920
have some wonderful Halloween candy in

30202
19:06:51,440 --> 19:06:55,192
the transcept and we'll be back in 10

30203
19:06:52,920 --> 19:06:58,280
with those

30204
19:06:55,192 --> 19:07:03,080
languages we're headed up to uh

30205
19:06:58,280 --> 19:07:03,080
Austin checking out the stadium for the

30206
19:07:03,192 --> 19:07:07,920
prank a few years ago I was at a math

30207
19:07:06,040 --> 19:07:10,640
conference and I was sitting around at

30208
19:07:07,920 --> 19:07:13,440
the table at dinner with a few other

30209
19:07:10,640 --> 19:07:15,832
mathematicians and uh one of them went

30210
19:07:13,440 --> 19:07:19,000
to Harvard and started telling the story

30211
19:07:15,832 --> 19:07:21,640
of this amazing prank that was you know

30212
19:07:19,000 --> 19:07:23,600
against Harvard and at that point I felt

30213
19:07:21,640 --> 19:07:26,160
I had to interrupt and said well

30214
19:07:23,600 --> 19:07:29,232
actually I can tell you a lot more about

30215
19:07:26,160 --> 19:07:31,160
that okay okay the idea was perfected in

30216
19:07:29,232 --> 19:07:33,480
a dorm room came up with the idea

30217
19:07:31,160 --> 19:07:35,800
actually to prank them with signs at the

30218
19:07:33,480 --> 19:07:37,280
football game we threw some ideas out

30219
19:07:35,800 --> 19:07:39,760
there as far as what what the signs

30220
19:07:37,280 --> 19:07:42,160
would say we uh eventually settled on we

30221
19:07:39,760 --> 19:07:45,231
suck and my immediate reaction was no

30222
19:07:42,160 --> 19:07:47,760
this will never work however the problem

30223
19:07:45,232 --> 19:07:49,400
solver in me started thinking well maybe

30224
19:07:47,760 --> 19:07:52,959
we can make this

30225
19:07:49,400 --> 19:07:55,079
work the problem they had to infiltrate

30226
19:07:52,960 --> 19:07:58,080
Harvard Stadium without getting caught

30227
19:07:55,080 --> 19:08:00,920
sneak in 1,800 placards distribute them

30228
19:07:58,080 --> 19:08:03,360
to unsuspecting Harvard fans and then

30229
19:08:00,920 --> 19:08:06,720
convince those fans to prank themselves

30230
19:08:03,360 --> 19:08:09,120
it's great we thought about basically

30231
19:08:06,720 --> 19:08:10,920
every possible thing that could go wrong

30232
19:08:09,120 --> 19:08:12,832
and tried to come up with a solution for

30233
19:08:10,920 --> 19:08:15,800
it and then you put two Reds on top of

30234
19:08:12,832 --> 19:08:17,599
it they made fake Harvard IDs and fake

30235
19:08:15,800 --> 19:08:20,872
backstories

30236
19:08:17,600 --> 19:08:22,280
fake placard designs and a 28 member

30237
19:08:20,872 --> 19:08:26,120
fake Pep

30238
19:08:22,280 --> 19:08:28,120
Squad on November 20th 2004 a fake

30239
19:08:26,120 --> 19:08:31,959
Harvard student smuggled the placards

30240
19:08:28,120 --> 19:08:31,959
into the game what do you think

30241
19:08:32,900 --> 19:08:36,470
[Music]

30242
19:08:33,280 --> 19:08:36,470
[Applause]

30243
19:08:38,660 --> 19:08:47,640
[Applause]

30244
19:08:41,600 --> 19:08:51,192
of but then trouble what houses

30245
19:08:47,640 --> 19:08:51,192
how many how many extra

30246
19:08:56,160 --> 19:09:00,040
are I you know just showed him the front

30247
19:08:58,480 --> 19:09:02,440
of this ID and all of a sudden he just

30248
19:09:00,040 --> 19:09:04,439
ran away and he felt so

30249
19:09:02,440 --> 19:09:07,512
embarrassed having escaped one

30250
19:09:04,440 --> 19:09:08,552
confrontation they couldn't risk another

30251
19:09:07,512 --> 19:09:11,920
it was

30252
19:09:08,552 --> 19:09:13,920
time this just looks like a total mess

30253
19:09:11,920 --> 19:09:17,080
we have absolutely no idea if this is

30254
19:09:13,920 --> 19:09:19,160
going to work look at the it's going to

30255
19:09:17,080 --> 19:09:22,512
happen it's actually going to

30256
19:09:19,160 --> 19:09:23,640
happen I can't believe this what was

30257
19:09:22,512 --> 19:09:27,120
once a

30258
19:09:23,640 --> 19:09:27,120
prank became a

30259
19:09:31,600 --> 19:09:38,080
legend and immediately we started

30260
19:09:33,832 --> 19:09:38,080
hearing chance from the other side

30261
19:09:38,920 --> 19:09:44,192
you and I think it was at that point in

30262
19:09:41,280 --> 19:09:47,512
time that we knew we had pulled it

30263
19:09:44,192 --> 19:09:48,620
off on

30264
19:09:47,512 --> 19:09:51,192
there it goes

30265
19:09:48,620 --> 19:09:53,400
[Applause]

30266
19:09:51,192 --> 19:09:56,120
again I really think it didn't matter

30267
19:09:53,400 --> 19:09:59,360
that Harvard won because of the prank

30268
19:09:56,120 --> 19:10:00,400
for a lot of Yale students in alumni we

30269
19:09:59,360 --> 19:10:03,840
definitely won that

30270
19:10:00,400 --> 19:10:03,840
[Music]

30271
19:10:14,000 --> 19:10:18,320
year all right

30272
19:10:19,120 --> 19:10:21,552
happy

30273
19:10:22,320 --> 19:10:29,480
Hallen thank you all okay thank you oh

30274
19:10:26,160 --> 19:10:32,480
here oh all right little Halloween candy

30275
19:10:29,480 --> 19:10:34,319
all right thank you all so glad I wore

30276
19:10:32,480 --> 19:10:39,680
the same thing

30277
19:10:34,320 --> 19:10:43,552
today so in just a

30278
19:10:39,680 --> 19:10:45,871
moment thank you okay so in just a

30279
19:10:43,552 --> 19:10:47,680
moment we'll transition to understanding

30280
19:10:45,872 --> 19:10:50,832
all the now what we can do with this

30281
19:10:47,680 --> 19:10:52,920
underlying infrastructure so again HTTP

30282
19:10:50,832 --> 19:10:54,959
and below it TCP IP is all about just

30283
19:10:52,920 --> 19:10:56,800
getting the data from point A to pointb

30284
19:10:54,960 --> 19:10:58,872
in some standardized way but now let's

30285
19:10:56,800 --> 19:11:01,400
talk about HTML this is the language in

30286
19:10:58,872 --> 19:11:03,552
which web pages themselves are written

30287
19:11:01,400 --> 19:11:04,760
hyper text markup language now some of

30288
19:11:03,552 --> 19:11:06,680
you might have used this before to make

30289
19:11:04,760 --> 19:11:08,480
personal homepages some of you might

30290
19:11:06,680 --> 19:11:10,231
have dabbled even if using some website

30291
19:11:08,480 --> 19:11:12,680
to create your own homepage but

30292
19:11:10,232 --> 19:11:15,120
understanding this language is useful

30293
19:11:12,680 --> 19:11:17,280
certainly for creating the Aesthetics of

30294
19:11:15,120 --> 19:11:19,192
a web page can vying data that's of

30295
19:11:17,280 --> 19:11:22,512
interest but at the end of the day it

30296
19:11:19,192 --> 19:11:24,120
and the language we look at next CSS uh

30297
19:11:22,512 --> 19:11:27,040
are not programming languages there's

30298
19:11:24,120 --> 19:11:29,040
going to be no functions no Loops uh no

30299
19:11:27,040 --> 19:11:30,760
programming logic but we will end today

30300
19:11:29,040 --> 19:11:32,599
with a teaser of a proper programming

30301
19:11:30,760 --> 19:11:35,439
language called JavaScript via which you

30302
19:11:32,600 --> 19:11:37,760
can manipulate all of these various uh

30303
19:11:35,440 --> 19:11:39,920
other languages as well so ultimately

30304
19:11:37,760 --> 19:11:42,080
HTML has like two features and this is a

30305
19:11:39,920 --> 19:11:43,720
language that we spend very brief amount

30306
19:11:42,080 --> 19:11:46,280
of time on because it really boils down

30307
19:11:43,720 --> 19:11:47,960
to just a couple of basic ideas and then

30308
19:11:46,280 --> 19:11:49,480
vocabulary that you'll build out over

30309
19:11:47,960 --> 19:11:51,232
time just by Googling looking up

30310
19:11:49,480 --> 19:11:53,480
references looking at other Pages source

30311
19:11:51,232 --> 19:11:55,552
code but tags and attributes are what

30312
19:11:53,480 --> 19:11:58,760
characterize HTML now what do I mean by

30313
19:11:55,552 --> 19:12:00,231
that here for instance is the HTML code

30314
19:11:58,760 --> 19:12:02,439
via which you can make probably the

30315
19:12:00,232 --> 19:12:05,040
simplest of all web pages one that quite

30316
19:12:02,440 --> 19:12:08,120
simply says in the uh browser window

30317
19:12:05,040 --> 19:12:09,920
hello title and hello body for instance

30318
19:12:08,120 --> 19:12:13,040
now what does this actually mean if you

30319
19:12:09,920 --> 19:12:15,319
imagine opening up uh this code in a

30320
19:12:13,040 --> 19:12:16,680
browser be it on a Mac or PC or phone

30321
19:12:15,320 --> 19:12:18,512
you'll see typically like some kind of

30322
19:12:16,680 --> 19:12:20,511
rectangular window and there's usually a

30323
19:12:18,512 --> 19:12:22,280
tab that has the title of that page and

30324
19:12:20,512 --> 19:12:24,192
then most of the rectangular region is

30325
19:12:22,280 --> 19:12:25,959
the web page itself what you're looking

30326
19:12:24,192 --> 19:12:28,231
at then is the code that's going to put

30327
19:12:25,960 --> 19:12:30,280
hello title in the title bar in the tab

30328
19:12:28,232 --> 19:12:32,480
at the very top and down at the bottom

30329
19:12:30,280 --> 19:12:34,319
hello body is going to be all that's in

30330
19:12:32,480 --> 19:12:36,231
the big black and white box that

30331
19:12:34,320 --> 19:12:37,800
composes the rest of the browser window

30332
19:12:36,232 --> 19:12:39,040
itself now what are the Salient

30333
19:12:37,800 --> 19:12:40,832
characteristics here that we'll now

30334
19:12:39,040 --> 19:12:45,000
start to take for granted well first

30335
19:12:40,832 --> 19:12:48,480
whoops uh first let's go ahead and give

30336
19:12:45,000 --> 19:12:50,040
me just a moment here um and actually do

30337
19:12:48,480 --> 19:12:51,872
something with this code so I'm going to

30338
19:12:50,040 --> 19:12:53,871
go ahead and do this back in vs code

30339
19:12:51,872 --> 19:12:57,920
here I'm going to first create a file

30340
19:12:53,872 --> 19:12:59,640
called say hello.html and in this tab

30341
19:12:57,920 --> 19:13:01,800
I'm going to go ahead and really repeat

30342
19:12:59,640 --> 19:13:04,512
exactly that same code now I had this

30343
19:13:01,800 --> 19:13:07,680
line first DOC type HTML then I had this

30344
19:13:04,512 --> 19:13:10,120
line HTML Lang equals quote unquote n

30345
19:13:07,680 --> 19:13:12,000
close quote then I had inside of that

30346
19:13:10,120 --> 19:13:13,799
head then I had inside of that title

30347
19:13:12,000 --> 19:13:14,960
then inside of that I had hello title

30348
19:13:13,800 --> 19:13:16,800
and I'm doing this quickly because we'll

30349
19:13:14,960 --> 19:13:20,280
tease apart in a moment what it actually

30350
19:13:16,800 --> 19:13:23,080
all means and then down here below that

30351
19:13:20,280 --> 19:13:26,160
so-called head I had just the text hello

30352
19:13:23,080 --> 19:13:27,832
body so at the moment I that I claim is

30353
19:13:26,160 --> 19:13:30,080
the entirety of a web page but it

30354
19:13:27,832 --> 19:13:33,120
currently lives in my code space so to

30355
19:13:30,080 --> 19:13:35,480
speak in a file called hello.html that's

30356
19:13:33,120 --> 19:13:36,720
fine if I want to create it but how do I

30357
19:13:35,480 --> 19:13:38,959
how do you how does anyone on the

30358
19:13:36,720 --> 19:13:41,920
internet actually view it well to serve

30359
19:13:38,960 --> 19:13:43,800
a web page you indeed need a web server

30360
19:13:41,920 --> 19:13:45,280
and it turns out that codespaces comes

30361
19:13:43,800 --> 19:13:48,552
with one of these pre-installed because

30362
19:13:45,280 --> 19:13:50,680
we cs50 staff uh did so for you and what

30363
19:13:48,552 --> 19:13:53,400
you can do in a terminal window once you

30364
19:13:50,680 --> 19:13:55,480
have an HTML file ready to go that you

30365
19:13:53,400 --> 19:13:58,040
want the world to see you can literally

30366
19:13:55,480 --> 19:14:00,552
run in your terminal window

30367
19:13:58,040 --> 19:14:02,640
http-server single command and what

30368
19:14:00,552 --> 19:14:04,872
that's going to do for you is start a

30369
19:14:02,640 --> 19:14:07,000
web server that is to say a program

30370
19:14:04,872 --> 19:14:08,920
whose purpose in life is just to serve

30371
19:14:07,000 --> 19:14:10,960
web pages and even though probably up

30372
19:14:08,920 --> 19:14:12,959
until now for years you probably if

30373
19:14:10,960 --> 19:14:15,480
you're like me equate server quote

30374
19:14:12,960 --> 19:14:17,192
unquote with a physical device server is

30375
19:14:15,480 --> 19:14:19,440
really aie piece of software it just

30376
19:14:17,192 --> 19:14:21,480
tends to run on big fancy devices so

30377
19:14:19,440 --> 19:14:23,832
when we say server we often all think of

30378
19:14:21,480 --> 19:14:25,680
in our Mind's Eye you know big expensive

30379
19:14:23,832 --> 19:14:27,599
devices perhaps but a server is just a

30380
19:14:25,680 --> 19:14:30,760
program whose purpose in life is to

30381
19:14:27,600 --> 19:14:32,832
respond to requests with responses and

30382
19:14:30,760 --> 19:14:34,680
that's the vernacular there now once you

30383
19:14:32,832 --> 19:14:35,920
run HTTP server and I'm going to do a

30384
19:14:34,680 --> 19:14:37,400
bit of magic because I set this up

30385
19:14:35,920 --> 19:14:39,512
before class just to make sure it goes

30386
19:14:37,400 --> 19:14:42,552
smoothly you'll see some output like

30387
19:14:39,512 --> 19:14:46,360
this whereby your server is now

30388
19:14:42,552 --> 19:14:48,360
available on a very long URL mine here

30389
19:14:46,360 --> 19:14:50,320
uh uh is a very long URL that will be

30390
19:14:48,360 --> 19:14:51,872
different from yours but what this is is

30391
19:14:50,320 --> 19:14:54,320
a unique identifier that your codes

30392
19:14:51,872 --> 19:14:56,800
space has temporarily generated so that

30393
19:14:54,320 --> 19:15:00,160
you can now access and ideally only you

30394
19:14:56,800 --> 19:15:01,920
can access that file using your browser

30395
19:15:00,160 --> 19:15:03,600
now if I flip the URL or you flip the

30396
19:15:01,920 --> 19:15:05,160
your all to public by right clicking or

30397
19:15:03,600 --> 19:15:07,120
control clicking the right features of

30398
19:15:05,160 --> 19:15:08,680
vs code you can enable anyone in the

30399
19:15:07,120 --> 19:15:10,599
world to visit it but we're not going to

30400
19:15:08,680 --> 19:15:12,400
ultimately host our websites in your

30401
19:15:10,600 --> 19:15:13,920
code space because as soon as you log

30402
19:15:12,400 --> 19:15:15,552
off for the night and the thing shuts

30403
19:15:13,920 --> 19:15:16,800
down like the website will go down but

30404
19:15:15,552 --> 19:15:18,440
at the end end of the semester

30405
19:15:16,800 --> 19:15:20,320
particularly for final projects we'll

30406
19:15:18,440 --> 19:15:22,680
show you ways that you can put your own

30407
19:15:20,320 --> 19:15:24,120
website your own code on the actual

30408
19:15:22,680 --> 19:15:26,359
internet

30409
19:15:24,120 --> 19:15:29,159
247365 even with your own domain name if

30410
19:15:26,360 --> 19:15:31,120
you want to get one so that it lives uh

30411
19:15:29,160 --> 19:15:33,512
independent of your own sleep schedule

30412
19:15:31,120 --> 19:15:36,120
and usage schedule of vs code here so

30413
19:15:33,512 --> 19:15:39,192
I'm going to go ahead now and visit um

30414
19:15:36,120 --> 19:15:41,440
this URL in another tab of my browser

30415
19:15:39,192 --> 19:15:44,080
and what I'll see here is this this is

30416
19:15:41,440 --> 19:15:46,640
the output of that program called HTTP

30417
19:15:44,080 --> 19:15:49,360
server and essentially what it is doing

30418
19:15:46,640 --> 19:15:52,280
is it's using TCP and IP in conjunction

30419
19:15:49,360 --> 19:15:55,552
with HTTP to just run your very own web

30420
19:15:52,280 --> 19:15:57,192
server on gith hubs own servers as well

30421
19:15:55,552 --> 19:15:58,440
and that's because of different ports

30422
19:15:57,192 --> 19:16:00,720
again we won't go too much into the

30423
19:15:58,440 --> 19:16:02,872
weeds of the TCP the IP and all of that

30424
19:16:00,720 --> 19:16:04,920
stuff but recall that different port

30425
19:16:02,872 --> 19:16:06,872
numbers can allow you to distinguish one

30426
19:16:04,920 --> 19:16:08,832
service from another now one of the

30427
19:16:06,872 --> 19:16:10,360
services is of course your code space

30428
19:16:08,832 --> 19:16:12,319
VSS code in the cloud that we've been

30429
19:16:10,360 --> 19:16:14,192
using for weeks but if you want to use

30430
19:16:12,320 --> 19:16:17,120
the same physical server that GitHub

30431
19:16:14,192 --> 19:16:19,192
controls but actually visit your own web

30432
19:16:17,120 --> 19:16:21,280
server that I just ran in my terminal

30433
19:16:19,192 --> 19:16:22,440
window in another tab that's fine

30434
19:16:21,280 --> 19:16:24,120
they're just going to be using different

30435
19:16:22,440 --> 19:16:25,720
TCP ports and you and I don't have to

30436
19:16:24,120 --> 19:16:28,280
care what they are but just that this is

30437
19:16:25,720 --> 19:16:30,080
a feature that TCP supports so what you

30438
19:16:28,280 --> 19:16:32,000
see here is somewhat Arcane this is not

30439
19:16:30,080 --> 19:16:33,760
like a thing that most people on the

30440
19:16:32,000 --> 19:16:35,552
internet should ever see I'm just doing

30441
19:16:33,760 --> 19:16:37,920
this for development purposes but this

30442
19:16:35,552 --> 19:16:40,760
is the index that is the directory the

30443
19:16:37,920 --> 19:16:42,280
the folder contents of my code space and

30444
19:16:40,760 --> 19:16:44,480
because I deleted everything from prior

30445
19:16:42,280 --> 19:16:46,040
weeks already all we see right now is

30446
19:16:44,480 --> 19:16:48,280
hello.html

30447
19:16:46,040 --> 19:16:51,959
which I just created so if I click on

30448
19:16:48,280 --> 19:16:53,360
hello.html within this folder listing

30449
19:16:51,960 --> 19:16:54,680
you'll be a little underwhelmed and I'll

30450
19:16:53,360 --> 19:16:57,872
zoom in just so there's something more

30451
19:16:54,680 --> 19:17:00,192
interesting there but now you see hello

30452
19:16:57,872 --> 19:17:02,320
comma body but what's interesting

30453
19:17:00,192 --> 19:17:05,040
perhaps is that after this long very